(()=>{var I;(I={772:()=>{!function(){var I=this||globalThis,g=I.connect||{};I.connect=g,I.globalConnect={},I.lily=g,globalConnect.Container=null;var C=window.atob(""),A=function(I){this.region=I.region,this.id=this.region.replace(/-/g,"_"),this.height=I.height,this.style=I.iframe_style,this.ccp=this._createFramedCcp(JSON.stringify(I))};A.prototype._createFramedCcp=function(I){var g=g||"microphone; autoplay",C=this.style||"margin: 0; border: 0; padding: 0px; width: 0px; height: 0px",A=document.createElement("iframe");return A.srcdoc=this.getContent(I),A.allow=g,A.id=this.id,A.style=C,A.scrolling="no",A},A.prototype.getContent=function(I){return["<!DOCTYPE html>","<meta charset='UTF-8'>","<html>","<head>","<script type='text/javascript'>",C,"<\/script>","</head>","<body onload='init()'>","<div id=containerDiv style='width: 100%;height: "+this.height+"'></div>","<script type='text/javascript'>","function init() {","connect.core.initCCP(containerDiv,"+I+");","}","<\/script>","</body>","</html>"].join("")},globalConnect.Container=A}()},341:()=>{!function(){var I=this||globalThis,g=I.connect||{},C=I.globalConnect||{};I.connect=g,I.globalConnect=C,I.lily=g,g.core={},C.core={regions:{}};var A="465px",Z=!0,l=function(I){var g=window.getComputedStyle(I);return{height:g.getPropertyValue("height"),width:g.getPropertyValue("width"),display:g.getPropertyValue("display")}},b=function(I,A){if(g.assertTrue("string"==typeof I,"Region provided "+I+" is not a valid string"),!(A||C.core.regions).hasOwnProperty(I)){var Z="Region provided "+I+" is not found!";throw new g.ValueError(Z)}};C.core.initCCP=function(I,c){g.assertNotNull(c.getPrimaryRegion,"getPrimaryRegion"),g.assertTrue(g.isFunction(c.getPrimaryRegion),"getPrimaryRegion must be a function");var V=c.getPrimaryRegion;delete c.getPrimaryRegion;var W=function(I,C){g.assertNotNull(C.standByRegion,"ccpBackupResource"),g.assertNotNull(C.standByRegion.ccpUrl,"ccpUrl"),g.assertNotNull(C.standByRegion.loginUrl,"loginUrl"),g.assertNotNull(C.standByRegion.region,"region");var b=C,G=Object.assign({},C,{ccpUrl:C.standByRegion.ccpUrl,loginUrl:C.standByRegion.loginUrl,region:C.standByRegion.region}),d=l(I);return"none"==d.display&&(Z=!1),parseInt(d.height)<=0&&(I.style.height=A,d.height=A),[b,G].map((function(I){return g.assertNotNull(I.ccpUrl,"ccpUrl"),g.assertNotNull(I.loginUrl,"loginUrl"),g.assertNotNull(I.region,"region"),delete I.standByRegion,I.loginPopup=!1,I.disasterRecoveryOn=!0,I.iframe_style="margin: 0; border: 0; padding:0px;width: 0px;height: 0px",I.height=d.height,I}))}(I,c);V((function(A){return new Promise((l=>{var c=W.reduce((function(I,g){return I[g.region]=null,I}),{});b(A,c);var V=W.map((function(I){return I.region===A&&(I.isPrimary=!0),new C.Container(I)})),m=V.map((function(I){return I.ccp.outerHTML})),B=document.createElement("iframe");B.style="margin: 0; border: 0; padding:0px;width: 100%;height: 100%",B.id="globalCCP",B.scrolling="no",B.onload=function(){if(Z){var I=Object.keys(c).find((function(I){return I!=A}));d(A,B.id),G(I,B.id)}V.map((function(l){C.core.regions[l.region]=B.contentDocument.getElementById(l.id).contentWindow.connect;var b=C.core.regions[l.region];b.core.getUpstream().onUpstream(b.DisasterRecoveryEvents.FAILOVER,(function(C){C.isPrimary?(A=(g=b).core.region,Z&&d(A,B.id)):Z&&(I=b.core.region,G(I,B.id))}))})),g=C.core.regions[A],l()},B.srcdoc=m.join(""),I.appendChild(B)}))}),(function(I){console.error("[Disaster Recovery] An error occured, while attempting to retrieve your primary region;"),I()}))};var G=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height: 0; width: 0; border: 0px"},d=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height:800px;width:100%;border:0px"},c=function(I){return I=I||g.core.region,Object.keys(C.core.regions).find((function(g){return g!==I}))};C.core.failover=function(){C.core.failoverTo(c())},C.core.failoverTo=function(I){b(I);var A=c(I);V(A),W(I),g=C.core.regions[I]};var V=function(I){var g=C.core.regions[I];g.getLog().info("[Disaster Recovery] Deactivating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!0),g.core.forceOffline()},W=function(I){var g=C.core.regions[I];g.getLog().info("[Disaster Recovery] Activating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!1)};g.core.initCCP=C.core.initCCP}()},163:function(){!function(I){"use strict";function g(I,g){var C=(65535&I)+(65535&g);return(I>>16)+(g>>16)+(C>>16)<<16|65535&C}function C(I,C,A,Z,l,b){return g((G=g(g(C,I),g(Z,b)))<<(d=l)|G>>>32-d,A);var G,d}function A(I,g,A,Z,l,b,G){return C(g&A|~g&Z,I,g,l,b,G)}function Z(I,g,A,Z,l,b,G){return C(g&Z|A&~Z,I,g,l,b,G)}function l(I,g,A,Z,l,b,G){return C(g^A^Z,I,g,l,b,G)}function b(I,g,A,Z,l,b,G){return C(A^(g|~Z),I,g,l,b,G)}function G(I,C){var G,d,c,V,W;I[C>>5]|=128<<C%32,I[14+(C+64>>>9<<4)]=C;var m=1732584193,B=-271733879,X=-1732584194,i=271733878;for(G=0;G<I.length;G+=16)d=m,c=B,V=X,W=i,m=A(m,B,X,i,I[G],7,-680876936),i=A(i,m,B,X,I[G+1],12,-389564586),X=A(X,i,m,B,I[G+2],17,606105819),B=A(B,X,i,m,I[G+3],22,-1044525330),m=A(m,B,X,i,I[G+4],7,-176418897),i=A(i,m,B,X,I[G+5],12,1200080426),X=A(X,i,m,B,I[G+6],17,-1473231341),B=A(B,X,i,m,I[G+7],22,-45705983),m=A(m,B,X,i,I[G+8],7,1770035416),i=A(i,m,B,X,I[G+9],12,-1958414417),X=A(X,i,m,B,I[G+10],17,-42063),B=A(B,X,i,m,I[G+11],22,-1990404162),m=A(m,B,X,i,I[G+12],7,1804603682),i=A(i,m,B,X,I[G+13],12,-40341101),X=A(X,i,m,B,I[G+14],17,-1502002290),m=Z(m,B=A(B,X,i,m,I[G+15],22,1236535329),X,i,I[G+1],5,-165796510),i=Z(i,m,B,X,I[G+6],9,-1069501632),X=Z(X,i,m,B,I[G+11],14,643717713),B=Z(B,X,i,m,I[G],20,-373897302),m=Z(m,B,X,i,I[G+5],5,-701558691),i=Z(i,m,B,X,I[G+10],9,38016083),X=Z(X,i,m,B,I[G+15],14,-660478335),B=Z(B,X,i,m,I[G+4],20,-405537848),m=Z(m,B,X,i,I[G+9],5,568446438),i=Z(i,m,B,X,I[G+14],9,-1019803690),X=Z(X,i,m,B,I[G+3],14,-187363961),B=Z(B,X,i,m,I[G+8],20,1163531501),m=Z(m,B,X,i,I[G+13],5,-1444681467),i=Z(i,m,B,X,I[G+2],9,-51403784),X=Z(X,i,m,B,I[G+7],14,1735328473),m=l(m,B=Z(B,X,i,m,I[G+12],20,-1926607734),X,i,I[G+5],4,-378558),i=l(i,m,B,X,I[G+8],11,-2022574463),X=l(X,i,m,B,I[G+11],16,1839030562),B=l(B,X,i,m,I[G+14],23,-35309556),m=l(m,B,X,i,I[G+1],4,-1530992060),i=l(i,m,B,X,I[G+4],11,1272893353),X=l(X,i,m,B,I[G+7],16,-155497632),B=l(B,X,i,m,I[G+10],23,-1094730640),m=l(m,B,X,i,I[G+13],4,681279174),i=l(i,m,B,X,I[G],11,-358537222),X=l(X,i,m,B,I[G+3],16,-722521979),B=l(B,X,i,m,I[G+6],23,76029189),m=l(m,B,X,i,I[G+9],4,-640364487),i=l(i,m,B,X,I[G+12],11,-421815835),X=l(X,i,m,B,I[G+15],16,530742520),m=b(m,B=l(B,X,i,m,I[G+2],23,-995338651),X,i,I[G],6,-198630844),i=b(i,m,B,X,I[G+7],10,1126891415),X=b(X,i,m,B,I[G+14],15,-1416354905),B=b(B,X,i,m,I[G+5],21,-57434055),m=b(m,B,X,i,I[G+12],6,1700485571),i=b(i,m,B,X,I[G+3],10,-1894986606),X=b(X,i,m,B,I[G+10],15,-1051523),B=b(B,X,i,m,I[G+1],21,-2054922799),m=b(m,B,X,i,I[G+8],6,1873313359),i=b(i,m,B,X,I[G+15],10,-30611744),X=b(X,i,m,B,I[G+6],15,-1560198380),B=b(B,X,i,m,I[G+13],21,1309151649),m=b(m,B,X,i,I[G+4],6,-145523070),i=b(i,m,B,X,I[G+11],10,-1120210379),X=b(X,i,m,B,I[G+2],15,718787259),B=b(B,X,i,m,I[G+9],21,-343485551),m=g(m,d),B=g(B,c),X=g(X,V),i=g(i,W);return[m,B,X,i]}function d(I){var g,C="",A=32*I.length;for(g=0;g<A;g+=8)C+=String.fromCharCode(I[g>>5]>>>g%32&255);return C}function c(I){var g,C=[];for(C[(I.length>>2)-1]=void 0,g=0;g<C.length;g+=1)C[g]=0;var A=8*I.length;for(g=0;g<A;g+=8)C[g>>5]|=(255&I.charCodeAt(g/8))<<g%32;return C}function V(I){var g,C,A="0123456789abcdef",Z="";for(C=0;C<I.length;C+=1)g=I.charCodeAt(C),Z+=A.charAt(g>>>4&15)+A.charAt(15&g);return Z}function W(I){return unescape(encodeURIComponent(I))}function m(I){return function(I){return d(G(c(I),8*I.length))}(W(I))}function B(I,g){return function(I,g){var C,A,Z=c(I),l=[],b=[];for(l[15]=b[15]=void 0,Z.length>16&&(Z=G(Z,8*I.length)),C=0;C<16;C+=1)l[C]=909522486^Z[C],b[C]=1549556828^Z[C];return A=G(l.concat(c(g)),512+8*g.length),d(G(b.concat(A),640))}(W(I),W(g))}(this||globalThis).md5=function(I,g,C){return g?C?B(g,I):V(B(g,I)):C?m(I):V(m(I))}}()},944:()=>{!function(){var I=this||globalThis,g=function(){return g.cache.hasOwnProperty(arguments[0])||(g.cache[arguments[0]]=g.parse(arguments[0])),g.format.call(null,g.cache[arguments[0]],arguments)};function C(I){return Object.prototype.toString.call(I).slice(8,-1).toLowerCase()}function A(I,g){for(var C=[];g>0;C[--g]=I);return C.join("")}g.format=function(I,Z){var l,b,G,d,c,V,W,m=1,B=I.length,X="",i=[];for(b=0;b<B;b++)if("string"===(X=C(I[b])))i.push(I[b]);else if("array"===X){if((d=I[b])[2])for(l=Z[m],G=0;G<d[2].length;G++){if(!l.hasOwnProperty(d[2][G]))throw g('[sprintf] property "%s" does not exist',d[2][G]);l=l[d[2][G]]}else l=d[1]?Z[d[1]]:Z[m++];if(/[^s]/.test(d[8])&&"number"!=C(l))throw g("[sprintf] expecting number but found %s",C(l));switch(d[8]){case"b":l=l.toString(2);break;case"c":l=String.fromCharCode(l);break;case"d":l=parseInt(l,10);break;case"e":l=d[7]?l.toExponential(d[7]):l.toExponential();break;case"f":l=d[7]?parseFloat(l).toFixed(d[7]):parseFloat(l);break;case"o":l=l.toString(8);break;case"s":l=(l=String(l))&&d[7]?l.substring(0,d[7]):l;break;case"u":l>>>=0;break;case"x":l=l.toString(16);break;case"X":l=l.toString(16).toUpperCase()}l=/[def]/.test(d[8])&&d[3]&&l>=0?"+"+l:l,V=d[4]?"0"==d[4]?"0":d[4].charAt(1):" ",W=d[6]-String(l).length,c=d[6]?A(V,W):"",i.push(d[5]?l+c:c+l)}return i.join("")},g.cache={},g.parse=function(I){for(var g=I,C=[],A=[],Z=0;g;){if(null!==(C=/^[^\x25]+/.exec(g)))A.push(C[0]);else if(null!==(C=/^\x25{2}/.exec(g)))A.push("%");else{if(null===(C=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(g)))throw"[sprintf] huh?";if(C[2]){Z|=1;var l=[],b=C[2],G=[];if(null===(G=/^([a-z_][a-z_\d]*)/i.exec(b)))throw"[sprintf] huh?";for(l.push(G[1]);""!==(b=b.substring(G[0].length));)if(null!==(G=/^\.([a-z_][a-z_\d]*)/i.exec(b)))l.push(G[1]);else{if(null===(G=/^\[(\d+)\]/.exec(b)))throw"[sprintf] huh?";l.push(G[1])}C[2]=l}else Z|=2;if(3===Z)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";A.push(C)}g=g.substring(C[0].length)}return A},I.sprintf=g,I.vsprintf=function(I,C,A){return(A=C.slice(0)).splice(0,0,I),g.apply(null,A)}}()},891:()=>{!function(){var I=this||globalThis,g=I.connect||{};I.connect=g,I.lily=g;var C=navigator.userAgent,A=["bubbles","cancelBubble","cancelable","composed","data","defaultPrevented","eventPhase","isTrusted","lastEventId","origin","returnValue","timeStamp","type"];g.sprintf=I.sprintf,g.vsprintf=I.vsprintf,delete I.sprintf,delete I.vsprintf,g.HTTP_STATUS_CODES={SUCCESS:200,TOO_MANY_REQUESTS:429,INTERNAL_SERVER_ERROR:500},g.TRANSPORT_TYPES={CHAT_TOKEN:"chat_token",WEB_SOCKET:"web_socket"},g.hitch=function(){var I=Array.prototype.slice.call(arguments),C=I.shift(),A=I.shift();return g.assertNotNull(C,"scope"),g.assertNotNull(A,"method"),g.assertTrue(g.isFunction(A),"method must be a function"),function(){var g=Array.prototype.slice.call(arguments);return A.apply(C,I.concat(g))}},g.isFunction=function(I){return!!(I&&I.constructor&&I.call&&I.apply)},g.isArray=function(I){return"[object Array]"===Object.prototype.toString.call(I)},g.keys=function(I){var C=[];for(var A in g.assertNotNull(I,"map"),I)C.push(A);return C},g.values=function(I){var C=[];for(var A in g.assertNotNull(I,"map"),I)C.push(I[A]);return C},g.entries=function(I){var g=[];for(var C in I)g.push({key:C,value:I[C]});return g},g.merge=function(){var I=Array.prototype.slice.call(arguments,0),C={};return I.forEach((function(I){g.entries(I).forEach((function(I){C[I.key]=I.value}))})),C},g.now=function(){return(new Date).getTime()},g.find=function(I,g){for(var C=0;C<I.length;C++)if(g(I[C]))return I[C];return null},g.contains=function(I,C){return I instanceof Array?null!=g.find(I,(function(I){return I===C})):C in I},g.containsValue=function(I,C){return I instanceof Array?null!=g.find(I,(function(I){return I===C})):null!=g.find(g.values(I),(function(I){return I===C}))},g.randomId=function(){return g.sprintf("%s-%s",g.now(),Math.random().toString(36).slice(2))},g.makeEnum=function(I){var g={};return I.forEach((function(I){var C=I.replace(/\.?([a-z]+)_?/g,(function(I,g){return g.toUpperCase()+"_"})).replace(/_$/,"");g[C]=I})),g},g.makeNamespacedEnum=function(I,C){var A=g.makeEnum(C);return g.keys(A).forEach((function(C){A[C]=g.sprintf("%s::%s",I,A[C])})),A},g.makeGenericNamespacedEnum=function(I,C,A){var Z=g.makeEnum(C);return g.keys(Z).forEach((function(C){Z[C]=g.sprintf("%s"+A+"%s",I,Z[C])})),Z},g.isChromeBrowser=function(){return-1!==C.indexOf("Chrome")},g.isFirefoxBrowser=function(){return-1!==C.indexOf("Firefox")},g.isOperaBrowser=function(){return-1!==C.indexOf("Opera")},g.getChromeBrowserVersion=function(){var I=C.substring(C.indexOf("Chrome")+7);return I?parseFloat(I):-1},g.getFirefoxBrowserVersion=function(){var I=C.substring(C.indexOf("Firefox")+8);return I?parseFloat(I):-1},g.isValidLocale=function(I){return[{id:"en_US",label:"English"},{id:"de_DE",label:"Deutsch"},{id:"es_ES",label:"Español"},{id:"fr_FR",label:"Français"},{id:"ja_JP",label:"日本語"},{id:"it_IT",label:"Italiano"},{id:"ko_KR",label:"한국어"},{id:"pt_BR",label:"Português"},{id:"zh_CN",label:"中文(简体)"},{id:"zh_TW",label:"中文(繁體)"}].map((function(I){return I.id})).includes(I)},g.getOperaBrowserVersion=function(){var I=C.indexOf("Opera"),g=-1!==C.indexOf("Version")?C.substring(I+8):C.substring(I+6);return g?parseFloat(g):-1},g.index=function(I,g){var C={};return I.forEach((function(I){C[g(I)]=I})),C},g.set=function(I){var g={};return I.forEach((function(I){g[I]=1})),g},g.relativeComplement=function(I,C){var A={};return g.keys(C).forEach((function(g){g in I||(A[g]=C[g])})),A},g.assertTrue=function(I,C){if(!I)throw new g.ValueError(C)},g.assertNotNull=function(I,C){return g.assertTrue(null!=I&&void 0!==typeof I,g.sprintf("%s must be provided",C||"A value")),I},g.deepcopy=function(I){return JSON.parse(JSON.stringify(I))},g.deepcopyCrossOriginEvent=function(I){const C={};return A.forEach((A=>{try{C[A]=I[A]}catch(I){g.getLog().info("deepcopyCrossOriginEvent failed on key: ",A).sendInternalLogToServer()}})),g.deepcopy(C)},g.getBaseUrl=function(){var C=I.location;return g.sprintf("%s//%s:%s",C.protocol,C.hostname,C.port)},g.getUrlWithProtocol=function(C){var A=I.location.protocol;return C.substr(0,A.length)!==A?g.sprintf("%s//%s",A,C):C},g.isFramed=function(){try{return window.self!==window.top}catch(I){return!0}},g.hasOtherConnectedCCPs=function(){return g.numberOfConnectedCCPs>1},g.fetch=function(I,C,A,Z){return Z=Z||5,A=A||1e3,C=C||{},new Promise((function(l,b){!function Z(G){fetch(I,C).then((function(I){I.status===g.HTTP_STATUS_CODES.SUCCESS?I.json().then((I=>l(I))).catch((()=>l({}))):1!==G&&(I.status>=g.HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR||I.status===g.HTTP_STATUS_CODES.TOO_MANY_REQUESTS)?setTimeout((function(){Z(--G)}),A):b(I)})).catch((function(I){b(I)}))}(Z)}))},g.backoff=function(C,A,Z,l){g.assertTrue(g.isFunction(C),"func must be a Function");var b=this;C({success:function(I){l&&l.success&&l.success(I)},failure:function(g,G){if(Z>0){var d=2*A*Math.random();I.setTimeout((function(){b.backoff(C,2*d,--Z,l)}),d)}else l&&l.failure&&l.failure(g,G)}})},g.publishMetric=function(I){g.core.getUpstream().sendUpstream(g.EventType.BROADCAST,{event:g.EventType.CLIENT_METRIC,data:I})},g.publishSoftphoneStats=function(I){g.core.getUpstream().sendUpstream(g.EventType.BROADCAST,{event:g.EventType.SOFTPHONE_STATS,data:I})},g.publishSoftphoneReport=function(I){g.core.getUpstream().sendUpstream(g.EventType.BROADCAST,{event:g.EventType.SOFTPHONE_REPORT,data:I})},g.publishClickStreamData=function(I){g.core.getUpstream().sendUpstream(g.EventType.BROADCAST,{event:g.EventType.CLICK_STREAM_DATA,data:I})},g.publishClientSideLogs=function(I){g.core.getEventBus().trigger(g.EventType.CLIENT_SIDE_LOGS,I)},g.addNamespaceToLogs=function(I){["log","error","warn","info","debug"].forEach((g=>{const C=window.console[g];window.console[g]=function(){const g=Array.from(arguments);g.unshift(`[${I}]`),C.apply(window.console,g)}}))},g.PopupManager=function(){},g.PopupManager.prototype.open=function(I,g,C){var A=this._getLastOpenedTimestamp(g),Z=(new Date).getTime(),l=null;if(Z-A>864e5){if(C){var b=C.height||578,G=C.width||433,d=C.top||0,c=C.left||0;(l=window.open("",g,"width="+G+", height="+b+", top="+d+", left="+c)).location!==I&&(l=window.open(I,g,"width="+G+", height="+b+", top="+d+", left="+c))}else(l=window.open("",g)).location!==I&&(l=window.open(I,g));this._setLastOpenedTimestamp(g,Z)}return l},g.PopupManager.prototype.clear=function(g){var C=this._getLocalStorageKey(g);I.localStorage.removeItem(C)},g.PopupManager.prototype._getLastOpenedTimestamp=function(g){var C=this._getLocalStorageKey(g),A=I.localStorage.getItem(C);return A?parseInt(A,10):0},g.PopupManager.prototype._setLastOpenedTimestamp=function(g,C){var A=this._getLocalStorageKey(g);I.localStorage.setItem(A,""+C)},g.PopupManager.prototype._getLocalStorageKey=function(I){return"connectPopupManager::"+I};var Z=g.makeEnum(["granted","denied","default"]);g.NotificationManager=function(){this.queue=[],this.permission=Z.DEFAULT},g.NotificationManager.prototype.requestPermission=function(){var C=this;"Notification"in I?I.Notification.permission===Z.DENIED?(g.getLog().warn("The user has requested to not receive notifications.").sendInternalLogToServer(),this.permission=Z.DENIED):this.permission!==Z.GRANTED&&I.Notification.requestPermission().then((function(I){C.permission=I,I===Z.GRANTED?C._showQueued():C.queue=[]})):(g.getLog().warn("This browser doesn't support notifications.").sendInternalLogToServer(),this.permission=Z.DENIED)},g.NotificationManager.prototype.show=function(I,C){if(this.permission===Z.GRANTED)return this._showImpl({title:I,options:C});if(this.permission===Z.DENIED)g.getLog().warn("Unable to show notification.").sendInternalLogToServer().withObject({title:I,options:C});else{var A={title:I,options:C};g.getLog().warn("Deferring notification until user decides to allow or deny.").withObject(A).sendInternalLogToServer(),this.queue.push(A)}},g.NotificationManager.prototype._showQueued=function(){var I=this,g=this.queue.map((function(g){return I._showImpl(g)}));return this.queue=[],g},g.NotificationManager.prototype._showImpl=function(g){var C=new I.Notification(g.title,g.options);return g.options.clicked&&(C.onclick=function(){g.options.clicked.call(C)}),C},g.ValueError=function(){var I=Array.prototype.slice.call(arguments,0),C=I.shift(),A=new Error(g.vsprintf(C,I));return Object.setPrototypeOf(A,g.ValueError.prototype),A},Object.setPrototypeOf(g.ValueError.prototype,Error.prototype),Object.setPrototypeOf(g.ValueError,Error),g.ValueError.prototype.name="ValueError",g.NotImplementedError=function(){var I=Array.prototype.slice.call(arguments,0),C=I.shift(),A=new Error(g.vsprintf(C,I));return Object.setPrototypeOf(A,g.NotImplementedError.prototype),A},Object.setPrototypeOf(g.NotImplementedError.prototype,Error.prototype),Object.setPrototypeOf(g.NotImplementedError,Error),g.NotImplementedError.prototype.name="NotImplementedError",g.StateError=function(){var I=Array.prototype.slice.call(arguments,0),C=I.shift(),A=new Error(g.vsprintf(C,I));return Object.setPrototypeOf(A,g.StateError.prototype),A},Object.setPrototypeOf(g.StateError.prototype,Error.prototype),Object.setPrototypeOf(g.StateError,Error),g.StateError.prototype.name="StateError",g.VoiceIdError=function(I,g,C){var A={};return A.type=I,A.message=g,A.stack=Error(g).stack,A.err=C,A},g.isCCP=function(){return"ConnectSharedWorkerConduit"===g.core.getUpstream().name}}()}})[944](),I[163](),I[891](),I[772](),I[341]()})();