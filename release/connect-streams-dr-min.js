!function(){var I=function(){return I.cache.hasOwnProperty(arguments[0])||(I.cache[arguments[0]]=I.parse(arguments[0])),I.format.call(null,I.cache[arguments[0]],arguments)};function g(I){return Object.prototype.toString.call(I).slice(8,-1).toLowerCase()}function C(I,g){for(var C=[];g>0;C[--g]=I);return C.join("")}I.format=function(A,Z){var l,b,G,d,c,V,m,W=1,B=A.length,X="",i=[];for(b=0;b<B;b++)if("string"===(X=g(A[b])))i.push(A[b]);else if("array"===X){if((d=A[b])[2])for(l=Z[W],G=0;G<d[2].length;G++){if(!l.hasOwnProperty(d[2][G]))throw I('[sprintf] property "%s" does not exist',d[2][G]);l=l[d[2][G]]}else l=d[1]?Z[d[1]]:Z[W++];if(/[^s]/.test(d[8])&&"number"!=g(l))throw I("[sprintf] expecting number but found %s",g(l));switch(d[8]){case"b":l=l.toString(2);break;case"c":l=String.fromCharCode(l);break;case"d":l=parseInt(l,10);break;case"e":l=d[7]?l.toExponential(d[7]):l.toExponential();break;case"f":l=d[7]?parseFloat(l).toFixed(d[7]):parseFloat(l);break;case"o":l=l.toString(8);break;case"s":l=(l=String(l))&&d[7]?l.substring(0,d[7]):l;break;case"u":l>>>=0;break;case"x":l=l.toString(16);break;case"X":l=l.toString(16).toUpperCase()}l=/[def]/.test(d[8])&&d[3]&&l>=0?"+"+l:l,V=d[4]?"0"==d[4]?"0":d[4].charAt(1):" ",m=d[6]-String(l).length,c=d[6]?C(V,m):"",i.push(d[5]?l+c:c+l)}return i.join("")},I.cache={},I.parse=function(I){for(var g=I,C=[],A=[],Z=0;g;){if(null!==(C=/^[^\x25]+/.exec(g)))A.push(C[0]);else if(null!==(C=/^\x25{2}/.exec(g)))A.push("%");else{if(null===(C=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(g)))throw"[sprintf] huh?";if(C[2]){Z|=1;var l=[],b=C[2],G=[];if(null===(G=/^([a-z_][a-z_\d]*)/i.exec(b)))throw"[sprintf] huh?";for(l.push(G[1]);""!==(b=b.substring(G[0].length));)if(null!==(G=/^\.([a-z_][a-z_\d]*)/i.exec(b)))l.push(G[1]);else{if(null===(G=/^\[(\d+)\]/.exec(b)))throw"[sprintf] huh?";l.push(G[1])}C[2]=l}else Z|=2;if(3===Z)throw"[sprintf] mixing positional and named placeholders is not (yet) supported";A.push(C)}g=g.substring(C[0].length)}return A},this.sprintf=I,this.vsprintf=function(g,C,A){return(A=C.slice(0)).splice(0,0,g),I.apply(null,A)}}(),function(){var I=this;connect=I.connect||{},I.connect=connect,I.lily=connect;var g=navigator.userAgent,C=["bubbles","cancelBubble","cancelable","composed","data","defaultPrevented","eventPhase","isTrusted","lastEventId","origin","returnValue","timeStamp","type"];connect.sprintf=I.sprintf,connect.vsprintf=I.vsprintf,delete I.sprintf,delete I.vsprintf,connect.HTTP_STATUS_CODES={SUCCESS:200,TOO_MANY_REQUESTS:429,INTERNAL_SERVER_ERROR:500},connect.TRANSPORT_TYPES={CHAT_TOKEN:"chat_token",WEB_SOCKET:"web_socket"},connect.hitch=function(){var I=Array.prototype.slice.call(arguments),g=I.shift(),C=I.shift();return connect.assertNotNull(g,"scope"),connect.assertNotNull(C,"method"),connect.assertTrue(connect.isFunction(C),"method must be a function"),function(){var A=Array.prototype.slice.call(arguments);return C.apply(g,I.concat(A))}},connect.isFunction=function(I){return!!(I&&I.constructor&&I.call&&I.apply)},connect.isArray=function(I){return"[object Array]"===Object.prototype.toString.call(I)},connect.keys=function(I){var g=[];for(var C in connect.assertNotNull(I,"map"),I)g.push(C);return g},connect.values=function(I){var g=[];for(var C in connect.assertNotNull(I,"map"),I)g.push(I[C]);return g},connect.entries=function(I){var g=[];for(var C in I)g.push({key:C,value:I[C]});return g},connect.merge=function(){var I=Array.prototype.slice.call(arguments,0),g={};return I.forEach((function(I){connect.entries(I).forEach((function(I){g[I.key]=I.value}))})),g},connect.now=function(){return(new Date).getTime()},connect.find=function(I,g){for(var C=0;C<I.length;C++)if(g(I[C]))return I[C];return null},connect.contains=function(I,g){return I instanceof Array?null!=connect.find(I,(function(I){return I===g})):g in I},connect.containsValue=function(I,g){return I instanceof Array?null!=connect.find(I,(function(I){return I===g})):null!=connect.find(connect.values(I),(function(I){return I===g}))},connect.randomId=function(){return connect.sprintf("%s-%s",connect.now(),Math.random().toString(36).slice(2))},connect.makeEnum=function(I){var g={};return I.forEach((function(I){var C=I.replace(/\.?([a-z]+)_?/g,(function(I,g){return g.toUpperCase()+"_"})).replace(/_$/,"");g[C]=I})),g},connect.makeNamespacedEnum=function(I,g){var C=connect.makeEnum(g);return connect.keys(C).forEach((function(g){C[g]=connect.sprintf("%s::%s",I,C[g])})),C},connect.makeGenericNamespacedEnum=function(I,g,C){var A=connect.makeEnum(g);return connect.keys(A).forEach((function(g){A[g]=connect.sprintf("%s"+C+"%s",I,A[g])})),A},connect.isChromeBrowser=function(){return-1!==g.indexOf("Chrome")},connect.isFirefoxBrowser=function(){return-1!==g.indexOf("Firefox")},connect.isOperaBrowser=function(){return-1!==g.indexOf("Opera")},connect.getChromeBrowserVersion=function(){var I=g.substring(g.indexOf("Chrome")+7);return I?parseFloat(I):-1},connect.getFirefoxBrowserVersion=function(){var I=g.substring(g.indexOf("Firefox")+8);return I?parseFloat(I):-1},connect.isValidLocale=function(I){return[{id:"en_US",label:"English"},{id:"de_DE",label:"Deutsch"},{id:"es_ES",label:"Español"},{id:"fr_FR",label:"Français"},{id:"ja_JP",label:"日本語"},{id:"it_IT",label:"Italiano"},{id:"ko_KR",label:"한국어"},{id:"pt_BR",label:"Português"},{id:"zh_CN",label:"中文(简体)"},{id:"zh_TW",label:"中文(繁體)"}].map((function(I){return I.id})).includes(I)},connect.getOperaBrowserVersion=function(){var I=g.indexOf("Opera"),C=-1!==g.indexOf("Version")?g.substring(I+8):g.substring(I+6);return C?parseFloat(C):-1},connect.index=function(I,g){var C={};return I.forEach((function(I){C[g(I)]=I})),C},connect.set=function(I){var g={};return I.forEach((function(I){g[I]=1})),g},connect.relativeComplement=function(I,g){var C={};return connect.keys(g).forEach((function(A){A in I||(C[A]=g[A])})),C},connect.assertTrue=function(I,g){if(!I)throw new connect.ValueError(g)},connect.assertNotNull=function(I,g){return connect.assertTrue(null!=I&&void 0!==typeof I,connect.sprintf("%s must be provided",g||"A value")),I},connect.deepcopy=function(I){return JSON.parse(JSON.stringify(I))},connect.deepcopyCrossOriginEvent=function(I){const g={};return C.forEach((C=>{try{g[C]=I[C]}catch(I){connect.getLog().info("deepcopyCrossOriginEvent failed on key: ",C).sendInternalLogToServer()}})),connect.deepcopy(g)},connect.getBaseUrl=function(){var g=I.location;return connect.sprintf("%s//%s:%s",g.protocol,g.hostname,g.port)},connect.getUrlWithProtocol=function(g){var C=I.location.protocol;return g.substr(0,C.length)!==C?connect.sprintf("%s//%s",C,g):g},connect.isFramed=function(){try{return window.self!==window.top}catch(I){return!0}},connect.hasOtherConnectedCCPs=function(){return connect.numberOfConnectedCCPs>1},connect.fetch=function(I,g,C,A){return A=A||5,C=C||1e3,g=g||{},new Promise((function(Z,l){!function A(b){fetch(I,g).then((function(I){I.status===connect.HTTP_STATUS_CODES.SUCCESS?I.json().then((I=>Z(I))).catch((()=>Z({}))):1!==b&&(I.status>=connect.HTTP_STATUS_CODES.INTERNAL_SERVER_ERROR||I.status===connect.HTTP_STATUS_CODES.TOO_MANY_REQUESTS)?setTimeout((function(){A(--b)}),C):l(I)})).catch((function(I){l(I)}))}(A)}))},connect.backoff=function(g,C,A,Z){connect.assertTrue(connect.isFunction(g),"func must be a Function");var l=this;g({success:function(I){Z&&Z.success&&Z.success(I)},failure:function(b,G){if(A>0){var d=2*C*Math.random();I.setTimeout((function(){l.backoff(g,2*d,--A,Z)}),d)}else Z&&Z.failure&&Z.failure(b,G)}})},connect.publishMetric=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.CLIENT_METRIC,data:I})},connect.publishSoftphoneStats=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.SOFTPHONE_STATS,data:I})},connect.publishSoftphoneReport=function(I){connect.core.getUpstream().sendUpstream(connect.EventType.BROADCAST,{event:connect.EventType.SOFTPHONE_REPORT,data:I})},connect.publishClientSideLogs=function(I){connect.core.getEventBus().trigger(connect.EventType.CLIENT_SIDE_LOGS,I)},connect.addNamespaceToLogs=function(I){["log","error","warn","info","debug"].forEach((g=>{const C=window.console[g];window.console[g]=function(){const g=Array.from(arguments);g.unshift(`[${I}]`),C.apply(window.console,g)}}))},connect.PopupManager=function(){},connect.PopupManager.prototype.open=function(I,g,C){var A=this._getLastOpenedTimestamp(g),Z=(new Date).getTime(),l=null;if(Z-A>864e5){if(C){var b=C.height||578,G=C.width||433,d=C.top||0,c=C.left||0;(l=window.open("",g,"width="+G+", height="+b+", top="+d+", left="+c)).location!==I&&(l=window.open(I,g,"width="+G+", height="+b+", top="+d+", left="+c))}else(l=window.open("",g)).location!==I&&(l=window.open(I,g));this._setLastOpenedTimestamp(g,Z)}return l},connect.PopupManager.prototype.clear=function(g){var C=this._getLocalStorageKey(g);I.localStorage.removeItem(C)},connect.PopupManager.prototype._getLastOpenedTimestamp=function(g){var C=this._getLocalStorageKey(g),A=I.localStorage.getItem(C);return A?parseInt(A,10):0},connect.PopupManager.prototype._setLastOpenedTimestamp=function(g,C){var A=this._getLocalStorageKey(g);I.localStorage.setItem(A,""+C)},connect.PopupManager.prototype._getLocalStorageKey=function(I){return"connectPopupManager::"+I};var A=connect.makeEnum(["granted","denied","default"]);connect.NotificationManager=function(){this.queue=[],this.permission=A.DEFAULT},connect.NotificationManager.prototype.requestPermission=function(){var g=this;"Notification"in I?I.Notification.permission===A.DENIED?(connect.getLog().warn("The user has requested to not receive notifications.").sendInternalLogToServer(),this.permission=A.DENIED):this.permission!==A.GRANTED&&I.Notification.requestPermission().then((function(I){g.permission=I,I===A.GRANTED?g._showQueued():g.queue=[]})):(connect.getLog().warn("This browser doesn't support notifications.").sendInternalLogToServer(),this.permission=A.DENIED)},connect.NotificationManager.prototype.show=function(I,g){if(this.permission===A.GRANTED)return this._showImpl({title:I,options:g});if(this.permission===A.DENIED)connect.getLog().warn("Unable to show notification.").sendInternalLogToServer().withObject({title:I,options:g});else{var C={title:I,options:g};connect.getLog().warn("Deferring notification until user decides to allow or deny.").withObject(C).sendInternalLogToServer(),this.queue.push(C)}},connect.NotificationManager.prototype._showQueued=function(){var I=this,g=this.queue.map((function(g){return I._showImpl(g)}));return this.queue=[],g},connect.NotificationManager.prototype._showImpl=function(g){var C=new I.Notification(g.title,g.options);return g.options.clicked&&(C.onclick=function(){g.options.clicked.call(C)}),C},connect.BaseError=function(g,C){I.Error.call(this,connect.vsprintf(g,C))},connect.BaseError.prototype=Object.create(Error.prototype),connect.BaseError.prototype.constructor=connect.BaseError,connect.ValueError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.ValueError.prototype=Object.create(connect.BaseError.prototype),connect.ValueError.prototype.constructor=connect.ValueError,connect.NotImplementedError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.NotImplementedError.prototype=Object.create(connect.BaseError.prototype),connect.NotImplementedError.prototype.constructor=connect.NotImplementedError,connect.StateError=function(){var I=Array.prototype.slice.call(arguments,0),g=I.shift();connect.BaseError.call(this,g,I)},connect.StateError.prototype=Object.create(connect.BaseError.prototype),connect.StateError.prototype.constructor=connect.StateError,connect.VoiceIdError=function(I,g,C){var A={};return A.type=I,A.message=g,A.stack=Error(g).stack,A.err=C,A},connect.isCCP=function(){return"ConnectSharedWorkerConduit"===connect.core.getUpstream().name}}(),function(){var I=this;connect=I.connect||{},I.connect=connect,I.globalConnect={},I.lily=connect,globalConnect.Container=null;var g=window.atob("LyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoewoKLyoqKi8gODIxOgovKioqLyAoKCkgPT4gewoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwogIGdsb2JhbC5saWx5ID0gY29ubmVjdDsKCiAgY29ubmVjdC5hZ2VudEFwcCA9IHt9OwoKICB2YXIgQVBQID0gewogICAgQ0NQOiAnY2NwJywKICB9OwoKICBjb25uZWN0LmFnZW50QXBwLmluaXRDQ1AgPSBjb25uZWN0LmNvcmUuaW5pdENDUDsKICBjb25uZWN0LmFnZW50QXBwLmlzSW5pdGlhbGl6ZWQgPSBmdW5jdGlvbiAoaW5zdGFuY2VBbGlhcykge307CgogIGNvbm5lY3QuYWdlbnRBcHAuaW5pdEFwcENvbW11bmljYXRpb24gPSBmdW5jdGlvbiAoaWZyYW1lSWQsIGVuZHBvaW50KSB7CiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWZyYW1lSWQpOwogICAgdmFyIGlmcmFtZUNvbmR1aXQgPSBuZXcgY29ubmVjdC5JRnJhbWVDb25kdWl0KGVuZHBvaW50LCB3aW5kb3csIGlmcmFtZSk7CiAgICB2YXIgQlJPQURDQVNUX1RZUEUgPSBbCiAgICAgIGNvbm5lY3QuQWdlbnRFdmVudHMuVVBEQVRFLAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuVklFVywKICAgICAgY29ubmVjdC5FdmVudFR5cGUuQUNLTk9XTEVER0UsCiAgICAgIGNvbm5lY3QuRXZlbnRUeXBlLlRFUk1JTkFURUQsCiAgICAgIGNvbm5lY3QuVGFza0V2ZW50cy5DUkVBVEVECiAgICBdOwogICAgaWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoZSkgewogICAgICBCUk9BRENBU1RfVFlQRS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbSh0eXBlLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgaWZyYW1lQ29uZHVpdC5zZW5kVXBzdHJlYW0odHlwZSwgZGF0YSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgdmFyIGdldENvbm5lY3RVcmwgPSBmdW5jdGlvbiAoY2NwVXJsKSB7CiAgICB2YXIgcG9zID0gY2NwVXJsLmluZGV4T2YoJ2NjcC12MicpOwogICAgcmV0dXJuIGNjcFVybC5zbGljZSgwLCBwb3MgLSAxKTsKICB9OwoKICB2YXIgc2lnbk91dFRocm91Z2hDQ1AgPSBmdW5jdGlvbiAoY2NwVXJsKSB7CiAgICB2YXIgbG9nb3V0VXJsID0gZ2V0Q29ubmVjdFVybChjY3BVcmwpICsgJy9sb2dvdXQnOwogICAgcmV0dXJuIGNvbm5lY3QuZmV0Y2gobG9nb3V0VXJsLCB7CiAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsCiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGV2ZW50QnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICAgIGV2ZW50QnVzLnRyaWdnZXIoY29ubmVjdC5FdmVudFR5cGUuVEVSTUlOQVRFKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICBjb25uZWN0CiAgICAgICAgLmdldExvZygpCiAgICAgICAgLmVycm9yKCdBbiBlcnJvciBvY2N1cmVkIG9uIGxvZ291dC4nICsgZSkKICAgICAgICAud2l0aEV4Y2VwdGlvbihlKTsKICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBsb2dvdXRVcmw7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0pOwogIH07CgogIHZhciBzaWduSW5UaHJvdWdoaW5pdENDUCA9IGZ1bmN0aW9uIChjY3BVcmwsIGNvbnRhaW5lciwgY29uZmlnKSB7CiAgICB2YXIgZGVmYXVsdFBhcmFtcyA9IHsKICAgICAgY2NwVXJsOiBjY3BVcmwsCiAgICAgIGNjcExvYWRUaW1lb3V0OiAxMDAwMCwKICAgICAgbG9naW5Qb3B1cDogdHJ1ZSwKICAgICAgbG9naW5Vcmw6IGdldENvbm5lY3RVcmwoY2NwVXJsKSArICcvbG9naW4nLAogICAgICBzb2Z0cGhvbmU6IHsKICAgICAgICBhbGxvd0ZyYW1lZFNvZnRwaG9uZTogdHJ1ZSwKICAgICAgICBkaXNhYmxlUmluZ3RvbmU6IGZhbHNlLAogICAgICB9CiAgICB9OwogICAgdmFyIGNjcFBhcmFtcyA9IGNvbm5lY3QubWVyZ2UoZGVmYXVsdFBhcmFtcywgY29uZmlnLmNjcFBhcmFtcyk7CiAgICBjb25uZWN0LmNvcmUuaW5pdENDUChjb250YWluZXIsIGNjcFBhcmFtcyk7CiAgfTsKCiAgY29ubmVjdC5hZ2VudEFwcC5pbml0QXBwID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRhaW5lcklkLCBhcHBVcmwsIGNvbmZpZykgewogICAgY29uZmlnID0gY29uZmlnID8gY29uZmlnIDoge307CiAgICBpZiAoY29uZmlnLmFkZE5hbWVzcGFjZVRvTG9ncykgewogICAgICBjb25uZWN0LmFkZE5hbWVzcGFjZVRvTG9ncyhuYW1lLnRvVXBwZXJDYXNlKCkpOwogICAgfQogICAgdmFyIGVuZHBvaW50ID0gYXBwVXJsLmVuZHNXaXRoKCcvJykgPyBhcHBVcmwgOiBhcHBVcmwgKyAnLyc7CiAgICB2YXIgb25Mb2FkID0gY29uZmlnLm9uTG9hZCA/IGNvbmZpZy5vbkxvYWQgOiBudWxsOwogICAgdmFyIHJlZ2lzdGVyQ29uZmlnID0geyBlbmRwb2ludDogZW5kcG9pbnQsIHN0eWxlOiBjb25maWcuc3R5bGUsIG9uTG9hZDogb25Mb2FkIH07CiAgICBjb25uZWN0LmFnZW50QXBwLkFwcFJlZ2lzdHJ5LnJlZ2lzdGVyKG5hbWUsIHJlZ2lzdGVyQ29uZmlnLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb250YWluZXJJZCkpOwogICAgY29ubmVjdC5hZ2VudEFwcC5BcHBSZWdpc3RyeS5zdGFydChuYW1lLCBmdW5jdGlvbiAobW9kdWxlRGF0YSkgewogICAgICB2YXIgZW5kcG9pbnQgPSBtb2R1bGVEYXRhLmVuZHBvaW50OwogICAgICB2YXIgY29udGFpbmVyRE9NID0gbW9kdWxlRGF0YS5jb250YWluZXJET007CiAgICAgIHJldHVybiB7CiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKG5hbWUgPT09IEFQUC5DQ1ApIHJldHVybiBzaWduSW5UaHJvdWdoaW5pdENDUChlbmRwb2ludCwgY29udGFpbmVyRE9NLCBjb25maWcpOwogICAgICAgICAgcmV0dXJuIGNvbm5lY3QuYWdlbnRBcHAuaW5pdEFwcENvbW11bmljYXRpb24obmFtZSwgZW5kcG9pbnQpOwogICAgICAgIH0sCiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKG5hbWUgPT09IEFQUC5DQ1ApIHJldHVybiBzaWduT3V0VGhyb3VnaENDUChlbmRwb2ludCk7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH07CiAgICB9KTsKICB9OwoKICBjb25uZWN0LmFnZW50QXBwLnN0b3BBcHAgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuIGNvbm5lY3QuYWdlbnRBcHAuQXBwUmVnaXN0cnkuc3RvcChuYW1lKTsKICB9Owp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gNTAwOgovKioqLyAoKCkgPT4gewoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwoKICB2YXIgQVBQID0gewogICAgQ0NQOiAnY2NwJywKICB9OwoKICBmdW5jdGlvbiBBcHBSZWdpc3RyeSgpIHsKICAgIHZhciBtb2R1bGVEYXRhID0ge307CiAgICB2YXIgbWFrZUFwcElmcmFtZSA9IGZ1bmN0aW9uIChhcHBOYW1lLCBlbmRwb2ludCwgc3R5bGUsIG9uTG9hZCkgewogICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgICAgIGlmcmFtZS5zcmMgPSBlbmRwb2ludDsKICAgICAgaWZyYW1lLnN0eWxlID0gc3R5bGUgfHwgJ3dpZHRoOiAxMDAlOyBoZWlnaHQ6MTAwJTsnOwogICAgICBpZnJhbWUuaWQgPSBhcHBOYW1lOwogICAgICBpZnJhbWVbJ2FyaWEtbGFiZWwnXSA9IGFwcE5hbWU7CiAgICAgIGlmcmFtZS5vbmxvYWQgPSBvbkxvYWQ7CiAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoCiAgICAgICAgInNhbmRib3giLAogICAgICAgICJhbGxvdy1mb3JtcyBhbGxvdy1wb3B1cHMgYWxsb3ctcG9wdXBzLXRvLWVzY2FwZS1zYW5kYm94IGFsbG93LXNhbWUtb3JpZ2luIGFsbG93LXNjcmlwdHMiCiAgICAgICk7CiAgICAgIC8vIFRPRE86IFVwZGF0ZSBzYW5kYm94IG9wdGlvbiBmb3IgM1Agd2lkZ2V0CgogICAgICByZXR1cm4gaWZyYW1lOwogICAgfTsKCiAgICByZXR1cm4gewogICAgICByZWdpc3RlcjogZnVuY3Rpb24gKGFwcE5hbWUsIGNvbmZpZywgY29udGFpbmVyRE9NKSB7CiAgICAgICAgbW9kdWxlRGF0YVthcHBOYW1lXSA9IHsKICAgICAgICAgIGNvbnRhaW5lckRPTTogY29udGFpbmVyRE9NLAogICAgICAgICAgZW5kcG9pbnQ6IGNvbmZpZy5lbmRwb2ludCwKICAgICAgICAgIHN0eWxlOiBjb25maWcuc3R5bGUsCiAgICAgICAgICBpbnN0YW5jZTogdW5kZWZpbmVkLAogICAgICAgICAgb25Mb2FkOiBjb25maWcub25Mb2FkLAogICAgICAgIH07CiAgICAgIH0sCiAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoYXBwTmFtZSwgY3JlYXRvcikgewogICAgICAgIGlmICghbW9kdWxlRGF0YVthcHBOYW1lXSkgcmV0dXJuOwogICAgICAgIHZhciBjb250YWluZXJET00gPSBtb2R1bGVEYXRhW2FwcE5hbWVdLmNvbnRhaW5lckRPTTsKICAgICAgICB2YXIgZW5kcG9pbnQgPSBtb2R1bGVEYXRhW2FwcE5hbWVdLmVuZHBvaW50OwogICAgICAgIHZhciBzdHlsZSA9IG1vZHVsZURhdGFbYXBwTmFtZV0uc3R5bGU7CiAgICAgICAgdmFyIG9uTG9hZCA9IG1vZHVsZURhdGFbYXBwTmFtZV0ub25Mb2FkOwogICAgICAgIGlmIChhcHBOYW1lICE9PSBBUFAuQ0NQKSB7CiAgICAgICAgICB2YXIgYXBwID0gbWFrZUFwcElmcmFtZShhcHBOYW1lLCBlbmRwb2ludCwgc3R5bGUsIG9uTG9hZCk7CiAgICAgICAgICBjb250YWluZXJET00uYXBwZW5kQ2hpbGQoYXBwKTsKICAgICAgICB9CgogICAgICAgIG1vZHVsZURhdGFbYXBwTmFtZV0uaW5zdGFuY2UgPSBjcmVhdG9yKG1vZHVsZURhdGFbYXBwTmFtZV0pOwogICAgICAgIHJldHVybiBtb2R1bGVEYXRhW2FwcE5hbWVdLmluc3RhbmNlLmluaXQoKTsKICAgICAgfSwKICAgICAgc3RvcDogZnVuY3Rpb24gKGFwcE5hbWUpIHsKICAgICAgICBpZiAoIW1vZHVsZURhdGFbYXBwTmFtZV0pIHJldHVybjsKCiAgICAgICAgdmFyIGRhdGEgPSBtb2R1bGVEYXRhW2FwcE5hbWVdOwogICAgICAgIHZhciBhcHAgPSBkYXRhLmNvbnRhaW5lckRPTS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKTsKICAgICAgICBkYXRhLmNvbnRhaW5lckRPTS5yZW1vdmVDaGlsZChhcHApOwoKICAgICAgICB2YXIgcmVzdWx0OwogICAgICAgIGlmIChkYXRhLmluc3RhbmNlKSB7CiAgICAgICAgICByZXN1bHQgPSBkYXRhLmluc3RhbmNlLmRlc3Ryb3koKTsKICAgICAgICAgIGRlbGV0ZSBkYXRhLmluc3RhbmNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgfQogICAgfTsKICB9CgogIGdsb2JhbC5jb25uZWN0LmFnZW50QXBwLkFwcFJlZ2lzdHJ5ID0gQXBwUmVnaXN0cnkoKTsKfSkoKTsKCgovKioqLyB9KSwKCi8qKiovIDk2NToKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKICovCihmdW5jdGlvbiAoKSB7CiAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogIGdsb2JhbC5jb25uZWN0ID0gY29ubmVjdDsKICBnbG9iYWwubGlseSA9IGNvbm5lY3Q7CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGVudW0gQWdlbnRTdGF0ZVR5cGUKICAgKi8KICBjb25uZWN0LkFnZW50U3RhdGVUeXBlID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAnaW5pdCcsCiAgICAncm91dGFibGUnLAogICAgJ25vdF9yb3V0YWJsZScsCiAgICAnb2ZmbGluZScKICBdKTsKICBjb25uZWN0LkFnZW50U3RhdHVzVHlwZSA9IGNvbm5lY3QuQWdlbnRTdGF0ZVR5cGU7CgogIC8qKgogICAqIGVudW0gQWdlbnRBdmFpbFN0YXRlcwogICAqLwogIGNvbm5lY3QuQWdlbnRBdmFpbFN0YXRlcyA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ0luaXQnLAogICAgJ0J1c3knLAogICAgJ0FmdGVyQ2FsbFdvcmsnLAogICAgJ0NhbGxpbmdDdXN0b21lcicsCiAgICAnRGlhbGluZycsCiAgICAnSm9pbmluZycsCiAgICAnUGVuZGluZ0F2YWlsYWJsZScsCiAgICAnUGVuZGluZ0J1c3knCiAgXSk7CgogIC8qKgogICAqIGVudW0gQWdlbnRFcnJvclN0YXRlcwogICAqLwogIGNvbm5lY3QuQWdlbnRFcnJvclN0YXRlcyA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ0Vycm9yJywKICAgICdBZ2VudEh1bmdVcCcsCiAgICAnQmFkQWRkcmVzc0FnZW50JywKICAgICdCYWRBZGRyZXNzQ3VzdG9tZXInLAogICAgJ0RlZmF1bHQnLAogICAgJ0ZhaWxlZENvbm5lY3RBZ2VudCcsCiAgICAnRmFpbGVkQ29ubmVjdEN1c3RvbWVyJywKICAgICdJbnZhbGlkTG9jYWxlJywKICAgICdMaW5lRW5nYWdlZEFnZW50JywKICAgICdMaW5lRW5nYWdlZEN1c3RvbWVyJywKICAgICdNaXNzZWRDYWxsQWdlbnQnLAogICAgJ01pc3NlZENhbGxDdXN0b21lcicsCiAgICAnTXVsdGlwbGVDY3BXaW5kb3dzJywKICAgICdSZWFsdGltZUNvbW11bmljYXRpb25FcnJvcicKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBBZGRyZXNzVHlwZQogICAqLwogIGNvbm5lY3QuRW5kcG9pbnRUeXBlID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAncGhvbmVfbnVtYmVyJywKICAgICdhZ2VudCcsCiAgICAncXVldWUnCiAgXSk7CiAgY29ubmVjdC5BZGRyZXNzVHlwZSA9IGNvbm5lY3QuRW5kcG9pbnRUeXBlOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIENvbm5lY3Rpb25UeXBlCiAgICovCiAgY29ubmVjdC5Db25uZWN0aW9uVHlwZSA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ2FnZW50JywKICAgICdpbmJvdW5kJywKICAgICdvdXRib3VuZCcsCiAgICAnbW9uaXRvcmluZycKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBDb25uZWN0aW9uU3RhdGVUeXBlCiAgICovCiAgY29ubmVjdC5Db25uZWN0aW9uU3RhdGVUeXBlID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAnaW5pdCcsCiAgICAnY29ubmVjdGluZycsCiAgICAnY29ubmVjdGVkJywKICAgICdob2xkJywKICAgICdkaXNjb25uZWN0ZWQnCiAgXSk7CiAgY29ubmVjdC5Db25uZWN0aW9uU3RhdHVzVHlwZSA9IGNvbm5lY3QuQ29ubmVjdGlvblN0YXRlVHlwZTsKCiAgY29ubmVjdC5DT05ORUNUSU9OX0FDVElWRV9TVEFURVMgPSBjb25uZWN0LnNldChbCiAgICBjb25uZWN0LkNvbm5lY3Rpb25TdGF0ZVR5cGUuQ09OTkVDVElORywKICAgIGNvbm5lY3QuQ29ubmVjdGlvblN0YXRlVHlwZS5DT05ORUNURUQsCiAgICBjb25uZWN0LkNvbm5lY3Rpb25TdGF0ZVR5cGUuSE9MRAogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIENvbnRhY3RTdGF0ZVR5cGUKICAgKi8KICBjb25uZWN0LkNvbnRhY3RTdGF0ZVR5cGUgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICdpbml0JywKICAgICdpbmNvbWluZycsCiAgICAncGVuZGluZycsCiAgICAnY29ubmVjdGluZycsCiAgICAnY29ubmVjdGVkJywKICAgICdtaXNzZWQnLAogICAgJ2Vycm9yJywKICAgICdlbmRlZCcKICBdKTsKICBjb25uZWN0LkNvbnRhY3RTdGF0dXNUeXBlID0gY29ubmVjdC5Db250YWN0U3RhdGVUeXBlOwoKICBjb25uZWN0LkNPTlRBQ1RfQUNUSVZFX1NUQVRFUyA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ2luY29taW5nJywKICAgICdwZW5kaW5nJywKICAgICdjb25uZWN0aW5nJywKICAgICdjb25uZWN0ZWQnCiAgXSk7CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGVudW0gQ29udGFjdFR5cGUKICAgKi8KICBjb25uZWN0LkNvbnRhY3RUeXBlID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAndm9pY2UnLAogICAgJ3F1ZXVlX2NhbGxiYWNrJywKICAgICdjaGF0JywKICAgICd0YXNrJwogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIENvbnRhY3RJbml0aWF0aW9uTWV0aG9kCiAgICovCiAgY29ubmVjdC5Db250YWN0SW5pdGlhdGlvbk1ldGhvZCA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ2luYm91bmQnLAogICAgJ291dGJvdW5kJywKICAgICd0cmFuc2ZlcicsCiAgICAncXVldWVfdHJhbnNmZXInLAogICAgJ2NhbGxiYWNrJywKICAgICdhcGknLAogICAgJ2Rpc2Nvbm5lY3QnCiAgXSk7CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICogZW51bSBDaGFubmVsVHlwZQogICovCiAgY29ubmVjdC5DaGFubmVsVHlwZSA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ1ZPSUNFJywKICAgICdDSEFUJywKICAgICdUQVNLJwogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAqIGVudW0gTWVkaWFUeXBlCiAgKi8KICBjb25uZWN0Lk1lZGlhVHlwZSA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ3NvZnRwaG9uZScsCiAgICAnY2hhdCcsCiAgICAndGFzaycKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBTb2Z0cGhvbmVDYWxsVHlwZQogICAqLwogIGNvbm5lY3QuU29mdHBob25lQ2FsbFR5cGUgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICdhdWRpb192aWRlbycsCiAgICAndmlkZW9fb25seScsCiAgICAnYXVkaW9fb25seScsCiAgICAnbm9uZScKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBmb3IgU29mdHBob25lRXJyb3JUeXBlcwogICAqLwogIGNvbm5lY3QuU29mdHBob25lRXJyb3JUeXBlcyA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgJ3Vuc3VwcG9ydGVkX2Jyb3dzZXInLAogICAgJ21pY3JvcGhvbmVfbm90X3NoYXJlZCcsCiAgICAnc2lnbmFsbGluZ19oYW5kc2hha2VfZmFpbHVyZScsCiAgICAnc2lnbmFsbGluZ19jb25uZWN0aW9uX2ZhaWx1cmUnLAogICAgJ2ljZV9jb2xsZWN0aW9uX3RpbWVvdXQnLAogICAgJ3VzZXJfYnVzeV9lcnJvcicsCiAgICAnd2VicnRjX2Vycm9yJywKICAgICdyZWFsdGltZV9jb21tdW5pY2F0aW9uX2Vycm9yJywKICAgICdvdGhlcicKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBmb3IgVm9pY2VJZEVycm9yVHlwZXMKICAgKi8KICBjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAnbm9fc3BlYWtlcl9pZF9mb3VuZCcsCiAgICAnc3BlYWtlcl9pZF9ub3RfZW5yb2xsZWQnLAogICAgJ2dldF9zcGVha2VyX2lkX2ZhaWxlZCcsCiAgICAnZ2V0X3NwZWFrZXJfc3RhdHVzX2ZhaWxlZCcsCiAgICAnb3B0X291dF9zcGVha2VyX2ZhaWxlZCcsCiAgICAnb3B0X291dF9zcGVha2VyX2luX2xjbXNfZmFpbGVkJywKICAgICdkZWxldGVfc3BlYWtlcl9mYWlsZWQnLAogICAgJ3N0YXJ0X3Nlc3Npb25fZmFpbGVkJywKICAgICdldmFsdWF0ZV9zcGVha2VyX2ZhaWxlZCcsCiAgICAnc2Vzc2lvbl9ub3RfZXhpc3RzJywKICAgICdkZXNjcmliZV9zZXNzaW9uX2ZhaWxlZCcsCiAgICAnZW5yb2xsX3NwZWFrZXJfZmFpbGVkJywKICAgICd1cGRhdGVfc3BlYWtlcl9pZF9mYWlsZWQnLAogICAgJ3VwZGF0ZV9zcGVha2VyX2lkX2luX2xjbXNfZmFpbGVkJywKICAgICdub3Rfc3VwcG9ydGVkX29uX2NvbmZlcmVuY2VfY2FsbHMnLAogICAgJ2Vucm9sbF9zcGVha2VyX3RpbWVvdXQnLAogICAgJ2V2YWx1YXRlX3NwZWFrZXJfdGltZW91dCcsCiAgICAnZ2V0X2RvbWFpbl9pZF9mYWlsZWQnLAogICAgJ25vX2RvbWFpbl9pZF9mb3VuZCcKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBmb3IgQ1RJIGV4Y2VwdGlvbnMKICAgKi8KICBjb25uZWN0LkNUSUV4Y2VwdGlvbnMgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICJBY2Nlc3NEZW5pZWRFeGNlcHRpb24iLAogICAgIkludmFsaWRTdGF0ZUV4Y2VwdGlvbiIsCiAgICAiQmFkRW5kcG9pbnRFeGNlcHRpb24iLAogICAgIkludmFsaWRBZ2VudEFSTkV4Y2VwdGlvbiIsCiAgICAiSW52YWxpZENvbmZpZ3VyYXRpb25FeGNlcHRpb24iLAogICAgIkludmFsaWRDb250YWN0VHlwZUV4Y2VwdGlvbiIsCiAgICAiUGFnaW5hdGlvbkV4Y2VwdGlvbiIsCiAgICAiUmVmcmVzaFRva2VuRXhwaXJlZEV4Y2VwdGlvbiIsCiAgICAiU2VuZERhdGFGYWlsZWRFeGNlcHRpb24iLAogICAgIlVuYXV0aG9yaXplZEV4Y2VwdGlvbiIsCiAgICAiUXVvdGFFeGNlZWRlZEV4Y2VwdGlvbiIKICBdKTsKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIGZvciBWb2ljZUlkIHN0cmVhbWluZyBzdGF0dXMKICAgKi8KICBjb25uZWN0LlZvaWNlSWRTdHJlYW1pbmdTdGF0dXMgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICJPTkdPSU5HIiwKICAgICJFTkRFRCIsCiAgICAiUEVORElOR19DT05GSUdVUkFUSU9OIgogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIGZvciBWb2ljZUlkIGF1dGhlbnRpY2F0aW9uIGRlY2lzaW9uCiAgICovCiAgY29ubmVjdC5Wb2ljZUlkQXV0aGVudGljYXRpb25EZWNpc2lvbiA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgIkFDQ0VQVCIsCiAgICAiUkVKRUNUIiwKICAgICJOT1RfRU5PVUdIX1NQRUVDSCIsCiAgICAiU1BFQUtFUl9OT1RfRU5ST0xMRUQiLAogICAgIlNQRUFLRVJfT1BURURfT1VUIiwKICAgICJTUEVBS0VSX0lEX05PVF9QUk9WSURFRCIsCiAgICAiU1BFQUtFUl9FWFBJUkVEIgogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIGZvciBWb2ljZUlkIGZyYXVkIGRldGVjdGlvbiBkZWNpc2lvbgogICAqLwogIGNvbm5lY3QuVm9pY2VJZEZyYXVkRGV0ZWN0aW9uRGVjaXNpb24gPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICJOT1RfRU5PVUdIX1NQRUVDSCIsCiAgICAiSElHSF9SSVNLIiwKICAgICJMT1dfUklTSyIKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBmb3IgY29udGFjdCBmbG93IGF1dGhlbnRpY2F0aW9uIGRlY2lzaW9uIAogICAqLwogIGNvbm5lY3QuQ29udGFjdEZsb3dBdXRoZW50aWNhdGlvbkRlY2lzaW9uID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAiQXV0aGVudGljYXRlZCIsCiAgICAiTm90QXV0aGVudGljYXRlZCIsCiAgICAiSW5jb25jbHVzaXZlIiwKICAgICJOb3RFbnJvbGxlZCIsCiAgICAiT3B0ZWRPdXQiLAogICAgIk5vdEVuYWJsZWQiLAogICAgIkVycm9yIgogIF0pOwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIGZvciBjb250YWN0IGZsb3cgIGZyYXVkIGRldGVjdGlvbiBkZWNpc2lvbgogICAqLwogIGNvbm5lY3QuQ29udGFjdEZsb3dGcmF1ZERldGVjdGlvbkRlY2lzaW9uID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAiSGlnaFJpc2siLAogICAgIkxvd1Jpc2siLAogICAgIkluY29uY2x1c2l2ZSIsCiAgICAiTm90RW5hYmxlZCIsCiAgICAiRXJyb3IiCiAgXSk7CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGVudW0gZm9yIFZvaWNlSWQgRW5yb2xsbWVudFJlcXVlc3QgU3RhdHVzIAogICAqLwogIGNvbm5lY3QuVm9pY2VJZEVucm9sbG1lbnRSZXF1ZXN0U3RhdHVzID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAiTk9UX0VOT1VHSF9TUEVFQ0giLAogICAgIklOX1BST0dSRVNTIiwKICAgICJDT01QTEVURUQiLAogICAgIkZBSUxFRCIKICBdKTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBmb3IgVm9pY2VJZCBTcGVha2VyIHN0YXR1cwogICAqLwogIGNvbm5lY3QuVm9pY2VJZFNwZWFrZXJTdGF0dXMgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICJPUFRFRF9PVVQiLAogICAgIkVOUk9MTEVEIiwKICAgICJQRU5ESU5HIgogIF0pOwoKICBjb25uZWN0LlZvaWNlSWRDb25zdGFudHMgPSB7CiAgICBFVkFMVUFURV9TRVNTSU9OX0RFTEFZOiAxMDAwMCwKICAgIEVWQUxVQVRJT05fTUFYX1BPTExfVElNRVM6IDI0LCAvLyBFdmFsdWF0ZVNwZWFrZXIgaXMgUG9sbGluZyBmb3IgbWF4aW11bSAyIG1pbnMuCiAgICBFVkFMVUFUSU9OX1BPTExJTkdfSU5URVJWQUw6IDUwMDAsCiAgICBFTlJPTExNRU5UX01BWF9QT0xMX1RJTUVTOiAxMjAsIC8vIEVucm9sbG1lbnRTcGVha2VyIGlzIFBvbGxpbmcgZm9yIG1heGltdW0gMTAgbWlucy4KICAgIEVOUk9MTE1FTlRfUE9MTElOR19JTlRFUlZBTDogNTAwMCwKICAgIFNUQVJUX1NFU1NJT05fREVMQVk6IDgwMDAKICB9CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGNvbnN0YW50cyBmb3IgQWdlbnRQZXJtaXNzaW9ucwogICAqLwogIGNvbm5lY3QuQWdlbnRQZXJtaXNzaW9ucyA9IHsKICAgIE9VVEJPVU5EX0NBTEw6ICdvdXRib3VuZENhbGwnLAogICAgVk9JQ0VfSUQ6ICd2b2ljZUlkJwogIH07CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGNsYXNzIEFnZW50CiAgICovCiAgdmFyIEFnZW50ID0gZnVuY3Rpb24gKCkgewogICAgaWYgKCFjb25uZWN0LmFnZW50LmluaXRpYWxpemVkKSB7CiAgICAgIHRocm93IG5ldyBjb25uZWN0LlN0YXRlRXJyb3IoIlRoZSBhZ2VudCBpcyBub3QgeWV0IGluaXRpYWxpemVkISIpOwogICAgfQogIH07CgogIEFnZW50LnByb3RvdHlwZS5fZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRBZ2VudERhdGEoKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuX2NyZWF0ZUNvbnRhY3RBUEkgPSBmdW5jdGlvbiAoY29udGFjdERhdGEpIHsKICAgIHJldHVybiBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3REYXRhLmNvbnRhY3RJZCk7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLm9uUmVmcmVzaCA9IGZ1bmN0aW9uIChmKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQWdlbnRFdmVudHMuUkVGUkVTSCwgZik7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLm9uUm91dGFibGUgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkFnZW50RXZlbnRzLlJPVVRBQkxFLCBmKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUub25Ob3RSb3V0YWJsZSA9IGZ1bmN0aW9uIChmKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQWdlbnRFdmVudHMuTk9UX1JPVVRBQkxFLCBmKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUub25PZmZsaW5lID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5PRkZMSU5FLCBmKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChmKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQWdlbnRFdmVudHMuRVJST1IsIGYpOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5vblNvZnRwaG9uZUVycm9yID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5TT0ZUUEhPTkVfRVJST1IsIGYpOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5vbldlYlNvY2tldENvbm5lY3Rpb25Mb3N0ID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5XRUJTT0NLRVRfQ09OTkVDVElPTl9MT1NULCBmKTsKICB9CgogIEFnZW50LnByb3RvdHlwZS5vbldlYlNvY2tldENvbm5lY3Rpb25HYWluZWQgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkFnZW50RXZlbnRzLldFQlNPQ0tFVF9DT05ORUNUSU9OX0dBSU5FRCwgZik7CiAgfQoKICBBZ2VudC5wcm90b3R5cGUub25BZnRlckNhbGxXb3JrID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5BQ1csIGYpOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5TVEFURV9DSEFOR0UsIGYpOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5vbk11dGVUb2dnbGUgPSBmdW5jdGlvbiAoZikgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LkFnZW50RXZlbnRzLk1VVEVfVE9HR0xFLCBmKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUub25Mb2NhbE1lZGlhU3RyZWFtQ3JlYXRlZCA9IGZ1bmN0aW9uIChmKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuQWdlbnRFdmVudHMuTE9DQUxfTUVESUFfU1RSRUFNX0NSRUFURUQsIGYpOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5vblNwZWFrZXJEZXZpY2VDaGFuZ2VkID0gZnVuY3Rpb24oZil7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5TUEVBS0VSX0RFVklDRV9DSEFOR0VELCBmKTsKICB9CgogIEFnZW50LnByb3RvdHlwZS5vbk1pY3JvcGhvbmVEZXZpY2VDaGFuZ2VkID0gZnVuY3Rpb24oZil7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5NSUNST1BIT05FX0RFVklDRV9DSEFOR0VELCBmKTsKICB9CgogIEFnZW50LnByb3RvdHlwZS5vblJpbmdlckRldmljZUNoYW5nZWQgPSBmdW5jdGlvbihmKXsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5Db25maWd1cmF0aW9uRXZlbnRzLlJJTkdFUl9ERVZJQ0VfQ0hBTkdFRCwgZik7CiAgfQoKICBBZ2VudC5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uICgpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsCiAgICAgIHsKICAgICAgICBldmVudDogY29ubmVjdC5FdmVudFR5cGUuTVVURSwKICAgICAgICBkYXRhOiB7IG11dGU6IHRydWUgfQogICAgICB9KTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUudW5tdXRlID0gZnVuY3Rpb24gKCkgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwKICAgICAgewogICAgICAgIGV2ZW50OiBjb25uZWN0LkV2ZW50VHlwZS5NVVRFLAogICAgICAgIGRhdGE6IHsgbXV0ZTogZmFsc2UgfQogICAgICB9KTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuc2V0U3BlYWtlckRldmljZSA9IGZ1bmN0aW9uIChkZXZpY2VJZCkgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5Db25maWd1cmF0aW9uRXZlbnRzLlNFVF9TUEVBS0VSX0RFVklDRSwKICAgICAgZGF0YTogeyBkZXZpY2VJZDogZGV2aWNlSWQgfQogICAgfSk7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLnNldE1pY3JvcGhvbmVEZXZpY2UgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5TRVRfTUlDUk9QSE9ORV9ERVZJQ0UsCiAgICAgIGRhdGE6IHsgZGV2aWNlSWQ6IGRldmljZUlkIH0KICAgIH0pOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5zZXRSaW5nZXJEZXZpY2UgPSBmdW5jdGlvbiAoZGV2aWNlSWQpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5TRVRfUklOR0VSX0RFVklDRSwKICAgICAgZGF0YTogeyBkZXZpY2VJZDogZGV2aWNlSWQgfQogICAgfSk7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5zbmFwc2hvdC5zdGF0ZTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0TmV4dFN0YXRlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5zbmFwc2hvdC5uZXh0U3RhdGU7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLmdldEF2YWlsYWJpbGl0eVN0YXRlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5zbmFwc2hvdC5hZ2VudEF2YWlsYWJpbGl0eVN0YXRlOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5nZXRTdGF0dXMgPSBBZ2VudC5wcm90b3R5cGUuZ2V0U3RhdGU7CgogIEFnZW50LnByb3RvdHlwZS5nZXRTdGF0ZUR1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3Qubm93KCkgLSB0aGlzLl9nZXREYXRhKCkuc25hcHNob3Quc3RhdGUuc3RhcnRUaW1lc3RhbXAuZ2V0VGltZSgpICsgY29ubmVjdC5jb3JlLmdldFNrZXcoKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0U3RhdHVzRHVyYXRpb24gPSBBZ2VudC5wcm90b3R5cGUuZ2V0U3RhdGVEdXJhdGlvbjsKCiAgQWdlbnQucHJvdG90eXBlLmdldFBlcm1pc3Npb25zID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0Q29uZmlndXJhdGlvbigpLnBlcm1pc3Npb25zOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5nZXRDb250YWN0cyA9IGZ1bmN0aW9uIChjb250YWN0VHlwZUZpbHRlcikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5zbmFwc2hvdC5jb250YWN0cy5tYXAoZnVuY3Rpb24gKGNvbnRhY3REYXRhKSB7CiAgICAgIHJldHVybiBzZWxmLl9jcmVhdGVDb250YWN0QVBJKGNvbnRhY3REYXRhKTsKICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY29udGFjdCkgewogICAgICByZXR1cm4gKCFjb250YWN0VHlwZUZpbHRlcikgfHwgY29udGFjdC5nZXRUeXBlKCkgPT09IGNvbnRhY3RUeXBlRmlsdGVyOwogICAgfSk7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YSgpLmNvbmZpZ3VyYXRpb247CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLmdldEFnZW50U3RhdGVzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0Q29uZmlndXJhdGlvbigpLmFnZW50U3RhdGVzOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5nZXRSb3V0aW5nUHJvZmlsZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldENvbmZpZ3VyYXRpb24oKS5yb3V0aW5nUHJvZmlsZTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0Q2hhbm5lbENvbmN1cnJlbmN5ID0gZnVuY3Rpb24gKGNoYW5uZWwpIHsKICAgIHZhciBjaGFubmVsQ29uY3VycmVuY3lNYXAgPSB0aGlzLmdldFJvdXRpbmdQcm9maWxlKCkuY2hhbm5lbENvbmN1cnJlbmN5TWFwOwogICAgaWYgKCFjaGFubmVsQ29uY3VycmVuY3lNYXApIHsKICAgICAgY2hhbm5lbENvbmN1cnJlbmN5TWFwID0gT2JqZWN0LmtleXMoY29ubmVjdC5DaGFubmVsVHlwZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkgewogICAgICAgIC8vIEV4Y2x1ZGUgVEFTSyBmcm9tIGRlZmF1bHQgY29uY3VycmVuY3kuCiAgICAgICAgaWYgKGtleSAhPT0gJ1RBU0snKSB7CiAgICAgICAgICBhY2NbY29ubmVjdC5DaGFubmVsVHlwZVtrZXldXSA9IDE7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIHt9KTsKICAgIH0KICAgIHJldHVybiBjaGFubmVsCiAgICAgID8gKGNoYW5uZWxDb25jdXJyZW5jeU1hcFtjaGFubmVsXSB8fCAwKQogICAgICA6IGNoYW5uZWxDb25jdXJyZW5jeU1hcDsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldENvbmZpZ3VyYXRpb24oKS5uYW1lOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5nZXRFeHRlbnNpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRDb25maWd1cmF0aW9uKCkuZXh0ZW5zaW9uOwogIH07CgogIEFnZW50LnByb3RvdHlwZS5nZXREaWFsYWJsZUNvdW50cmllcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldENvbmZpZ3VyYXRpb24oKS5kaWFsYWJsZUNvdW50cmllczsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuaXNTb2Z0cGhvbmVFbmFibGVkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0Q29uZmlndXJhdGlvbigpLnNvZnRwaG9uZUVuYWJsZWQ7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLnNldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbiwgY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hZ2VudFByZWZlcmVuY2VzICYmICFjb25uZWN0LmlzVmFsaWRMb2NhbGUoY29uZmlndXJhdGlvbi5hZ2VudFByZWZlcmVuY2VzLmxvY2FsZSkpIHsKICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3MuZmFpbHVyZSkgewogICAgICAgIGNhbGxiYWNrcy5mYWlsdXJlKGNvbm5lY3QuQWdlbnRFcnJvclN0YXRlcy5JTlZBTElEX0xPQ0FMRSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5VUERBVEVfQUdFTlRfQ09ORklHVVJBVElPTiwgewogICAgICAgIGNvbmZpZ3VyYXRpb246IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChjb25maWd1cmF0aW9uLCAnY29uZmlndXJhdGlvbicpCiAgICAgIH0sIHsKICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gYXNrIHRoZSBzaGFyZWQgd29ya2VyIHRvIHJlbG9hZCBhZ2VudCBjb25maWcKICAgICAgICAgICAgLy8gb25jZSB3ZSBjaGFuZ2UgaXQgc28gZXZlcnkgdGFiIGhhcyBhY2N1cmF0ZSBjb25maWcuCiAgICAgICAgICAgIHZhciBjb25kdWl0ID0gY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCk7CiAgICAgICAgICAgIGNvbmR1aXQuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLlJFTE9BRF9BR0VOVF9DT05GSUdVUkFUSU9OKTsKCiAgICAgICAgICAgIGlmIChjYWxsYmFja3Muc3VjY2VzcykgewogICAgICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzKGRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZmFpbHVyZTogY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5mYWlsdXJlCiAgICAgIH0pOwogICAgfQogIH07CgogIEFnZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgY2FsbGJhY2tzLCBvcHRpb25zKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLlBVVF9BR0VOVF9TVEFURSwgewogICAgICBzdGF0ZTogY29ubmVjdC5hc3NlcnROb3ROdWxsKHN0YXRlLCAnc3RhdGUnKSwKICAgICAgZW5xdWV1ZU5leHRTdGF0ZTogb3B0aW9ucyAmJiAhIW9wdGlvbnMuZW5xdWV1ZU5leHRTdGF0ZQogICAgfSwgY2FsbGJhY2tzKTsKICB9OwogIEFnZW50LnByb3RvdHlwZS5vbkVucXVldWVkTmV4dFN0YXRlID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5BZ2VudEV2ZW50cy5FTlFVRVVFRF9ORVhUX1NUQVRFLCBmKTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuc2V0U3RhdHVzID0gQWdlbnQucHJvdG90eXBlLnNldFN0YXRlOwoKICBBZ2VudC5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uIChlbmRwb2ludEluLCBwYXJhbXMpIHsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICB2YXIgZW5kcG9pbnQgPSBuZXcgY29ubmVjdC5FbmRwb2ludChlbmRwb2ludEluKTsKICAgIC8vIEhhdmUgdG8gcmVtb3ZlIHRoZSBlbmRwb2ludElkIGZpZWxkIG9yIEFXUyBKUyBTREsgZ2V0cyBtYWQuCiAgICBkZWxldGUgZW5kcG9pbnQuZW5kcG9pbnRJZDsKCiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuQ1JFQVRFX09VVEJPVU5EX0NPTlRBQ1QsIHsKICAgICAgZW5kcG9pbnQ6IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChlbmRwb2ludCwgJ2VuZHBvaW50JyksCiAgICAgIHF1ZXVlQVJOOiAocGFyYW1zICYmIChwYXJhbXMucXVldWVBUk4gfHwgcGFyYW1zLnF1ZXVlSWQpKSB8fCB0aGlzLmdldFJvdXRpbmdQcm9maWxlKCkuZGVmYXVsdE91dGJvdW5kUXVldWUucXVldWVBUk4KICAgIH0sIHBhcmFtcyAmJiB7CiAgICAgICAgc3VjY2VzczogcGFyYW1zLnN1Y2Nlc3MsCiAgICAgICAgZmFpbHVyZTogcGFyYW1zLmZhaWx1cmUKICAgICAgfSk7CiAgfTsKCiAgQWdlbnQucHJvdG90eXBlLmdldEFsbFF1ZXVlQVJOcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldENvbmZpZ3VyYXRpb24oKS5yb3V0aW5nUHJvZmlsZS5xdWV1ZXMubWFwKGZ1bmN0aW9uIChxdWV1ZSkgewogICAgICByZXR1cm4gcXVldWUucXVldWVBUk47CiAgICB9KTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0RW5kcG9pbnRzID0gZnVuY3Rpb24gKHF1ZXVlQVJOcywgY2FsbGJhY2tzLCBwYWdlSW5mb0luKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGNhbGxiYWNrcywgImNhbGxiYWNrcyIpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGNhbGxiYWNrcy5zdWNjZXNzLCAiY2FsbGJhY2tzLnN1Y2Nlc3MiKTsKICAgIHZhciBwYWdlSW5mbyA9IHBhZ2VJbmZvSW4gfHwgeyB9OwoKICAgIHBhZ2VJbmZvLmVuZHBvaW50cyA9IHBhZ2VJbmZvLmVuZHBvaW50cyB8fCBbXTsKICAgIHBhZ2VJbmZvLm1heFJlc3VsdHMgPSBwYWdlSW5mby5tYXhSZXN1bHRzIHx8IGNvbm5lY3QuREVGQVVMVF9CQVRDSF9TSVpFOwoKICAgIC8vIEJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGFsbG93aW5nIGEgc2luZ2xlIHF1ZXVlQVJOIHRvIGJlIHNwZWNpZmllZAogICAgLy8gaW5zdGVhZCBvZiBhbiBhcnJheS4KICAgIGlmICghY29ubmVjdC5pc0FycmF5KHF1ZXVlQVJOcykpIHsKICAgICAgcXVldWVBUk5zID0gW3F1ZXVlQVJOc107CiAgICB9CgogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLkdFVF9FTkRQT0lOVFMsIHsKICAgICAgcXVldWVBUk5zOiBxdWV1ZUFSTnMsCiAgICAgIG5leHRUb2tlbjogcGFnZUluZm8ubmV4dFRva2VuIHx8IG51bGwsCiAgICAgIG1heFJlc3VsdHM6IHBhZ2VJbmZvLm1heFJlc3VsdHMKICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgaWYgKGRhdGEubmV4dFRva2VuKSB7CiAgICAgICAgICAgIHNlbGYuZ2V0RW5kcG9pbnRzKHF1ZXVlQVJOcywgY2FsbGJhY2tzLCB7CiAgICAgICAgICAgICAgbmV4dFRva2VuOiBkYXRhLm5leHRUb2tlbiwKICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBwYWdlSW5mby5tYXhSZXN1bHRzLAogICAgICAgICAgICAgIGVuZHBvaW50czogcGFnZUluZm8uZW5kcG9pbnRzLmNvbmNhdChkYXRhLmVuZHBvaW50cykKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwYWdlSW5mby5lbmRwb2ludHMgPSBwYWdlSW5mby5lbmRwb2ludHMuY29uY2F0KGRhdGEuZW5kcG9pbnRzKTsKICAgICAgICAgICAgdmFyIGVuZHBvaW50cyA9IHBhZ2VJbmZvLmVuZHBvaW50cy5tYXAoZnVuY3Rpb24gKGVuZHBvaW50KSB7CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb25uZWN0LkVuZHBvaW50KGVuZHBvaW50KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYWxsYmFja3Muc3VjY2Vzcyh7CiAgICAgICAgICAgICAgZW5kcG9pbnRzOiBlbmRwb2ludHMsCiAgICAgICAgICAgICAgYWRkcmVzc2VzOiBlbmRwb2ludHMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBmYWlsdXJlOiBjYWxsYmFja3MuZmFpbHVyZQogICAgICB9KTsKICB9OwoKICBBZ2VudC5wcm90b3R5cGUuZ2V0QWRkcmVzc2VzID0gQWdlbnQucHJvdG90eXBlLmdldEVuZHBvaW50czsKCiAgLy9JbnRlcm5hbCBpZGVudGlmaWVyLgogIEFnZW50LnByb3RvdHlwZS5fZ2V0UmVzb3VyY2VJZCA9IGZ1bmN0aW9uKCkgewogICAgcXVldWVBcm5zID0gdGhpcy5nZXRBbGxRdWV1ZUFSTnMoKTsKICAgIGZvciAobGV0IHF1ZXVlQXJuIG9mIHF1ZXVlQXJucykgewogICAgICBjb25zdCBhZ2VudElkTWF0Y2ggPSBxdWV1ZUFybi5tYXRjaCgvXC9hZ2VudFwvKFteL10rKS8pOwogICAgICAKICAgICAgaWYgKGFnZW50SWRNYXRjaCkgewogICAgICAgIHJldHVybiBhZ2VudElkTWF0Y2hbMV07CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBuZXcgRXJyb3IoIkFnZW50LnByb3RvdHlwZS5fZ2V0UmVzb3VyY2VJZDogcXVldWVBcm5zIGRpZCBub3QgY29udGFpbiBhZ2VudFJlc291cmNlSWQ6ICIsIHF1ZXVlQXJucyk7CiAgfQoKICBBZ2VudC5wcm90b3R5cGUudG9TbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBuZXcgY29ubmVjdC5BZ2VudFNuYXBzaG90KHRoaXMuX2dldERhdGEoKSk7CiAgfTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogY2xhc3MgQWdlbnRTbmFwc2hvdAogICAqLwogIHZhciBBZ2VudFNuYXBzaG90ID0gZnVuY3Rpb24gKGFnZW50RGF0YSkgewogICAgY29ubmVjdC5BZ2VudC5jYWxsKHRoaXMpOwogICAgdGhpcy5hZ2VudERhdGEgPSBhZ2VudERhdGE7CiAgfTsKICBBZ2VudFNuYXBzaG90LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQWdlbnQucHJvdG90eXBlKTsKICBBZ2VudFNuYXBzaG90LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFnZW50U25hcHNob3Q7CgogIEFnZW50U25hcHNob3QucHJvdG90eXBlLl9nZXREYXRhID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuYWdlbnREYXRhOwogIH07CgogIEFnZW50U25hcHNob3QucHJvdG90eXBlLl9jcmVhdGVDb250YWN0QVBJID0gZnVuY3Rpb24gKGNvbnRhY3REYXRhKSB7CiAgICByZXR1cm4gbmV3IGNvbm5lY3QuQ29udGFjdFNuYXBzaG90KGNvbnRhY3REYXRhKTsKICB9OwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBjbGFzcyBDb250YWN0CiAgICovCiAgdmFyIENvbnRhY3QgPSBmdW5jdGlvbiAoY29udGFjdElkKSB7CiAgICB0aGlzLmNvbnRhY3RJZCA9IGNvbnRhY3RJZDsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5fZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRDb250YWN0RGF0YSh0aGlzLmdldENvbnRhY3RJZCgpKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5fY3JlYXRlQ29ubmVjdGlvbkFQSSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uRGF0YSkgewogICAgaWYgKHRoaXMuZ2V0VHlwZSgpID09PSBjb25uZWN0LkNvbnRhY3RUeXBlLkNIQVQpIHsKICAgICAgcmV0dXJuIG5ldyBjb25uZWN0LkNoYXRDb25uZWN0aW9uKHRoaXMuY29udGFjdElkLCBjb25uZWN0aW9uRGF0YS5jb25uZWN0aW9uSWQpOwogICAgfSBlbHNlIGlmICh0aGlzLmdldFR5cGUoKSA9PT0gY29ubmVjdC5Db250YWN0VHlwZS5UQVNLKSB7CiAgICAgIHJldHVybiBuZXcgY29ubmVjdC5UYXNrQ29ubmVjdGlvbih0aGlzLmNvbnRhY3RJZCwgY29ubmVjdGlvbkRhdGEuY29ubmVjdGlvbklkKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBuZXcgY29ubmVjdC5Wb2ljZUNvbm5lY3Rpb24odGhpcy5jb250YWN0SWQsIGNvbm5lY3Rpb25EYXRhLmNvbm5lY3Rpb25JZCk7CiAgICB9CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0RXZlbnROYW1lID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgewogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5nZXRDb250YWN0RXZlbnROYW1lKGV2ZW50TmFtZSwgdGhpcy5nZXRDb250YWN0SWQoKSk7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUub25SZWZyZXNoID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUodGhpcy5nZXRFdmVudE5hbWUoY29ubmVjdC5Db250YWN0RXZlbnRzLlJFRlJFU0gpLCBmKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5vbkluY29taW5nID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUodGhpcy5nZXRFdmVudE5hbWUoY29ubmVjdC5Db250YWN0RXZlbnRzLklOQ09NSU5HKSwgZik7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUub25Db25uZWN0aW5nID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUodGhpcy5nZXRFdmVudE5hbWUoY29ubmVjdC5Db250YWN0RXZlbnRzLkNPTk5FQ1RJTkcpLCBmKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5vblBlbmRpbmcgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZSh0aGlzLmdldEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuUEVORElORyksIGYpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLm9uQWNjZXB0ZWQgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZSh0aGlzLmdldEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuQUNDRVBURUQpLCBmKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5vbk1pc3NlZCA9IGZ1bmN0aW9uIChmKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKHRoaXMuZ2V0RXZlbnROYW1lKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5NSVNTRUQpLCBmKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5vbkVuZGVkID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy5zdWJzY3JpYmUodGhpcy5nZXRFdmVudE5hbWUoY29ubmVjdC5Db250YWN0RXZlbnRzLkVOREVEKSwgZik7CiAgICBidXMuc3Vic2NyaWJlKHRoaXMuZ2V0RXZlbnROYW1lKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5ERVNUUk9ZRUQpLCBmKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5vbkRlc3Ryb3kgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZSh0aGlzLmdldEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuREVTVFJPWUVEKSwgZik7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUub25BQ1cgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZSh0aGlzLmdldEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuQUNXKSwgZik7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUub25Db25uZWN0ZWQgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZSh0aGlzLmdldEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuQ09OTkVDVEVEKSwgZik7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChmKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKHRoaXMuZ2V0RXZlbnROYW1lKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5FUlJPUiksIGYpOwogIH0KCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0Q29udGFjdElkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuY29udGFjdElkOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmdldE9yaWdpbmFsQ29udGFjdElkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5pbml0aWFsQ29udGFjdElkOwogIH07CiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0SW5pdGlhbENvbnRhY3RJZCA9IENvbnRhY3QucHJvdG90eXBlLmdldE9yaWdpbmFsQ29udGFjdElkOwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS50eXBlOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmdldENvbnRhY3REdXJhdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5jb250YWN0RHVyYXRpb247CiAgfQoKICBDb250YWN0LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuc3RhdGU7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0U3RhdHVzID0gQ29udGFjdC5wcm90b3R5cGUuZ2V0U3RhdGU7CgogIENvbnRhY3QucHJvdG90eXBlLmdldFN0YXRlRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5ub3coKSAtIHRoaXMuX2dldERhdGEoKS5zdGF0ZS50aW1lc3RhbXAuZ2V0VGltZSgpICsgY29ubmVjdC5jb3JlLmdldFNrZXcoKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRTdGF0dXNEdXJhdGlvbiA9IENvbnRhY3QucHJvdG90eXBlLmdldFN0YXRlRHVyYXRpb247CgogIENvbnRhY3QucHJvdG90eXBlLmdldFF1ZXVlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5xdWV1ZTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRRdWV1ZVRpbWVzdGFtcCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkucXVldWVUaW1lc3RhbXA7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YSgpLmNvbm5lY3Rpb25zLm1hcChmdW5jdGlvbiAoY29ubkRhdGEpIHsKICAgICAgaWYgKHNlbGYuZ2V0VHlwZSgpID09PSBjb25uZWN0LkNvbnRhY3RUeXBlLkNIQVQpIHsKICAgICAgICByZXR1cm4gbmV3IGNvbm5lY3QuQ2hhdENvbm5lY3Rpb24oc2VsZi5jb250YWN0SWQsIGNvbm5EYXRhLmNvbm5lY3Rpb25JZCk7CiAgICAgIH0gZWxzZSBpZiAoc2VsZi5nZXRUeXBlKCkgPT09IGNvbm5lY3QuQ29udGFjdFR5cGUuVEFTSykgewogICAgICAgIHJldHVybiBuZXcgY29ubmVjdC5UYXNrQ29ubmVjdGlvbihzZWxmLmNvbnRhY3RJZCwgY29ubkRhdGEuY29ubmVjdGlvbklkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbmV3IGNvbm5lY3QuVm9pY2VDb25uZWN0aW9uKHNlbGYuY29udGFjdElkLCBjb25uRGF0YS5jb25uZWN0aW9uSWQpOwogICAgICB9CiAgICB9KTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRJbml0aWFsQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmZpbmQodGhpcy5nZXRDb25uZWN0aW9ucygpLCBmdW5jdGlvbiAoY29ubikgewogICAgICByZXR1cm4gY29ubi5pc0luaXRpYWxDb25uZWN0aW9uKCk7CiAgICB9KSB8fCBudWxsOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmdldEFjdGl2ZUluaXRpYWxDb25uZWN0aW9uID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGluaXRpYWxDb25uID0gdGhpcy5nZXRJbml0aWFsQ29ubmVjdGlvbigpOwogICAgaWYgKGluaXRpYWxDb25uICE9IG51bGwgJiYgaW5pdGlhbENvbm4uaXNBY3RpdmUoKSkgewogICAgICByZXR1cm4gaW5pdGlhbENvbm47CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRUaGlyZFBhcnR5Q29ubmVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRDb25uZWN0aW9ucygpLmZpbHRlcihmdW5jdGlvbiAoY29ubikgewogICAgICByZXR1cm4gIWNvbm4uaXNJbml0aWFsQ29ubmVjdGlvbigpICYmIGNvbm4uZ2V0VHlwZSgpICE9PSBjb25uZWN0LkNvbm5lY3Rpb25UeXBlLkFHRU5UOwogICAgfSk7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0U2luZ2xlQWN0aXZlVGhpcmRQYXJ0eUNvbm5lY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRUaGlyZFBhcnR5Q29ubmVjdGlvbnMoKS5maWx0ZXIoZnVuY3Rpb24gKGNvbm4pIHsKICAgICAgcmV0dXJuIGNvbm4uaXNBY3RpdmUoKTsKICAgIH0pWzBdIHx8IG51bGw7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0QWdlbnRDb25uZWN0aW9uID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QuZmluZCh0aGlzLmdldENvbm5lY3Rpb25zKCksIGZ1bmN0aW9uIChjb25uKSB7CiAgICAgIHZhciBjb25uVHlwZSA9IGNvbm4uZ2V0VHlwZSgpOwogICAgICByZXR1cm4gY29ublR5cGUgPT09IGNvbm5lY3QuQ29ubmVjdGlvblR5cGUuQUdFTlQgfHwgY29ublR5cGUgPT09IGNvbm5lY3QuQ29ubmVjdGlvblR5cGUuTU9OSVRPUklORzsKICAgIH0pOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YSgpLm5hbWU7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0Q29udGFjdE1ldGFkYXRhID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5jb250YWN0TWV0YWRhdGE7CiAgfQoKICBDb250YWN0LnByb3RvdHlwZS5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuZGVzY3JpcHRpb247CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuZ2V0UmVmZXJlbmNlcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkucmVmZXJlbmNlczsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5hdHRyaWJ1dGVzOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmdldENvbnRhY3RGZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuY29udGFjdEZlYXR1cmVzOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmlzU29mdHBob25lQ2FsbCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmZpbmQodGhpcy5nZXRDb25uZWN0aW9ucygpLCBmdW5jdGlvbiAoY29ubikgewogICAgICByZXR1cm4gY29ubi5nZXRTb2Z0cGhvbmVNZWRpYUluZm8oKSAhPSBudWxsOwogICAgfSkgIT0gbnVsbDsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5faXNJbmJvdW5kID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGluaXRpYXRpb25NZXRob2QgPSB0aGlzLl9nZXREYXRhKCkuaW5pdGlhdGlvbk1ldGhvZDsKICAgIHJldHVybiAoaW5pdGlhdGlvbk1ldGhvZCA9PT0gY29ubmVjdC5Db250YWN0SW5pdGlhdGlvbk1ldGhvZC5PVVRCT1VORCkgPyBmYWxzZSA6IHRydWU7CiAgfQoKICBDb250YWN0LnByb3RvdHlwZS5pc0luYm91bmQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29ubiA9IHRoaXMuZ2V0SW5pdGlhbENvbm5lY3Rpb24oKTsKCiAgICAvLyBXZSB3aWxsIGdyYWR1YWxseSBjaGFuZ2UgY2hlY2tpbmcgaW5ib3VuZCBieSByZWx5aW5nIG9uIGNvbnRhY3QgaW5pdGlhdGlvbk1ldGhvZAogICAgaWYgKGNvbm4uZ2V0TWVkaWFUeXBlKCkgPT09IGNvbm5lY3QuTWVkaWFUeXBlLlRBU0spIHsKICAgICAgcmV0dXJuIHRoaXMuX2lzSW5ib3VuZCgpOwogICAgfQoKICAgIHJldHVybiBjb25uID8gY29ubi5nZXRUeXBlKCkgPT09IGNvbm5lY3QuQ29ubmVjdGlvblR5cGUuSU5CT1VORCA6IGZhbHNlOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLkNPTk5FQ1RFRDsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGNvbnRhY3RJZCA9IHRoaXMuZ2V0Q29udGFjdElkKCk7CiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuQUNDRVBUX0NPTlRBQ1QsIHsKICAgICAgY29udGFjdElkOiBjb250YWN0SWQKICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgdmFyIGNvbmR1aXQgPSBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKTsKICAgICAgICAgIGNvbmR1aXQuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICAgICAgICBldmVudDogY29ubmVjdC5Db250YWN0RXZlbnRzLkFDQ0VQVEVELAogICAgICAgICAgICBkYXRhOiBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3RJZCkKICAgICAgICAgIH0pOwogICAgICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgICAgICAgIGV2ZW50OiBjb25uZWN0LmNvcmUuZ2V0Q29udGFjdEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuQUNDRVBURUQsIHNlbGYuZ2V0Q29udGFjdElkKCkpLAogICAgICAgICAgICBkYXRhOiBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3RJZCkKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIEluIEZpcmVmb3gsIHRoZXJlJ3MgYSBicm93c2VyIHJlc3RyaWN0aW9uIHRoYXQgYW4gdW5mb2N1c2VkIGJyb3dzZXIgdGFiIGlzIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyB0aGUgdXNlcidzIG1pY3JvcGhvbmUuCiAgICAgICAgICAvLyBUaGUgcHJvYmxlbSBpcyB0aGF0IHRoZSByZXN0cmljdGlvbiBjb3VsZCBjYXVzZSBhIHdlYnJ0YyBzZXNzaW9uIGNyZWF0aW9uIHRpbWVvdXQgZXJyb3Igd2hlbiB5b3UgZ2V0IGFuIGluY29taW5nIGNhbGwgd2hpbGUgeW91IGFyZSBub3Qgb24gdGhlIHByaW1hcnkgdGFiLgogICAgICAgICAgLy8gSXQgd2FzIGhhcmQgdG8gd29ya2Fyb3VuZCB0aGUgaXNzdWUgZXNwZWNpYWxseSB3aGVuIHlvdSBoYXZlIG11bHRpcGxlIHRhYnMgb3BlbiBiZWNhdXNlIHlvdSBuZWVkZWQgdG8gZmluZCB0aGUgcmlnaHQgdGFiIGFuZCBhY2NlcHQgdGhlIGNvbnRhY3QgYmVmb3JlIHRoZSB0aW1lb3V0LgogICAgICAgICAgLy8gVG8gYXZvaWQgdGhlIGVycm9yLCB3aGVuIG11bHRpcGxlIHRhYnMgYXJlIG9wZW4gaW4gRmlyZWZveCwgYSB3ZWJydGMgc2Vzc2lvbiBpcyBub3QgaW1tZWRpYXRlbHkgY3JlYXRlZCBhcyBhbiBpbmNvbWluZyBzb2Z0cGhvbmUgY29udGFjdCBpcyBkZXRlY3RlZC4KICAgICAgICAgIC8vIEluc3RlYWQsIGl0IHdhaXRzIHVudGlsIGNvbnRhY3QuYWNjZXB0KCkgaXMgY2FsbGVkIG9uIGEgdGFiIGFuZCBsZXRzIHRoZSB0YWIgYmVjb21lIHRoZSBuZXcgcHJpbWFyeSB0YWIgYW5kIHN0YXJ0IHRoZSB3ZWIgcnRjIHNlc3Npb24gdGhlcmUKICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIHRhYiBzaG91bGQgYmUgZm9jdXNlZCBhdCB0aGUgbW9tZW50IGFuZCBoYXZlIGFjY2VzcyB0byB0aGUgdXNlcidzIG1pY3JvcGhvbmUuCiAgICAgICAgICB2YXIgY29udGFjdCA9IG5ldyBjb25uZWN0LkNvbnRhY3QoY29udGFjdElkKTsKICAgICAgICAgIGlmIChjb25uZWN0LmlzRmlyZWZveEJyb3dzZXIoKSAmJiBjb250YWN0LmlzU29mdHBob25lQ2FsbCgpKSB7CiAgICAgICAgICAgIGNvbm5lY3QuY29yZS50cmlnZ2VyUmVhZHlUb1N0YXJ0U2Vzc2lvbkV2ZW50KCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Muc3VjY2VzcykgewogICAgICAgICAgICBjYWxsYmFja3Muc3VjY2VzcyhkYXRhKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGNhbGxiYWNrcyA/IGNhbGxiYWNrcy5mYWlsdXJlIDogbnVsbAogICAgICB9KTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJjb250YWN0LmRlc3Ryb3koKSBoYXMgYmVlbiBkZXByZWNhdGVkLiIpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuUkVKRUNUX0NPTlRBQ1QsIHsKICAgICAgY29udGFjdElkOiB0aGlzLmdldENvbnRhY3RJZCgpCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5DT01QTEVURV9DT05UQUNULCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKQogICAgfSwgY2FsbGJhY2tzKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuQ0xFQVJfQ09OVEFDVCwgewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCkKICAgIH0sIGNhbGxiYWNrcyk7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUubm90aWZ5SXNzdWUgPSBmdW5jdGlvbiAoaXNzdWVDb2RlLCBkZXNjcmlwdGlvbiwgY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLk5PVElGWV9DT05UQUNUX0lTU1VFLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgaXNzdWVDb2RlOiBpc3N1ZUNvZGUsCiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbgogICAgfSwgY2FsbGJhY2tzKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS5hZGRDb25uZWN0aW9uID0gZnVuY3Rpb24gKGVuZHBvaW50SW4sIGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHZhciBlbmRwb2ludCA9IG5ldyBjb25uZWN0LkVuZHBvaW50KGVuZHBvaW50SW4pOwogICAgLy8gSGF2ZSB0byByZW1vdmUgdGhlIGVuZHBvaW50SWQgZmllbGQgb3IgQVdTIEpTIFNESyBnZXRzIG1hZC4KICAgIGRlbGV0ZSBlbmRwb2ludC5lbmRwb2ludElkOwoKICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5DUkVBVEVfQURESVRJT05BTF9DT05ORUNUSU9OLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgZW5kcG9pbnQ6IGVuZHBvaW50CiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLnRvZ2dsZUFjdGl2ZUNvbm5lY3Rpb25zID0gZnVuY3Rpb24gKGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHZhciBjb25uZWN0aW9uSWQgPSBudWxsOwogICAgdmFyIGhvbGRpbmdDb25uID0gY29ubmVjdC5maW5kKHRoaXMuZ2V0Q29ubmVjdGlvbnMoKSwgZnVuY3Rpb24gKGNvbm4pIHsKICAgICAgcmV0dXJuIGNvbm4uZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db25uZWN0aW9uU3RhdGVUeXBlLkhPTEQ7CiAgICB9KTsKCiAgICBpZiAoaG9sZGluZ0Nvbm4gIT0gbnVsbCkgewogICAgICBjb25uZWN0aW9uSWQgPSBob2xkaW5nQ29ubi5nZXRDb25uZWN0aW9uSWQoKTsKCiAgICB9IGVsc2UgewogICAgICB2YXIgYWN0aXZlQ29ubnMgPSB0aGlzLmdldENvbm5lY3Rpb25zKCkuZmlsdGVyKGZ1bmN0aW9uIChjb25uKSB7CiAgICAgICAgcmV0dXJuIGNvbm4uaXNBY3RpdmUoKTsKICAgICAgfSk7CiAgICAgIGlmIChhY3RpdmVDb25ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgY29ubmVjdGlvbklkID0gYWN0aXZlQ29ubnNbMF0uZ2V0Q29ubmVjdGlvbklkKCk7CiAgICAgIH0KICAgIH0KCiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuVE9HR0xFX0FDVElWRV9DT05ORUNUSU9OUywgewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNvbm5lY3Rpb25JZDogY29ubmVjdGlvbklkCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLnNlbmRTb2Z0cGhvbmVNZXRyaWNzID0gZnVuY3Rpb24gKHNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3MsIGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKCiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuU0VORF9TT0ZUUEhPTkVfQ0FMTF9NRVRSSUNTLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgY2NwVmVyc2lvbjogZ2xvYmFsLmNjcFZlcnNpb24sCiAgICAgIHNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3M6IHNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3MKICAgIH0sIGNhbGxiYWNrcyk7CgogICAgY29ubmVjdC5wdWJsaXNoU29mdHBob25lU3RhdHMoewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNjcFZlcnNpb246IGdsb2JhbC5jY3BWZXJzaW9uLAogICAgICBzdGF0czogc29mdHBob25lU3RyZWFtU3RhdGlzdGljcwogICAgfSk7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuc2VuZFNvZnRwaG9uZVJlcG9ydCA9IGZ1bmN0aW9uIChyZXBvcnQsIGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5TRU5EX1NPRlRQSE9ORV9DQUxMX1JFUE9SVCwgewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNjcFZlcnNpb246IGdsb2JhbC5jY3BWZXJzaW9uLAogICAgICByZXBvcnQ6IHJlcG9ydAogICAgfSwgY2FsbGJhY2tzKTsKCiAgICBjb25uZWN0LnB1Ymxpc2hTb2Z0cGhvbmVSZXBvcnQoewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNjcFZlcnNpb246IGdsb2JhbC5jY3BWZXJzaW9uLAogICAgICByZXBvcnQ6IHJlcG9ydAogICAgfSk7CiAgfTsKCiAgQ29udGFjdC5wcm90b3R5cGUuY29uZmVyZW5jZUNvbm5lY3Rpb25zID0gZnVuY3Rpb24gKGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5DT05GRVJFTkNFX0NPTk5FQ1RJT05TLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKQogICAgfSwgY2FsbGJhY2tzKTsKICB9OwoKICBDb250YWN0LnByb3RvdHlwZS50b1NuYXBzaG90ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIG5ldyBjb25uZWN0LkNvbnRhY3RTbmFwc2hvdCh0aGlzLl9nZXREYXRhKCkpOwogIH07CgogIENvbnRhY3QucHJvdG90eXBlLmlzTXVsdGlQYXJ0eUNvbmZlcmVuY2VFbmFibGVkID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbnRhY3RGZWF0dXJlcyA9IHRoaXMuZ2V0Q29udGFjdEZlYXR1cmVzKCk7CiAgICByZXR1cm4gISEoY29udGFjdEZlYXR1cmVzICYmIGNvbnRhY3RGZWF0dXJlcy5tdWx0aVBhcnR5Q29uZmVyZW5jZUVuYWJsZWQpOwogIH0KCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogY2xhc3MgQ29udGFjdFNuYXBzaG90CiAgICovCiAgdmFyIENvbnRhY3RTbmFwc2hvdCA9IGZ1bmN0aW9uIChjb250YWN0RGF0YSkgewogICAgY29ubmVjdC5Db250YWN0LmNhbGwodGhpcywgY29udGFjdERhdGEuY29udGFjdElkKTsKICAgIHRoaXMuY29udGFjdERhdGEgPSBjb250YWN0RGF0YTsKICB9OwogIENvbnRhY3RTbmFwc2hvdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbnRhY3QucHJvdG90eXBlKTsKICBDb250YWN0U25hcHNob3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29udGFjdFNuYXBzaG90OwoKICBDb250YWN0U25hcHNob3QucHJvdG90eXBlLl9nZXREYXRhID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuY29udGFjdERhdGE7CiAgfTsKCiAgQ29udGFjdFNuYXBzaG90LnByb3RvdHlwZS5fY3JlYXRlQ29ubmVjdGlvbkFQSSA9IGZ1bmN0aW9uIChjb25uZWN0aW9uRGF0YSkgewogICAgcmV0dXJuIG5ldyBjb25uZWN0LkNvbm5lY3Rpb25TbmFwc2hvdChjb25uZWN0aW9uRGF0YSk7CiAgfTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogY2xhc3MgQ29ubmVjdGlvbgogICAqLwogIHZhciBDb25uZWN0aW9uID0gZnVuY3Rpb24gKGNvbnRhY3RJZCwgY29ubmVjdGlvbklkKSB7CiAgICB0aGlzLmNvbnRhY3RJZCA9IGNvbnRhY3RJZDsKICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkOwogICAgdGhpcy5faW5pdE1lZGlhQ29udHJvbGxlcigpOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLl9nZXREYXRhID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5nZXRBZ2VudERhdGFQcm92aWRlcigpLmdldENvbm5lY3Rpb25EYXRhKAogICAgICB0aGlzLmdldENvbnRhY3RJZCgpLCB0aGlzLmdldENvbm5lY3Rpb25JZCgpKTsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRDb250YWN0SWQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5jb250YWN0SWQ7CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0Q29ubmVjdGlvbklkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuY29ubmVjdGlvbklkOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldEVuZHBvaW50ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIG5ldyBjb25uZWN0LkVuZHBvaW50KHRoaXMuX2dldERhdGEoKS5lbmRwb2ludCk7CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0QWRkcmVzcyA9IENvbm5lY3Rpb24ucHJvdG90eXBlLmdldEVuZHBvaW50OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuc3RhdGU7CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHVzID0gQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdGU7CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRlRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5ub3coKSAtIHRoaXMuX2dldERhdGEoKS5zdGF0ZS50aW1lc3RhbXAuZ2V0VGltZSgpICsgY29ubmVjdC5jb3JlLmdldFNrZXcoKTsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0dXNEdXJhdGlvbiA9IENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRlRHVyYXRpb247CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFR5cGUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YSgpLnR5cGU7CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNJbml0aWFsQ29ubmVjdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuaW5pdGlhbDsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvbnRhaW5zKGNvbm5lY3QuQ09OTkVDVElPTl9BQ1RJVkVfU1RBVEVTLCB0aGlzLmdldFN0YXR1cygpLnR5cGUpOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db25uZWN0aW9uU3RhdGVUeXBlLkNPTk5FQ1RFRDsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5pc0Nvbm5lY3RpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5nZXRTdGF0dXMoKS50eXBlID09PSBjb25uZWN0LkNvbm5lY3Rpb25TdGF0ZVR5cGUuQ09OTkVDVElORzsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5pc09uSG9sZCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmdldFN0YXR1cygpLnR5cGUgPT09IGNvbm5lY3QuQ29ubmVjdGlvblN0YXRlVHlwZS5IT0xEOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNvZnRwaG9uZU1lZGlhSW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkuc29mdHBob25lTWVkaWFJbmZvOwogIH07CgogIC8qKgogICAqIEdldHMgdGhlIGN1cnJlbnRseSBtb25pdG9yZWQgY29udGFjdCBpbmZvLCBSZXR1cm5zIG51bGwgaWYgZG9lcyBub3QgZXhpc3RzLgogICAqIEByZXR1cm4ge3thZ2VudE5hbWU6c3RyaW5nLCBjdXN0b21lck5hbWU6c3RyaW5nLCBqb2luVGltZTpEYXRlfX0KICAgKi8KICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRNb25pdG9ySW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9nZXREYXRhKCkubW9uaXRvcmluZ0luZm87CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuREVTVFJPWV9DT05ORUNUSU9OLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgY29ubmVjdGlvbklkOiB0aGlzLmdldENvbm5lY3Rpb25JZCgpCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLnNlbmREaWdpdHMgPSBmdW5jdGlvbiAoZGlnaXRzLCBjYWxsYmFja3MpIHsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuU0VORF9ESUdJVFMsIHsKICAgICAgY29udGFjdElkOiB0aGlzLmdldENvbnRhY3RJZCgpLAogICAgICBjb25uZWN0aW9uSWQ6IHRoaXMuZ2V0Q29ubmVjdGlvbklkKCksCiAgICAgIGRpZ2l0czogZGlnaXRzCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLmhvbGQgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLkhPTERfQ09OTkVDVElPTiwgewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNvbm5lY3Rpb25JZDogdGhpcy5nZXRDb25uZWN0aW9uSWQoKQogICAgfSwgY2FsbGJhY2tzKTsKICB9OwoKICBDb25uZWN0aW9uLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLlJFU1VNRV9DT05ORUNUSU9OLCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgY29ubmVjdGlvbklkOiB0aGlzLmdldENvbm5lY3Rpb25JZCgpCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIENvbm5lY3Rpb24ucHJvdG90eXBlLnRvU25hcHNob3QgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gbmV3IGNvbm5lY3QuQ29ubmVjdGlvblNuYXBzaG90KHRoaXMuX2dldERhdGEoKSk7CiAgfTsKCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX2luaXRNZWRpYUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAodGhpcy5nZXRNZWRpYUluZm8oKSkgewogICAgICBjb25uZWN0LmNvcmUubWVkaWFGYWN0b3J5LmdldCh0aGlzKS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pOwogICAgfQogIH0KCiAgLy8gTWV0aG9kIGZvciBjaGVja2luZyB3aGV0aGVyIHRoaXMgY29ubmVjdGlvbiBpcyBhbiBhZ2VudC1zaWRlIGNvbm5lY3Rpb24gCiAgLy8gKHR5cGUgQUdFTlQgb3IgTU9OSVRPUklORykKICBDb25uZWN0aW9uLnByb3RvdHlwZS5faXNBZ2VudENvbm5lY3Rpb25UeXBlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbm5lY3Rpb25UeXBlID0gdGhpcy5nZXRUeXBlKCk7CiAgICByZXR1cm4gY29ubmVjdGlvblR5cGUgPT09IGNvbm5lY3QuQ29ubmVjdGlvblR5cGUuQUdFTlQgCiAgICAgIHx8IGNvbm5lY3Rpb25UeXBlID09PSBjb25uZWN0LkNvbm5lY3Rpb25UeXBlLk1PTklUT1JJTkc7CiAgfQoKICAvKioKICAgKiBVdGlsaXR5IG1ldGhvZCBmb3IgY2hlY2tpbmcgd2hldGhlciB0aGlzIGNvbm5lY3Rpb24gaXMgYW4gYWdlbnQtc2lkZSBjb25uZWN0aW9uIAogICAqICh0eXBlIEFHRU5UIG9yIE1PTklUT1JJTkcpCiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIGNvbm5lY3Rpb24gaXMgYW4gYWdlbnQtc2lkZSBjb25uZWN0aW9uLiBGYWxzZSBvdGhlcndpc2UuCiAgICovCiAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX2lzQWdlbnRDb25uZWN0aW9uVHlwZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBjb25uZWN0aW9uVHlwZSA9IHRoaXMuZ2V0VHlwZSgpOwogICAgcmV0dXJuIGNvbm5lY3Rpb25UeXBlID09PSBjb25uZWN0LkNvbm5lY3Rpb25UeXBlLkFHRU5UIAogICAgICB8fCBjb25uZWN0aW9uVHlwZSA9PT0gY29ubmVjdC5Db25uZWN0aW9uVHlwZS5NT05JVE9SSU5HOwogIH0KCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKiBWb2ljZSBhdXRoZW50aWNhdG9yIFZvaWNlSWQKICAqLwogCiAgdmFyIFZvaWNlSWQgPSBmdW5jdGlvbiAoY29udGFjdElkKSB7CiAgICB0aGlzLmNvbnRhY3RJZCA9IGNvbnRhY3RJZDsKICB9OwoKICBWb2ljZUlkLnByb3RvdHlwZS5nZXRTcGVha2VySWQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmNoZWNrQ29uZmVyZW5jZUNhbGwoKTsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBjbGllbnQuY2FsbChjb25uZWN0LkFnZW50QXBwQ2xpZW50TWV0aG9kcy5HRVRfQ09OVEFDVCwgewogICAgICAgICJjb250YWN0SWQiOiBzZWxmLmNvbnRhY3RJZCwKICAgICAgICAiaW5zdGFuY2VJZCI6IGNvbm5lY3QuY29yZS5nZXRBZ2VudERhdGFQcm92aWRlcigpLmdldEluc3RhbmNlSWQoKSwKICAgICAgICAiYXdzQWNjb3VudElkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0QVdTQWNjb3VudElkKCkKICAgICAgICB9LCB7CiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICBpZihkYXRhLmNvbnRhY3REYXRhLmN1c3RvbWVySWQpIHsKICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgc3BlYWtlcklkOiBkYXRhLmNvbnRhY3REYXRhLmN1c3RvbWVySWQKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJnZXRTcGVha2VySWQgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgIHJlc29sdmUob2JqKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLk5PX1NQRUFLRVJfSURfRk9VTkQsICJObyBzcGVha2VySWQgYXNzb3RpYXRlZCB3aXRoIHRoaXMgY2FsbCIpOwogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICB9LAogICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJHZXQgU3BlYWtlcklkIGZhaWxlZCIpCiAgICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgICAgZXJyOiBlcnIKICAgICAgICAgICAgICB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLkdFVF9TUEVBS0VSX0lEX0ZBSUxFRCwgIkdldCBTcGVha2VySWQgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pOwogIH07CgogIFZvaWNlSWQucHJvdG90eXBlLmdldFNwZWFrZXJTdGF0dXMgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmNoZWNrQ29uZmVyZW5jZUNhbGwoKTsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBzZWxmLmdldFNwZWFrZXJJZCgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgc2VsZi5nZXREb21haW5JZCgpLnRoZW4oZnVuY3Rpb24oZG9tYWluSWQpIHsKICAgICAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLkRFU0NSSUJFX1NQRUFLRVIsIHsKICAgICAgICAgICAgIlNwZWFrZXJJZCI6IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChkYXRhLnNwZWFrZXJJZCwgJ3NwZWFrZXJJZCcpLAogICAgICAgICAgICAiRG9tYWluSWQiIDogZG9tYWluSWQKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oImdldFNwZWFrZXJTdGF0dXMgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgIHZhciBlcnJvcjsKICAgICAgICAgICAgICAgIHZhciBwYXJzZWRFcnIgPSBKU09OLnBhcnNlKGVycik7CiAgICAgICAgICAgICAgICBzd2l0Y2gocGFyc2VkRXJyLnN0YXR1cykgewogICAgICAgICAgICAgICAgICBjYXNlIDQwMDoKICAgICAgICAgICAgICAgICAgY2FzZSA0MDQ6CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBwYXJzZWRFcnI7CiAgICAgICAgICAgICAgICAgICAgZGF0YS50eXBlID0gZGF0YS50eXBlID8gZGF0YS50eXBlIDogY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5TUEVBS0VSX0lEX05PVF9FTlJPTExFRDsKICAgICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIlNwZWFrZXIgaXMgbm90IGVucm9sbGVkLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXRTcGVha2VyU3RhdHVzIGZhaWxlZCIpCiAgICAgICAgICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgICAgICAgICAgZXJyOiBlcnIKICAgICAgICAgICAgICAgICAgICB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuR0VUX1NQRUFLRVJfU1RBVFVTX0ZBSUxFRCwgIkdldCBTcGVha2VyU3RhdHVzIGZhaWxlZCIsIGVycik7CiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7CiAgICAgICAgcmVqZWN0KGVycik7CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgLy8gaW50ZXJuYWwgb25seQogIFZvaWNlSWQucHJvdG90eXBlLl9vcHRPdXRTcGVha2VySW5MY21zID0gZnVuY3Rpb24gKHNwZWFrZXJJZCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLlVQREFURV9WT0lDRV9JRF9EQVRBLCB7CiAgICAgICAgIkNvbnRhY3RJZCI6IHNlbGYuY29udGFjdElkLAogICAgICAgICJJbnN0YW5jZUlkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0SW5zdGFuY2VJZCgpLAogICAgICAgICJBV1NBY2NvdW50SWQiOiBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRBV1NBY2NvdW50SWQoKSwKICAgICAgICAiQ3VzdG9tZXJJZCI6IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChzcGVha2VySWQsICdzcGVha2VySWQnKSwKICAgICAgICAiVm9pY2VJZFJlc3VsdCI6IHsKICAgICAgICAgICJTcGVha2VyT3B0ZWRPdXQiOiB0cnVlCiAgICAgICAgfQogICAgICAgIH0sIHsKICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygib3B0T3V0U3BlYWtlckluTGNtcyBzdWNjZWVkZWQiKS53aXRoT2JqZWN0KGRhdGEpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgICB9LAogICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJvcHRPdXRTcGVha2VySW5MY21zIGZhaWxlZCIpCiAgICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLk9QVF9PVVRfU1BFQUtFUl9JTl9MQ01TX0ZBSUxFRCwgIm9wdE91dFNwZWFrZXJJbkxjbXMgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgVm9pY2VJZC5wcm90b3R5cGUub3B0T3V0U3BlYWtlciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY2hlY2tDb25mZXJlbmNlQ2FsbCgpOwogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHNlbGYuZ2V0U3BlYWtlcklkKCkudGhlbihmdW5jdGlvbihkYXRhKXsKICAgICAgICBzZWxmLmdldERvbWFpbklkKCkudGhlbihmdW5jdGlvbihkb21haW5JZCkgewogICAgICAgICAgdmFyIHNwZWFrZXJJZCA9IGRhdGEuc3BlYWtlcklkOwogICAgICAgICAgY2xpZW50LmNhbGwoY29ubmVjdC5BZ2VudEFwcENsaWVudE1ldGhvZHMuT1BUX09VVF9TUEVBS0VSLCB7CiAgICAgICAgICAgICJTcGVha2VySWQiOiBjb25uZWN0LmFzc2VydE5vdE51bGwoc3BlYWtlcklkLCAnc3BlYWtlcklkJyksCiAgICAgICAgICAgICJEb21haW5JZCIgOiBkb21haW5JZAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIHNlbGYuX29wdE91dFNwZWFrZXJJbkxjbXMoc3BlYWtlcklkKS5jYXRjaChmdW5jdGlvbigpe30pOwogICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJvcHRPdXRTcGVha2VyIHN1Y2NlZWRlZCIpLndpdGhPYmplY3QoZGF0YSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJvcHRPdXRTcGVha2VyIGZhaWxlZCIpCiAgICAgICAgICAgICAgICAgIC53aXRoT2JqZWN0KHsKICAgICAgICAgICAgICAgICAgICBlcnI6IGVyciwKICAgICAgICAgICAgICAgICAgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuT1BUX09VVF9TUEVBS0VSX0ZBSUxFRCwgIm9wdE91dFNwZWFrZXIgZmFpbGVkLiIsIGVycik7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXsKICAgICAgICByZWplY3QoZXJyKTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICBWb2ljZUlkLnByb3RvdHlwZS5kZWxldGVTcGVha2VyID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jaGVja0NvbmZlcmVuY2VDYWxsKCk7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgc2VsZi5nZXRTcGVha2VySWQoKS50aGVuKGZ1bmN0aW9uKGRhdGEpewogICAgICAgIHNlbGYuZ2V0RG9tYWluSWQoKS50aGVuKGZ1bmN0aW9uKGRvbWFpbklkKSB7CiAgICAgICAgICBjbGllbnQuY2FsbChjb25uZWN0LkFnZW50QXBwQ2xpZW50TWV0aG9kcy5ERUxFVEVfU1BFQUtFUiwgewogICAgICAgICAgICAiU3BlYWtlcklkIjogY29ubmVjdC5hc3NlcnROb3ROdWxsKGRhdGEuc3BlYWtlcklkLCAnc3BlYWtlcklkJyksCiAgICAgICAgICAgICJEb21haW5JZCIgOiBkb21haW5JZAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiZGVsZXRlU3BlYWtlciBzdWNjZWVkZWQiKS53aXRoT2JqZWN0KGRhdGEpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiZGVsZXRlU3BlYWtlciBmYWlsZWQiKQogICAgICAgICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgICAgIH0pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLkRFTEVURV9TUEVBS0VSX0ZBSUxFRCwgImRlbGV0ZVNwZWFrZXIgZmFpbGVkLiIsIGVycik7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXsKICAgICAgICByZWplY3QoZXJyKTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICBWb2ljZUlkLnByb3RvdHlwZS5zdGFydFNlc3Npb24gPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmNoZWNrQ29uZmVyZW5jZUNhbGwoKTsKICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBzZWxmLmdldERvbWFpbklkKCkudGhlbihmdW5jdGlvbihkb21haW5JZCkgewogICAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLlNUQVJUX1ZPSUNFX0lEX1NFU1NJT04sIHsKICAgICAgICAgICJjb250YWN0SWQiOiBzZWxmLmNvbnRhY3RJZCwKICAgICAgICAgICJpbnN0YW5jZUlkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0SW5zdGFuY2VJZCgpLAogICAgICAgICAgImN1c3RvbWVyQWNjb3VudElkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0QVdTQWNjb3VudElkKCksCiAgICAgICAgICAiY2xpZW50VG9rZW4iOiBBV1MudXRpbC51dWlkLnY0KCksCiAgICAgICAgICAiZG9tYWluSWQiIDogZG9tYWluSWQKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICBpZihkYXRhLnNlc3Npb25JZCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigic3RhcnRWb2ljZUlkU2Vzc2lvbiBmYWlsZWQsIG5vIHNlc3Npb24gaWQgcmV0dXJuZWQiKQogICAgICAgICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICAgICAgICB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgdmFyIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5TVEFSVF9TRVNTSU9OX0ZBSUxFRCwgIk5vIHNlc3Npb24gaWQgcmV0dXJuZWQgZnJvbSBzdGFydCBzZXNzaW9uIGFwaSIpOwogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJzdGFydFZvaWNlSWRTZXNzaW9uIGZhaWxlZCIpCiAgICAgICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgICAgIGVycjogZXJyCiAgICAgICAgICAgICAgICB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuU1RBUlRfU0VTU0lPTl9GQUlMRUQsICJzdGFydFZvaWNlSWRTZXNzaW9uIGZhaWxlZCIsIGVycik7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIFZvaWNlSWQucHJvdG90eXBlLmV2YWx1YXRlU3BlYWtlciA9IGZ1bmN0aW9uIChzdGFydE5ldykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jaGVja0NvbmZlcmVuY2VDYWxsKCk7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0Q29udGFjdERhdGEodGhpcy5jb250YWN0SWQpOwogICAgdmFyIHBvbGxUaW1lcyA9IDA7IAogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgZnVuY3Rpb24gZXZhbHVhdGUoKSB7CiAgICAgICAgc2VsZi5nZXREb21haW5JZCgpLnRoZW4oZnVuY3Rpb24oZG9tYWluSWQpIHsKICAgICAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLkVWQUxVQVRFX1NFU1NJT04sIHsKICAgICAgICAgICAgIlNlc3Npb25OYW1lT3JJZCI6IGNvbnRhY3REYXRhLmluaXRpYWxDb250YWN0SWQgfHwgdGhpcy5jb250YWN0SWQsCiAgICAgICAgICAgICJEb21haW5JZCIgOiBkb21haW5JZAogICAgICAgICAgfSwgewogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgIGlmKCsrcG9sbFRpbWVzIDwgY29ubmVjdC5Wb2ljZUlkQ29uc3RhbnRzLkVWQUxVQVRJT05fTUFYX1BPTExfVElNRVMpIHsKICAgICAgICAgICAgICAgIGlmKGRhdGEuU3RyZWFtaW5nU3RhdHVzID09PSBjb25uZWN0LlZvaWNlSWRTdHJlYW1pbmdTdGF0dXMuUEVORElOR19DT05GSUdVUkFUSU9OKSB7CiAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZXZhbHVhdGUsIGNvbm5lY3QuVm9pY2VJZENvbnN0YW50cy5FVkFMVUFUSU9OX1BPTExJTkdfSU5URVJWQUwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgaWYoIWRhdGEuQXV0aGVudGljYXRpb25SZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0ID0ge307CiAgICAgICAgICAgICAgICAgICAgZGF0YS5BdXRoZW50aWNhdGlvblJlc3VsdC5EZWNpc2lvbiA9IGNvbm5lY3QuQ29udGFjdEZsb3dBdXRoZW50aWNhdGlvbkRlY2lzaW9uLk5PVF9FTkFCTEVEOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZighZGF0YS5GcmF1ZERldGVjdGlvblJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgIGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQgPSB7fTsKICAgICAgICAgICAgICAgICAgICBkYXRhLkZyYXVkRGV0ZWN0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0ZyYXVkRGV0ZWN0aW9uRGVjaXNpb24uTk9UX0VOQUJMRUQ7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgaWYgYm90aCBhdXRoZW50aWNhdGlvbiBhbmQgZnJhdWQgZGV0ZWN0aW9uIGFyZSBub3QgZW5hYmxlZC4KICAgICAgICAgICAgICAgICAgaWYoIXNlbGYuaXNBdXRoRW5hYmxlZChkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uKSAmJiAKICAgICAgICAgICAgICAgICAgICAhc2VsZi5pc0ZyYXVkRW5hYmxlZChkYXRhLkZyYXVkRGV0ZWN0aW9uUmVzdWx0LkRlY2lzaW9uKSkgewogICAgICAgICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJldmFsdWF0ZVNwZWFrZXIgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYoZGF0YS5TdHJlYW1pbmdTdGF0dXMgPT09IGNvbm5lY3QuVm9pY2VJZFN0cmVhbWluZ1N0YXR1cy5FTkRFRCkgewogICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuaXNBdXRoUmVzdWx0Tm90RW5vdWdoU3BlZWNoKGRhdGEuQXV0aGVudGljYXRpb25SZXN1bHQuRGVjaXNpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0F1dGhlbnRpY2F0aW9uRGVjaXNpb24uSU5DT05DTFVTSVZFOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihzZWxmLmlzRnJhdWRSZXN1bHROb3RFbm91Z2hTcGVlY2goZGF0YS5GcmF1ZERldGVjdGlvblJlc3VsdC5EZWNpc2lvbikpIHsKICAgICAgICAgICAgICAgICAgICAgIGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQuRGVjaXNpb24gPSBjb25uZWN0LkNvbnRhY3RGbG93RnJhdWREZXRlY3Rpb25EZWNpc2lvbi5JTkNPTkNMVVNJVkU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8vIFZvaWNlIHByaW50IGlzIG5vdCBsb25nIGVub3VnaCBmb3IgYm90aCBhdXRoZW50aWNhdGlvbiBhbmQgZnJhdWQgZGV0ZWN0aW9uCiAgICAgICAgICAgICAgICAgIGlmKHNlbGYuaXNBdXRoUmVzdWx0SW5jb25jbHVzaXZlKGRhdGEuQXV0aGVudGljYXRpb25SZXN1bHQuRGVjaXNpb24pICYmCiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0ZyYXVkUmVzdWx0SW5jb25jbHVzaXZlKGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQuRGVjaXNpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oImV2YWx1YXRlU3BlYWtlciBzdWNjZWVkZWQiKS53aXRoT2JqZWN0KGRhdGEpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZighc2VsZi5pc0F1dGhSZXN1bHROb3RFbm91Z2hTcGVlY2goZGF0YS5BdXRoZW50aWNhdGlvblJlc3VsdC5EZWNpc2lvbikgJiYgCiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0F1dGhFbmFibGVkKGRhdGEuQXV0aGVudGljYXRpb25SZXN1bHQuRGVjaXNpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbm5lY3QuVm9pY2VJZEF1dGhlbnRpY2F0aW9uRGVjaXNpb24uQUNDRVBUOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0F1dGhlbnRpY2F0aW9uRGVjaXNpb24uQVVUSEVOVElDQVRFRDsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICBjYXNlIGNvbm5lY3QuVm9pY2VJZEF1dGhlbnRpY2F0aW9uRGVjaXNpb24uUkVKRUNUOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0F1dGhlbnRpY2F0aW9uRGVjaXNpb24uTk9UX0FVVEhFTlRJQ0FURUQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25uZWN0LlZvaWNlSWRBdXRoZW50aWNhdGlvbkRlY2lzaW9uLlNQRUFLRVJfT1BURURfT1VUOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0F1dGhlbnRpY2F0aW9uRGVjaXNpb24uT1BURURfT1VUOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY29ubmVjdC5Wb2ljZUlkQXV0aGVudGljYXRpb25EZWNpc2lvbi5TUEVBS0VSX05PVF9FTlJPTExFRDoKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5BdXRoZW50aWNhdGlvblJlc3VsdC5EZWNpc2lvbiA9IGNvbm5lY3QuQ29udGFjdEZsb3dBdXRoZW50aWNhdGlvbkRlY2lzaW9uLk5PVF9FTlJPTExFRDsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLkF1dGhlbnRpY2F0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0F1dGhlbnRpY2F0aW9uRGVjaXNpb24uRVJST1I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZighc2VsZi5pc0ZyYXVkUmVzdWx0Tm90RW5vdWdoU3BlZWNoKGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQuRGVjaXNpb24pICYmIAogICAgICAgICAgICAgICAgICAgIHNlbGYuaXNGcmF1ZEVuYWJsZWQoZGF0YS5GcmF1ZERldGVjdGlvblJlc3VsdC5EZWNpc2lvbikpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQuRGVjaXNpb24pIHsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY29ubmVjdC5Wb2ljZUlkRnJhdWREZXRlY3Rpb25EZWNpc2lvbi5ISUdIX1JJU0s6CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuRnJhdWREZXRlY3Rpb25SZXN1bHQuRGVjaXNpb24gPSBjb25uZWN0LkNvbnRhY3RGbG93RnJhdWREZXRlY3Rpb25EZWNpc2lvbi5ISUdIX1JJU0s7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgY2FzZSBjb25uZWN0LlZvaWNlSWRGcmF1ZERldGVjdGlvbkRlY2lzaW9uLkxPV19SSVNLOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLkZyYXVkRGV0ZWN0aW9uUmVzdWx0LkRlY2lzaW9uID0gY29ubmVjdC5Db250YWN0Rmxvd0ZyYXVkRGV0ZWN0aW9uRGVjaXNpb24uTE9XX1JJU0s7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5GcmF1ZERldGVjdGlvblJlc3VsdC5EZWNpc2lvbiA9IGNvbm5lY3QuQ29udGFjdEZsb3dGcmF1ZERldGVjdGlvbkRlY2lzaW9uLkVSUk9SOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgaWYoIXNlbGYuaXNBdXRoUmVzdWx0Tm90RW5vdWdoU3BlZWNoKGRhdGEuQXV0aGVudGljYXRpb25SZXN1bHQuRGVjaXNpb24pICYmCiAgICAgICAgICAgICAgICAgICAgIXNlbGYuaXNGcmF1ZFJlc3VsdE5vdEVub3VnaFNwZWVjaChkYXRhLkZyYXVkRGV0ZWN0aW9uUmVzdWx0LkRlY2lzaW9uKSkgewogICAgICAgICAgICAgICAgICAgICAgLy8gUmVzb2x2ZSBvbmx5IHdoZW4gYm90aCBhdXRoZW50aWNhdGlvbiBhbmQgZnJhdWQgZGV0ZWN0aW9uIGhhdmUgcmVzdWx0cy4gT3RoZXJ3aXNlLCBrZWVwIHBvbGxpbmcuCiAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oImV2YWx1YXRlU3BlYWtlciBzdWNjZWVkZWQiKS53aXRoT2JqZWN0KGRhdGEpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZXZhbHVhdGUsIGNvbm5lY3QuVm9pY2VJZENvbnN0YW50cy5FVkFMVUFUSU9OX1BPTExJTkdfSU5URVJWQUwpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoImV2YWx1YXRlU3BlYWtlciB0aW1lb3V0Iikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuRVZBTFVBVEVfU1BFQUtFUl9USU1FT1VULCAiZXZhbHVhdGVTcGVha2VyIHRpbWVvdXQiKTsKICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgdmFyIGVycm9yOwogICAgICAgICAgICAgIHZhciBwYXJzZWRFcnIgPSBKU09OLnBhcnNlKGVycik7CiAgICAgICAgICAgICAgc3dpdGNoKHBhcnNlZEVyci5zdGF0dXMpIHsKICAgICAgICAgICAgICAgIGNhc2UgNDAwOgogICAgICAgICAgICAgICAgY2FzZSA0MDQ6CiAgICAgICAgICAgICAgICAgIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5TRVNTSU9OX05PVF9FWElTVFMsICJldmFsdWF0ZVNwZWFrZXIgZmFpbGVkLCBzZXNzaW9uIG5vdCBleGlzdHMiLCBlcnIpOwogICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJldmFsdWF0ZVNwZWFrZXIgZmFpbGVkLCBzZXNzaW9uIG5vdCBleGlzdHMiKS53aXRoT2JqZWN0KHsgZXJyOiBlcnIgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuRVZBTFVBVEVfU1BFQUtFUl9GQUlMRUQsICJldmFsdWF0ZVNwZWFrZXIgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiZXZhbHVhdGVTcGVha2VyIGZhaWxlZCIpLndpdGhPYmplY3QoeyBlcnI6IGVyciB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOyAgICAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIAogICAgICBpZighc3RhcnROZXcpIHsKICAgICAgICBzZWxmLnN5bmNTcGVha2VySWQoKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGV2YWx1YXRlKCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigic3luY1NwZWFrZXJJZCBmYWlsZWQgd2hlbiBzZXNzaW9uIHN0YXJ0TmV3PWZhbHNlIikKICAgICAgICAgICAgICAgIC53aXRoT2JqZWN0KHtlcnI6IGVycn0pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KQogICAgICB9IGVsc2UgeyAKICAgICAgICBzZWxmLnN0YXJ0U2Vzc2lvbigpLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgc2VsZi5zeW5jU3BlYWtlcklkKCkudGhlbihmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIHNldFRpbWVvdXQoZXZhbHVhdGUsIGNvbm5lY3QuVm9pY2VJZENvbnN0YW50cy5FVkFMVUFURV9TRVNTSU9OX0RFTEFZKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJzeW5jU3BlYWtlcklkIGZhaWxlZCB3aGVuIHNlc3Npb24gc3RhcnROZXc9dHJ1ZSIpCiAgICAgICAgICAgICAgICAud2l0aE9iamVjdCh7ZXJyOiBlcnJ9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoInN0YXJ0U2Vzc2lvbiBmYWlsZWQgd2hlbiBzZXNzaW9uIHN0YXJ0TmV3PXRydWUiKQogICAgICAgICAgICAgIC53aXRoT2JqZWN0KHtlcnI6IGVycn0pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICByZWplY3QoZXJyKQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9OwoKICBWb2ljZUlkLnByb3RvdHlwZS5kZXNjcmliZVNlc3Npb24gPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0Q29udGFjdERhdGEodGhpcy5jb250YWN0SWQpOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgc2VsZi5nZXREb21haW5JZCgpLnRoZW4oZnVuY3Rpb24oZG9tYWluSWQpIHsKICAgICAgICBjbGllbnQuY2FsbChjb25uZWN0LkFnZW50QXBwQ2xpZW50TWV0aG9kcy5ERVNDUklCRV9TRVNTSU9OLCB7CiAgICAgICAgICAiU2Vzc2lvbk5hbWVPcklkIjogY29udGFjdERhdGEuaW5pdGlhbENvbnRhY3RJZCB8fCB0aGlzLmNvbnRhY3RJZCwKICAgICAgICAgICJEb21haW5JZCIgOiBkb21haW5JZAogICAgICAgIH0sIHsKICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YSkKICAgICAgICAgIH0sCiAgICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoImRlc2NyaWJlU2Vzc2lvbiBmYWlsZWQiKQogICAgICAgICAgICAgIC53aXRoT2JqZWN0KHsKICAgICAgICAgICAgICAgIGVycjogZXJyCiAgICAgICAgICAgICAgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgdmFyIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5ERVNDUklCRV9TRVNTSU9OX0ZBSUxFRCwgImRlc2NyaWJlU2Vzc2lvbiBmYWlsZWQiLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIFZvaWNlSWQucHJvdG90eXBlLmNoZWNrRW5yb2xsbWVudFN0YXR1cyA9IGZ1bmN0aW9uIChjYWxsYmFja09uQXVkaW9Db2xsZWN0aW9uQ29tcGxldGUpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBwb2xsaW5nVGltZXMgPSAwOwogICAgdmFyIGNhbGxiYWNrT25BdWRpb0NvbGxlY3Rpb25Db21wbGV0ZUhhc0JlZW5JbnZva2VkID0gZmFsc2U7CgogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgZnVuY3Rpb24gZGVzY3JpYmUgKCkgewogICAgICAgIGlmKCsrcG9sbGluZ1RpbWVzIDwgY29ubmVjdC5Wb2ljZUlkQ29uc3RhbnRzLkVOUk9MTE1FTlRfTUFYX1BPTExfVElNRVMpIHsKICAgICAgICAgIHNlbGYuZGVzY3JpYmVTZXNzaW9uKCkudGhlbihmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgc3dpdGNoKGRhdGEuU2Vzc2lvbi5FbnJvbGxtZW50UmVxdWVzdERldGFpbHMuU3RhdHVzKSB7CiAgICAgICAgICAgICAgY2FzZSBjb25uZWN0LlZvaWNlSWRFbnJvbGxtZW50UmVxdWVzdFN0YXR1cy5DT01QTEVURUQ6CiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBjb25uZWN0LlZvaWNlSWRFbnJvbGxtZW50UmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUzoKICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2tPbkF1ZGlvQ29sbGVjdGlvbkNvbXBsZXRlSGFzQmVlbkludm9rZWQgJiYgdHlwZW9mIGNhbGxiYWNrT25BdWRpb0NvbGxlY3Rpb25Db21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICBjYWxsYmFja09uQXVkaW9Db2xsZWN0aW9uQ29tcGxldGUoZGF0YSk7CiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrT25BdWRpb0NvbGxlY3Rpb25Db21wbGV0ZUhhc0JlZW5JbnZva2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZGVzY3JpYmUsIGNvbm5lY3QuVm9pY2VJZENvbnN0YW50cy5FTlJPTExNRU5UX1BPTExJTkdfSU5URVJWQUwpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSBjb25uZWN0LlZvaWNlSWRFbnJvbGxtZW50UmVxdWVzdFN0YXR1cy5OT1RfRU5PVUdIX1NQRUVDSDoKICAgICAgICAgICAgICAgIGlmKGRhdGEuU2Vzc2lvbi5TdHJlYW1pbmdTdGF0dXMgIT09IGNvbm5lY3QuVm9pY2VJZFN0cmVhbWluZ1N0YXR1cy5FTkRFRCkgewogICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGRlc2NyaWJlLGNvbm5lY3QuVm9pY2VJZENvbnN0YW50cy5FTlJPTExNRU5UX1BPTExJTkdfSU5URVJWQUwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHNlbGYuc3RhcnRTZXNzaW9uKCkudGhlbihmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSgpOwogICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVyciwgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSwgY29ubmVjdC5Wb2ljZUlkQ29uc3RhbnRzLlNUQVJUX1NFU1NJT05fREVMQVkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZGF0YS5TZXNzaW9uLkVucm9sbG1lbnRSZXF1ZXN0RGV0YWlscy5NZXNzYWdlID8gZGF0YS5TZXNzaW9uLkVucm9sbG1lbnRSZXF1ZXN0RGV0YWlscy5NZXNzYWdlIDogImVucm9sbFNwZWFrZXIgZmFpbGVkLiBVbmtub3duIGVucm9sbG1lbnQgc3RhdHVzIGhhcyBiZWVuIHJlY2VpdmVkIjsKICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IobWVzc2FnZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAJCSAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLkVOUk9MTF9TUEVBS0VSX0ZBSUxFRCwgbWVzc2FnZSwgZGF0YS5TZXNzaW9uLkVucm9sbG1lbnRSZXF1ZXN0RGV0YWlscy5TdGF0dXMpOwogIAkJICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJlbnJvbGxTcGVha2VyIHRpbWVvdXQiKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgdmFyIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5FTlJPTExfU1BFQUtFUl9USU1FT1VULCAiZW5yb2xsU3BlYWtlciB0aW1lb3V0Iik7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgICBkZXNjcmliZSgpOwogICAgfSk7CiAgfTsKCiAgVm9pY2VJZC5wcm90b3R5cGUuZW5yb2xsU3BlYWtlciA9IGZ1bmN0aW9uIChjYWxsYmFja09uQXVkaW9Db2xsZWN0aW9uQ29tcGxldGUpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY2hlY2tDb25mZXJlbmNlQ2FsbCgpOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICBzZWxmLnN5bmNTcGVha2VySWQoKS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgIHNlbGYuZ2V0U3BlYWtlclN0YXR1cygpLnRoZW4oZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgaWYoZGF0YS5TcGVha2VyICYmIGRhdGEuU3BlYWtlci5TdGF0dXMgPT0gY29ubmVjdC5Wb2ljZUlkU3BlYWtlclN0YXR1cy5PUFRFRF9PVVQpIHsKICAgICAgICAgICAgc2VsZi5kZWxldGVTcGVha2VyKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBzZWxmLmVucm9sbFNwZWFrZXJIZWxwZXIocmVzb2x2ZSwgcmVqZWN0LCBjYWxsYmFja09uQXVkaW9Db2xsZWN0aW9uQ29tcGxldGUpOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLmVucm9sbFNwZWFrZXJIZWxwZXIocmVzb2x2ZSwgcmVqZWN0LCBjYWxsYmFja09uQXVkaW9Db2xsZWN0aW9uQ29tcGxldGUpOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSkKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgcmVqZWN0KGVycikKICAgICAgfSkKICAgIH0pCiAgfQoKICBWb2ljZUlkLnByb3RvdHlwZS5lbnJvbGxTcGVha2VySGVscGVyID0gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCwgY2FsbGJhY2tPbkF1ZGlvQ29sbGVjdGlvbkNvbXBsZXRlKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0Q29udGFjdERhdGEodGhpcy5jb250YWN0SWQpOwogICAgc2VsZi5nZXREb21haW5JZCgpLnRoZW4oZnVuY3Rpb24oZG9tYWluSWQpIHsKICAgICAgY2xpZW50LmNhbGwoY29ubmVjdC5BZ2VudEFwcENsaWVudE1ldGhvZHMuRU5ST0xMX0JZX1NFU1NJT04sIHsKICAgICAgICAiU2Vzc2lvbk5hbWVPcklkIjogY29udGFjdERhdGEuaW5pdGlhbENvbnRhY3RJZCB8fCB0aGlzLmNvbnRhY3RJZCwKICAgICAgICAiRG9tYWluSWQiIDogZG9tYWluSWQKICAgICAgICB9LCB7CiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICBpZihkYXRhLlN0YXR1cyA9PT0gY29ubmVjdC5Wb2ljZUlkRW5yb2xsbWVudFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEKSB7CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJlbnJvbGxTcGVha2VyIHN1Y2NlZWRlZCIpLndpdGhPYmplY3QoZGF0YSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNlbGYuY2hlY2tFbnJvbGxtZW50U3RhdHVzKGNhbGxiYWNrT25BdWRpb0NvbGxlY3Rpb25Db21wbGV0ZSkudGhlbihmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiZW5yb2xsU3BlYWtlciBzdWNjZWVkZWQiKS53aXRoT2JqZWN0KGRhdGEpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7CiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJlbnJvbGxTcGVha2VyIGZhaWxlZCIpCiAgICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgICAgZXJyOiBlcnIKICAgICAgICAgICAgICB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLkVOUk9MTF9TUEVBS0VSX0ZBSUxFRCwgImVucm9sbFNwZWFrZXIgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICByZWplY3QoZXJyKTsKICAgIH0pOwogIH07CgogIC8vIGludGVybmFsIG9ubHkKICBWb2ljZUlkLnByb3RvdHlwZS5fdXBkYXRlU3BlYWtlcklkSW5MY21zID0gZnVuY3Rpb24gKHNwZWFrZXJJZCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLlVQREFURV9WT0lDRV9JRF9EQVRBLCB7CiAgICAgICAgIkNvbnRhY3RJZCI6IHNlbGYuY29udGFjdElkLAogICAgICAgICJJbnN0YW5jZUlkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0SW5zdGFuY2VJZCgpLAogICAgICAgICJBV1NBY2NvdW50SWQiOiBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRBV1NBY2NvdW50SWQoKSwKICAgICAgICAiQ3VzdG9tZXJJZCI6IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChzcGVha2VySWQsICdzcGVha2VySWQnKSwKICAgICAgICAiVm9pY2VJZFJlc3VsdCI6IHsKICAgICAgICAgICJnZW5lcmF0ZWRTcGVha2VySWQiOiBzcGVha2VySWQKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJ1cGRhdGVTcGVha2VySWRJbkxjbXMgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoInVwZGF0ZVNwZWFrZXJJZEluTGNtcyBmYWlsZWQiKQogICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgIH0pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuVVBEQVRFX1NQRUFLRVJfSURfSU5fTENNU19GQUlMRUQsICJ1cGRhdGVTcGVha2VySWRJbkxjbXMgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgVm9pY2VJZC5wcm90b3R5cGUudXBkYXRlU3BlYWtlcklkSW5Wb2ljZUlkID0gZnVuY3Rpb24gKHNwZWFrZXJJZCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jaGVja0NvbmZlcmVuY2VDYWxsKCk7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0Q29udGFjdERhdGEodGhpcy5jb250YWN0SWQpOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgc2VsZi5nZXREb21haW5JZCgpLnRoZW4oZnVuY3Rpb24oZG9tYWluSWQpIHsKICAgICAgICBjbGllbnQuY2FsbChjb25uZWN0LkFnZW50QXBwQ2xpZW50TWV0aG9kcy5VUERBVEVfU0VTU0lPTiwgewogICAgICAgICAgIlNlc3Npb25OYW1lT3JJZCI6IGNvbnRhY3REYXRhLmluaXRpYWxDb250YWN0SWQgfHwgdGhpcy5jb250YWN0SWQsCiAgICAgICAgICAiU3BlYWtlcklkIjogY29ubmVjdC5hc3NlcnROb3ROdWxsKHNwZWFrZXJJZCwgJ3NwZWFrZXJJZCcpLAogICAgICAgICAgIkRvbWFpbklkIiA6IGRvbWFpbklkCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJ1cGRhdGVTcGVha2VySWRJblZvaWNlSWQgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgIHNlbGYuX3VwZGF0ZVNwZWFrZXJJZEluTGNtcyhzcGVha2VySWQpCiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICB2YXIgZXJyb3I7CiAgICAgICAgICAgICAgdmFyIHBhcnNlZEVyciA9IEpTT04ucGFyc2UoZXJyKTsKICAgICAgICAgICAgICBzd2l0Y2gocGFyc2VkRXJyLnN0YXR1cykgewogICAgICAgICAgICAgICAgY2FzZSA0MDA6CiAgICAgICAgICAgICAgICBjYXNlIDQwNDoKICAgICAgICAgICAgICAgICAgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLlNFU1NJT05fTk9UX0VYSVNUUywgInVwZGF0ZVNwZWFrZXJJZEluVm9pY2VJZCBmYWlsZWQsIHNlc3Npb24gbm90IGV4aXN0cyIsIGVycik7CiAgICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoInVwZGF0ZVNwZWFrZXJJZEluVm9pY2VJZCBmYWlsZWQsIHNlc3Npb24gbm90IGV4aXN0cyIpLndpdGhPYmplY3QoeyBlcnI6IGVyciB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5VUERBVEVfU1BFQUtFUl9JRF9GQUlMRUQsICJ1cGRhdGVTcGVha2VySWRJblZvaWNlSWQgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigidXBkYXRlU3BlYWtlcklkSW5Wb2ljZUlkIGZhaWxlZCIpLndpdGhPYmplY3QoeyBlcnI6IGVyciB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOyAgICAKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgIHJlamVjdChlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH07CgogIFZvaWNlSWQucHJvdG90eXBlLnN5bmNTcGVha2VySWQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBzZWxmLmdldFNwZWFrZXJJZCgpLnRoZW4oZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgc2VsZi51cGRhdGVTcGVha2VySWRJblZvaWNlSWQoZGF0YS5zcGVha2VySWQpLnRoZW4oZnVuY3Rpb24oZGF0YSl7CiAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikgewogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSkKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKXsKICAgICAgICByZWplY3QoZXJyKTsKICAgICAgfSk7CiAgICB9KQogIH0KCiAgVm9pY2VJZC5wcm90b3R5cGUuZ2V0RG9tYWluSWQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGNvbnN0IGFnZW50ID0gbmV3IGNvbm5lY3QuQWdlbnQoKTsKICAgICAgaWYgKCFhZ2VudC5nZXRQZXJtaXNzaW9ucygpLmluY2x1ZGVzKGNvbm5lY3QuQWdlbnRQZXJtaXNzaW9ucy5WT0lDRV9JRCkpIHsKICAgICAgICByZWplY3QobmV3IEVycm9yKCJBZ2VudCBkb2Vzbid0IGhhdmUgdGhlIHBlcm1pc3Npb24gZm9yIFZvaWNlIElEIikpOwogICAgICB9IGVsc2UgaWYgKGNvbm5lY3QuY29yZS52b2ljZUlkRG9tYWluSWQpIHsKICAgICAgICByZXNvbHZlKGNvbm5lY3QuY29yZS52b2ljZUlkRG9tYWluSWQpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBjbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCk7CiAgICAgICAgY2xpZW50LmNhbGwoY29ubmVjdC5BZ2VudEFwcENsaWVudE1ldGhvZHMuTElTVF9JTlRFR1JBVElPTl9BU1NPQ0lBVElPTlMsIHsKICAgICAgICAgICJJbnN0YW5jZUlkIjogY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0SW5zdGFuY2VJZCgpLAogICAgICAgICAgIkludGVncmF0aW9uVHlwZSI6ICJWT0lDRV9JRCIKICAgICAgICB9LCB7CiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHZhciBkb21haW5JZDsKICAgICAgICAgICAgICBpZiAoZGF0YS5JbnRlZ3JhdGlvbkFzc29jaWF0aW9uU3VtbWFyeUxpc3QubGVuZ3RoID49IDEpIHsKICAgICAgICAgICAgICAgIHZhciBpbnRlZ3JhdGlvbkFybiA9IGRhdGEuSW50ZWdyYXRpb25Bc3NvY2lhdGlvblN1bW1hcnlMaXN0WzBdLkludGVncmF0aW9uQXJuOwogICAgICAgICAgICAgICAgZG9tYWluSWQgPSBpbnRlZ3JhdGlvbkFybi5yZXBsYWNlKC9eLipkb21haW5cLy9pLCAnJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghZG9tYWluSWQpIHsKICAgICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiZ2V0RG9tYWluSWQ6IG5vIGRvbWFpbklkIGZvdW5kIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbm5lY3QuVm9pY2VJZEVycm9yKGNvbm5lY3QuVm9pY2VJZEVycm9yVHlwZXMuTk9fRE9NQUlOX0lEX0ZPVU5EKTsKICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiZ2V0RG9tYWluSWQgc3VjY2VlZGVkIikud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgICAgICAgICAgIGV2ZW50OiBjb25uZWN0LlZvaWNlSWRFdmVudHMuVVBEQVRFX0RPTUFJTl9JRCwKICAgICAgICAgICAgICAgIGRhdGE6IHsgZG9tYWluSWQ6IGRvbWFpbklkIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXNvbHZlKGRvbWFpbklkKTsKICAgICAgICAgICAgfSBjYXRjaChlcnIpIHsKICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXREb21haW5JZCBmYWlsZWQiKS53aXRoT2JqZWN0KHsgZXJyOiBlcnIgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBjb25uZWN0LlZvaWNlSWRFcnJvcihjb25uZWN0LlZvaWNlSWRFcnJvclR5cGVzLkdFVF9ET01BSU5fSURfRkFJTEVELCAiZ2V0RG9tYWluSWQgZmFpbGVkIiwgZXJyKTsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXREb21haW5JZCBmYWlsZWQiKS53aXRoT2JqZWN0KHsgZXJyOiBlcnIgfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgdmFyIGVycm9yID0gY29ubmVjdC5Wb2ljZUlkRXJyb3IoY29ubmVjdC5Wb2ljZUlkRXJyb3JUeXBlcy5HRVRfRE9NQUlOX0lEX0ZBSUxFRCwgImdldERvbWFpbklkIGZhaWxlZCIsIGVycik7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgVm9pY2VJZC5wcm90b3R5cGUuY2hlY2tDb25mZXJlbmNlQ2FsbCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgaXNDb25mZXJlbmNlQ2FsbCA9IGNvbm5lY3QuY29yZS5nZXRBZ2VudERhdGFQcm92aWRlcigpLmdldENvbnRhY3REYXRhKHNlbGYuY29udGFjdElkKS5jb25uZWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGNvbm4pIHsKICAgICAgcmV0dXJuIGNvbm5lY3QuY29udGFpbnMoY29ubmVjdC5DT05ORUNUSU9OX0FDVElWRV9TVEFURVMsIGNvbm4uc3RhdGUudHlwZSk7CiAgICB9KS5sZW5ndGggPiAyOwogICAgaWYoaXNDb25mZXJlbmNlQ2FsbCl7CiAgICAgIHRocm93IG5ldyBjb25uZWN0Lk5vdEltcGxlbWVudGVkRXJyb3IoIlZvaWNlSWQgaXMgbm90IHN1cHBvcnRlZCBmb3IgY29uZmVyZW5jZSBjYWxscyIpOwogICAgfQogIH0KCiAgVm9pY2VJZC5wcm90b3R5cGUuaXNBdXRoRW5hYmxlZCA9IGZ1bmN0aW9uKGF1dGhSZXN1bHQpIHsKICAgIHJldHVybiBhdXRoUmVzdWx0ICE9PSBjb25uZWN0LkNvbnRhY3RGbG93QXV0aGVudGljYXRpb25EZWNpc2lvbi5OT1RfRU5BQkxFRDsKICB9CgogIFZvaWNlSWQucHJvdG90eXBlLmlzQXV0aFJlc3VsdE5vdEVub3VnaFNwZWVjaCA9IGZ1bmN0aW9uKGF1dGhSZXN1bHQpIHsKICAgIHJldHVybiBhdXRoUmVzdWx0ID09PSBjb25uZWN0LlZvaWNlSWRBdXRoZW50aWNhdGlvbkRlY2lzaW9uLk5PVF9FTk9VR0hfU1BFRUNIOwogIH0KCiAgVm9pY2VJZC5wcm90b3R5cGUuaXNBdXRoUmVzdWx0SW5jb25jbHVzaXZlID0gZnVuY3Rpb24oYXV0aFJlc3VsdCkgewogICAgcmV0dXJuIGF1dGhSZXN1bHQgPT09IGNvbm5lY3QuQ29udGFjdEZsb3dBdXRoZW50aWNhdGlvbkRlY2lzaW9uLklOQ09OQ0xVU0lWRTsKICB9CgogIFZvaWNlSWQucHJvdG90eXBlLmlzRnJhdWRFbmFibGVkID0gZnVuY3Rpb24oZnJhdWRSZXN1bHQpIHsKICAgIHJldHVybiBmcmF1ZFJlc3VsdCAhPT0gY29ubmVjdC5Db250YWN0Rmxvd0ZyYXVkRGV0ZWN0aW9uRGVjaXNpb24uTk9UX0VOQUJMRUQ7CiAgfQoKICBWb2ljZUlkLnByb3RvdHlwZS5pc0ZyYXVkUmVzdWx0Tm90RW5vdWdoU3BlZWNoID0gZnVuY3Rpb24oZnJhdWRSZXN1bHQpIHsKICAgIHJldHVybiBmcmF1ZFJlc3VsdCA9PT0gY29ubmVjdC5Wb2ljZUlkRnJhdWREZXRlY3Rpb25EZWNpc2lvbi5OT1RfRU5PVUdIX1NQRUVDSDsKICB9CgogIFZvaWNlSWQucHJvdG90eXBlLmlzRnJhdWRSZXN1bHRJbmNvbmNsdXNpdmUgPSBmdW5jdGlvbihmcmF1ZFJlc3VsdCkgewogICAgcmV0dXJuIGZyYXVkUmVzdWx0ID09PSBjb25uZWN0LkNvbnRhY3RGbG93RnJhdWREZXRlY3Rpb25EZWNpc2lvbi5JTkNPTkNMVVNJVkU7CiAgfQoKICAvKioKICAgKiBAY2xhc3MgVm9pY2VDb25uZWN0aW9uCiAgICogQHBhcmFtIHtudW1iZXJ9IGNvbnRhY3RJZCAKICAgKiBAcGFyYW0ge251bWJlcn0gY29ubmVjdGlvbklkIAogICAqIEBkZXNjcmlwdGlvbiAtIFByb3ZpZGVzIHZvaWNlIG1lZGlhIHNwZWNpZmljIG9wZXJhdGlvbnMKICAgKi8KICB2YXIgVm9pY2VDb25uZWN0aW9uID0gZnVuY3Rpb24gKGNvbnRhY3RJZCwgY29ubmVjdGlvbklkKSB7CiAgICB0aGlzLl9zcGVha2VyQXV0aGVudGljYXRvciA9IG5ldyBWb2ljZUlkKGNvbnRhY3RJZCk7CiAgICBDb25uZWN0aW9uLmNhbGwodGhpcywgY29udGFjdElkLCBjb25uZWN0aW9uSWQpOwogIH07CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbm5lY3Rpb24ucHJvdG90eXBlKTsKICBWb2ljZUNvbm5lY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVm9pY2VDb25uZWN0aW9uOwoKICAvKioKICAqIEBkZXByZWNhdGVkCiAgKiBQbGVhc2UgdXNlIGdldE1lZGlhSW5mbyAKICAqLwogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U29mdHBob25lTWVkaWFJbmZvID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5zb2Z0cGhvbmVNZWRpYUluZm87CiAgfTsKCiAgVm9pY2VDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRNZWRpYUluZm8gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5fZ2V0RGF0YSgpLnNvZnRwaG9uZU1lZGlhSW5mbzsKICB9OwoKICBWb2ljZUNvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhVHlwZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0Lk1lZGlhVHlwZS5TT0ZUUEhPTkU7CiAgfTsKCiAgVm9pY2VDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRNZWRpYUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLm1lZGlhRmFjdG9yeS5nZXQodGhpcyk7CiAgfQoKICBWb2ljZUNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFZvaWNlSWRTcGVha2VySWQgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLl9zcGVha2VyQXV0aGVudGljYXRvci5nZXRTcGVha2VySWQoKTsKICB9CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0Vm9pY2VJZFNwZWFrZXJTdGF0dXMgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLl9zcGVha2VyQXV0aGVudGljYXRvci5nZXRTcGVha2VyU3RhdHVzKCk7CiAgfQoKICBWb2ljZUNvbm5lY3Rpb24ucHJvdG90eXBlLm9wdE91dFZvaWNlSWRTcGVha2VyID0gZnVuY3Rpb24oKSB7CiAgICAKICAgIHJldHVybiB0aGlzLl9zcGVha2VyQXV0aGVudGljYXRvci5vcHRPdXRTcGVha2VyKCk7CiAgfQoKICBWb2ljZUNvbm5lY3Rpb24ucHJvdG90eXBlLmRlbGV0ZVZvaWNlSWRTcGVha2VyID0gZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gdGhpcy5fc3BlYWtlckF1dGhlbnRpY2F0b3IuZGVsZXRlU3BlYWtlcigpOwogIH0KCiAgVm9pY2VDb25uZWN0aW9uLnByb3RvdHlwZS5ldmFsdWF0ZVNwZWFrZXJXaXRoVm9pY2VJZCA9IGZ1bmN0aW9uKHN0YXJ0TmV3KSB7CiAgICByZXR1cm4gdGhpcy5fc3BlYWtlckF1dGhlbnRpY2F0b3IuZXZhbHVhdGVTcGVha2VyKHN0YXJ0TmV3KTsKICB9CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUuZW5yb2xsU3BlYWtlckluVm9pY2VJZCA9IGZ1bmN0aW9uKGNhbGxiYWNrT25BdWRpb0NvbGxlY3Rpb25Db21wbGV0ZSkgewogICAgcmV0dXJuIHRoaXMuX3NwZWFrZXJBdXRoZW50aWNhdG9yLmVucm9sbFNwZWFrZXIoY2FsbGJhY2tPbkF1ZGlvQ29sbGVjdGlvbkNvbXBsZXRlKTsKICB9CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUudXBkYXRlVm9pY2VJZFNwZWFrZXJJZCA9IGZ1bmN0aW9uKHNwZWFrZXJJZCkgewogICAgcmV0dXJuIHRoaXMuX3NwZWFrZXJBdXRoZW50aWNhdG9yLnVwZGF0ZVNwZWFrZXJJZEluVm9pY2VJZChzcGVha2VySWQpOwogIH0KCiAgVm9pY2VDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRRdWlja0Nvbm5lY3ROYW1lID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5xdWlja0Nvbm5lY3ROYW1lOwogIH07CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNNdXRlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2dldERhdGEoKS5tdXRlOwogIH07CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUubXV0ZVBhcnRpY2lwYW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrcykgewogICAgdmFyIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIGNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5NVVRFX1BBUlRJQ0lQQU5ULCB7CiAgICAgIGNvbnRhY3RJZDogdGhpcy5nZXRDb250YWN0SWQoKSwKICAgICAgY29ubmVjdGlvbklkOiB0aGlzLmdldENvbm5lY3Rpb25JZCgpCiAgICB9LCBjYWxsYmFja3MpOwogIH07CgogIFZvaWNlQ29ubmVjdGlvbi5wcm90b3R5cGUudW5tdXRlUGFydGljaXBhbnQgPSBmdW5jdGlvbiAoY2FsbGJhY2tzKSB7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLlVOTVVURV9QQVJUSUNJUEFOVCwgewogICAgICBjb250YWN0SWQ6IHRoaXMuZ2V0Q29udGFjdElkKCksCiAgICAgIGNvbm5lY3Rpb25JZDogdGhpcy5nZXRDb25uZWN0aW9uSWQoKQogICAgfSwgY2FsbGJhY2tzKTsKICB9OwoKCiAgLyoqCiAgICogQGNsYXNzIENoYXRDb25uZWN0aW9uCiAgICogQHBhcmFtIHsqfSBjb250YWN0SWQgCiAgICogQHBhcmFtIHsqfSBjb25uZWN0aW9uSWQgCiAgICogQGRlc2NyaXB0aW9uIGFkZHMgdGhlIGNoYXQgbWVkaWEgc3BlY2lmaWMgZnVuY3Rpb25hbGl0eQogICAqLwogIHZhciBDaGF0Q29ubmVjdGlvbiA9IGZ1bmN0aW9uIChjb250YWN0SWQsIGNvbm5lY3Rpb25JZCkgewogICAgQ29ubmVjdGlvbi5jYWxsKHRoaXMsIGNvbnRhY3RJZCwgY29ubmVjdGlvbklkKTsKICB9OwoKICBDaGF0Q29ubmVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbm5lY3Rpb24ucHJvdG90eXBlKTsKICBDaGF0Q29ubmVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDaGF0Q29ubmVjdGlvbjsKCiAgQ2hhdENvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhSW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkYXRhID0gdGhpcy5fZ2V0RGF0YSgpLmNoYXRNZWRpYUluZm87CiAgICBpZiAoIWRhdGEpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9IGVsc2UgewogICAgICB2YXIgY29udGFjdERhdGEgPSBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRDb250YWN0RGF0YSh0aGlzLmNvbnRhY3RJZCk7CiAgICAgIHZhciBtZWRpYU9iamVjdCA9IHsKICAgICAgICBjb250YWN0SWQ6IHRoaXMuY29udGFjdElkLAogICAgICAgIGluaXRpYWxDb250YWN0SWQ6IGNvbnRhY3REYXRhLmluaXRpYWxDb250YWN0SWQgfHwgdGhpcy5jb250YWN0SWQsCiAgICAgICAgcGFydGljaXBhbnRJZDogdGhpcy5jb25uZWN0aW9uSWQsCiAgICAgICAgZ2V0Q29ubmVjdGlvblRva2VuOiBjb25uZWN0LmhpdGNoKHRoaXMsIHRoaXMuZ2V0Q29ubmVjdGlvblRva2VuKQogICAgICB9OwogICAgICBpZiAoZGF0YS5jb25uZWN0aW9uRGF0YSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICBtZWRpYU9iamVjdC5wYXJ0aWNpcGFudFRva2VuID0gSlNPTi5wYXJzZShkYXRhLmNvbm5lY3Rpb25EYXRhKS5Db25uZWN0aW9uQXV0aGVudGljYXRpb25Ub2tlbjsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKGNvbm5lY3QuTG9nQ29tcG9uZW50LkNIQVQsICJDb25uZWN0aW9uIGRhdGEgaXMgaW52YWxpZCIpCiAgICAgICAgICAgIC53aXRoT2JqZWN0KGRhdGEpCiAgICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGUpCiAgICAgICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgbWVkaWFPYmplY3QucGFydGljaXBhbnRUb2tlbiA9IG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICAgIG1lZGlhT2JqZWN0LnBhcnRpY2lwYW50VG9rZW4gPSBtZWRpYU9iamVjdC5wYXJ0aWNpcGFudFRva2VuIHx8IG51bGw7CiAgICAgIC8qKiBKdXN0IHRvIGtlZXAgdGhlIGRhdGEgYWNjZXNzaWJsZSAqLwogICAgICBtZWRpYU9iamVjdC5vcmlnaW5hbEluZm8gPSB0aGlzLl9nZXREYXRhKCkuY2hhdE1lZGlhSW5mbzsKICAgICAgcmV0dXJuIG1lZGlhT2JqZWN0OwogICAgfQogIH07CgogIC8qKgogICogUHJvdmlkZXMgdGhlIGNoYXQgY29ubmVjdGlvblRva2VuIHRocm91Z2ggdGhlIGNyZWF0ZV90cmFuc3BvcnQgQVBJIGZvciBhIHNwZWNpZmljIGNvbnRhY3QgYW5kIHBhcnRpY2lwYW50IElkLiAKICAqIEByZXR1cm5zIGEgcHJvbWlzZSB3aGljaCwgdXBvbiBzdWNjZXNzLCByZXR1cm5zIHRoZSByZXNwb25zZSBmcm9tIHRoZSBjcmVhdGVUcmFuc3BvcnQgQVBJLgogICogVXNhZ2U6CiAgKiBjb25uZWN0aW9uLmdldENvbm5lY3Rpb25Ub2tlbigpCiAgKiAgLnRoZW4ocmVzcG9uc2UgPT4ge30pCiAgKiAgLmNhdGNoKGVycm9yID0+IHt9KQogICovCiAgQ2hhdENvbm5lY3Rpb24ucHJvdG90eXBlLmdldENvbm5lY3Rpb25Ub2tlbiA9IGZ1bmN0aW9uICgpIHsKICAgIGNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKTsKICAgIHZhciBjb250YWN0RGF0YSA9IGNvbm5lY3QuY29yZS5nZXRBZ2VudERhdGFQcm92aWRlcigpLmdldENvbnRhY3REYXRhKHRoaXMuY29udGFjdElkKTsKICAgIHZhciB0cmFuc3BvcnREZXRhaWxzID0gewogICAgICB0cmFuc3BvcnRUeXBlOiBjb25uZWN0LlRSQU5TUE9SVF9UWVBFUy5DSEFUX1RPS0VOLAogICAgICBwYXJ0aWNpcGFudElkOiB0aGlzLmNvbm5lY3Rpb25JZCwKICAgICAgY29udGFjdElkOiBjb250YWN0RGF0YS5pbml0aWFsQ29udGFjdElkIHx8IHRoaXMuY29udGFjdElkCiAgICB9OwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLkNSRUFURV9UUkFOU1BPUlQsIHRyYW5zcG9ydERldGFpbHMsIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJnZXRDb25uZWN0aW9uVG9rZW4gc3VjY2VlZGVkIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgfSwKICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXRDb25uZWN0aW9uVG9rZW4gZmFpbGVkIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKQogICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICAgIHJlamVjdChFcnJvcigiZ2V0Q29ubmVjdGlvblRva2VuIGZhaWxlZCIpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgQ2hhdENvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhVHlwZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0Lk1lZGlhVHlwZS5DSEFUOwogIH07CgogIENoYXRDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRNZWRpYUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLm1lZGlhRmFjdG9yeS5nZXQodGhpcyk7CiAgfTsKCiAgQ2hhdENvbm5lY3Rpb24ucHJvdG90eXBlLl9pbml0TWVkaWFDb250cm9sbGVyID0gZnVuY3Rpb24gKCkgewogICAgLy8gTm90ZSB0aGF0IGEgY2hhdCBtZWRpYSBjb250cm9sbGVyIG9ubHkgbmVlZHMgdG8gYmUgcHJvZHVjZWQgZm9yIGFnZW50IHR5cGUgY29ubmVjdGlvbnMuCiAgICBpZiAodGhpcy5faXNBZ2VudENvbm5lY3Rpb25UeXBlKCkpIHsKICAgICAgY29ubmVjdC5jb3JlLm1lZGlhRmFjdG9yeS5nZXQodGhpcykuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KTsKICAgIH0KICB9CgogIC8qKgogICAqIEBjbGFzcyBUYXNrQ29ubmVjdGlvbgogICAqIEBwYXJhbSB7Kn0gY29udGFjdElkIAogICAqIEBwYXJhbSB7Kn0gY29ubmVjdGlvbklkIAogICAqIEBkZXNjcmlwdGlvbiBhZGRzIHRoZSB0YXNrIG1lZGlhIHNwZWNpZmljIGZ1bmN0aW9uYWxpdHkKICAgKi8KICB2YXIgVGFza0Nvbm5lY3Rpb24gPSBmdW5jdGlvbiAoY29udGFjdElkLCBjb25uZWN0aW9uSWQpIHsKICAgIENvbm5lY3Rpb24uY2FsbCh0aGlzLCBjb250YWN0SWQsIGNvbm5lY3Rpb25JZCk7CiAgfTsKICBUYXNrQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbm5lY3Rpb24ucHJvdG90eXBlKTsKICBUYXNrQ29ubmVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUYXNrQ29ubmVjdGlvbjsKCiAgVGFza0Nvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhVHlwZSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0Lk1lZGlhVHlwZS5UQVNLOwogIH0KCiAgVGFza0Nvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhSW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0Q29udGFjdERhdGEodGhpcy5jb250YWN0SWQpOwogICAgICB2YXIgbWVkaWFPYmplY3QgPSB7CiAgICAgICAgY29udGFjdElkOiB0aGlzLmNvbnRhY3RJZCwKICAgICAgICBpbml0aWFsQ29udGFjdElkOiBjb250YWN0RGF0YS5pbml0aWFsQ29udGFjdElkIHx8IHRoaXMuY29udGFjdElkLAogICAgICB9OwogICAgICByZXR1cm4gbWVkaWFPYmplY3Q7CiAgfTsKCiAgVGFza0Nvbm5lY3Rpb24ucHJvdG90eXBlLmdldE1lZGlhQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvcmUubWVkaWFGYWN0b3J5LmdldCh0aGlzKTsKICB9OwoKICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBjbGFzcyBDb25uZWN0aW9uU25hcHNob3QKICAgKi8KICB2YXIgQ29ubmVjdGlvblNuYXBzaG90ID0gZnVuY3Rpb24gKGNvbm5lY3Rpb25EYXRhKSB7CiAgICBjb25uZWN0LkNvbm5lY3Rpb24uY2FsbCh0aGlzLCBjb25uZWN0aW9uRGF0YS5jb250YWN0SWQsIGNvbm5lY3Rpb25EYXRhLmNvbm5lY3Rpb25JZCk7CiAgICB0aGlzLmNvbm5lY3Rpb25EYXRhID0gY29ubmVjdGlvbkRhdGE7CiAgfTsKICBDb25uZWN0aW9uU25hcHNob3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDb25uZWN0aW9uLnByb3RvdHlwZSk7CiAgQ29ubmVjdGlvblNuYXBzaG90LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbm5lY3Rpb25TbmFwc2hvdDsKCiAgQ29ubmVjdGlvblNuYXBzaG90LnByb3RvdHlwZS5fZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb25EYXRhOwogIH07CgogIENvbm5lY3Rpb25TbmFwc2hvdC5wcm90b3R5cGUuX2luaXRNZWRpYUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7IH07CgogIHZhciBFbmRwb2ludCA9IGZ1bmN0aW9uIChwYXJhbXNJbikgewogICAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9OwogICAgdGhpcy5lbmRwb2ludEFSTiA9IHBhcmFtcy5lbmRwb2ludElkIHx8IHBhcmFtcy5lbmRwb2ludEFSTiB8fCBudWxsOwogICAgdGhpcy5lbmRwb2ludElkID0gdGhpcy5lbmRwb2ludEFSTjsKICAgIHRoaXMudHlwZSA9IHBhcmFtcy50eXBlIHx8IG51bGw7CiAgICB0aGlzLm5hbWUgPSBwYXJhbXMubmFtZSB8fCBudWxsOwogICAgdGhpcy5waG9uZU51bWJlciA9IHBhcmFtcy5waG9uZU51bWJlciB8fCBudWxsOwogICAgdGhpcy5hZ2VudExvZ2luID0gcGFyYW1zLmFnZW50TG9naW4gfHwgbnVsbDsKICAgIHRoaXMucXVldWUgPSBwYXJhbXMucXVldWUgfHwgbnVsbDsKICB9OwoKICAvKioKICAgKiBTdHJpcCB0aGUgU0lQIGVuZHBvaW50IGNvbXBvbmVudHMgZnJvbSB0aGUgcGhvbmVOdW1iZXIgZmllbGQuCiAgICovCiAgRW5kcG9pbnQucHJvdG90eXBlLnN0cmlwUGhvbmVOdW1iZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5waG9uZU51bWJlciA/IHRoaXMucGhvbmVOdW1iZXIucmVwbGFjZSgvc2lwOihbXkBdKilALiovLCAiJDEiKSA6ICIiOwogIH07CgogIC8qKgogICAqIENyZWF0ZSBhbiBFbmRwb2ludCBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gcGhvbmUgbnVtYmVyIGFuZCBuYW1lLgogICAqLwogIEVuZHBvaW50LmJ5UGhvbmVOdW1iZXIgPSBmdW5jdGlvbiAobnVtYmVyLCBuYW1lKSB7CiAgICByZXR1cm4gbmV3IEVuZHBvaW50KHsKICAgICAgdHlwZTogY29ubmVjdC5FbmRwb2ludFR5cGUuUEhPTkVfTlVNQkVSLAogICAgICBwaG9uZU51bWJlcjogbnVtYmVyLAogICAgICBuYW1lOiBuYW1lIHx8IG51bGwKICAgIH0pOwogIH07CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGNsYXNzIFNvZnRwaG9uZUVycm9yCiAgICovCiAgdmFyIFNvZnRwaG9uZUVycm9yID0gZnVuY3Rpb24gKGVycm9yVHlwZSwgZXJyb3JNZXNzYWdlLCBlbmRQb2ludFVybCkgewogICAgdGhpcy5lcnJvclR5cGUgPSBlcnJvclR5cGU7CiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZTsKICAgIHRoaXMuZW5kUG9pbnRVcmwgPSBlbmRQb2ludFVybDsKICB9OwogIFNvZnRwaG9uZUVycm9yLnByb3RvdHlwZS5nZXRFcnJvclR5cGUgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5lcnJvclR5cGU7CiAgfTsKICBTb2Z0cGhvbmVFcnJvci5wcm90b3R5cGUuZ2V0RXJyb3JNZXNzYWdlID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZXJyb3JNZXNzYWdlOwogIH07CiAgU29mdHBob25lRXJyb3IucHJvdG90eXBlLmdldEVuZFBvaW50VXJsID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuZW5kUG9pbnRVcmw7CiAgfTsKCiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogUm9vdCBTdWJzY3JpcHRpb24gQVBJcy4KICAgKi8KICBjb25uZWN0LmFnZW50ID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIHZhciBzdWIgPSBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQWdlbnRFdmVudHMuSU5JVCwgZik7CiAgICBpZiAoY29ubmVjdC5hZ2VudC5pbml0aWFsaXplZCkgewogICAgICBmKG5ldyBjb25uZWN0LkFnZW50KCkpOwogICAgfQogICAgcmV0dXJuIHN1YjsKICB9OwogIGNvbm5lY3QuYWdlbnQuaW5pdGlhbGl6ZWQgPSBmYWxzZTsKCiAgY29ubmVjdC5jb250YWN0ID0gZnVuY3Rpb24gKGYpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIHJldHVybiBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5JTklULCBmKTsKICB9OwoKICBjb25uZWN0Lm9uV2Vic29ja2V0SW5pdEZhaWx1cmUgPSBmdW5jdGlvbiAoZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgdmFyIHN1YiA9IGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuSU5JVF9GQUlMVVJFLCBmKTsKICAgIGlmIChjb25uZWN0LndlYlNvY2tldEluaXRGYWlsZWQpIHsKICAgICAgZigpOwogICAgfQogICAgcmV0dXJuIHN1YjsKICB9OwoKICAvKioKICAgKiBTdGFydHMgdGhlIGdpdmVuIGZ1bmN0aW9uIGFzeW5jaHJvbm91c2x5IG9ubHkgaWYgdGhlIHNoYXJlZCB3b3JrZXIKICAgKiBzYXlzIHdlIGFyZSB0aGUgbWFzdGVyIGZvciB0aGUgZ2l2ZW4gdG9waWMuICBJZiB0aGVyZSBpcyBubyBtYXN0ZXIgZm9yCiAgICogdGhlIGdpdmVuIHRvcGljLCB3ZSBiZWNvbWUgdGhlIG1hc3RlciBhbmQgc3RhcnQgdGhlIGZ1bmN0aW9uIHVubGVzcwogICAqIHNob3VsZE5vdEJlY29tZU1hc3RlcklmTm9uZSBpcyB0cnVlLgogICAqCiAgICogQHBhcmFtIHRvcGljIFRoZSBtYXN0ZXIgdG9waWMgd2UgYXJlIGNvbmNlcm5lZCBhYm91dC4KICAgKiBAcGFyYW0gZl90cnVlIFRoZSBjYWxsYmFjayB0byBiZSBpbnZva2VkIGlmIHdlIGFyZSB0aGUgbWFzdGVyLgogICAqIEBwYXJhbSBmX2Vsc2UgW29wdGlvbmFsXSBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgaWYgd2UgYXJlIG5vdCB0aGUgbWFzdGVyLgogICAqIEBwYXJhbSBzaG91bGROb3RCZWNvbWVNYXN0ZXJJZk5vbmUgW29wdGlvbmFsXSBpZiB0cnVlLCB0aGlzIHRhYiB3b24ndCBiZWNvbWUgbWFzdGVyLgogICAqLwogIGNvbm5lY3QuaWZNYXN0ZXIgPSBmdW5jdGlvbiAodG9waWMsIGZfdHJ1ZSwgZl9lbHNlLCBzaG91bGROb3RCZWNvbWVNYXN0ZXJJZk5vbmUpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbCh0b3BpYywgIkEgdG9waWMgbXVzdCBiZSBwcm92aWRlZC4iKTsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChmX3RydWUsICJBIHRydWUgY2FsbGJhY2sgbXVzdCBiZSBwcm92aWRlZC4iKTsKCiAgICBpZiAoIWNvbm5lY3QuY29yZS5tYXN0ZXJDbGllbnQpIHsKICAgICAgLy8gV2UgY2FuJ3QgYmUgdGhlIG1hc3RlciBiZWNhdXNlIHRoZXJlIGlzIG5vIG1hc3RlciBjbGllbnQhCiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkud2FybigiV2UgY2FuJ3QgYmUgdGhlIG1hc3RlciBmb3IgdG9waWMgJyVzJyBiZWNhdXNlIHRoZXJlIGlzIG5vIG1hc3RlciBjbGllbnQhIiwgdG9waWMpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIGlmIChmX2Vsc2UpIHsKICAgICAgICBmX2Vsc2UoKTsKICAgICAgfQogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIG1hc3RlckNsaWVudCA9IGNvbm5lY3QuY29yZS5nZXRNYXN0ZXJDbGllbnQoKTsKICAgIG1hc3RlckNsaWVudC5jYWxsKGNvbm5lY3QuTWFzdGVyTWV0aG9kcy5DSEVDS19NQVNURVIsIHsKICAgICAgdG9waWM6IHRvcGljLAogICAgICBzaG91bGROb3RCZWNvbWVNYXN0ZXJJZk5vbmU6IHNob3VsZE5vdEJlY29tZU1hc3RlcklmTm9uZQogICAgfSwgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5pc01hc3RlcikgewogICAgICAgICAgICBmX3RydWUoKTsKCiAgICAgICAgICB9IGVsc2UgaWYgKGZfZWxzZSkgewogICAgICAgICAgICBmX2Vsc2UoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogIH07CgogIC8qKgogICAqIE5vdGlmeSB0aGUgc2hhcmVkIHdvcmtlciBhbmQgb3RoZXIgQ0NQIHRhYnMgdGhhdCB3ZSBhcmUgbm93IHRoZSBtYXN0ZXIgZm9yIHRoZSBnaXZlbiB0b3BpYy4KICAgKi8KICBjb25uZWN0LmJlY29tZU1hc3RlciA9IGZ1bmN0aW9uICh0b3BpYywgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbCh0b3BpYywgIkEgdG9waWMgbXVzdCBiZSBwcm92aWRlZC4iKTsKCiAgICBpZiAoIWNvbm5lY3QuY29yZS5tYXN0ZXJDbGllbnQpIHsKICAgICAgLy8gV2UgY2FuJ3QgYmUgdGhlIG1hc3RlciBiZWNhdXNlIHRoZXJlIGlzIG5vIG1hc3RlciBjbGllbnQhCiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkud2FybigiV2UgY2FuJ3QgYmUgdGhlIG1hc3RlciBmb3IgdG9waWMgJyVzJyBiZWNhdXNlIHRoZXJlIGlzIG5vIG1hc3RlciBjbGllbnQhIiwgdG9waWMpOwogICAgICBpZiAoZmFpbHVyZUNhbGxiYWNrKSB7CiAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHZhciBtYXN0ZXJDbGllbnQgPSBjb25uZWN0LmNvcmUuZ2V0TWFzdGVyQ2xpZW50KCk7CiAgICAgIG1hc3RlckNsaWVudC5jYWxsKGNvbm5lY3QuTWFzdGVyTWV0aG9kcy5CRUNPTUVfTUFTVEVSLCB7CiAgICAgICAgdG9waWM6IHRvcGljCiAgICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrKSB7CiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjaygpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfTsKCiAgY29ubmVjdC5BZ2VudCA9IEFnZW50OwogIGNvbm5lY3QuQWdlbnRTbmFwc2hvdCA9IEFnZW50U25hcHNob3Q7CiAgY29ubmVjdC5Db250YWN0ID0gQ29udGFjdDsKICBjb25uZWN0LkNvbnRhY3RTbmFwc2hvdCA9IENvbnRhY3RTbmFwc2hvdDsKICAvKiogRGVmYXVsdCB3aWxsIGdldCB0aGUgVm9pY2UgY29ubmVjdGlvbiAqLwogIGNvbm5lY3QuQ29ubmVjdGlvbiA9IFZvaWNlQ29ubmVjdGlvbjsKICBjb25uZWN0LkJhc2VDb25uZWN0aW9uID0gQ29ubmVjdGlvbjsKICBjb25uZWN0LlZvaWNlQ29ubmVjdGlvbiA9IFZvaWNlQ29ubmVjdGlvbjsKICBjb25uZWN0LkNoYXRDb25uZWN0aW9uID0gQ2hhdENvbm5lY3Rpb247CiAgY29ubmVjdC5UYXNrQ29ubmVjdGlvbiA9IFRhc2tDb25uZWN0aW9uOwogIGNvbm5lY3QuQ29ubmVjdGlvblNuYXBzaG90ID0gQ29ubmVjdGlvblNuYXBzaG90OwogIGNvbm5lY3QuRW5kcG9pbnQgPSBFbmRwb2ludDsKICBjb25uZWN0LkFkZHJlc3MgPSBFbmRwb2ludDsKICBjb25uZWN0LlNvZnRwaG9uZUVycm9yID0gU29mdHBob25lRXJyb3I7CiAgY29ubmVjdC5Wb2ljZUlkID0gVm9pY2VJZDsKfSkoKTsKCgoKLyoqKi8gfSksCgovKioqLyA4Mjc6Ci8qKiovICgobW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187Ly8gQVdTIFNESyBmb3IgSmF2YVNjcmlwdCB2Mi41NTMuMAovLyBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KLy8gTGljZW5zZSBhdCBodHRwczovL3Nkay5hbWF6b25hd3MuY29tL2pzL0JVTkRMRV9MSUNFTlNFLnR4dAooZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz11bmRlZmluZWQ7aWYoIWYmJmMpcmV0dXJuIHJlcXVpcmUoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitpKyInIik7dGhyb3cgYS5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9dW5kZWZpbmVkLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAidmVyc2lvbiI6ICIyLjAiLAogICJtZXRhZGF0YSI6IHsKICAgICJhcGlWZXJzaW9uIjogIjIwMTQtMDYtMzAiLAogICAgImVuZHBvaW50UHJlZml4IjogImNvZ25pdG8taWRlbnRpdHkiLAogICAgImpzb25WZXJzaW9uIjogIjEuMSIsCiAgICAicHJvdG9jb2wiOiAianNvbiIsCiAgICAic2VydmljZUZ1bGxOYW1lIjogIkFtYXpvbiBDb2duaXRvIElkZW50aXR5IiwKICAgICJzZXJ2aWNlSWQiOiAiQ29nbml0byBJZGVudGl0eSIsCiAgICAic2lnbmF0dXJlVmVyc2lvbiI6ICJ2NCIsCiAgICAidGFyZ2V0UHJlZml4IjogIkFXU0NvZ25pdG9JZGVudGl0eVNlcnZpY2UiLAogICAgInVpZCI6ICJjb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzAiCiAgfSwKICAib3BlcmF0aW9ucyI6IHsKICAgICJDcmVhdGVJZGVudGl0eVBvb2wiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eVBvb2xOYW1lIiwKICAgICAgICAgICJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJJZGVudGl0eVBvb2xOYW1lIjoge30sCiAgICAgICAgICAiQWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzIjogewogICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgfSwKICAgICAgICAgICJTdXBwb3J0ZWRMb2dpblByb3ZpZGVycyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlM0IgogICAgICAgICAgfSwKICAgICAgICAgICJEZXZlbG9wZXJQcm92aWRlck5hbWUiOiB7fSwKICAgICAgICAgICJPcGVuSWRDb25uZWN0UHJvdmlkZXJBUk5zIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzgiCiAgICAgICAgICB9LAogICAgICAgICAgIkNvZ25pdG9JZGVudGl0eVByb3ZpZGVycyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlNhIgogICAgICAgICAgfSwKICAgICAgICAgICJTYW1sUHJvdmlkZXJBUk5zIjogewogICAgICAgICAgICAic2hhcGUiOiAiU2YiCiAgICAgICAgICB9LAogICAgICAgICAgIklkZW50aXR5UG9vbFRhZ3MiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTZyIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInNoYXBlIjogIlNqIgogICAgICB9CiAgICB9LAogICAgIkRlbGV0ZUlkZW50aXRpZXMiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eUlkc1RvRGVsZXRlIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlJZHNUb0RlbGV0ZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICJtZW1iZXIiOiB7fQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIlVucHJvY2Vzc2VkSWRlbnRpdHlJZHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAibWVtYmVyIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAgICAgICAiSWRlbnRpdHlJZCI6IHt9LAogICAgICAgICAgICAgICAgIkVycm9yQ29kZSI6IHt9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkRlbGV0ZUlkZW50aXR5UG9vbCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIklkZW50aXR5UG9vbElkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJEZXNjcmliZUlkZW50aXR5IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiSWRlbnRpdHlJZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5SWQiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAic2hhcGUiOiAiU3UiCiAgICAgIH0KICAgIH0sCiAgICAiRGVzY3JpYmVJZGVudGl0eVBvb2wiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eVBvb2xJZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5UG9vbElkIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInNoYXBlIjogIlNqIgogICAgICB9CiAgICB9LAogICAgIkdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eUlkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlJZCI6IHt9LAogICAgICAgICAgIkxvZ2lucyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlN6IgogICAgICAgICAgfSwKICAgICAgICAgICJDdXN0b21Sb2xlQXJuIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJJZGVudGl0eUlkIjoge30sCiAgICAgICAgICAiQ3JlZGVudGlhbHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICJBY2Nlc3NLZXlJZCI6IHt9LAogICAgICAgICAgICAgICJTZWNyZXRLZXkiOiB7fSwKICAgICAgICAgICAgICAiU2Vzc2lvblRva2VuIjoge30sCiAgICAgICAgICAgICAgIkV4cGlyYXRpb24iOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldElkIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJBY2NvdW50SWQiOiB7fSwKICAgICAgICAgICJJZGVudGl0eVBvb2xJZCI6IHt9LAogICAgICAgICAgIkxvZ2lucyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlN6IgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5SWQiOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJHZXRJZGVudGl0eVBvb2xSb2xlcyI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIklkZW50aXR5UG9vbElkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5UG9vbElkIjoge30sCiAgICAgICAgICAiUm9sZXMiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMWIiCiAgICAgICAgICB9LAogICAgICAgICAgIlJvbGVNYXBwaW5ncyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMxZCIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiR2V0T3BlbklkVG9rZW4iOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eUlkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlJZCI6IHt9LAogICAgICAgICAgIkxvZ2lucyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlN6IgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5SWQiOiB7fSwKICAgICAgICAgICJUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldE9wZW5JZFRva2VuRm9yRGV2ZWxvcGVySWRlbnRpdHkiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eVBvb2xJZCIsCiAgICAgICAgICAiTG9naW5zIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fSwKICAgICAgICAgICJJZGVudGl0eUlkIjoge30sCiAgICAgICAgICAiTG9naW5zIjogewogICAgICAgICAgICAic2hhcGUiOiAiU3oiCiAgICAgICAgICB9LAogICAgICAgICAgIlRva2VuRHVyYXRpb24iOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlJZCI6IHt9LAogICAgICAgICAgIlRva2VuIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiTGlzdElkZW50aXRpZXMiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJJZGVudGl0eVBvb2xJZCIsCiAgICAgICAgICAiTWF4UmVzdWx0cyIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5UG9vbElkIjoge30sCiAgICAgICAgICAiTWF4UmVzdWx0cyI6IHsKICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgICAgICAgIH0sCiAgICAgICAgICAiTmV4dFRva2VuIjoge30sCiAgICAgICAgICAiSGlkZURpc2FibGVkIjogewogICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5UG9vbElkIjoge30sCiAgICAgICAgICAiSWRlbnRpdGllcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICJtZW1iZXIiOiB7CiAgICAgICAgICAgICAgInNoYXBlIjogIlN1IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIk5leHRUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkxpc3RJZGVudGl0eVBvb2xzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiTWF4UmVzdWx0cyIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIk1heFJlc3VsdHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9LAogICAgICAgICAgIk5leHRUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29scyI6IHsKICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICJtZW1iZXIiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAgICJJZGVudGl0eVBvb2xJZCI6IHt9LAogICAgICAgICAgICAgICAgIklkZW50aXR5UG9vbE5hbWUiOiB7fQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJOZXh0VG9rZW4iOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJMaXN0VGFnc0ZvclJlc291cmNlIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiUmVzb3VyY2VBcm4iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJSZXNvdXJjZUFybiI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiVGFncyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlNnIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJMb29rdXBEZXZlbG9wZXJJZGVudGl0eSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIklkZW50aXR5UG9vbElkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fSwKICAgICAgICAgICJJZGVudGl0eUlkIjoge30sCiAgICAgICAgICAiRGV2ZWxvcGVyVXNlcklkZW50aWZpZXIiOiB7fSwKICAgICAgICAgICJNYXhSZXN1bHRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfSwKICAgICAgICAgICJOZXh0VG9rZW4iOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5SWQiOiB7fSwKICAgICAgICAgICJEZXZlbG9wZXJVc2VySWRlbnRpZmllckxpc3QiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAibWVtYmVyIjoge30KICAgICAgICAgIH0sCiAgICAgICAgICAiTmV4dFRva2VuIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiTWVyZ2VEZXZlbG9wZXJJZGVudGl0aWVzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiU291cmNlVXNlcklkZW50aWZpZXIiLAogICAgICAgICAgIkRlc3RpbmF0aW9uVXNlcklkZW50aWZpZXIiLAogICAgICAgICAgIkRldmVsb3BlclByb3ZpZGVyTmFtZSIsCiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJTb3VyY2VVc2VySWRlbnRpZmllciI6IHt9LAogICAgICAgICAgIkRlc3RpbmF0aW9uVXNlcklkZW50aWZpZXIiOiB7fSwKICAgICAgICAgICJEZXZlbG9wZXJQcm92aWRlck5hbWUiOiB7fSwKICAgICAgICAgICJJZGVudGl0eVBvb2xJZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlJZCI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlNldElkZW50aXR5UG9vbFJvbGVzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiLAogICAgICAgICAgIlJvbGVzIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fSwKICAgICAgICAgICJSb2xlcyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMxYiIKICAgICAgICAgIH0sCiAgICAgICAgICAiUm9sZU1hcHBpbmdzIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzFkIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJUYWdSZXNvdXJjZSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlJlc291cmNlQXJuIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiUmVzb3VyY2VBcm4iOiB7fSwKICAgICAgICAgICJUYWdzIjogewogICAgICAgICAgICAic2hhcGUiOiAiU2ciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIlVubGlua0RldmVsb3BlcklkZW50aXR5IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiSWRlbnRpdHlJZCIsCiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiLAogICAgICAgICAgIkRldmVsb3BlclByb3ZpZGVyTmFtZSIsCiAgICAgICAgICAiRGV2ZWxvcGVyVXNlcklkZW50aWZpZXIiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJJZGVudGl0eUlkIjoge30sCiAgICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fSwKICAgICAgICAgICJEZXZlbG9wZXJQcm92aWRlck5hbWUiOiB7fSwKICAgICAgICAgICJEZXZlbG9wZXJVc2VySWRlbnRpZmllciI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlVubGlua0lkZW50aXR5IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiSWRlbnRpdHlJZCIsCiAgICAgICAgICAiTG9naW5zIiwKICAgICAgICAgICJMb2dpbnNUb1JlbW92ZSIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIklkZW50aXR5SWQiOiB7fSwKICAgICAgICAgICJMb2dpbnMiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTeiIKICAgICAgICAgIH0sCiAgICAgICAgICAiTG9naW5zVG9SZW1vdmUiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTdiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiVW50YWdSZXNvdXJjZSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlJlc291cmNlQXJuIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiUmVzb3VyY2VBcm4iOiB7fSwKICAgICAgICAgICJUYWdLZXlzIjogewogICAgICAgICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgICAgICAgIm1lbWJlciI6IHt9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIlVwZGF0ZUlkZW50aXR5UG9vbCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJzaGFwZSI6ICJTaiIKICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAic2hhcGUiOiAiU2oiCiAgICAgIH0KICAgIH0KICB9LAogICJzaGFwZXMiOiB7CiAgICAiUzQiOiB7CiAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICJrZXkiOiB7fSwKICAgICAgInZhbHVlIjoge30KICAgIH0sCiAgICAiUzgiOiB7CiAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAibWVtYmVyIjoge30KICAgIH0sCiAgICAiU2EiOiB7CiAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAibWVtYmVyIjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiUHJvdmlkZXJOYW1lIjoge30sCiAgICAgICAgICAiQ2xpZW50SWQiOiB7fSwKICAgICAgICAgICJTZXJ2ZXJTaWRlVG9rZW5DaGVjayI6IHsKICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiU2YiOiB7CiAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAibWVtYmVyIjoge30KICAgIH0sCiAgICAiU2ciOiB7CiAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICJrZXkiOiB7fSwKICAgICAgInZhbHVlIjoge30KICAgIH0sCiAgICAiU2oiOiB7CiAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiSWRlbnRpdHlQb29sSWQiLAogICAgICAgICJJZGVudGl0eVBvb2xOYW1lIiwKICAgICAgICAiQWxsb3dVbmF1dGhlbnRpY2F0ZWRJZGVudGl0aWVzIgogICAgICBdLAogICAgICAibWVtYmVycyI6IHsKICAgICAgICAiSWRlbnRpdHlQb29sSWQiOiB7fSwKICAgICAgICAiSWRlbnRpdHlQb29sTmFtZSI6IHt9LAogICAgICAgICJBbGxvd1VuYXV0aGVudGljYXRlZElkZW50aXRpZXMiOiB7CiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgIH0sCiAgICAgICAgIlN1cHBvcnRlZExvZ2luUHJvdmlkZXJzIjogewogICAgICAgICAgInNoYXBlIjogIlM0IgogICAgICAgIH0sCiAgICAgICAgIkRldmVsb3BlclByb3ZpZGVyTmFtZSI6IHt9LAogICAgICAgICJPcGVuSWRDb25uZWN0UHJvdmlkZXJBUk5zIjogewogICAgICAgICAgInNoYXBlIjogIlM4IgogICAgICAgIH0sCiAgICAgICAgIkNvZ25pdG9JZGVudGl0eVByb3ZpZGVycyI6IHsKICAgICAgICAgICJzaGFwZSI6ICJTYSIKICAgICAgICB9LAogICAgICAgICJTYW1sUHJvdmlkZXJBUk5zIjogewogICAgICAgICAgInNoYXBlIjogIlNmIgogICAgICAgIH0sCiAgICAgICAgIklkZW50aXR5UG9vbFRhZ3MiOiB7CiAgICAgICAgICAic2hhcGUiOiAiU2ciCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlN1IjogewogICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAibWVtYmVycyI6IHsKICAgICAgICAiSWRlbnRpdHlJZCI6IHt9LAogICAgICAgICJMb2dpbnMiOiB7CiAgICAgICAgICAic2hhcGUiOiAiU3YiCiAgICAgICAgfSwKICAgICAgICAiQ3JlYXRpb25EYXRlIjogewogICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgIH0sCiAgICAgICAgIkxhc3RNb2RpZmllZERhdGUiOiB7CiAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlN2IjogewogICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgIm1lbWJlciI6IHt9CiAgICB9LAogICAgIlN6IjogewogICAgICAidHlwZSI6ICJtYXAiLAogICAgICAia2V5Ijoge30sCiAgICAgICJ2YWx1ZSI6IHt9CiAgICB9LAogICAgIlMxYiI6IHsKICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgImtleSI6IHt9LAogICAgICAidmFsdWUiOiB7fQogICAgfSwKICAgICJTMWQiOiB7CiAgICAgICJ0eXBlIjogIm1hcCIsCiAgICAgICJrZXkiOiB7fSwKICAgICAgInZhbHVlIjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlR5cGUiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJUeXBlIjoge30sCiAgICAgICAgICAiQW1iaWd1b3VzUm9sZVJlc29sdXRpb24iOiB7fSwKICAgICAgICAgICJSdWxlc0NvbmZpZ3VyYXRpb24iOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAiUnVsZXMiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICJSdWxlcyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAgICAgIm1lbWJlciI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICJDbGFpbSIsCiAgICAgICAgICAgICAgICAgICAgIk1hdGNoVHlwZSIsCiAgICAgICAgICAgICAgICAgICAgIlZhbHVlIiwKICAgICAgICAgICAgICAgICAgICAiUm9sZUFSTiIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAgICAgICAgICAgIkNsYWltIjoge30sCiAgICAgICAgICAgICAgICAgICAgIk1hdGNoVHlwZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICJWYWx1ZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICJSb2xlQVJOIjoge30KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQp9LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHM9ewogICJwYWdpbmF0aW9uIjogewogIH0KfQoKfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAidmVyc2lvbiI6ICIyLjAiLAogICJtZXRhZGF0YSI6IHsKICAgICJhcGlWZXJzaW9uIjogIjIwMTctMDItMTUiLAogICAgImVuZHBvaW50UHJlZml4IjogImNvbm5lY3QiLAogICAgImpzb25WZXJzaW9uIjogIjEuMCIsCiAgICAicHJvdG9jb2wiOiAianNvbiIsCiAgICAic2VydmljZUFiYnJldmlhdGlvbiI6ICJDb25uZWN0IiwKICAgICJzZXJ2aWNlRnVsbE5hbWUiOiAiQW1hem9uQ29ubmVjdENUSVNlcnZpY2UiLAogICAgInNpZ25hdHVyZVZlcnNpb24iOiAiIiwKICAgICJ0YXJnZXRQcmVmaXgiOiAiQW1hem9uQ29ubmVjdENUSVNlcnZpY2UiLAogICAgInVpZCI6ICJjb25uZWN0LTIwMTctMDItMTUiCiAgfSwKICAib3BlcmF0aW9ucyI6IHsKICAgICJBY2NlcHRDb250YWN0IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImNvbnRhY3RJZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIkNsZWFyQ29udGFjdCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImNvbnRhY3RJZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImNvbnRhY3RJZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIkNvbXBsZXRlQ29udGFjdCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImNvbnRhY3RJZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImNvbnRhY3RJZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIkNvbmZlcmVuY2VDb25uZWN0aW9ucyI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJjb250YWN0SWQiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJDcmVhdGVBZGRpdGlvbmFsQ29ubmVjdGlvbiI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgImVuZHBvaW50IgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAiY29udGFjdElkIjoge30sCiAgICAgICAgICAiZW5kcG9pbnQiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTZSIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiQ3JlYXRlT3V0Ym91bmRDb250YWN0IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImVuZHBvaW50IgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAiZW5kcG9pbnQiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTZSIKICAgICAgICAgIH0sCiAgICAgICAgICAicXVldWVBUk4iOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJDcmVhdGVUYXNrQ29udGFjdCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImVuZHBvaW50IiwKICAgICAgICAgICJuYW1lIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiZW5kcG9pbnQiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTZSIKICAgICAgICAgIH0sCiAgICAgICAgICAicHJldmlvdXNDb250YWN0SWQiOiB7fSwKICAgICAgICAgICJuYW1lIjoge30sCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7fSwKICAgICAgICAgICJyZWZlcmVuY2VzIjogewogICAgICAgICAgICAic2hhcGUiOiAiU3IiCiAgICAgICAgICB9LAogICAgICAgICAgImlkZW1wb3RlbmN5VG9rZW4iOiB7fSwKICAgICAgICAgICJzY2hlZHVsZWRUaW1lIjogewogICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImNvbnRhY3RJZCI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkNyZWF0ZVRyYW5zcG9ydCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgInRyYW5zcG9ydFR5cGUiLAogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAidHJhbnNwb3J0VHlwZSI6IHt9LAogICAgICAgICAgInBhcnRpY2lwYW50SWQiOiB7fSwKICAgICAgICAgICJjb250YWN0SWQiOiB7fSwKICAgICAgICAgICJzb2Z0cGhvbmVDbGllbnRJZCI6IHt9LAogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAid2ViU29ja2V0VHJhbnNwb3J0IjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgInVybCIsCiAgICAgICAgICAgICAgInRyYW5zcG9ydExpZmVUaW1lSW5TZWNvbmRzIgogICAgICAgICAgICBdLAogICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAidXJsIjoge30sCiAgICAgICAgICAgICAgInRyYW5zcG9ydExpZmVUaW1lSW5TZWNvbmRzIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibG9uZyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJleHBpcnkiOiB7fQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgImNoYXRUb2tlblRyYW5zcG9ydCI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICJwYXJ0aWNpcGFudFRva2VuIiwKICAgICAgICAgICAgICAiZXhwaXJ5IgogICAgICAgICAgICBdLAogICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAicGFydGljaXBhbnRUb2tlbiI6IHt9LAogICAgICAgICAgICAgICJleHBpcnkiOiB7fQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgInNvZnRwaG9uZVRyYW5zcG9ydCI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICJzb2Z0cGhvbmVNZWRpYUNvbm5lY3Rpb25zIgogICAgICAgICAgICBdLAogICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAic29mdHBob25lTWVkaWFDb25uZWN0aW9ucyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAgICAgIm1lbWJlciI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICJ1c2VybmFtZSIsCiAgICAgICAgICAgICAgICAgICAgImNyZWRlbnRpYWwiLAogICAgICAgICAgICAgICAgICAgICJ1cmxzIgogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAgICAgICAidXNlcm5hbWUiOiB7fSwKICAgICAgICAgICAgICAgICAgICAiY3JlZGVudGlhbCI6IHt9LAogICAgICAgICAgICAgICAgICAgICJ1cmxzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICAgICAgICAgICAibWVtYmVyIjoge30KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiRGVzdHJveUNvbm5lY3Rpb24iOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAiY29udGFjdElkIiwKICAgICAgICAgICJjb25uZWN0aW9uSWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJjb250YWN0SWQiOiB7fSwKICAgICAgICAgICJjb25uZWN0aW9uSWQiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJHZXRBZ2VudENvbmZpZ3VyYXRpb24iOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImNvbmZpZ3VyYXRpb24iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJjb25maWd1cmF0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzFoIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJHZXRBZ2VudFBlcm1pc3Npb25zIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJuZXh0VG9rZW4iOiB7fSwKICAgICAgICAgICJtYXhSZXN1bHRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJwZXJtaXNzaW9ucyIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgInBlcm1pc3Npb25zIjogewogICAgICAgICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgICAgICAgIm1lbWJlciI6IHt9CiAgICAgICAgICB9LAogICAgICAgICAgIm5leHRUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldEFnZW50U25hcHNob3QiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgIm5leHRUb2tlbiI6IHt9LAogICAgICAgICAgInRpbWVvdXQiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgInNuYXBzaG90IiwKICAgICAgICAgICJuZXh0VG9rZW4iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJzbmFwc2hvdCI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICJzdGF0ZSIsCiAgICAgICAgICAgICAgImNvbnRhY3RzIiwKICAgICAgICAgICAgICAic25hcHNob3RUaW1lc3RhbXAiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICJzdGF0ZSI6IHsKICAgICAgICAgICAgICAgICJzaGFwZSI6ICJTMjAiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAibmV4dFN0YXRlIjogewogICAgICAgICAgICAgICAgInNoYXBlIjogIlMyMCIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJhZ2VudEF2YWlsYWJpbGl0eVN0YXRlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAic3RhdGUiOiB7fSwKICAgICAgICAgICAgICAgICAgInRpbWVTdGFtcCI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJjb250YWN0cyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAgICAgIm1lbWJlciI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIiwKICAgICAgICAgICAgICAgICAgICAic3RhdGUiLAogICAgICAgICAgICAgICAgICAgICJjb25uZWN0aW9ucyIsCiAgICAgICAgICAgICAgICAgICAgImF0dHJpYnV0ZXMiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICJjb250YWN0SWQiOiB7fSwKICAgICAgICAgICAgICAgICAgICAiaW5pdGlhbENvbnRhY3RJZCI6IHt9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjoge30sCiAgICAgICAgICAgICAgICAgICAgInN0YXRlIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICAidGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInRpbWVzdGFtcCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInF1ZXVlIjogewogICAgICAgICAgICAgICAgICAgICAgInNoYXBlIjogIlNrIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInF1ZXVlVGltZXN0YW1wIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb25zIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICAgICAgICAgICAibWVtYmVyIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb25JZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImluaXRpYWwiCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJjb25uZWN0aW9uSWQiOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZW5kcG9pbnQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAic2hhcGUiOiAiU2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjoge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJpbml0aWFsIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJzb2Z0cGhvbmVNZWRpYUluZm8iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjYWxsVHlwZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXV0b0FjY2VwdCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWVkaWFMZWdDb250ZXh0VG9rZW4iOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNhbGxDb250ZXh0VG9rZW4iOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNhbGxDb25maWdKc29uIjoge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJjaGF0TWVkaWFJbmZvIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY2hhdEF1dG9BY2NlcHQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvbm5lY3Rpb25EYXRhIjoge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjdXN0b21lck5hbWUiOiB7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vbml0b3JpbmdJbmZvIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWdlbnQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhZ2VudE5hbWUiOiB7fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvaW5UaW1lU3RhbXAiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAibXV0ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAicXVpY2tDb25uZWN0TmFtZSI6IHt9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJhdHRyaWJ1dGVzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibWFwIiwKICAgICAgICAgICAgICAgICAgICAgICJrZXkiOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICJuYW1lIgogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IHt9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJjb250YWN0RHVyYXRpb24iOiB7fSwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6IHt9LAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHt9LAogICAgICAgICAgICAgICAgICAgICJyZWZlcmVuY2VzIjogewogICAgICAgICAgICAgICAgICAgICAgInNoYXBlIjogIlNyIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImluaXRpYXRpb25NZXRob2QiOiB7fSwKICAgICAgICAgICAgICAgICAgICAiY29udGFjdEZlYXR1cmVzIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiYXR0YWNobWVudHNFbmFibGVkIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzYWdpbmdNYXJrZG93bkVuYWJsZWQiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgIm11bHRpUGFydHlDb25mZXJlbmNlRW5hYmxlZCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAic25hcHNob3RUaW1lc3RhbXAiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIm5leHRUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldEFnZW50U3RhdGVzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJuZXh0VG9rZW4iOiB7fSwKICAgICAgICAgICJtYXhSZXN1bHRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJzdGF0ZXMiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJzdGF0ZXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAibWVtYmVyIjogewogICAgICAgICAgICAgICJzaGFwZSI6ICJTMjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAibmV4dFRva2VuIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiR2V0RGlhbGFibGVDb3VudHJ5Q29kZXMiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgIm5leHRUb2tlbiI6IHt9LAogICAgICAgICAgIm1heFJlc3VsdHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImNvdW50cnlDb2RlcyIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImNvdW50cnlDb2RlcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICAgICAgICJtZW1iZXIiOiB7fQogICAgICAgICAgfSwKICAgICAgICAgICJuZXh0VG9rZW4iOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJHZXRFbmRwb2ludHMiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAicXVldWVBUk5zIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAicXVldWVBUk5zIjogewogICAgICAgICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgICAgICAgIm1lbWJlciI6IHt9CiAgICAgICAgICB9LAogICAgICAgICAgIm5leHRUb2tlbiI6IHt9LAogICAgICAgICAgIm1heFJlc3VsdHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiZW5kcG9pbnRzIjogewogICAgICAgICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgICAgICAgIm1lbWJlciI6IHsKICAgICAgICAgICAgICAic2hhcGUiOiAiU2UiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICAibmV4dFRva2VuIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiR2V0TmV3QXV0aFRva2VuIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgInJlZnJlc2hUb2tlbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgInJlZnJlc2hUb2tlbiI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAibmV3QXV0aFRva2VuIjoge30sCiAgICAgICAgICAiZXhwaXJhdGlvbkRhdGVUaW1lIjogewogICAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldFJvdXRpbmdQcm9maWxlUXVldWVzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgInJvdXRpbmdQcm9maWxlQVJOIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAicm91dGluZ1Byb2ZpbGVBUk4iOiB7fSwKICAgICAgICAgICJuZXh0VG9rZW4iOiB7fSwKICAgICAgICAgICJtYXhSZXN1bHRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJxdWV1ZXMiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJxdWV1ZXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAgICAgICAibWVtYmVyIjogewogICAgICAgICAgICAgICJzaGFwZSI6ICJTayIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgICJuZXh0VG9rZW4iOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJIb2xkQ29ubmVjdGlvbiI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgImNvbm5lY3Rpb25JZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9LAogICAgICAgICAgImNvbm5lY3Rpb25JZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIk11dGVQYXJ0aWNpcGFudCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgImNvbm5lY3Rpb25JZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9LAogICAgICAgICAgImNvbm5lY3Rpb25JZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIk5vdGlmeUNvbnRhY3RJc3N1ZSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJjb250YWN0SWQiOiB7fSwKICAgICAgICAgICJpc3N1ZUNvZGUiOiB7fSwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHt9LAogICAgICAgICAgImNsaWVudExvZ3MiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJQdXRBZ2VudFN0YXRlIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgInN0YXRlIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMjAiCiAgICAgICAgICB9LAogICAgICAgICAgImVucXVldWVOZXh0U3RhdGUiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIlJlamVjdENvbnRhY3QiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJjb250YWN0SWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJjb250YWN0SWQiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJSZXN1bWVDb25uZWN0aW9uIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImNvbnRhY3RJZCIsCiAgICAgICAgICAiY29ubmVjdGlvbklkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAiY29udGFjdElkIjoge30sCiAgICAgICAgICAiY29ubmVjdGlvbklkIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiU2VuZENsaWVudExvZ3MiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAibG9nRXZlbnRzIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAibG9nRXZlbnRzIjogewogICAgICAgICAgICAidHlwZSI6ICJsaXN0IiwKICAgICAgICAgICAgIm1lbWJlciI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICAgInRpbWVzdGFtcCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjb21wb25lbnQiOiB7fSwKICAgICAgICAgICAgICAgICJtZXNzYWdlIjoge30KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiU2VuZERpZ2l0cyI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgImNvbm5lY3Rpb25JZCIsCiAgICAgICAgICAiZGlnaXRzIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAiY29udGFjdElkIjoge30sCiAgICAgICAgICAiY29ubmVjdGlvbklkIjoge30sCiAgICAgICAgICAiZGlnaXRzIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiU2VuZFNvZnRwaG9uZUNhbGxNZXRyaWNzIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImNvbnRhY3RJZCIsCiAgICAgICAgICAic29mdHBob25lU3RyZWFtU3RhdGlzdGljcyIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9LAogICAgICAgICAgImNjcFZlcnNpb24iOiB7fSwKICAgICAgICAgICJzb2Z0cGhvbmVTdHJlYW1TdGF0aXN0aWNzIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzNyIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJTZW5kU29mdHBob25lQ2FsbFJlcG9ydCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgInJlcG9ydCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9LAogICAgICAgICAgImNjcFZlcnNpb24iOiB7fSwKICAgICAgICAgICJyZXBvcnQiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAgICJjYWxsU3RhcnRUaW1lIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImNhbGxFbmRUaW1lIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3MiOiB7CiAgICAgICAgICAgICAgICAic2hhcGUiOiAiUzNyIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImd1bVRpbWVNaWxsaXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImluaXRpYWxpemF0aW9uVGltZU1pbGxpcyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiaWNlQ29sbGVjdGlvblRpbWVNaWxsaXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInNpZ25hbGxpbmdDb25uZWN0VGltZU1pbGxpcyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiaGFuZHNoYWtlVGltZU1pbGxpcyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAicHJlVGFsa1RpbWVNaWxsaXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInRhbGtUaW1lTWlsbGlzIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibG9uZyIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJjbGVhbnVwVGltZU1pbGxpcyI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiaWNlQ29sbGVjdGlvbkZhaWx1cmUiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgInNpZ25hbGxpbmdDb25uZWN0aW9uRmFpbHVyZSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiaGFuZHNoYWtlRmFpbHVyZSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiZ3VtT3RoZXJGYWlsdXJlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJndW1UaW1lb3V0RmFpbHVyZSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiY3JlYXRlT2ZmZXJGYWlsdXJlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJzZXRMb2NhbERlc2NyaXB0aW9uRmFpbHVyZSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAidXNlckJ1c3lGYWlsdXJlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJpbnZhbGlkUmVtb3RlU0RQRmFpbHVyZSI6IHsKICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAibm9SZW1vdGVJY2VDYW5kaWRhdGVGYWlsdXJlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJzZXRSZW1vdGVEZXNjcmlwdGlvbkZhaWx1cmUiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfSwKICAgICJUb2dnbGVBY3RpdmVDb25uZWN0aW9ucyI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIiwKICAgICAgICAgICJjb250YWN0SWQiLAogICAgICAgICAgImNvbm5lY3Rpb25JZCIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgImF1dGhlbnRpY2F0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzIiCiAgICAgICAgICB9LAogICAgICAgICAgImNvbnRhY3RJZCI6IHt9LAogICAgICAgICAgImNvbm5lY3Rpb25JZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7fQogICAgICB9CiAgICB9LAogICAgIlVubXV0ZVBhcnRpY2lwYW50IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImNvbnRhY3RJZCIsCiAgICAgICAgICAiY29ubmVjdGlvbklkIgogICAgICAgIF0sCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXV0aGVudGljYXRpb24iOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTMiIKICAgICAgICAgIH0sCiAgICAgICAgICAiY29udGFjdElkIjoge30sCiAgICAgICAgICAiY29ubmVjdGlvbklkIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiVXBkYXRlQWdlbnRDb25maWd1cmF0aW9uIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiYXV0aGVudGljYXRpb24iLAogICAgICAgICAgImNvbmZpZ3VyYXRpb24iCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJhdXRoZW50aWNhdGlvbiI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlMyIgogICAgICAgICAgfSwKICAgICAgICAgICJjb25maWd1cmF0aW9uIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzFoIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjoge30KICAgICAgfQogICAgfQogIH0sCiAgInNoYXBlcyI6IHsKICAgICJTMiI6IHsKICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgImFnZW50QVJOIjoge30sCiAgICAgICAgImF1dGhUb2tlbiI6IHt9CiAgICAgIH0KICAgIH0sCiAgICAiU2UiOiB7CiAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAidHlwZSIKICAgICAgXSwKICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgImVuZHBvaW50QVJOIjoge30sCiAgICAgICAgInR5cGUiOiB7fSwKICAgICAgICAibmFtZSI6IHt9LAogICAgICAgICJwaG9uZU51bWJlciI6IHt9LAogICAgICAgICJhZ2VudExvZ2luIjoge30sCiAgICAgICAgInF1ZXVlIjogewogICAgICAgICAgInNoYXBlIjogIlNrIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJTayI6IHsKICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgInF1ZXVlQVJOIjoge30sCiAgICAgICAgIm5hbWUiOiB7fQogICAgICB9CiAgICB9LAogICAgIlNyIjogewogICAgICAidHlwZSI6ICJtYXAiLAogICAgICAia2V5Ijoge30sCiAgICAgICJ2YWx1ZSI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJ2YWx1ZSIsCiAgICAgICAgICAidHlwZSIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgInZhbHVlIjoge30sCiAgICAgICAgICAidHlwZSI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlMxaCI6IHsKICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJuYW1lIiwKICAgICAgICAic29mdHBob25lRW5hYmxlZCIsCiAgICAgICAgInNvZnRwaG9uZUF1dG9BY2NlcHQiLAogICAgICAgICJleHRlbnNpb24iLAogICAgICAgICJyb3V0aW5nUHJvZmlsZSIKICAgICAgXSwKICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgIm5hbWUiOiB7fSwKICAgICAgICAidXNlcm5hbWUiOiB7fSwKICAgICAgICAic29mdHBob25lRW5hYmxlZCI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgfSwKICAgICAgICAic29mdHBob25lQXV0b0FjY2VwdCI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iCiAgICAgICAgfSwKICAgICAgICAiZXh0ZW5zaW9uIjoge30sCiAgICAgICAgInJvdXRpbmdQcm9maWxlIjogewogICAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgICAibmFtZSI6IHt9LAogICAgICAgICAgICAicm91dGluZ1Byb2ZpbGVBUk4iOiB7fSwKICAgICAgICAgICAgImRlZmF1bHRPdXRib3VuZFF1ZXVlIjogewogICAgICAgICAgICAgICJzaGFwZSI6ICJTayIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImNoYW5uZWxDb25jdXJyZW5jeU1hcCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJtYXAiLAogICAgICAgICAgICAgICJrZXkiOiB7fSwKICAgICAgICAgICAgICAidmFsdWUiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImFnZW50UHJlZmVyZW5jZXMiOiB7CiAgICAgICAgICAidHlwZSI6ICJtYXAiLAogICAgICAgICAgImtleSI6IHt9LAogICAgICAgICAgInZhbHVlIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiUzIwIjogewogICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInR5cGUiLAogICAgICAgICJuYW1lIgogICAgICBdLAogICAgICAibWVtYmVycyI6IHsKICAgICAgICAiYWdlbnRTdGF0ZUFSTiI6IHt9LAogICAgICAgICJ0eXBlIjoge30sCiAgICAgICAgIm5hbWUiOiB7fSwKICAgICAgICAic3RhcnRUaW1lc3RhbXAiOiB7CiAgICAgICAgICAidHlwZSI6ICJ0aW1lc3RhbXAiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIlMzciI6IHsKICAgICAgInR5cGUiOiAibGlzdCIsCiAgICAgICJtZW1iZXIiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInRpbWVzdGFtcCIKICAgICAgICAgIH0sCiAgICAgICAgICAic29mdHBob25lU3RyZWFtVHlwZSI6IHt9LAogICAgICAgICAgInBhY2tldENvdW50IjogewogICAgICAgICAgICAidHlwZSI6ICJsb25nIgogICAgICAgICAgfSwKICAgICAgICAgICJwYWNrZXRzTG9zdCI6IHsKICAgICAgICAgICAgInR5cGUiOiAibG9uZyIKICAgICAgICAgIH0sCiAgICAgICAgICAiYXVkaW9MZXZlbCI6IHsKICAgICAgICAgICAgInR5cGUiOiAiZG91YmxlIgogICAgICAgICAgfSwKICAgICAgICAgICJqaXR0ZXJCdWZmZXJNaWxsaXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICB9LAogICAgICAgICAgInJvdW5kVHJpcFRpbWVNaWxsaXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImxvbmciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz17CiAgImFjbSI6IHsKICAgICJuYW1lIjogIkFDTSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJhcGlnYXRld2F5IjogewogICAgIm5hbWUiOiAiQVBJR2F0ZXdheSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJhcHBsaWNhdGlvbmF1dG9zY2FsaW5nIjogewogICAgInByZWZpeCI6ICJhcHBsaWNhdGlvbi1hdXRvc2NhbGluZyIsCiAgICAibmFtZSI6ICJBcHBsaWNhdGlvbkF1dG9TY2FsaW5nIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImFwcHN0cmVhbSI6IHsKICAgICJuYW1lIjogIkFwcFN0cmVhbSIKICB9LAogICJhdXRvc2NhbGluZyI6IHsKICAgICJuYW1lIjogIkF1dG9TY2FsaW5nIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImJhdGNoIjogewogICAgIm5hbWUiOiAiQmF0Y2giCiAgfSwKICAiYnVkZ2V0cyI6IHsKICAgICJuYW1lIjogIkJ1ZGdldHMiCiAgfSwKICAiY2xvdWRkaXJlY3RvcnkiOiB7CiAgICAibmFtZSI6ICJDbG91ZERpcmVjdG9yeSIsCiAgICAidmVyc2lvbnMiOiBbCiAgICAgICIyMDE2LTA1LTEwKiIKICAgIF0KICB9LAogICJjbG91ZGZvcm1hdGlvbiI6IHsKICAgICJuYW1lIjogIkNsb3VkRm9ybWF0aW9uIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImNsb3VkZnJvbnQiOiB7CiAgICAibmFtZSI6ICJDbG91ZEZyb250IiwKICAgICJ2ZXJzaW9ucyI6IFsKICAgICAgIjIwMTMtMDUtMTIqIiwKICAgICAgIjIwMTMtMTEtMTEqIiwKICAgICAgIjIwMTQtMDUtMzEqIiwKICAgICAgIjIwMTQtMTAtMjEqIiwKICAgICAgIjIwMTQtMTEtMDYqIiwKICAgICAgIjIwMTUtMDQtMTcqIiwKICAgICAgIjIwMTUtMDctMjcqIiwKICAgICAgIjIwMTUtMDktMTcqIiwKICAgICAgIjIwMTYtMDEtMTMqIiwKICAgICAgIjIwMTYtMDEtMjgqIiwKICAgICAgIjIwMTYtMDgtMDEqIiwKICAgICAgIjIwMTYtMDgtMjAqIiwKICAgICAgIjIwMTYtMDktMDcqIiwKICAgICAgIjIwMTYtMDktMjkqIiwKICAgICAgIjIwMTYtMTEtMjUqIiwKICAgICAgIjIwMTctMDMtMjUqIiwKICAgICAgIjIwMTctMTAtMzAqIiwKICAgICAgIjIwMTgtMDYtMTgqIiwKICAgICAgIjIwMTgtMTEtMDUqIgogICAgXSwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImNsb3VkaHNtIjogewogICAgIm5hbWUiOiAiQ2xvdWRIU00iLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY2xvdWRzZWFyY2giOiB7CiAgICAibmFtZSI6ICJDbG91ZFNlYXJjaCIKICB9LAogICJjbG91ZHNlYXJjaGRvbWFpbiI6IHsKICAgICJuYW1lIjogIkNsb3VkU2VhcmNoRG9tYWluIgogIH0sCiAgImNsb3VkdHJhaWwiOiB7CiAgICAibmFtZSI6ICJDbG91ZFRyYWlsIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImNsb3Vkd2F0Y2giOiB7CiAgICAicHJlZml4IjogIm1vbml0b3JpbmciLAogICAgIm5hbWUiOiAiQ2xvdWRXYXRjaCIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJjbG91ZHdhdGNoZXZlbnRzIjogewogICAgInByZWZpeCI6ICJldmVudHMiLAogICAgIm5hbWUiOiAiQ2xvdWRXYXRjaEV2ZW50cyIsCiAgICAidmVyc2lvbnMiOiBbCiAgICAgICIyMDE0LTAyLTAzKiIKICAgIF0sCiAgICAiY29ycyI6IHRydWUKICB9LAogICJjbG91ZHdhdGNobG9ncyI6IHsKICAgICJwcmVmaXgiOiAibG9ncyIsCiAgICAibmFtZSI6ICJDbG91ZFdhdGNoTG9ncyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJjb2RlYnVpbGQiOiB7CiAgICAibmFtZSI6ICJDb2RlQnVpbGQiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29kZWNvbW1pdCI6IHsKICAgICJuYW1lIjogIkNvZGVDb21taXQiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29kZWRlcGxveSI6IHsKICAgICJuYW1lIjogIkNvZGVEZXBsb3kiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29kZXBpcGVsaW5lIjogewogICAgIm5hbWUiOiAiQ29kZVBpcGVsaW5lIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImNvZ25pdG9pZGVudGl0eSI6IHsKICAgICJwcmVmaXgiOiAiY29nbml0by1pZGVudGl0eSIsCiAgICAibmFtZSI6ICJDb2duaXRvSWRlbnRpdHkiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29nbml0b2lkZW50aXR5c2VydmljZXByb3ZpZGVyIjogewogICAgInByZWZpeCI6ICJjb2duaXRvLWlkcCIsCiAgICAibmFtZSI6ICJDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29nbml0b3N5bmMiOiB7CiAgICAicHJlZml4IjogImNvZ25pdG8tc3luYyIsCiAgICAibmFtZSI6ICJDb2duaXRvU3luYyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJjb25maWdzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJjb25maWciLAogICAgIm5hbWUiOiAiQ29uZmlnU2VydmljZSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJjb25uZWN0IjogewogICAgICAibmFtZSI6ICJDb25uZWN0IiwKICAgICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY3VyIjogewogICAgIm5hbWUiOiAiQ1VSIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImRhdGFwaXBlbGluZSI6IHsKICAgICJuYW1lIjogIkRhdGFQaXBlbGluZSIKICB9LAogICJkZXZpY2VmYXJtIjogewogICAgIm5hbWUiOiAiRGV2aWNlRmFybSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJkaXJlY3Rjb25uZWN0IjogewogICAgIm5hbWUiOiAiRGlyZWN0Q29ubmVjdCIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJkaXJlY3RvcnlzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJkcyIsCiAgICAibmFtZSI6ICJEaXJlY3RvcnlTZXJ2aWNlIgogIH0sCiAgImRpc2NvdmVyeSI6IHsKICAgICJuYW1lIjogIkRpc2NvdmVyeSIKICB9LAogICJkbXMiOiB7CiAgICAibmFtZSI6ICJETVMiCiAgfSwKICAiZHluYW1vZGIiOiB7CiAgICAibmFtZSI6ICJEeW5hbW9EQiIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJkeW5hbW9kYnN0cmVhbXMiOiB7CiAgICAicHJlZml4IjogInN0cmVhbXMuZHluYW1vZGIiLAogICAgIm5hbWUiOiAiRHluYW1vREJTdHJlYW1zIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImVjMiI6IHsKICAgICJuYW1lIjogIkVDMiIsCiAgICAidmVyc2lvbnMiOiBbCiAgICAgICIyMDEzLTA2LTE1KiIsCiAgICAgICIyMDEzLTEwLTE1KiIsCiAgICAgICIyMDE0LTAyLTAxKiIsCiAgICAgICIyMDE0LTA1LTAxKiIsCiAgICAgICIyMDE0LTA2LTE1KiIsCiAgICAgICIyMDE0LTA5LTAxKiIsCiAgICAgICIyMDE0LTEwLTAxKiIsCiAgICAgICIyMDE1LTAzLTAxKiIsCiAgICAgICIyMDE1LTA0LTE1KiIsCiAgICAgICIyMDE1LTEwLTAxKiIsCiAgICAgICIyMDE2LTA0LTAxKiIsCiAgICAgICIyMDE2LTA5LTE1KiIKICAgIF0sCiAgICAiY29ycyI6IHRydWUKICB9LAogICJlY3IiOiB7CiAgICAibmFtZSI6ICJFQ1IiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZWNzIjogewogICAgIm5hbWUiOiAiRUNTIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImVmcyI6IHsKICAgICJwcmVmaXgiOiAiZWxhc3RpY2ZpbGVzeXN0ZW0iLAogICAgIm5hbWUiOiAiRUZTIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImVsYXN0aWNhY2hlIjogewogICAgIm5hbWUiOiAiRWxhc3RpQ2FjaGUiLAogICAgInZlcnNpb25zIjogWwogICAgICAiMjAxMi0xMS0xNSoiLAogICAgICAiMjAxNC0wMy0yNCoiLAogICAgICAiMjAxNC0wNy0xNSoiLAogICAgICAiMjAxNC0wOS0zMCoiCiAgICBdLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZWxhc3RpY2JlYW5zdGFsayI6IHsKICAgICJuYW1lIjogIkVsYXN0aWNCZWFuc3RhbGsiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZWxiIjogewogICAgInByZWZpeCI6ICJlbGFzdGljbG9hZGJhbGFuY2luZyIsCiAgICAibmFtZSI6ICJFTEIiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZWxidjIiOiB7CiAgICAicHJlZml4IjogImVsYXN0aWNsb2FkYmFsYW5jaW5ndjIiLAogICAgIm5hbWUiOiAiRUxCdjIiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZW1yIjogewogICAgInByZWZpeCI6ICJlbGFzdGljbWFwcmVkdWNlIiwKICAgICJuYW1lIjogIkVNUiIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJlcyI6IHsKICAgICJuYW1lIjogIkVTIgogIH0sCiAgImVsYXN0aWN0cmFuc2NvZGVyIjogewogICAgIm5hbWUiOiAiRWxhc3RpY1RyYW5zY29kZXIiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZmlyZWhvc2UiOiB7CiAgICAibmFtZSI6ICJGaXJlaG9zZSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJnYW1lbGlmdCI6IHsKICAgICJuYW1lIjogIkdhbWVMaWZ0IiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImdsYWNpZXIiOiB7CiAgICAibmFtZSI6ICJHbGFjaWVyIgogIH0sCiAgImhlYWx0aCI6IHsKICAgICJuYW1lIjogIkhlYWx0aCIKICB9LAogICJpYW0iOiB7CiAgICAibmFtZSI6ICJJQU0iLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiaW1wb3J0ZXhwb3J0IjogewogICAgIm5hbWUiOiAiSW1wb3J0RXhwb3J0IgogIH0sCiAgImluc3BlY3RvciI6IHsKICAgICJuYW1lIjogIkluc3BlY3RvciIsCiAgICAidmVyc2lvbnMiOiBbCiAgICAgICIyMDE1LTA4LTE4KiIKICAgIF0sCiAgICAiY29ycyI6IHRydWUKICB9LAogICJpb3QiOiB7CiAgICAibmFtZSI6ICJJb3QiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiaW90ZGF0YSI6IHsKICAgICJwcmVmaXgiOiAiaW90LWRhdGEiLAogICAgIm5hbWUiOiAiSW90RGF0YSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJraW5lc2lzIjogewogICAgIm5hbWUiOiAiS2luZXNpcyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJraW5lc2lzYW5hbHl0aWNzIjogewogICAgIm5hbWUiOiAiS2luZXNpc0FuYWx5dGljcyIKICB9LAogICJrbXMiOiB7CiAgICAibmFtZSI6ICJLTVMiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAibGFtYmRhIjogewogICAgIm5hbWUiOiAiTGFtYmRhIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImxleHJ1bnRpbWUiOiB7CiAgICAicHJlZml4IjogInJ1bnRpbWUubGV4IiwKICAgICJuYW1lIjogIkxleFJ1bnRpbWUiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAibGlnaHRzYWlsIjogewogICAgIm5hbWUiOiAiTGlnaHRzYWlsIgogIH0sCiAgIm1hY2hpbmVsZWFybmluZyI6IHsKICAgICJuYW1lIjogIk1hY2hpbmVMZWFybmluZyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJtYXJrZXRwbGFjZWNvbW1lcmNlYW5hbHl0aWNzIjogewogICAgIm5hbWUiOiAiTWFya2V0cGxhY2VDb21tZXJjZUFuYWx5dGljcyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJtYXJrZXRwbGFjZW1ldGVyaW5nIjogewogICAgInByZWZpeCI6ICJtZXRlcmluZ21hcmtldHBsYWNlIiwKICAgICJuYW1lIjogIk1hcmtldHBsYWNlTWV0ZXJpbmciCiAgfSwKICAibXR1cmsiOiB7CiAgICAicHJlZml4IjogIm10dXJrLXJlcXVlc3RlciIsCiAgICAibmFtZSI6ICJNVHVyayIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJtb2JpbGVhbmFseXRpY3MiOiB7CiAgICAibmFtZSI6ICJNb2JpbGVBbmFseXRpY3MiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAib3Bzd29ya3MiOiB7CiAgICAibmFtZSI6ICJPcHNXb3JrcyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJvcHN3b3Jrc2NtIjogewogICAgIm5hbWUiOiAiT3BzV29ya3NDTSIKICB9LAogICJvcmdhbml6YXRpb25zIjogewogICAgIm5hbWUiOiAiT3JnYW5pemF0aW9ucyIKICB9LAogICJwaW5wb2ludCI6IHsKICAgICJuYW1lIjogIlBpbnBvaW50IgogIH0sCiAgInBvbGx5IjogewogICAgIm5hbWUiOiAiUG9sbHkiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAicmRzIjogewogICAgIm5hbWUiOiAiUkRTIiwKICAgICJ2ZXJzaW9ucyI6IFsKICAgICAgIjIwMTQtMDktMDEqIgogICAgXSwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgInJlZHNoaWZ0IjogewogICAgIm5hbWUiOiAiUmVkc2hpZnQiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAicmVrb2duaXRpb24iOiB7CiAgICAibmFtZSI6ICJSZWtvZ25pdGlvbiIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJyZXNvdXJjZWdyb3Vwc3RhZ2dpbmdhcGkiOiB7CiAgICAibmFtZSI6ICJSZXNvdXJjZUdyb3Vwc1RhZ2dpbmdBUEkiCiAgfSwKICAicm91dGU1MyI6IHsKICAgICJuYW1lIjogIlJvdXRlNTMiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAicm91dGU1M2RvbWFpbnMiOiB7CiAgICAibmFtZSI6ICJSb3V0ZTUzRG9tYWlucyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzMyI6IHsKICAgICJuYW1lIjogIlMzIiwKICAgICJkdWFsc3RhY2tBdmFpbGFibGUiOiB0cnVlLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiczNjb250cm9sIjogewogICAgIm5hbWUiOiAiUzNDb250cm9sIiwKICAgICJkdWFsc3RhY2tBdmFpbGFibGUiOiB0cnVlCiAgfSwKICAic2VydmljZWNhdGFsb2ciOiB7CiAgICAibmFtZSI6ICJTZXJ2aWNlQ2F0YWxvZyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzZXMiOiB7CiAgICAicHJlZml4IjogImVtYWlsIiwKICAgICJuYW1lIjogIlNFUyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzaGllbGQiOiB7CiAgICAibmFtZSI6ICJTaGllbGQiCiAgfSwKICAic2ltcGxlZGIiOiB7CiAgICAicHJlZml4IjogInNkYiIsCiAgICAibmFtZSI6ICJTaW1wbGVEQiIKICB9LAogICJzbXMiOiB7CiAgICAibmFtZSI6ICJTTVMiCiAgfSwKICAic25vd2JhbGwiOiB7CiAgICAibmFtZSI6ICJTbm93YmFsbCIKICB9LAogICJzbnMiOiB7CiAgICAibmFtZSI6ICJTTlMiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAic3FzIjogewogICAgIm5hbWUiOiAiU1FTIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgInNzbSI6IHsKICAgICJuYW1lIjogIlNTTSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzdG9yYWdlZ2F0ZXdheSI6IHsKICAgICJuYW1lIjogIlN0b3JhZ2VHYXRld2F5IiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgInN0ZXBmdW5jdGlvbnMiOiB7CiAgICAicHJlZml4IjogInN0YXRlcyIsCiAgICAibmFtZSI6ICJTdGVwRnVuY3Rpb25zIgogIH0sCiAgInN0cyI6IHsKICAgICJuYW1lIjogIlNUUyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzdXBwb3J0IjogewogICAgIm5hbWUiOiAiU3VwcG9ydCIKICB9LAogICJzd2YiOiB7CiAgICAibmFtZSI6ICJTV0YiCiAgfSwKICAieHJheSI6IHsKICAgICJuYW1lIjogIlhSYXkiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAid2FmIjogewogICAgIm5hbWUiOiAiV0FGIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgIndhZnJlZ2lvbmFsIjogewogICAgInByZWZpeCI6ICJ3YWYtcmVnaW9uYWwiLAogICAgIm5hbWUiOiAiV0FGUmVnaW9uYWwiCiAgfSwKICAid29ya2RvY3MiOiB7CiAgICAibmFtZSI6ICJXb3JrRG9jcyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJ3b3Jrc3BhY2VzIjogewogICAgIm5hbWUiOiAiV29ya1NwYWNlcyIKICB9LAogICJjb2Rlc3RhciI6IHsKICAgICJuYW1lIjogIkNvZGVTdGFyIgogIH0sCiAgImxleG1vZGVsYnVpbGRpbmdzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJsZXgtbW9kZWxzIiwKICAgICJuYW1lIjogIkxleE1vZGVsQnVpbGRpbmdTZXJ2aWNlIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgIm1hcmtldHBsYWNlZW50aXRsZW1lbnRzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJlbnRpdGxlbWVudC5tYXJrZXRwbGFjZSIsCiAgICAibmFtZSI6ICJNYXJrZXRwbGFjZUVudGl0bGVtZW50U2VydmljZSIKICB9LAogICJhdGhlbmEiOiB7CiAgICAibmFtZSI6ICJBdGhlbmEiCiAgfSwKICAiZ3JlZW5ncmFzcyI6IHsKICAgICJuYW1lIjogIkdyZWVuZ3Jhc3MiCiAgfSwKICAiZGF4IjogewogICAgIm5hbWUiOiAiREFYIgogIH0sCiAgIm1pZ3JhdGlvbmh1YiI6IHsKICAgICJwcmVmaXgiOiAiQVdTTWlncmF0aW9uSHViIiwKICAgICJuYW1lIjogIk1pZ3JhdGlvbkh1YiIKICB9LAogICJjbG91ZGhzbXYyIjogewogICAgIm5hbWUiOiAiQ2xvdWRIU01WMiIKICB9LAogICJnbHVlIjogewogICAgIm5hbWUiOiAiR2x1ZSIKICB9LAogICJtb2JpbGUiOiB7CiAgICAibmFtZSI6ICJNb2JpbGUiCiAgfSwKICAicHJpY2luZyI6IHsKICAgICJuYW1lIjogIlByaWNpbmciLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiY29zdGV4cGxvcmVyIjogewogICAgInByZWZpeCI6ICJjZSIsCiAgICAibmFtZSI6ICJDb3N0RXhwbG9yZXIiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAibWVkaWFjb252ZXJ0IjogewogICAgIm5hbWUiOiAiTWVkaWFDb252ZXJ0IgogIH0sCiAgIm1lZGlhbGl2ZSI6IHsKICAgICJuYW1lIjogIk1lZGlhTGl2ZSIKICB9LAogICJtZWRpYXBhY2thZ2UiOiB7CiAgICAibmFtZSI6ICJNZWRpYVBhY2thZ2UiCiAgfSwKICAibWVkaWFzdG9yZSI6IHsKICAgICJuYW1lIjogIk1lZGlhU3RvcmUiCiAgfSwKICAibWVkaWFzdG9yZWRhdGEiOiB7CiAgICAicHJlZml4IjogIm1lZGlhc3RvcmUtZGF0YSIsCiAgICAibmFtZSI6ICJNZWRpYVN0b3JlRGF0YSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJhcHBzeW5jIjogewogICAgIm5hbWUiOiAiQXBwU3luYyIKICB9LAogICJndWFyZGR1dHkiOiB7CiAgICAibmFtZSI6ICJHdWFyZER1dHkiCiAgfSwKICAibXEiOiB7CiAgICAibmFtZSI6ICJNUSIKICB9LAogICJjb21wcmVoZW5kIjogewogICAgIm5hbWUiOiAiQ29tcHJlaGVuZCIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJpb3Rqb2JzZGF0YXBsYW5lIjogewogICAgInByZWZpeCI6ICJpb3Qtam9icy1kYXRhIiwKICAgICJuYW1lIjogIklvVEpvYnNEYXRhUGxhbmUiCiAgfSwKICAia2luZXNpc3ZpZGVvYXJjaGl2ZWRtZWRpYSI6IHsKICAgICJwcmVmaXgiOiAia2luZXNpcy12aWRlby1hcmNoaXZlZC1tZWRpYSIsCiAgICAibmFtZSI6ICJLaW5lc2lzVmlkZW9BcmNoaXZlZE1lZGlhIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImtpbmVzaXN2aWRlb21lZGlhIjogewogICAgInByZWZpeCI6ICJraW5lc2lzLXZpZGVvLW1lZGlhIiwKICAgICJuYW1lIjogIktpbmVzaXNWaWRlb01lZGlhIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgImtpbmVzaXN2aWRlbyI6IHsKICAgICJuYW1lIjogIktpbmVzaXNWaWRlbyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJzYWdlbWFrZXJydW50aW1lIjogewogICAgInByZWZpeCI6ICJydW50aW1lLnNhZ2VtYWtlciIsCiAgICAibmFtZSI6ICJTYWdlTWFrZXJSdW50aW1lIgogIH0sCiAgInNhZ2VtYWtlciI6IHsKICAgICJuYW1lIjogIlNhZ2VNYWtlciIKICB9LAogICJ0cmFuc2xhdGUiOiB7CiAgICAibmFtZSI6ICJUcmFuc2xhdGUiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAicmVzb3VyY2Vncm91cHMiOiB7CiAgICAicHJlZml4IjogInJlc291cmNlLWdyb3VwcyIsCiAgICAibmFtZSI6ICJSZXNvdXJjZUdyb3VwcyIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJhbGV4YWZvcmJ1c2luZXNzIjogewogICAgIm5hbWUiOiAiQWxleGFGb3JCdXNpbmVzcyIKICB9LAogICJjbG91ZDkiOiB7CiAgICAibmFtZSI6ICJDbG91ZDkiCiAgfSwKICAic2VydmVybGVzc2FwcGxpY2F0aW9ucmVwb3NpdG9yeSI6IHsKICAgICJwcmVmaXgiOiAic2VydmVybGVzc3JlcG8iLAogICAgIm5hbWUiOiAiU2VydmVybGVzc0FwcGxpY2F0aW9uUmVwb3NpdG9yeSIKICB9LAogICJzZXJ2aWNlZGlzY292ZXJ5IjogewogICAgIm5hbWUiOiAiU2VydmljZURpc2NvdmVyeSIKICB9LAogICJ3b3JrbWFpbCI6IHsKICAgICJuYW1lIjogIldvcmtNYWlsIgogIH0sCiAgImF1dG9zY2FsaW5ncGxhbnMiOiB7CiAgICAicHJlZml4IjogImF1dG9zY2FsaW5nLXBsYW5zIiwKICAgICJuYW1lIjogIkF1dG9TY2FsaW5nUGxhbnMiCiAgfSwKICAidHJhbnNjcmliZXNlcnZpY2UiOiB7CiAgICAicHJlZml4IjogInRyYW5zY3JpYmUiLAogICAgIm5hbWUiOiAiVHJhbnNjcmliZVNlcnZpY2UiCiAgfSwKICAiYWNtcGNhIjogewogICAgInByZWZpeCI6ICJhY20tcGNhIiwKICAgICJuYW1lIjogIkFDTVBDQSIKICB9LAogICJmbXMiOiB7CiAgICAibmFtZSI6ICJGTVMiCiAgfSwKICAic2VjcmV0c21hbmFnZXIiOiB7CiAgICAibmFtZSI6ICJTZWNyZXRzTWFuYWdlciIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJpb3RhbmFseXRpY3MiOiB7CiAgICAibmFtZSI6ICJJb1RBbmFseXRpY3MiLAogICAgImNvcnMiOiB0cnVlCQogIH0sCiAgImlvdDFjbGlja2RldmljZXNzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJpb3QxY2xpY2stZGV2aWNlcyIsCiAgICAibmFtZSI6ICJJb1QxQ2xpY2tEZXZpY2VzU2VydmljZSIKICB9LAogICJpb3QxY2xpY2twcm9qZWN0cyI6IHsKICAgICJwcmVmaXgiOiAiaW90MWNsaWNrLXByb2plY3RzIiwKICAgICJuYW1lIjogIklvVDFDbGlja1Byb2plY3RzIgogIH0sCiAgInBpIjogewogICAgIm5hbWUiOiAiUEkiCiAgfSwKICAibmVwdHVuZSI6IHsKICAgICJuYW1lIjogIk5lcHR1bmUiCiAgfSwKICAibWVkaWF0YWlsb3IiOiB7CiAgICAibmFtZSI6ICJNZWRpYVRhaWxvciIKICB9LAogICJla3MiOiB7CiAgICAibmFtZSI6ICJFS1MiCiAgfSwKICAibWFjaWUiOiB7CiAgICAibmFtZSI6ICJNYWNpZSIKICB9LAogICJkbG0iOiB7CiAgICAibmFtZSI6ICJETE0iCiAgfSwKICAic2lnbmVyIjogewogICAgIm5hbWUiOiAiU2lnbmVyIgogIH0sCiAgImNoaW1lIjogewogICAgIm5hbWUiOiAiQ2hpbWUiCiAgfSwKICAicGlucG9pbnRlbWFpbCI6IHsKICAgICJwcmVmaXgiOiAicGlucG9pbnQtZW1haWwiLAogICAgIm5hbWUiOiAiUGlucG9pbnRFbWFpbCIKICB9LAogICJyYW0iOiB7CiAgICAibmFtZSI6ICJSQU0iCiAgfSwKICAicm91dGU1M3Jlc29sdmVyIjogewogICAgIm5hbWUiOiAiUm91dGU1M1Jlc29sdmVyIgogIH0sCiAgInBpbnBvaW50c21zdm9pY2UiOiB7CiAgICAicHJlZml4IjogInNtcy12b2ljZSIsCiAgICAibmFtZSI6ICJQaW5wb2ludFNNU1ZvaWNlIgogIH0sCiAgInF1aWNrc2lnaHQiOiB7CiAgICAibmFtZSI6ICJRdWlja1NpZ2h0IgogIH0sCiAgInJkc2RhdGFzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJyZHMtZGF0YSIsCiAgICAibmFtZSI6ICJSRFNEYXRhU2VydmljZSIKICB9LAogICJhbXBsaWZ5IjogewogICAgIm5hbWUiOiAiQW1wbGlmeSIKICB9LAogICJkYXRhc3luYyI6IHsKICAgICJuYW1lIjogIkRhdGFTeW5jIgogIH0sCiAgInJvYm9tYWtlciI6IHsKICAgICJuYW1lIjogIlJvYm9NYWtlciIKICB9LAogICJ0cmFuc2ZlciI6IHsKICAgICJuYW1lIjogIlRyYW5zZmVyIgogIH0sCiAgImdsb2JhbGFjY2VsZXJhdG9yIjogewogICAgIm5hbWUiOiAiR2xvYmFsQWNjZWxlcmF0b3IiCiAgfSwKICAiY29tcHJlaGVuZG1lZGljYWwiOiB7CiAgICAibmFtZSI6ICJDb21wcmVoZW5kTWVkaWNhbCIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJraW5lc2lzYW5hbHl0aWNzdjIiOiB7CiAgICAibmFtZSI6ICJLaW5lc2lzQW5hbHl0aWNzVjIiCiAgfSwKICAibWVkaWFjb25uZWN0IjogewogICAgIm5hbWUiOiAiTWVkaWFDb25uZWN0IgogIH0sCiAgImZzeCI6IHsKICAgICJuYW1lIjogIkZTeCIKICB9LAogICJzZWN1cml0eWh1YiI6IHsKICAgICJuYW1lIjogIlNlY3VyaXR5SHViIgogIH0sCiAgImFwcG1lc2giOiB7CiAgICAibmFtZSI6ICJBcHBNZXNoIiwKICAgICJ2ZXJzaW9ucyI6IFsKICAgICAgIjIwMTgtMTAtMDEqIgogICAgXQogIH0sCiAgImxpY2Vuc2VtYW5hZ2VyIjogewogICAgInByZWZpeCI6ICJsaWNlbnNlLW1hbmFnZXIiLAogICAgIm5hbWUiOiAiTGljZW5zZU1hbmFnZXIiCiAgfSwKICAia2Fma2EiOiB7CiAgICAibmFtZSI6ICJLYWZrYSIKICB9LAogICJhcGlnYXRld2F5bWFuYWdlbWVudGFwaSI6IHsKICAgICJuYW1lIjogIkFwaUdhdGV3YXlNYW5hZ2VtZW50QXBpIgogIH0sCiAgImFwaWdhdGV3YXl2MiI6IHsKICAgICJuYW1lIjogIkFwaUdhdGV3YXlWMiIKICB9LAogICJkb2NkYiI6IHsKICAgICJuYW1lIjogIkRvY0RCIgogIH0sCiAgImJhY2t1cCI6IHsKICAgICJuYW1lIjogIkJhY2t1cCIKICB9LAogICJ3b3JrbGluayI6IHsKICAgICJuYW1lIjogIldvcmtMaW5rIgogIH0sCiAgInRleHRyYWN0IjogewogICAgIm5hbWUiOiAiVGV4dHJhY3QiCiAgfSwKICAibWFuYWdlZGJsb2NrY2hhaW4iOiB7CiAgICAibmFtZSI6ICJNYW5hZ2VkQmxvY2tjaGFpbiIKICB9LAogICJtZWRpYXBhY2thZ2V2b2QiOiB7CiAgICAicHJlZml4IjogIm1lZGlhcGFja2FnZS12b2QiLAogICAgIm5hbWUiOiAiTWVkaWFQYWNrYWdlVm9kIgogIH0sCiAgImdyb3VuZHN0YXRpb24iOiB7CiAgICAibmFtZSI6ICJHcm91bmRTdGF0aW9uIgogIH0sCiAgImlvdHRoaW5nc2dyYXBoIjogewogICAgIm5hbWUiOiAiSW9UVGhpbmdzR3JhcGgiCiAgfSwKICAiaW90ZXZlbnRzIjogewogICAgIm5hbWUiOiAiSW9URXZlbnRzIgogIH0sCiAgImlvdGV2ZW50c2RhdGEiOiB7CiAgICAicHJlZml4IjogImlvdGV2ZW50cy1kYXRhIiwKICAgICJuYW1lIjogIklvVEV2ZW50c0RhdGEiCiAgfSwKICAicGVyc29uYWxpemUiOiB7CiAgICAibmFtZSI6ICJQZXJzb25hbGl6ZSIsCiAgICAiY29ycyI6IHRydWUKICB9LAogICJwZXJzb25hbGl6ZWV2ZW50cyI6IHsKICAgICJwcmVmaXgiOiAicGVyc29uYWxpemUtZXZlbnRzIiwKICAgICJuYW1lIjogIlBlcnNvbmFsaXplRXZlbnRzIiwKICAgICJjb3JzIjogdHJ1ZQogIH0sCiAgInBlcnNvbmFsaXplcnVudGltZSI6IHsKICAgICJwcmVmaXgiOiAicGVyc29uYWxpemUtcnVudGltZSIsCiAgICAibmFtZSI6ICJQZXJzb25hbGl6ZVJ1bnRpbWUiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiYXBwbGljYXRpb25pbnNpZ2h0cyI6IHsKICAgICJwcmVmaXgiOiAiYXBwbGljYXRpb24taW5zaWdodHMiLAogICAgIm5hbWUiOiAiQXBwbGljYXRpb25JbnNpZ2h0cyIKICB9LAogICJzZXJ2aWNlcXVvdGFzIjogewogICAgInByZWZpeCI6ICJzZXJ2aWNlLXF1b3RhcyIsCiAgICAibmFtZSI6ICJTZXJ2aWNlUXVvdGFzIgogIH0sCiAgImVjMmluc3RhbmNlY29ubmVjdCI6IHsKICAgICJwcmVmaXgiOiAiZWMyLWluc3RhbmNlLWNvbm5lY3QiLAogICAgIm5hbWUiOiAiRUMySW5zdGFuY2VDb25uZWN0IgogIH0sCiAgImV2ZW50YnJpZGdlIjogewogICAgIm5hbWUiOiAiRXZlbnRCcmlkZ2UiCiAgfSwKICAibGFrZWZvcm1hdGlvbiI6IHsKICAgICJuYW1lIjogIkxha2VGb3JtYXRpb24iCiAgfSwKICAiZm9yZWNhc3RzZXJ2aWNlIjogewogICAgInByZWZpeCI6ICJmb3JlY2FzdCIsCiAgICAibmFtZSI6ICJGb3JlY2FzdFNlcnZpY2UiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAiZm9yZWNhc3RxdWVyeXNlcnZpY2UiOiB7CiAgICAicHJlZml4IjogImZvcmVjYXN0cXVlcnkiLAogICAgIm5hbWUiOiAiRm9yZWNhc3RRdWVyeVNlcnZpY2UiLAogICAgImNvcnMiOiB0cnVlCiAgfSwKICAicWxkYiI6IHsKICAgICJuYW1lIjogIlFMREIiCiAgfSwKICAicWxkYnNlc3Npb24iOiB7CiAgICAicHJlZml4IjogInFsZGItc2Vzc2lvbiIsCiAgICAibmFtZSI6ICJRTERCU2Vzc2lvbiIKICB9LAogICJ3b3JrbWFpbG1lc3NhZ2VmbG93IjogewogICAgIm5hbWUiOiAiV29ya01haWxNZXNzYWdlRmxvdyIKICB9Cn0KCn0se31dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cz17CiAgInZlcnNpb24iOiAiMi4wIiwKICAibWV0YWRhdGEiOiB7CiAgICAiYXBpVmVyc2lvbiI6ICIyMDExLTA2LTE1IiwKICAgICJlbmRwb2ludFByZWZpeCI6ICJzdHMiLAogICAgImdsb2JhbEVuZHBvaW50IjogInN0cy5hbWF6b25hd3MuY29tIiwKICAgICJwcm90b2NvbCI6ICJxdWVyeSIsCiAgICAic2VydmljZUFiYnJldmlhdGlvbiI6ICJBV1MgU1RTIiwKICAgICJzZXJ2aWNlRnVsbE5hbWUiOiAiQVdTIFNlY3VyaXR5IFRva2VuIFNlcnZpY2UiLAogICAgInNlcnZpY2VJZCI6ICJTVFMiLAogICAgInNpZ25hdHVyZVZlcnNpb24iOiAidjQiLAogICAgInVpZCI6ICJzdHMtMjAxMS0wNi0xNSIsCiAgICAieG1sTmFtZXNwYWNlIjogImh0dHBzOi8vc3RzLmFtYXpvbmF3cy5jb20vZG9jLzIwMTEtMDYtMTUvIgogIH0sCiAgIm9wZXJhdGlvbnMiOiB7CiAgICAiQXNzdW1lUm9sZSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlJvbGVBcm4iLAogICAgICAgICAgIlJvbGVTZXNzaW9uTmFtZSIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIlJvbGVBcm4iOiB7fSwKICAgICAgICAgICJSb2xlU2Vzc2lvbk5hbWUiOiB7fSwKICAgICAgICAgICJQb2xpY3lBcm5zIjogewogICAgICAgICAgICAic2hhcGUiOiAiUzQiCiAgICAgICAgICB9LAogICAgICAgICAgIlBvbGljeSI6IHt9LAogICAgICAgICAgIkR1cmF0aW9uU2Vjb25kcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgICAgICAgIH0sCiAgICAgICAgICAiRXh0ZXJuYWxJZCI6IHt9LAogICAgICAgICAgIlNlcmlhbE51bWJlciI6IHt9LAogICAgICAgICAgIlRva2VuQ29kZSI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJyZXN1bHRXcmFwcGVyIjogIkFzc3VtZVJvbGVSZXN1bHQiLAogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiQ3JlZGVudGlhbHMiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTYyIKICAgICAgICAgIH0sCiAgICAgICAgICAiQXNzdW1lZFJvbGVVc2VyIjogewogICAgICAgICAgICAic2hhcGUiOiAiU2giCiAgICAgICAgICB9LAogICAgICAgICAgIlBhY2tlZFBvbGljeVNpemUiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkFzc3VtZVJvbGVXaXRoU0FNTCI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlJvbGVBcm4iLAogICAgICAgICAgIlByaW5jaXBhbEFybiIsCiAgICAgICAgICAiU0FNTEFzc2VydGlvbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIlJvbGVBcm4iOiB7fSwKICAgICAgICAgICJQcmluY2lwYWxBcm4iOiB7fSwKICAgICAgICAgICJTQU1MQXNzZXJ0aW9uIjoge30sCiAgICAgICAgICAiUG9saWN5QXJucyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlM0IgogICAgICAgICAgfSwKICAgICAgICAgICJQb2xpY3kiOiB7fSwKICAgICAgICAgICJEdXJhdGlvblNlY29uZHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJyZXN1bHRXcmFwcGVyIjogIkFzc3VtZVJvbGVXaXRoU0FNTFJlc3VsdCIsCiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJDcmVkZW50aWFscyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlNjIgogICAgICAgICAgfSwKICAgICAgICAgICJBc3N1bWVkUm9sZVVzZXIiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTaCIKICAgICAgICAgIH0sCiAgICAgICAgICAiUGFja2VkUG9saWN5U2l6ZSI6IHsKICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgICAgICAgIH0sCiAgICAgICAgICAiU3ViamVjdCI6IHt9LAogICAgICAgICAgIlN1YmplY3RUeXBlIjoge30sCiAgICAgICAgICAiSXNzdWVyIjoge30sCiAgICAgICAgICAiQXVkaWVuY2UiOiB7fSwKICAgICAgICAgICJOYW1lUXVhbGlmaWVyIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiQXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eSI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIlJvbGVBcm4iLAogICAgICAgICAgIlJvbGVTZXNzaW9uTmFtZSIsCiAgICAgICAgICAiV2ViSWRlbnRpdHlUb2tlbiIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIlJvbGVBcm4iOiB7fSwKICAgICAgICAgICJSb2xlU2Vzc2lvbk5hbWUiOiB7fSwKICAgICAgICAgICJXZWJJZGVudGl0eVRva2VuIjoge30sCiAgICAgICAgICAiUHJvdmlkZXJJZCI6IHt9LAogICAgICAgICAgIlBvbGljeUFybnMiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTNCIKICAgICAgICAgIH0sCiAgICAgICAgICAiUG9saWN5Ijoge30sCiAgICAgICAgICAiRHVyYXRpb25TZWNvbmRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAicmVzdWx0V3JhcHBlciI6ICJBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5UmVzdWx0IiwKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIkNyZWRlbnRpYWxzIjogewogICAgICAgICAgICAic2hhcGUiOiAiU2MiCiAgICAgICAgICB9LAogICAgICAgICAgIlN1YmplY3RGcm9tV2ViSWRlbnRpdHlUb2tlbiI6IHt9LAogICAgICAgICAgIkFzc3VtZWRSb2xlVXNlciI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlNoIgogICAgICAgICAgfSwKICAgICAgICAgICJQYWNrZWRQb2xpY3lTaXplIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfSwKICAgICAgICAgICJQcm92aWRlciI6IHt9LAogICAgICAgICAgIkF1ZGllbmNlIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiRGVjb2RlQXV0aG9yaXphdGlvbk1lc3NhZ2UiOiB7CiAgICAgICJpbnB1dCI6IHsKICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICJFbmNvZGVkTWVzc2FnZSIKICAgICAgICBdLAogICAgICAgICJtZW1iZXJzIjogewogICAgICAgICAgIkVuY29kZWRNZXNzYWdlIjoge30KICAgICAgICB9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInJlc3VsdFdyYXBwZXIiOiAiRGVjb2RlQXV0aG9yaXphdGlvbk1lc3NhZ2VSZXN1bHQiLAogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiRGVjb2RlZE1lc3NhZ2UiOiB7fQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJHZXRBY2Nlc3NLZXlJbmZvIjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAiQWNjZXNzS2V5SWQiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJBY2Nlc3NLZXlJZCI6IHt9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJyZXN1bHRXcmFwcGVyIjogIkdldEFjY2Vzc0tleUluZm9SZXN1bHQiLAogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiQWNjb3VudCI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldENhbGxlcklkZW50aXR5IjogewogICAgICAiaW5wdXQiOiB7CiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHt9CiAgICAgIH0sCiAgICAgICJvdXRwdXQiOiB7CiAgICAgICAgInJlc3VsdFdyYXBwZXIiOiAiR2V0Q2FsbGVySWRlbnRpdHlSZXN1bHQiLAogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiVXNlcklkIjoge30sCiAgICAgICAgICAiQWNjb3VudCI6IHt9LAogICAgICAgICAgIkFybiI6IHt9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldEZlZGVyYXRpb25Ub2tlbiI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIk5hbWUiCiAgICAgICAgXSwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJOYW1lIjoge30sCiAgICAgICAgICAiUG9saWN5Ijoge30sCiAgICAgICAgICAiUG9saWN5QXJucyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlM0IgogICAgICAgICAgfSwKICAgICAgICAgICJEdXJhdGlvblNlY29uZHMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICAib3V0cHV0IjogewogICAgICAgICJyZXN1bHRXcmFwcGVyIjogIkdldEZlZGVyYXRpb25Ub2tlblJlc3VsdCIsCiAgICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgICAibWVtYmVycyI6IHsKICAgICAgICAgICJDcmVkZW50aWFscyI6IHsKICAgICAgICAgICAgInNoYXBlIjogIlNjIgogICAgICAgICAgfSwKICAgICAgICAgICJGZWRlcmF0ZWRVc2VyIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJ1Y3R1cmUiLAogICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgIkZlZGVyYXRlZFVzZXJJZCIsCiAgICAgICAgICAgICAgIkFybiIKICAgICAgICAgICAgXSwKICAgICAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAgICAgIkZlZGVyYXRlZFVzZXJJZCI6IHt9LAogICAgICAgICAgICAgICJBcm4iOiB7fQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgIlBhY2tlZFBvbGljeVNpemUiOiB7CiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgIkdldFNlc3Npb25Ub2tlbiI6IHsKICAgICAgImlucHV0IjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiRHVyYXRpb25TZWNvbmRzIjogewogICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgfSwKICAgICAgICAgICJTZXJpYWxOdW1iZXIiOiB7fSwKICAgICAgICAgICJUb2tlbkNvZGUiOiB7fQogICAgICAgIH0KICAgICAgfSwKICAgICAgIm91dHB1dCI6IHsKICAgICAgICAicmVzdWx0V3JhcHBlciI6ICJHZXRTZXNzaW9uVG9rZW5SZXN1bHQiLAogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiQ3JlZGVudGlhbHMiOiB7CiAgICAgICAgICAgICJzaGFwZSI6ICJTYyIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogICJzaGFwZXMiOiB7CiAgICAiUzQiOiB7CiAgICAgICJ0eXBlIjogImxpc3QiLAogICAgICAibWVtYmVyIjogewogICAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICAgIm1lbWJlcnMiOiB7CiAgICAgICAgICAiYXJuIjoge30KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiU2MiOiB7CiAgICAgICJ0eXBlIjogInN0cnVjdHVyZSIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiQWNjZXNzS2V5SWQiLAogICAgICAgICJTZWNyZXRBY2Nlc3NLZXkiLAogICAgICAgICJTZXNzaW9uVG9rZW4iLAogICAgICAgICJFeHBpcmF0aW9uIgogICAgICBdLAogICAgICAibWVtYmVycyI6IHsKICAgICAgICAiQWNjZXNzS2V5SWQiOiB7fSwKICAgICAgICAiU2VjcmV0QWNjZXNzS2V5Ijoge30sCiAgICAgICAgIlNlc3Npb25Ub2tlbiI6IHt9LAogICAgICAgICJFeHBpcmF0aW9uIjogewogICAgICAgICAgInR5cGUiOiAidGltZXN0YW1wIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJTaCI6IHsKICAgICAgInR5cGUiOiAic3RydWN0dXJlIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJBc3N1bWVkUm9sZUlkIiwKICAgICAgICAiQXJuIgogICAgICBdLAogICAgICAibWVtYmVycyI6IHsKICAgICAgICAiQXNzdW1lZFJvbGVJZCI6IHt9LAogICAgICAgICJBcm4iOiB7fQogICAgICB9CiAgICB9CiAgfQp9Cn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjJ9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vbGliL25vZGVfbG9hZGVyJyk7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9saWIvY29yZScpOwp2YXIgU2VydmljZSA9IEFXUy5TZXJ2aWNlOwp2YXIgYXBpTG9hZGVyID0gQVdTLmFwaUxvYWRlcjsKCmFwaUxvYWRlci5zZXJ2aWNlc1snY29nbml0b2lkZW50aXR5J10gPSB7fTsKQVdTLkNvZ25pdG9JZGVudGl0eSA9IFNlcnZpY2UuZGVmaW5lU2VydmljZSgnY29nbml0b2lkZW50aXR5JywgWycyMDE0LTA2LTMwJ10pOwpyZXF1aXJlKCcuLi9saWIvc2VydmljZXMvY29nbml0b2lkZW50aXR5Jyk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcGlMb2FkZXIuc2VydmljZXNbJ2NvZ25pdG9pZGVudGl0eSddLCAnMjAxNC0wNi0zMCcsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHZhciBtb2RlbCA9IHJlcXVpcmUoJy4uL2FwaXMvY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwLm1pbi5qc29uJyk7CiAgICBtb2RlbC5wYWdpbmF0b3JzID0gcmVxdWlyZSgnLi4vYXBpcy9jb2duaXRvLWlkZW50aXR5LTIwMTQtMDYtMzAucGFnaW5hdG9ycy5qc29uJykucGFnaW5hdGlvbjsKICAgIHJldHVybiBtb2RlbDsKICB9LAogIGVudW1lcmFibGU6IHRydWUsCiAgY29uZmlndXJhYmxlOiB0cnVlCn0pOwoKbW9kdWxlLmV4cG9ydHMgPSBBV1MuQ29nbml0b0lkZW50aXR5OwoKfSx7Ii4uL2FwaXMvY29nbml0by1pZGVudGl0eS0yMDE0LTA2LTMwLm1pbi5qc29uIjoxLCIuLi9hcGlzL2NvZ25pdG8taWRlbnRpdHktMjAxNC0wNi0zMC5wYWdpbmF0b3JzLmpzb24iOjIsIi4uL2xpYi9jb3JlIjoxOCwiLi4vbGliL25vZGVfbG9hZGVyIjoxNiwiLi4vbGliL3NlcnZpY2VzL2NvZ25pdG9pZGVudGl0eSI6NjB9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vbGliL25vZGVfbG9hZGVyJyk7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9saWIvY29yZScpOwp2YXIgU2VydmljZSA9IEFXUy5TZXJ2aWNlOwp2YXIgYXBpTG9hZGVyID0gQVdTLmFwaUxvYWRlcjsKCmFwaUxvYWRlci5zZXJ2aWNlc1snc3RzJ10gPSB7fTsKQVdTLlNUUyA9IFNlcnZpY2UuZGVmaW5lU2VydmljZSgnc3RzJywgWycyMDExLTA2LTE1J10pOwpyZXF1aXJlKCcuLi9saWIvc2VydmljZXMvc3RzJyk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcGlMb2FkZXIuc2VydmljZXNbJ3N0cyddLCAnMjAxMS0wNi0xNScsIHsKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHZhciBtb2RlbCA9IHJlcXVpcmUoJy4uL2FwaXMvc3RzLTIwMTEtMDYtMTUubWluLmpzb24nKTsKICAgIG1vZGVsLnBhZ2luYXRvcnMgPSByZXF1aXJlKCcuLi9hcGlzL3N0cy0yMDExLTA2LTE1LnBhZ2luYXRvcnMuanNvbicpLnBhZ2luYXRpb247CiAgICByZXR1cm4gbW9kZWw7CiAgfSwKICBlbnVtZXJhYmxlOiB0cnVlLAogIGNvbmZpZ3VyYWJsZTogdHJ1ZQp9KTsKCm1vZHVsZS5leHBvcnRzID0gQVdTLlNUUzsKCn0seyIuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pbi5qc29uIjo1LCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1LnBhZ2luYXRvcnMuanNvbiI6NiwiLi4vbGliL2NvcmUiOjE4LCIuLi9saWIvbm9kZV9sb2FkZXIiOjE2LCIuLi9saWIvc2VydmljZXMvc3RzIjo2MX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpmdW5jdGlvbiBhcGlMb2FkZXIoc3ZjLCB2ZXJzaW9uKSB7CiAgaWYgKCFhcGlMb2FkZXIuc2VydmljZXMuaGFzT3duUHJvcGVydHkoc3ZjKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkU2VydmljZTogRmFpbGVkIHRvIGxvYWQgYXBpIGZvciAnICsgc3ZjKTsKICB9CiAgcmV0dXJuIGFwaUxvYWRlci5zZXJ2aWNlc1tzdmNdW3ZlcnNpb25dOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqCiAqIFRoaXMgbWVtYmVyIG9mIEFXUy5hcGlMb2FkZXIgaXMgcHJpdmF0ZSwgYnV0IGNoYW5naW5nIGl0IHdpbGwgbmVjZXNzaXRhdGUgYQogKiBjaGFuZ2UgdG8gLi4vc2NyaXB0cy9zZXJ2aWNlcy10YWJsZS1nZW5lcmF0b3IudHMKICovCmFwaUxvYWRlci5zZXJ2aWNlcyA9IHt9OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBhcGlMb2FkZXI7Cgp9LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBIbWFjID0gcmVxdWlyZSgnLi9icm93c2VySG1hYycpOwp2YXIgTWQ1ID0gcmVxdWlyZSgnLi9icm93c2VyTWQ1Jyk7CnZhciBTaGExID0gcmVxdWlyZSgnLi9icm93c2VyU2hhMScpOwp2YXIgU2hhMjU2ID0gcmVxdWlyZSgnLi9icm93c2VyU2hhMjU2Jyk7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSB7CiAgICBjcmVhdGVIYXNoOiBmdW5jdGlvbiBjcmVhdGVIYXNoKGFsZykgewogICAgICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKTsKICAgICAgaWYgKGFsZyA9PT0gJ21kNScpIHsKICAgICAgICByZXR1cm4gbmV3IE1kNSgpOwogICAgICB9IGVsc2UgaWYgKGFsZyA9PT0gJ3NoYTI1NicpIHsKICAgICAgICByZXR1cm4gbmV3IFNoYTI1NigpOwogICAgICB9IGVsc2UgaWYgKGFsZyA9PT0gJ3NoYTEnKSB7CiAgICAgICAgcmV0dXJuIG5ldyBTaGExKCk7CiAgICAgIH0KCiAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBhbGdvcml0aG0gJyArIGFsZyArICcgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGUgYnJvd3NlciBTREsnKTsKICAgIH0sCiAgICBjcmVhdGVIbWFjOiBmdW5jdGlvbiBjcmVhdGVIbWFjKGFsZywga2V5KSB7CiAgICAgIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpOwogICAgICBpZiAoYWxnID09PSAnbWQ1JykgewogICAgICAgIHJldHVybiBuZXcgSG1hYyhNZDUsIGtleSk7CiAgICAgIH0gZWxzZSBpZiAoYWxnID09PSAnc2hhMjU2JykgewogICAgICAgIHJldHVybiBuZXcgSG1hYyhTaGEyNTYsIGtleSk7CiAgICAgIH0gZWxzZSBpZiAoYWxnID09PSAnc2hhMScpIHsKICAgICAgICByZXR1cm4gbmV3IEhtYWMoU2hhMSwga2V5KTsKICAgICAgfQoKICAgICAgdGhyb3cgbmV3IEVycm9yKCdITUFDIGFsZ29yaXRobSAnICsgYWxnICsgJyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIFNESycpOwogICAgfSwKICAgIGNyZWF0ZVNpZ246IGZ1bmN0aW9uKCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVNpZ24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBicm93c2VyJyk7CiAgICB9CiAgfTsKCn0seyIuL2Jyb3dzZXJIbWFjIjoxMiwiLi9icm93c2VyTWQ1IjoxMywiLi9icm93c2VyU2hhMSI6MTQsIi4vYnJvd3NlclNoYTI1NiI6MTV9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyOwoKLyoqCiAqIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgdGhlIHN0YXRpYyBtZXRob2QgYGlzVmlld2Agb2YgYEFycmF5QnVmZmVyYCwgd2hpY2ggaXMKICogZS5nLiBtaXNzaW5nIGluIElFIDEwLgogKgogKiBAYXBpIHByaXZhdGUKICovCmlmICgKICAgIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYKICAgIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICd1bmRlZmluZWQnCikgewogICAgQXJyYXlCdWZmZXIuaXNWaWV3ID0gZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgcmV0dXJuIHZpZXdTdHJpbmdzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykpID4gLTE7CiAgICB9Owp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwp2YXIgdmlld1N0cmluZ3MgPSBbCiAgICAnW29iamVjdCBJbnQ4QXJyYXldJywKICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJywKICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsCiAgICAnW29iamVjdCBJbnQxNkFycmF5XScsCiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLAogICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLAogICAgJ1tvYmplY3QgVWludDMyQXJyYXldJywKICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLAogICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsCiAgICAnW29iamVjdCBEYXRhVmlld10nLApdOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gaXNFbXB0eURhdGEoZGF0YSkgewogICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgICAgIHJldHVybiBkYXRhLmxlbmd0aCA9PT0gMDsKICAgIH0KICAgIHJldHVybiBkYXRhLmJ5dGVMZW5ndGggPT09IDA7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGNvbnZlcnRUb0J1ZmZlcihkYXRhKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgJ3V0ZjgnKTsKICAgIH0KCiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCAvIFVpbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpOwogICAgfQoKICAgIHJldHVybiBuZXcgVWludDhBcnJheShkYXRhKTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gewogICAgaXNFbXB0eURhdGE6IGlzRW1wdHlEYXRhLAogICAgY29udmVydFRvQnVmZmVyOiBjb252ZXJ0VG9CdWZmZXIsCn07Cgp9LHsiYnVmZmVyLyI6ODF9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBoYXNoVXRpbHMgPSByZXF1aXJlKCcuL2Jyb3dzZXJIYXNoVXRpbHMnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIEhtYWMoaGFzaEN0b3IsIHNlY3JldCkgewogICAgdGhpcy5oYXNoID0gbmV3IGhhc2hDdG9yKCk7CiAgICB0aGlzLm91dGVyID0gbmV3IGhhc2hDdG9yKCk7CgogICAgdmFyIGlubmVyID0gYnVmZmVyRnJvbVNlY3JldChoYXNoQ3Rvciwgc2VjcmV0KTsKICAgIHZhciBvdXRlciA9IG5ldyBVaW50OEFycmF5KGhhc2hDdG9yLkJMT0NLX1NJWkUpOwogICAgb3V0ZXIuc2V0KGlubmVyKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhc2hDdG9yLkJMT0NLX1NJWkU7IGkrKykgewogICAgICAgIGlubmVyW2ldIF49IDB4MzY7CiAgICAgICAgb3V0ZXJbaV0gXj0gMHg1YzsKICAgIH0KCiAgICB0aGlzLmhhc2gudXBkYXRlKGlubmVyKTsKICAgIHRoaXMub3V0ZXIudXBkYXRlKG91dGVyKTsKCiAgICAvLyBaZXJvIG91dCB0aGUgY29waWVkIGtleSBidWZmZXIuCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlubmVyLmJ5dGVMZW5ndGg7IGkrKykgewogICAgICAgIGlubmVyW2ldID0gMDsKICAgIH0KfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gSG1hYzsKCkhtYWMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0b0hhc2gpIHsKICAgIGlmIChoYXNoVXRpbHMuaXNFbXB0eURhdGEodG9IYXNoKSB8fCB0aGlzLmVycm9yKSB7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgdHJ5IHsKICAgICAgICB0aGlzLmhhc2gudXBkYXRlKGhhc2hVdGlscy5jb252ZXJ0VG9CdWZmZXIodG9IYXNoKSk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgdGhpcy5lcnJvciA9IGU7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn07CgpIbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHsKICAgIGlmICghdGhpcy5vdXRlci5maW5pc2hlZCkgewogICAgICAgIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaGFzaC5kaWdlc3QoKSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMub3V0ZXIuZGlnZXN0KGVuY29kaW5nKTsKfTsKCmZ1bmN0aW9uIGJ1ZmZlckZyb21TZWNyZXQoaGFzaEN0b3IsIHNlY3JldCkgewogICAgdmFyIGlucHV0ID0gaGFzaFV0aWxzLmNvbnZlcnRUb0J1ZmZlcihzZWNyZXQpOwogICAgaWYgKGlucHV0LmJ5dGVMZW5ndGggPiBoYXNoQ3Rvci5CTE9DS19TSVpFKSB7CiAgICAgICAgdmFyIGJ1ZmZlckhhc2ggPSBuZXcgaGFzaEN0b3I7CiAgICAgICAgYnVmZmVySGFzaC51cGRhdGUoaW5wdXQpOwogICAgICAgIGlucHV0ID0gYnVmZmVySGFzaC5kaWdlc3QoKTsKICAgIH0KICAgIHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheShoYXNoQ3Rvci5CTE9DS19TSVpFKTsKICAgIGJ1ZmZlci5zZXQoaW5wdXQpOwogICAgcmV0dXJuIGJ1ZmZlcjsKfQoKfSx7Ii4vYnJvd3Nlckhhc2hVdGlscyI6MTF9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBoYXNoVXRpbHMgPSByZXF1aXJlKCcuL2Jyb3dzZXJIYXNoVXRpbHMnKTsKdmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlci8nKS5CdWZmZXI7Cgp2YXIgQkxPQ0tfU0laRSA9IDY0OwoKdmFyIERJR0VTVF9MRU5HVEggPSAxNjsKCnZhciBJTklUID0gWwogICAgMHg2NzQ1MjMwMSwKICAgIDB4ZWZjZGFiODksCiAgICAweDk4YmFkY2ZlLAogICAgMHgxMDMyNTQ3NiwKXTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIE1kNSgpIHsKICAgIHRoaXMuc3RhdGUgPSBbCiAgICAgICAgMHg2NzQ1MjMwMSwKICAgICAgICAweGVmY2RhYjg5LAogICAgICAgIDB4OThiYWRjZmUsCiAgICAgICAgMHgxMDMyNTQ3NiwKICAgIF07CiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoQkxPQ0tfU0laRSkpOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSAwOwogICAgdGhpcy5ieXRlc0hhc2hlZCA9IDA7CiAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IE1kNTsKCk1kNS5CTE9DS19TSVpFID0gQkxPQ0tfU0laRTsKCk1kNS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHNvdXJjZURhdGEpIHsKICAgIGlmIChoYXNoVXRpbHMuaXNFbXB0eURhdGEoc291cmNlRGF0YSkpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0gZWxzZSBpZiAodGhpcy5maW5pc2hlZCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGVkIHRvIHVwZGF0ZSBhbiBhbHJlYWR5IGZpbmlzaGVkIGhhc2guJyk7CiAgICB9CgogICAgdmFyIGRhdGEgPSBoYXNoVXRpbHMuY29udmVydFRvQnVmZmVyKHNvdXJjZURhdGEpOwogICAgdmFyIHBvc2l0aW9uID0gMDsKICAgIHZhciBieXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoOwogICAgdGhpcy5ieXRlc0hhc2hlZCArPSBieXRlTGVuZ3RoOwogICAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5idWZmZXIuc2V0VWludDgodGhpcy5idWZmZXJMZW5ndGgrKywgZGF0YVtwb3NpdGlvbisrXSk7CiAgICAgICAgYnl0ZUxlbmd0aC0tOwogICAgICAgIGlmICh0aGlzLmJ1ZmZlckxlbmd0aCA9PT0gQkxPQ0tfU0laRSkgewogICAgICAgICAgICB0aGlzLmhhc2hCdWZmZXIoKTsKICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSAwOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdGhpczsKfTsKCk1kNS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7CiAgICBpZiAoIXRoaXMuZmluaXNoZWQpIHsKICAgICAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXIgPSBfYS5idWZmZXIsIHVuZGVjb3JhdGVkTGVuZ3RoID0gX2EuYnVmZmVyTGVuZ3RoLCBieXRlc0hhc2hlZCA9IF9hLmJ5dGVzSGFzaGVkOwogICAgICAgIHZhciBiaXRzSGFzaGVkID0gYnl0ZXNIYXNoZWQgKiA4OwogICAgICAgIGJ1ZmZlci5zZXRVaW50OCh0aGlzLmJ1ZmZlckxlbmd0aCsrLCAxMjgpOwogICAgICAgIC8vIEVuc3VyZSB0aGUgZmluYWwgYmxvY2sgaGFzIGVub3VnaCByb29tIGZvciB0aGUgaGFzaGVkIGxlbmd0aAogICAgICAgIGlmICh1bmRlY29yYXRlZExlbmd0aCAlIEJMT0NLX1NJWkUgPj0gQkxPQ0tfU0laRSAtIDgpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYnVmZmVyTGVuZ3RoOyBpIDwgQkxPQ0tfU0laRTsgaSsrKSB7CiAgICAgICAgICAgICAgICBidWZmZXIuc2V0VWludDgoaSwgMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7CiAgICAgICAgICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gMDsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYnVmZmVyTGVuZ3RoOyBpIDwgQkxPQ0tfU0laRSAtIDg7IGkrKykgewogICAgICAgICAgICBidWZmZXIuc2V0VWludDgoaSwgMCk7CiAgICAgICAgfQogICAgICAgIGJ1ZmZlci5zZXRVaW50MzIoQkxPQ0tfU0laRSAtIDgsIGJpdHNIYXNoZWQgPj4+IDAsIHRydWUpOwogICAgICAgIGJ1ZmZlci5zZXRVaW50MzIoQkxPQ0tfU0laRSAtIDQsIE1hdGguZmxvb3IoYml0c0hhc2hlZCAvIDB4MTAwMDAwMDAwKSwgdHJ1ZSk7CiAgICAgICAgdGhpcy5oYXNoQnVmZmVyKCk7CiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7CiAgICB9CiAgICB2YXIgb3V0ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcihESUdFU1RfTEVOR1RIKSk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykgewogICAgICAgIG91dC5zZXRVaW50MzIoaSAqIDQsIHRoaXMuc3RhdGVbaV0sIHRydWUpOwogICAgfQogICAgdmFyIGJ1ZmYgPSBuZXcgQnVmZmVyKG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7CiAgICByZXR1cm4gZW5jb2RpbmcgPyBidWZmLnRvU3RyaW5nKGVuY29kaW5nKSA6IGJ1ZmY7Cn07CgpNZDUucHJvdG90eXBlLmhhc2hCdWZmZXIgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX2EgPSB0aGlzLCBidWZmZXIgPSBfYS5idWZmZXIsIHN0YXRlID0gX2Euc3RhdGU7CiAgICB2YXIgYSA9IHN0YXRlWzBdLCBiID0gc3RhdGVbMV0sIGMgPSBzdGF0ZVsyXSwgZCA9IHN0YXRlWzNdOwogICAgYSA9IGZmKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMCwgdHJ1ZSksIDcsIDB4ZDc2YWE0NzgpOwogICAgZCA9IGZmKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNCwgdHJ1ZSksIDEyLCAweGU4YzdiNzU2KTsKICAgIGMgPSBmZihjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDgsIHRydWUpLCAxNywgMHgyNDIwNzBkYik7CiAgICBiID0gZmYoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMigxMiwgdHJ1ZSksIDIyLCAweGMxYmRjZWVlKTsKICAgIGEgPSBmZihhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDE2LCB0cnVlKSwgNywgMHhmNTdjMGZhZik7CiAgICBkID0gZmYoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigyMCwgdHJ1ZSksIDEyLCAweDQ3ODdjNjJhKTsKICAgIGMgPSBmZihjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDI0LCB0cnVlKSwgMTcsIDB4YTgzMDQ2MTMpOwogICAgYiA9IGZmKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMjgsIHRydWUpLCAyMiwgMHhmZDQ2OTUwMSk7CiAgICBhID0gZmYoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigzMiwgdHJ1ZSksIDcsIDB4Njk4MDk4ZDgpOwogICAgZCA9IGZmKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoMzYsIHRydWUpLCAxMiwgMHg4YjQ0ZjdhZik7CiAgICBjID0gZmYoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig0MCwgdHJ1ZSksIDE3LCAweGZmZmY1YmIxKTsKICAgIGIgPSBmZihiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMjIsIDB4ODk1Y2Q3YmUpOwogICAgYSA9IGZmKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoNDgsIHRydWUpLCA3LCAweDZiOTAxMTIyKTsKICAgIGQgPSBmZihkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDUyLCB0cnVlKSwgMTIsIDB4ZmQ5ODcxOTMpOwogICAgYyA9IGZmKGMsIGQsIGEsIGIsIGJ1ZmZlci5nZXRVaW50MzIoNTYsIHRydWUpLCAxNywgMHhhNjc5NDM4ZSk7CiAgICBiID0gZmYoYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig2MCwgdHJ1ZSksIDIyLCAweDQ5YjQwODIxKTsKICAgIGEgPSBnZyhhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDQsIHRydWUpLCA1LCAweGY2MWUyNTYyKTsKICAgIGQgPSBnZyhkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDI0LCB0cnVlKSwgOSwgMHhjMDQwYjM0MCk7CiAgICBjID0gZ2coYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig0NCwgdHJ1ZSksIDE0LCAweDI2NWU1YTUxKTsKICAgIGIgPSBnZyhiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDAsIHRydWUpLCAyMCwgMHhlOWI2YzdhYSk7CiAgICBhID0gZ2coYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigyMCwgdHJ1ZSksIDUsIDB4ZDYyZjEwNWQpOwogICAgZCA9IGdnKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNDAsIHRydWUpLCA5LCAweDAyNDQxNDUzKTsKICAgIGMgPSBnZyhjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDYwLCB0cnVlKSwgMTQsIDB4ZDhhMWU2ODEpOwogICAgYiA9IGdnKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMTYsIHRydWUpLCAyMCwgMHhlN2QzZmJjOCk7CiAgICBhID0gZ2coYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigzNiwgdHJ1ZSksIDUsIDB4MjFlMWNkZTYpOwogICAgZCA9IGdnKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNTYsIHRydWUpLCA5LCAweGMzMzcwN2Q2KTsKICAgIGMgPSBnZyhjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDEyLCB0cnVlKSwgMTQsIDB4ZjRkNTBkODcpOwogICAgYiA9IGdnKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMzIsIHRydWUpLCAyMCwgMHg0NTVhMTRlZCk7CiAgICBhID0gZ2coYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig1MiwgdHJ1ZSksIDUsIDB4YTllM2U5MDUpOwogICAgZCA9IGdnKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoOCwgdHJ1ZSksIDksIDB4ZmNlZmEzZjgpOwogICAgYyA9IGdnKGMsIGQsIGEsIGIsIGJ1ZmZlci5nZXRVaW50MzIoMjgsIHRydWUpLCAxNCwgMHg2NzZmMDJkOSk7CiAgICBiID0gZ2coYiwgYywgZCwgYSwgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDIwLCAweDhkMmE0YzhhKTsKICAgIGEgPSBoaChhLCBiLCBjLCBkLCBidWZmZXIuZ2V0VWludDMyKDIwLCB0cnVlKSwgNCwgMHhmZmZhMzk0Mik7CiAgICBkID0gaGgoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigzMiwgdHJ1ZSksIDExLCAweDg3NzFmNjgxKTsKICAgIGMgPSBoaChjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMTYsIDB4NmQ5ZDYxMjIpOwogICAgYiA9IGhoKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoNTYsIHRydWUpLCAyMywgMHhmZGU1MzgwYyk7CiAgICBhID0gaGgoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig0LCB0cnVlKSwgNCwgMHhhNGJlZWE0NCk7CiAgICBkID0gaGgoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigxNiwgdHJ1ZSksIDExLCAweDRiZGVjZmE5KTsKICAgIGMgPSBoaChjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDI4LCB0cnVlKSwgMTYsIDB4ZjZiYjRiNjApOwogICAgYiA9IGhoKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoNDAsIHRydWUpLCAyMywgMHhiZWJmYmM3MCk7CiAgICBhID0gaGgoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig1MiwgdHJ1ZSksIDQsIDB4Mjg5YjdlYzYpOwogICAgZCA9IGhoKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoMCwgdHJ1ZSksIDExLCAweGVhYTEyN2ZhKTsKICAgIGMgPSBoaChjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDEyLCB0cnVlKSwgMTYsIDB4ZDRlZjMwODUpOwogICAgYiA9IGhoKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMjQsIHRydWUpLCAyMywgMHgwNDg4MWQwNSk7CiAgICBhID0gaGgoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigzNiwgdHJ1ZSksIDQsIDB4ZDlkNGQwMzkpOwogICAgZCA9IGhoKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNDgsIHRydWUpLCAxMSwgMHhlNmRiOTllNSk7CiAgICBjID0gaGgoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig2MCwgdHJ1ZSksIDE2LCAweDFmYTI3Y2Y4KTsKICAgIGIgPSBoaChiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDgsIHRydWUpLCAyMywgMHhjNGFjNTY2NSk7CiAgICBhID0gaWkoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigwLCB0cnVlKSwgNiwgMHhmNDI5MjI0NCk7CiAgICBkID0gaWkoZCwgYSwgYiwgYywgYnVmZmVyLmdldFVpbnQzMigyOCwgdHJ1ZSksIDEwLCAweDQzMmFmZjk3KTsKICAgIGMgPSBpaShjLCBkLCBhLCBiLCBidWZmZXIuZ2V0VWludDMyKDU2LCB0cnVlKSwgMTUsIDB4YWI5NDIzYTcpOwogICAgYiA9IGlpKGIsIGMsIGQsIGEsIGJ1ZmZlci5nZXRVaW50MzIoMjAsIHRydWUpLCAyMSwgMHhmYzkzYTAzOSk7CiAgICBhID0gaWkoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMig0OCwgdHJ1ZSksIDYsIDB4NjU1YjU5YzMpOwogICAgZCA9IGlpKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoMTIsIHRydWUpLCAxMCwgMHg4ZjBjY2M5Mik7CiAgICBjID0gaWkoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMig0MCwgdHJ1ZSksIDE1LCAweGZmZWZmNDdkKTsKICAgIGIgPSBpaShiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDQsIHRydWUpLCAyMSwgMHg4NTg0NWRkMSk7CiAgICBhID0gaWkoYSwgYiwgYywgZCwgYnVmZmVyLmdldFVpbnQzMigzMiwgdHJ1ZSksIDYsIDB4NmZhODdlNGYpOwogICAgZCA9IGlpKGQsIGEsIGIsIGMsIGJ1ZmZlci5nZXRVaW50MzIoNjAsIHRydWUpLCAxMCwgMHhmZTJjZTZlMCk7CiAgICBjID0gaWkoYywgZCwgYSwgYiwgYnVmZmVyLmdldFVpbnQzMigyNCwgdHJ1ZSksIDE1LCAweGEzMDE0MzE0KTsKICAgIGIgPSBpaShiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDUyLCB0cnVlKSwgMjEsIDB4NGUwODExYTEpOwogICAgYSA9IGlpKGEsIGIsIGMsIGQsIGJ1ZmZlci5nZXRVaW50MzIoMTYsIHRydWUpLCA2LCAweGY3NTM3ZTgyKTsKICAgIGQgPSBpaShkLCBhLCBiLCBjLCBidWZmZXIuZ2V0VWludDMyKDQ0LCB0cnVlKSwgMTAsIDB4YmQzYWYyMzUpOwogICAgYyA9IGlpKGMsIGQsIGEsIGIsIGJ1ZmZlci5nZXRVaW50MzIoOCwgdHJ1ZSksIDE1LCAweDJhZDdkMmJiKTsKICAgIGIgPSBpaShiLCBjLCBkLCBhLCBidWZmZXIuZ2V0VWludDMyKDM2LCB0cnVlKSwgMjEsIDB4ZWI4NmQzOTEpOwogICAgc3RhdGVbMF0gPSAoYSArIHN0YXRlWzBdKSAmIDB4RkZGRkZGRkY7CiAgICBzdGF0ZVsxXSA9IChiICsgc3RhdGVbMV0pICYgMHhGRkZGRkZGRjsKICAgIHN0YXRlWzJdID0gKGMgKyBzdGF0ZVsyXSkgJiAweEZGRkZGRkZGOwogICAgc3RhdGVbM10gPSAoZCArIHN0YXRlWzNdKSAmIDB4RkZGRkZGRkY7Cn07CgpmdW5jdGlvbiBjbW4ocSwgYSwgYiwgeCwgcywgdCkgewogICAgYSA9ICgoKGEgKyBxKSAmIDB4RkZGRkZGRkYpICsgKCh4ICsgdCkgJiAweEZGRkZGRkZGKSkgJiAweEZGRkZGRkZGOwogICAgcmV0dXJuICgoKGEgPDwgcykgfCAoYSA+Pj4gKDMyIC0gcykpKSArIGIpICYgMHhGRkZGRkZGRjsKfQoKZnVuY3Rpb24gZmYoYSwgYiwgYywgZCwgeCwgcywgdCkgewogICAgcmV0dXJuIGNtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdCk7Cn0KCmZ1bmN0aW9uIGdnKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgIHJldHVybiBjbW4oKGIgJiBkKSB8IChjICYgKH5kKSksIGEsIGIsIHgsIHMsIHQpOwp9CgpmdW5jdGlvbiBoaChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7CiAgICByZXR1cm4gY21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7Cn0KCmZ1bmN0aW9uIGlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHsKICAgIHJldHVybiBjbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpOwp9Cgp9LHsiLi9icm93c2VySGFzaFV0aWxzIjoxMSwiYnVmZmVyLyI6ODF9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyOwp2YXIgaGFzaFV0aWxzID0gcmVxdWlyZSgnLi9icm93c2VySGFzaFV0aWxzJyk7Cgp2YXIgQkxPQ0tfU0laRSA9IDY0OwoKdmFyIERJR0VTVF9MRU5HVEggPSAyMDsKCnZhciBLRVkgPSBuZXcgVWludDMyQXJyYXkoWwogICAgMHg1YTgyNzk5OSwKICAgIDB4NmVkOWViYTEsCiAgICAweDhmMWJiY2RjIHwgMCwKICAgIDB4Y2E2MmMxZDYgfCAwCl0pOwoKdmFyIElOSVQgPSBbCiAgICAweDZhMDllNjY3LAogICAgMHhiYjY3YWU4NSwKICAgIDB4M2M2ZWYzNzIsCiAgICAweGE1NGZmNTNhLAogICAgMHg1MTBlNTI3ZiwKICAgIDB4OWIwNTY4OGMsCiAgICAweDFmODNkOWFiLAogICAgMHg1YmUwY2QxOSwKXTsKCnZhciBNQVhfSEFTSEFCTEVfTEVOR1RIID0gTWF0aC5wb3coMiwgNTMpIC0gMTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIFNoYTEoKSB7CiAgICB0aGlzLmgwID0gMHg2NzQ1MjMwMTsKICAgIHRoaXMuaDEgPSAweEVGQ0RBQjg5OwogICAgdGhpcy5oMiA9IDB4OThCQURDRkU7CiAgICB0aGlzLmgzID0gMHgxMDMyNTQ3NjsKICAgIHRoaXMuaDQgPSAweEMzRDJFMUYwOwogICAgLy8gVGhlIGZpcnN0IDY0IGJ5dGVzICgxNiB3b3JkcykgaXMgdGhlIGRhdGEgY2h1bmsKICAgIHRoaXMuYmxvY2sgPSBuZXcgVWludDMyQXJyYXkoODApOwogICAgdGhpcy5vZmZzZXQgPSAwOwogICAgdGhpcy5zaGlmdCA9IDI0OwogICAgdGhpcy50b3RhbExlbmd0aCA9IDA7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNoYTE7CgpTaGExLkJMT0NLX1NJWkUgPSBCTE9DS19TSVpFOwoKU2hhMS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgIGlmICh0aGlzLmZpbmlzaGVkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIGFscmVhZHkgZmluaXNoZWQgaGFzaC4nKTsKICAgIH0KCiAgICBpZiAoaGFzaFV0aWxzLmlzRW1wdHlEYXRhKGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgZGF0YSA9IGhhc2hVdGlscy5jb252ZXJ0VG9CdWZmZXIoZGF0YSk7CgogICAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoOwogICAgdGhpcy50b3RhbExlbmd0aCArPSBsZW5ndGggKiA4OwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMud3JpdGUoZGF0YVtpXSk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn07CgpTaGExLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlKGJ5dGUpIHsKICAgIHRoaXMuYmxvY2tbdGhpcy5vZmZzZXRdIHw9IChieXRlICYgMHhmZikgPDwgdGhpcy5zaGlmdDsKICAgIGlmICh0aGlzLnNoaWZ0KSB7CiAgICAgICAgdGhpcy5zaGlmdCAtPSA4OwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLm9mZnNldCsrOwogICAgICAgIHRoaXMuc2hpZnQgPSAyNDsKICAgIH0KCiAgICBpZiAodGhpcy5vZmZzZXQgPT09IDE2KSB0aGlzLnByb2Nlc3NCbG9jaygpOwp9OwoKU2hhMS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7CiAgICAvLyBQYWQKICAgIHRoaXMud3JpdGUoMHg4MCk7CiAgICBpZiAodGhpcy5vZmZzZXQgPiAxNCB8fCAodGhpcy5vZmZzZXQgPT09IDE0ICYmIHRoaXMuc2hpZnQgPCAyNCkpIHsKICAgICAgdGhpcy5wcm9jZXNzQmxvY2soKTsKICAgIH0KICAgIHRoaXMub2Zmc2V0ID0gMTQ7CiAgICB0aGlzLnNoaWZ0ID0gMjQ7CgogICAgLy8gNjQtYml0IGxlbmd0aCBiaWctZW5kaWFuCiAgICB0aGlzLndyaXRlKDB4MDApOyAvLyBudW1iZXJzIHRoaXMgYmlnIGFyZW4ndCBhY2N1cmF0ZSBpbiBqYXZhc2NyaXB0IGFueXdheQogICAgdGhpcy53cml0ZSgweDAwKTsgLy8gLi5TbyBqdXN0IGhhcmQtY29kZSB0byB6ZXJvLgogICAgdGhpcy53cml0ZSh0aGlzLnRvdGFsTGVuZ3RoID4gMHhmZmZmZmZmZmZmID8gdGhpcy50b3RhbExlbmd0aCAvIDB4MTAwMDAwMDAwMDAgOiAweDAwKTsKICAgIHRoaXMud3JpdGUodGhpcy50b3RhbExlbmd0aCA+IDB4ZmZmZmZmZmYgPyB0aGlzLnRvdGFsTGVuZ3RoIC8gMHgxMDAwMDAwMDAgOiAweDAwKTsKICAgIGZvciAodmFyIHMgPSAyNDsgcyA+PSAwOyBzIC09IDgpIHsKICAgICAgICB0aGlzLndyaXRlKHRoaXMudG90YWxMZW5ndGggPj4gcyk7CiAgICB9CiAgICAvLyBUaGUgdmFsdWUgaW4gc3RhdGUgaXMgbGl0dGxlLWVuZGlhbiByYXRoZXIgdGhhbiBiaWctZW5kaWFuLCBzbyBmbGlwCiAgICAvLyBlYWNoIHdvcmQgaW50byBhIG5ldyBVaW50OEFycmF5CiAgICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihESUdFU1RfTEVOR1RIKTsKICAgIHZhciBvdXRWaWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIpOwogICAgb3V0Vmlldy5zZXRVaW50MzIoMCwgdGhpcy5oMCwgZmFsc2UpOwogICAgb3V0Vmlldy5zZXRVaW50MzIoNCwgdGhpcy5oMSwgZmFsc2UpOwogICAgb3V0Vmlldy5zZXRVaW50MzIoOCwgdGhpcy5oMiwgZmFsc2UpOwogICAgb3V0Vmlldy5zZXRVaW50MzIoMTIsIHRoaXMuaDMsIGZhbHNlKTsKICAgIG91dFZpZXcuc2V0VWludDMyKDE2LCB0aGlzLmg0LCBmYWxzZSk7CgogICAgcmV0dXJuIGVuY29kaW5nID8gb3V0LnRvU3RyaW5nKGVuY29kaW5nKSA6IG91dDsKfTsKClNoYTEucHJvdG90eXBlLnByb2Nlc3NCbG9jayA9IGZ1bmN0aW9uIHByb2Nlc3NCbG9jaygpIHsKICAgIC8vIEV4dGVuZCB0aGUgc2l4dGVlbiAzMi1iaXQgd29yZHMgaW50byBlaWdodHkgMzItYml0IHdvcmRzOgogICAgZm9yICh2YXIgaSA9IDE2OyBpIDwgODA7IGkrKykgewogICAgICB2YXIgdyA9IHRoaXMuYmxvY2tbaSAtIDNdIF4gdGhpcy5ibG9ja1tpIC0gOF0gXiB0aGlzLmJsb2NrW2kgLSAxNF0gXiB0aGlzLmJsb2NrW2kgLSAxNl07CiAgICAgIHRoaXMuYmxvY2tbaV0gPSAodyA8PCAxKSB8ICh3ID4+PiAzMSk7CiAgICB9CgogICAgLy8gSW5pdGlhbGl6ZSBoYXNoIHZhbHVlIGZvciB0aGlzIGNodW5rOgogICAgdmFyIGEgPSB0aGlzLmgwOwogICAgdmFyIGIgPSB0aGlzLmgxOwogICAgdmFyIGMgPSB0aGlzLmgyOwogICAgdmFyIGQgPSB0aGlzLmgzOwogICAgdmFyIGUgPSB0aGlzLmg0OwogICAgdmFyIGYsIGs7CgogICAgLy8gTWFpbiBsb29wOgogICAgZm9yIChpID0gMDsgaSA8IDgwOyBpKyspIHsKICAgICAgaWYgKGkgPCAyMCkgewogICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTsKICAgICAgICBrID0gMHg1QTgyNzk5OTsKICAgICAgfQogICAgICBlbHNlIGlmIChpIDwgNDApIHsKICAgICAgICBmID0gYiBeIGMgXiBkOwogICAgICAgIGsgPSAweDZFRDlFQkExOwogICAgICB9CiAgICAgIGVsc2UgaWYgKGkgPCA2MCkgewogICAgICAgIGYgPSAoYiAmIGMpIHwgKGQgJiAoYiB8IGMpKTsKICAgICAgICBrID0gMHg4RjFCQkNEQzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBmID0gYiBeIGMgXiBkOwogICAgICAgIGsgPSAweENBNjJDMUQ2OwogICAgICB9CiAgICAgIHZhciB0ZW1wID0gKGEgPDwgNSB8IGEgPj4+IDI3KSArIGYgKyBlICsgayArICh0aGlzLmJsb2NrW2ldfDApOwogICAgICBlID0gZDsKICAgICAgZCA9IGM7CiAgICAgIGMgPSAoYiA8PCAzMCB8IGIgPj4+IDIpOwogICAgICBiID0gYTsKICAgICAgYSA9IHRlbXA7CiAgICB9CgogICAgLy8gQWRkIHRoaXMgY2h1bmsncyBoYXNoIHRvIHJlc3VsdCBzbyBmYXI6CiAgICB0aGlzLmgwID0gKHRoaXMuaDAgKyBhKSB8IDA7CiAgICB0aGlzLmgxID0gKHRoaXMuaDEgKyBiKSB8IDA7CiAgICB0aGlzLmgyID0gKHRoaXMuaDIgKyBjKSB8IDA7CiAgICB0aGlzLmgzID0gKHRoaXMuaDMgKyBkKSB8IDA7CiAgICB0aGlzLmg0ID0gKHRoaXMuaDQgKyBlKSB8IDA7CgogICAgLy8gVGhlIGJsb2NrIGlzIG5vdyByZXVzYWJsZS4KICAgIHRoaXMub2Zmc2V0ID0gMDsKICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSsrKSB7CiAgICAgICAgdGhpcy5ibG9ja1tpXSA9IDA7CiAgICB9Cn07Cgp9LHsiLi9icm93c2VySGFzaFV0aWxzIjoxMSwiYnVmZmVyLyI6ODF9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXIvJykuQnVmZmVyOwp2YXIgaGFzaFV0aWxzID0gcmVxdWlyZSgnLi9icm93c2VySGFzaFV0aWxzJyk7Cgp2YXIgQkxPQ0tfU0laRSA9IDY0OwoKdmFyIERJR0VTVF9MRU5HVEggPSAzMjsKCnZhciBLRVkgPSBuZXcgVWludDMyQXJyYXkoWwogICAgMHg0MjhhMmY5OCwKICAgIDB4NzEzNzQ0OTEsCiAgICAweGI1YzBmYmNmLAogICAgMHhlOWI1ZGJhNSwKICAgIDB4Mzk1NmMyNWIsCiAgICAweDU5ZjExMWYxLAogICAgMHg5MjNmODJhNCwKICAgIDB4YWIxYzVlZDUsCiAgICAweGQ4MDdhYTk4LAogICAgMHgxMjgzNWIwMSwKICAgIDB4MjQzMTg1YmUsCiAgICAweDU1MGM3ZGMzLAogICAgMHg3MmJlNWQ3NCwKICAgIDB4ODBkZWIxZmUsCiAgICAweDliZGMwNmE3LAogICAgMHhjMTliZjE3NCwKICAgIDB4ZTQ5YjY5YzEsCiAgICAweGVmYmU0Nzg2LAogICAgMHgwZmMxOWRjNiwKICAgIDB4MjQwY2ExY2MsCiAgICAweDJkZTkyYzZmLAogICAgMHg0YTc0ODRhYSwKICAgIDB4NWNiMGE5ZGMsCiAgICAweDc2Zjk4OGRhLAogICAgMHg5ODNlNTE1MiwKICAgIDB4YTgzMWM2NmQsCiAgICAweGIwMDMyN2M4LAogICAgMHhiZjU5N2ZjNywKICAgIDB4YzZlMDBiZjMsCiAgICAweGQ1YTc5MTQ3LAogICAgMHgwNmNhNjM1MSwKICAgIDB4MTQyOTI5NjcsCiAgICAweDI3YjcwYTg1LAogICAgMHgyZTFiMjEzOCwKICAgIDB4NGQyYzZkZmMsCiAgICAweDUzMzgwZDEzLAogICAgMHg2NTBhNzM1NCwKICAgIDB4NzY2YTBhYmIsCiAgICAweDgxYzJjOTJlLAogICAgMHg5MjcyMmM4NSwKICAgIDB4YTJiZmU4YTEsCiAgICAweGE4MWE2NjRiLAogICAgMHhjMjRiOGI3MCwKICAgIDB4Yzc2YzUxYTMsCiAgICAweGQxOTJlODE5LAogICAgMHhkNjk5MDYyNCwKICAgIDB4ZjQwZTM1ODUsCiAgICAweDEwNmFhMDcwLAogICAgMHgxOWE0YzExNiwKICAgIDB4MWUzNzZjMDgsCiAgICAweDI3NDg3NzRjLAogICAgMHgzNGIwYmNiNSwKICAgIDB4MzkxYzBjYjMsCiAgICAweDRlZDhhYTRhLAogICAgMHg1YjljY2E0ZiwKICAgIDB4NjgyZTZmZjMsCiAgICAweDc0OGY4MmVlLAogICAgMHg3OGE1NjM2ZiwKICAgIDB4ODRjODc4MTQsCiAgICAweDhjYzcwMjA4LAogICAgMHg5MGJlZmZmYSwKICAgIDB4YTQ1MDZjZWIsCiAgICAweGJlZjlhM2Y3LAogICAgMHhjNjcxNzhmMgpdKTsKCnZhciBJTklUID0gWwogICAgMHg2YTA5ZTY2NywKICAgIDB4YmI2N2FlODUsCiAgICAweDNjNmVmMzcyLAogICAgMHhhNTRmZjUzYSwKICAgIDB4NTEwZTUyN2YsCiAgICAweDliMDU2ODhjLAogICAgMHgxZjgzZDlhYiwKICAgIDB4NWJlMGNkMTksCl07Cgp2YXIgTUFYX0hBU0hBQkxFX0xFTkdUSCA9IE1hdGgucG93KDIsIDUzKSAtIDE7CgovKioKICogQHByaXZhdGUKICovCmZ1bmN0aW9uIFNoYTI1NigpIHsKICAgIHRoaXMuc3RhdGUgPSBbCiAgICAgICAgMHg2YTA5ZTY2NywKICAgICAgICAweGJiNjdhZTg1LAogICAgICAgIDB4M2M2ZWYzNzIsCiAgICAgICAgMHhhNTRmZjUzYSwKICAgICAgICAweDUxMGU1MjdmLAogICAgICAgIDB4OWIwNTY4OGMsCiAgICAgICAgMHgxZjgzZDlhYiwKICAgICAgICAweDViZTBjZDE5LAogICAgXTsKICAgIHRoaXMudGVtcCA9IG5ldyBJbnQzMkFycmF5KDY0KTsKICAgIHRoaXMuYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoNjQpOwogICAgdGhpcy5idWZmZXJMZW5ndGggPSAwOwogICAgdGhpcy5ieXRlc0hhc2hlZCA9IDA7CiAgICAvKioKICAgICAqIEBwcml2YXRlCiAgICAgKi8KICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gU2hhMjU2OwoKU2hhMjU2LkJMT0NLX1NJWkUgPSBCTE9DS19TSVpFOwoKU2hhMjU2LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgaWYgKHRoaXMuZmluaXNoZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRlZCB0byB1cGRhdGUgYW4gYWxyZWFkeSBmaW5pc2hlZCBoYXNoLicpOwogICAgfQoKICAgIGlmIChoYXNoVXRpbHMuaXNFbXB0eURhdGEoZGF0YSkpIHsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBkYXRhID0gaGFzaFV0aWxzLmNvbnZlcnRUb0J1ZmZlcihkYXRhKTsKCiAgICB2YXIgcG9zaXRpb24gPSAwOwogICAgdmFyIGJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7CiAgICB0aGlzLmJ5dGVzSGFzaGVkICs9IGJ5dGVMZW5ndGg7CiAgICBpZiAodGhpcy5ieXRlc0hhc2hlZCAqIDggPiBNQVhfSEFTSEFCTEVfTEVOR1RIKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGFzaCBtb3JlIHRoYW4gMl41MyAtIDEgYml0cycpOwogICAgfQoKICAgIHdoaWxlIChieXRlTGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuYnVmZmVyW3RoaXMuYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtwb3NpdGlvbisrXTsKICAgICAgICBieXRlTGVuZ3RoLS07CiAgICAgICAgaWYgKHRoaXMuYnVmZmVyTGVuZ3RoID09PSBCTE9DS19TSVpFKSB7CiAgICAgICAgICAgIHRoaXMuaGFzaEJ1ZmZlcigpOwogICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7CiAgICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwp9OwoKU2hhMjU2LnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHsKICAgIGlmICghdGhpcy5maW5pc2hlZCkgewogICAgICAgIHZhciBiaXRzSGFzaGVkID0gdGhpcy5ieXRlc0hhc2hlZCAqIDg7CiAgICAgICAgdmFyIGJ1ZmZlclZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIuYnVmZmVyLCB0aGlzLmJ1ZmZlci5ieXRlT2Zmc2V0LCB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoKTsKICAgICAgICB2YXIgdW5kZWNvcmF0ZWRMZW5ndGggPSB0aGlzLmJ1ZmZlckxlbmd0aDsKICAgICAgICBidWZmZXJWaWV3LnNldFVpbnQ4KHRoaXMuYnVmZmVyTGVuZ3RoKyssIDB4ODApOwogICAgICAgIC8vIEVuc3VyZSB0aGUgZmluYWwgYmxvY2sgaGFzIGVub3VnaCByb29tIGZvciB0aGUgaGFzaGVkIGxlbmd0aAogICAgICAgIGlmICh1bmRlY29yYXRlZExlbmd0aCAlIEJMT0NLX1NJWkUgPj0gQkxPQ0tfU0laRSAtIDgpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuYnVmZmVyTGVuZ3RoOyBpIDwgQkxPQ0tfU0laRTsgaSsrKSB7CiAgICAgICAgICAgICAgICBidWZmZXJWaWV3LnNldFVpbnQ4KGksIDApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuaGFzaEJ1ZmZlcigpOwogICAgICAgICAgICB0aGlzLmJ1ZmZlckxlbmd0aCA9IDA7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmJ1ZmZlckxlbmd0aDsgaSA8IEJMT0NLX1NJWkUgLSA4OyBpKyspIHsKICAgICAgICAgICAgYnVmZmVyVmlldy5zZXRVaW50OChpLCAwKTsKICAgICAgICB9CiAgICAgICAgYnVmZmVyVmlldy5zZXRVaW50MzIoQkxPQ0tfU0laRSAtIDgsIE1hdGguZmxvb3IoYml0c0hhc2hlZCAvIDB4MTAwMDAwMDAwKSwgdHJ1ZSk7CiAgICAgICAgYnVmZmVyVmlldy5zZXRVaW50MzIoQkxPQ0tfU0laRSAtIDQsIGJpdHNIYXNoZWQpOwogICAgICAgIHRoaXMuaGFzaEJ1ZmZlcigpOwogICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlOwogICAgfQogICAgLy8gVGhlIHZhbHVlIGluIHN0YXRlIGlzIGxpdHRsZS1lbmRpYW4gcmF0aGVyIHRoYW4gYmlnLWVuZGlhbiwgc28gZmxpcAogICAgLy8gZWFjaCB3b3JkIGludG8gYSBuZXcgVWludDhBcnJheQogICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoRElHRVNUX0xFTkdUSCk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykgewogICAgICAgIG91dFtpICogNF0gPSAodGhpcy5zdGF0ZVtpXSA+Pj4gMjQpICYgMHhmZjsKICAgICAgICBvdXRbaSAqIDQgKyAxXSA9ICh0aGlzLnN0YXRlW2ldID4+PiAxNikgJiAweGZmOwogICAgICAgIG91dFtpICogNCArIDJdID0gKHRoaXMuc3RhdGVbaV0gPj4+IDgpICYgMHhmZjsKICAgICAgICBvdXRbaSAqIDQgKyAzXSA9ICh0aGlzLnN0YXRlW2ldID4+PiAwKSAmIDB4ZmY7CiAgICB9CiAgICByZXR1cm4gZW5jb2RpbmcgPyBvdXQudG9TdHJpbmcoZW5jb2RpbmcpIDogb3V0Owp9OwoKU2hhMjU2LnByb3RvdHlwZS5oYXNoQnVmZmVyID0gZnVuY3Rpb24gKCkgewogICAgdmFyIF9hID0gdGhpcywKICAgICAgICBidWZmZXIgPSBfYS5idWZmZXIsCiAgICAgICAgc3RhdGUgPSBfYS5zdGF0ZTsKICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXSwKICAgICAgICBzdGF0ZTEgPSBzdGF0ZVsxXSwKICAgICAgICBzdGF0ZTIgPSBzdGF0ZVsyXSwKICAgICAgICBzdGF0ZTMgPSBzdGF0ZVszXSwKICAgICAgICBzdGF0ZTQgPSBzdGF0ZVs0XSwKICAgICAgICBzdGF0ZTUgPSBzdGF0ZVs1XSwKICAgICAgICBzdGF0ZTYgPSBzdGF0ZVs2XSwKICAgICAgICBzdGF0ZTcgPSBzdGF0ZVs3XTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgQkxPQ0tfU0laRTsgaSsrKSB7CiAgICAgICAgaWYgKGkgPCAxNikgewogICAgICAgICAgICB0aGlzLnRlbXBbaV0gPSAoKChidWZmZXJbaSAqIDRdICYgMHhmZikgPDwgMjQpIHwKICAgICAgICAgICAgICAgICgoYnVmZmVyWyhpICogNCkgKyAxXSAmIDB4ZmYpIDw8IDE2KSB8CiAgICAgICAgICAgICAgICAoKGJ1ZmZlclsoaSAqIDQpICsgMl0gJiAweGZmKSA8PCA4KSB8CiAgICAgICAgICAgICAgICAoYnVmZmVyWyhpICogNCkgKyAzXSAmIDB4ZmYpKTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciB1ID0gdGhpcy50ZW1wW2kgLSAyXTsKICAgICAgICAgICAgdmFyIHQxXzEgPSAodSA+Pj4gMTcgfCB1IDw8IDE1KSBeCiAgICAgICAgICAgICAgICAodSA+Pj4gMTkgfCB1IDw8IDEzKSBeCiAgICAgICAgICAgICAgICAodSA+Pj4gMTApOwogICAgICAgICAgICB1ID0gdGhpcy50ZW1wW2kgLSAxNV07CiAgICAgICAgICAgIHZhciB0Ml8xID0gKHUgPj4+IDcgfCB1IDw8IDI1KSBeCiAgICAgICAgICAgICAgICAodSA+Pj4gMTggfCB1IDw8IDE0KSBeCiAgICAgICAgICAgICAgICAodSA+Pj4gMyk7CiAgICAgICAgICAgIHRoaXMudGVtcFtpXSA9ICh0MV8xICsgdGhpcy50ZW1wW2kgLSA3XSB8IDApICsKICAgICAgICAgICAgICAgICh0Ml8xICsgdGhpcy50ZW1wW2kgLSAxNl0gfCAwKTsKICAgICAgICB9CiAgICAgICAgdmFyIHQxID0gKCgoKChzdGF0ZTQgPj4+IDYgfCBzdGF0ZTQgPDwgMjYpIF4KICAgICAgICAgICAgKHN0YXRlNCA+Pj4gMTEgfCBzdGF0ZTQgPDwgMjEpIF4KICAgICAgICAgICAgKHN0YXRlNCA+Pj4gMjUgfCBzdGF0ZTQgPDwgNykpCiAgICAgICAgICAgICsgKChzdGF0ZTQgJiBzdGF0ZTUpIF4gKH5zdGF0ZTQgJiBzdGF0ZTYpKSkgfCAwKQogICAgICAgICAgICArICgoc3RhdGU3ICsgKChLRVlbaV0gKyB0aGlzLnRlbXBbaV0pIHwgMCkpIHwgMCkpIHwgMDsKICAgICAgICB2YXIgdDIgPSAoKChzdGF0ZTAgPj4+IDIgfCBzdGF0ZTAgPDwgMzApIF4KICAgICAgICAgICAgKHN0YXRlMCA+Pj4gMTMgfCBzdGF0ZTAgPDwgMTkpIF4KICAgICAgICAgICAgKHN0YXRlMCA+Pj4gMjIgfCBzdGF0ZTAgPDwgMTApKSArICgoc3RhdGUwICYgc3RhdGUxKSBeIChzdGF0ZTAgJiBzdGF0ZTIpIF4gKHN0YXRlMSAmIHN0YXRlMikpKSB8IDA7CiAgICAgICAgc3RhdGU3ID0gc3RhdGU2OwogICAgICAgIHN0YXRlNiA9IHN0YXRlNTsKICAgICAgICBzdGF0ZTUgPSBzdGF0ZTQ7CiAgICAgICAgc3RhdGU0ID0gKHN0YXRlMyArIHQxKSB8IDA7CiAgICAgICAgc3RhdGUzID0gc3RhdGUyOwogICAgICAgIHN0YXRlMiA9IHN0YXRlMTsKICAgICAgICBzdGF0ZTEgPSBzdGF0ZTA7CiAgICAgICAgc3RhdGUwID0gKHQxICsgdDIpIHwgMDsKICAgIH0KICAgIHN0YXRlWzBdICs9IHN0YXRlMDsKICAgIHN0YXRlWzFdICs9IHN0YXRlMTsKICAgIHN0YXRlWzJdICs9IHN0YXRlMjsKICAgIHN0YXRlWzNdICs9IHN0YXRlMzsKICAgIHN0YXRlWzRdICs9IHN0YXRlNDsKICAgIHN0YXRlWzVdICs9IHN0YXRlNTsKICAgIHN0YXRlWzZdICs9IHN0YXRlNjsKICAgIHN0YXRlWzddICs9IHN0YXRlNzsKfTsKCn0seyIuL2Jyb3dzZXJIYXNoVXRpbHMiOjExLCJidWZmZXIvIjo4MX1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsoZnVuY3Rpb24gKCl7CnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7CgovLyBicm93c2VyIHNwZWNpZmljIG1vZHVsZXMKdXRpbC5jcnlwdG8ubGliID0gcmVxdWlyZSgnLi9icm93c2VyQ3J5cHRvTGliJyk7CnV0aWwuQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyLycpLkJ1ZmZlcjsKdXRpbC51cmwgPSByZXF1aXJlKCd1cmwvJyk7CnV0aWwucXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZy8nKTsKdXRpbC5yZWFsQ2xvY2sgPSByZXF1aXJlKCcuL3JlYWxjbG9jay9icm93c2VyQ2xvY2snKTsKdXRpbC5lbnZpcm9ubWVudCA9ICdqcyc7CnV0aWwuY3JlYXRlRXZlbnRTdHJlYW0gPSByZXF1aXJlKCcuL2V2ZW50LXN0cmVhbS9idWZmZXJlZC1jcmVhdGUtZXZlbnQtc3RyZWFtJykuY3JlYXRlRXZlbnRTdHJlYW07CnV0aWwuaXNCcm93c2VyID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9Owp1dGlsLmlzTm9kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07Cgp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IEFXUzsKCnJlcXVpcmUoJy4vY3JlZGVudGlhbHMnKTsKcmVxdWlyZSgnLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluJyk7CnJlcXVpcmUoJy4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzJyk7CnJlcXVpcmUoJy4vY3JlZGVudGlhbHMvY2hhaW5hYmxlX3RlbXBvcmFyeV9jcmVkZW50aWFscycpOwpyZXF1aXJlKCcuL2NyZWRlbnRpYWxzL3dlYl9pZGVudGl0eV9jcmVkZW50aWFscycpOwpyZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NvZ25pdG9faWRlbnRpdHlfY3JlZGVudGlhbHMnKTsKcmVxdWlyZSgnLi9jcmVkZW50aWFscy9zYW1sX2NyZWRlbnRpYWxzJyk7CgovLyBMb2FkIHRoZSBET01QYXJzZXIgWE1MIHBhcnNlcgpBV1MuWE1MLlBhcnNlciA9IHJlcXVpcmUoJy4veG1sL2Jyb3dzZXJfcGFyc2VyJyk7CgovLyBMb2FkIHRoZSBYSFIgSHR0cENsaWVudApyZXF1aXJlKCcuL2h0dHAveGhyJyk7CgppZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7CiAgdmFyIHByb2Nlc3MgPSB7CiAgICBicm93c2VyOiB0cnVlCiAgfTsKfQoKfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQp9LHsiLi9icm93c2VyQ3J5cHRvTGliIjoxMCwiLi9jb3JlIjoxOCwiLi9jcmVkZW50aWFscyI6MTksIi4vY3JlZGVudGlhbHMvY2hhaW5hYmxlX3RlbXBvcmFyeV9jcmVkZW50aWFscyI6MjAsIi4vY3JlZGVudGlhbHMvY29nbml0b19pZGVudGl0eV9jcmVkZW50aWFscyI6MjEsIi4vY3JlZGVudGlhbHMvY3JlZGVudGlhbF9wcm92aWRlcl9jaGFpbiI6MjIsIi4vY3JlZGVudGlhbHMvc2FtbF9jcmVkZW50aWFscyI6MjMsIi4vY3JlZGVudGlhbHMvdGVtcG9yYXJ5X2NyZWRlbnRpYWxzIjoyNCwiLi9jcmVkZW50aWFscy93ZWJfaWRlbnRpdHlfY3JlZGVudGlhbHMiOjI1LCIuL2V2ZW50LXN0cmVhbS9idWZmZXJlZC1jcmVhdGUtZXZlbnQtc3RyZWFtIjoyNywiLi9odHRwL3hociI6MzUsIi4vcmVhbGNsb2NrL2Jyb3dzZXJDbG9jayI6NTIsIi4vdXRpbCI6NzEsIi4veG1sL2Jyb3dzZXJfcGFyc2VyIjo3MiwiX3Byb2Nlc3MiOjg2LCJidWZmZXIvIjo4MSwicXVlcnlzdHJpbmcvIjo5MiwidXJsLyI6OTR9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTsKcmVxdWlyZSgnLi9jcmVkZW50aWFscycpOwpyZXF1aXJlKCcuL2NyZWRlbnRpYWxzL2NyZWRlbnRpYWxfcHJvdmlkZXJfY2hhaW4nKTsKdmFyIFByb21pc2VzRGVwZW5kZW5jeTsKCi8qKgogKiBUaGUgbWFpbiBjb25maWd1cmF0aW9uIGNsYXNzIHVzZWQgYnkgYWxsIHNlcnZpY2Ugb2JqZWN0cyB0byBzZXQKICogdGhlIHJlZ2lvbiwgY3JlZGVudGlhbHMsIGFuZCBvdGhlciBvcHRpb25zIGZvciByZXF1ZXN0cy4KICoKICogQnkgZGVmYXVsdCwgY3JlZGVudGlhbHMgYW5kIHJlZ2lvbiBzZXR0aW5ncyBhcmUgbGVmdCB1bmNvbmZpZ3VyZWQuCiAqIFRoaXMgc2hvdWxkIGJlIGNvbmZpZ3VyZWQgYnkgdGhlIGFwcGxpY2F0aW9uIGJlZm9yZSB1c2luZyBhbnkKICogQVdTIHNlcnZpY2UgQVBJcy4KICoKICogSW4gb3JkZXIgdG8gc2V0IGdsb2JhbCBjb25maWd1cmF0aW9uIG9wdGlvbnMsIHByb3BlcnRpZXMgc2hvdWxkCiAqIGJlIGFzc2lnbmVkIHRvIHRoZSBnbG9iYWwge0FXUy5jb25maWd9IG9iamVjdC4KICoKICogQHNlZSBBV1MuY29uZmlnCiAqCiAqIEAhZ3JvdXAgR2VuZXJhbCBDb25maWd1cmF0aW9uIE9wdGlvbnMKICoKICogQCFhdHRyaWJ1dGUgY3JlZGVudGlhbHMKICogICBAcmV0dXJuIFtBV1MuQ3JlZGVudGlhbHNdIHRoZSBBV1MgY3JlZGVudGlhbHMgdG8gc2lnbiByZXF1ZXN0cyB3aXRoLgogKgogKiBAIWF0dHJpYnV0ZSByZWdpb24KICogICBAZXhhbXBsZSBTZXQgdGhlIGdsb2JhbCByZWdpb24gc2V0dGluZyB0byB1cy13ZXN0LTIKICogICAgIEFXUy5jb25maWcudXBkYXRlKHtyZWdpb246ICd1cy13ZXN0LTInfSk7CiAqICAgQHJldHVybiBbQVdTLkNyZWRlbnRpYWxzXSBUaGUgcmVnaW9uIHRvIHNlbmQgc2VydmljZSByZXF1ZXN0cyB0by4KICogICBAc2VlIGh0dHA6Ly9kb2NzLmFtYXpvbndlYnNlcnZpY2VzLmNvbS9nZW5lcmFsL2xhdGVzdC9nci9yYW5kZS5odG1sCiAqICAgICBBIGxpc3Qgb2YgYXZhaWxhYmxlIGVuZHBvaW50cyBmb3IgZWFjaCBBV1Mgc2VydmljZQogKgogKiBAIWF0dHJpYnV0ZSBtYXhSZXRyaWVzCiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIG1heGltdW0gYW1vdW50IG9mIHJldHJpZXMgdG8gcGVyZm9ybSBmb3IgYQogKiAgICAgc2VydmljZSByZXF1ZXN0LiBCeSBkZWZhdWx0IHRoaXMgdmFsdWUgaXMgY2FsY3VsYXRlZCBieSB0aGUgc3BlY2lmaWMKICogICAgIHNlcnZpY2Ugb2JqZWN0IHRoYXQgdGhlIHJlcXVlc3QgaXMgYmVpbmcgbWFkZSB0by4KICoKICogQCFhdHRyaWJ1dGUgbWF4UmVkaXJlY3RzCiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIG1heGltdW0gYW1vdW50IG9mIHJlZGlyZWN0cyB0byBmb2xsb3cgZm9yIGEKICogICAgIHNlcnZpY2UgcmVxdWVzdC4gRGVmYXVsdHMgdG8gMTAuCiAqCiAqIEAhYXR0cmlidXRlIHBhcmFtVmFsaWRhdGlvbgogKiAgIEByZXR1cm4gW0Jvb2xlYW58bWFwXSB3aGV0aGVyIGlucHV0IHBhcmFtZXRlcnMgc2hvdWxkIGJlIHZhbGlkYXRlZCBhZ2FpbnN0CiAqICAgICB0aGUgb3BlcmF0aW9uIGRlc2NyaXB0aW9uIGJlZm9yZSBzZW5kaW5nIHRoZSByZXF1ZXN0LiBEZWZhdWx0cyB0byB0cnVlLgogKiAgICAgUGFzcyBhIG1hcCB0byBlbmFibGUgYW55IG9mIHRoZSBmb2xsb3dpbmcgc3BlY2lmaWMgdmFsaWRhdGlvbiBmZWF0dXJlczoKICoKICogICAgICogKiptaW4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtaW4KICogICAgICAgY29uc3RyYWludC4gVGhpcyBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgd2hlbiBwYXJhbVZhbGlkYXRpb24gaXMgc2V0CiAqICAgICAgIHRvIGB0cnVlYC4KICogICAgICogKiptYXgqKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtYXgKICogICAgICAgY29uc3RyYWludC4KICogICAgICogKipwYXR0ZXJuKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBhCiAqICAgICAgIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICogICAgICogKiplbnVtKiogW0Jvb2xlYW5dICZtZGFzaDsgVmFsaWRhdGVzIHRoYXQgYSBzdHJpbmcgdmFsdWUgbWF0Y2hlcyBvbmUKICogICAgICAgb2YgdGhlIGFsbG93YWJsZSBlbnVtIHZhbHVlcy4KICoKICogQCFhdHRyaWJ1dGUgY29tcHV0ZUNoZWNrc3VtcwogKiAgIEByZXR1cm4gW0Jvb2xlYW5dIHdoZXRoZXIgdG8gY29tcHV0ZSBjaGVja3N1bXMgZm9yIHBheWxvYWQgYm9kaWVzIHdoZW4KICogICAgIHRoZSBzZXJ2aWNlIGFjY2VwdHMgaXQgKGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gUzMgb25seSkuCiAqCiAqIEAhYXR0cmlidXRlIGNvbnZlcnRSZXNwb25zZVR5cGVzCiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0eXBlcyBhcmUgY29udmVydGVkIHdoZW4gcGFyc2luZyByZXNwb25zZSBkYXRhLgogKiAgICAgQ3VycmVudGx5IG9ubHkgc3VwcG9ydGVkIGZvciBKU09OIGJhc2VkIHNlcnZpY2VzLiBUdXJuaW5nIHRoaXMgb2ZmIG1heQogKiAgICAgaW1wcm92ZSBwZXJmb3JtYW5jZSBvbiBsYXJnZSByZXNwb25zZSBwYXlsb2Fkcy4gRGVmYXVsdHMgdG8gYHRydWVgLgogKgogKiBAIWF0dHJpYnV0ZSBjb3JyZWN0Q2xvY2tTa2V3CiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0byBhcHBseSBhIGNsb2NrIHNrZXcgY29ycmVjdGlvbiBhbmQgcmV0cnkKICogICAgIHJlcXVlc3RzIHRoYXQgZmFpbCBiZWNhdXNlIG9mIGFuIHNrZXdlZCBjbGllbnQgY2xvY2suIERlZmF1bHRzIHRvCiAqICAgICBgZmFsc2VgLgogKgogKiBAIWF0dHJpYnV0ZSBzc2xFbmFibGVkCiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciBTU0wgaXMgZW5hYmxlZCBmb3IgcmVxdWVzdHMKICoKICogQCFhdHRyaWJ1dGUgczNGb3JjZVBhdGhTdHlsZQogKiAgIEByZXR1cm4gW0Jvb2xlYW5dIHdoZXRoZXIgdG8gZm9yY2UgcGF0aCBzdHlsZSBVUkxzIGZvciBTMyBvYmplY3RzCiAqCiAqIEAhYXR0cmlidXRlIHMzQnVja2V0RW5kcG9pbnQKICogICBAbm90ZSBTZXR0aW5nIHRoaXMgY29uZmlndXJhdGlvbiBvcHRpb24gcmVxdWlyZXMgYW4gYGVuZHBvaW50YCB0byBiZQogKiAgICAgcHJvdmlkZWQgZXhwbGljaXRseSB0byB0aGUgc2VydmljZSBjb25zdHJ1Y3Rvci4KICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBwcm92aWRlZCBlbmRwb2ludCBhZGRyZXNzZXMgYW4gaW5kaXZpZHVhbAogKiAgICAgYnVja2V0IChmYWxzZSBpZiBpdCBhZGRyZXNzZXMgdGhlIHJvb3QgQVBJIGVuZHBvaW50KS4KICoKICogQCFhdHRyaWJ1dGUgczNEaXNhYmxlQm9keVNpZ25pbmcKICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIGRpc2FibGUgUzMgYm9keSBzaWduaW5nIHdoZW4gdXNpbmcgc2lnbmF0dXJlIHZlcnNpb24gYHY0YC4KICogICAgIEJvZHkgc2lnbmluZyBjYW4gb25seSBiZSBkaXNhYmxlZCB3aGVuIHVzaW5nIGh0dHBzLiBEZWZhdWx0cyB0byBgdHJ1ZWAuCiAqCiAqIEAhYXR0cmlidXRlIHVzZUFjY2VsZXJhdGVFbmRwb2ludAogKiAgIEBub3RlIFRoaXMgY29uZmlndXJhdGlvbiBvcHRpb24gaXMgb25seSBjb21wYXRpYmxlIHdpdGggUzMgd2hpbGUgYWNjZXNzaW5nCiAqICAgICBkbnMtY29tcGF0aWJsZSBidWNrZXRzLgogKiAgIEByZXR1cm4gW0Jvb2xlYW5dIFdoZXRoZXIgdG8gdXNlIHRoZSBBY2NlbGVyYXRlIGVuZHBvaW50IHdpdGggdGhlIFMzIHNlcnZpY2UuCiAqICAgICBEZWZhdWx0cyB0byBgZmFsc2VgLgogKgogKiBAIWF0dHJpYnV0ZSByZXRyeURlbGF5T3B0aW9ucwogKiAgIEBleGFtcGxlIFNldCB0aGUgYmFzZSByZXRyeSBkZWxheSBmb3IgYWxsIHNlcnZpY2VzIHRvIDMwMCBtcwogKiAgICAgQVdTLmNvbmZpZy51cGRhdGUoe3JldHJ5RGVsYXlPcHRpb25zOiB7YmFzZTogMzAwfX0pOwogKiAgICAgLy8gRGVsYXlzIHdpdGggbWF4UmV0cmllcyA9IDM6IDMwMCwgNjAwLCAxMjAwCiAqICAgQGV4YW1wbGUgU2V0IGEgY3VzdG9tIGJhY2tvZmYgZnVuY3Rpb24gdG8gcHJvdmlkZSBkZWxheSB2YWx1ZXMgb24gcmV0cmllcwogKiAgICAgQVdTLmNvbmZpZy51cGRhdGUoe3JldHJ5RGVsYXlPcHRpb25zOiB7Y3VzdG9tQmFja29mZjogZnVuY3Rpb24ocmV0cnlDb3VudCkgewogKiAgICAgICAvLyByZXR1cm5zIGRlbGF5IGluIG1zCiAqICAgICB9fX0pOwogKiAgIEByZXR1cm4gW21hcF0gQSBzZXQgb2Ygb3B0aW9ucyB0byBjb25maWd1cmUgdGhlIHJldHJ5IGRlbGF5IG9uIHJldHJ5YWJsZSBlcnJvcnMuCiAqICAgICBDdXJyZW50bHkgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgogKgogKiAgICAgKiAqKmJhc2UqKiBbSW50ZWdlcl0gJm1kYXNoOyBUaGUgYmFzZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHVzZSBpbiB0aGUKICogICAgICAgZXhwb25lbnRpYWwgYmFja29mZiBmb3Igb3BlcmF0aW9uIHJldHJpZXMuIERlZmF1bHRzIHRvIDEwMCBtcyBmb3IgYWxsIHNlcnZpY2VzIGV4Y2VwdAogKiAgICAgICBEeW5hbW9EQiwgd2hlcmUgaXQgZGVmYXVsdHMgdG8gNTBtcy4KICogICAgICogKipjdXN0b21CYWNrb2ZmICoqIFtmdW5jdGlvbl0gJm1kYXNoOyBBIGN1c3RvbSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSByZXRyeSBjb3VudAogKiAgICAgICBhbmQgcmV0dXJucyB0aGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgaW4gbWlsbGlzZWNvbmRzLiBUaGUgYGJhc2VgIG9wdGlvbiB3aWxsIGJlCiAqICAgICAgIGlnbm9yZWQgaWYgdGhpcyBvcHRpb24gaXMgc3VwcGxpZWQuCiAqCiAqIEAhYXR0cmlidXRlIGh0dHBPcHRpb25zCiAqICAgQHJldHVybiBbbWFwXSBBIHNldCBvZiBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIGxvdy1sZXZlbCBIVFRQIHJlcXVlc3QuCiAqICAgICBDdXJyZW50bHkgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgogKgogKiAgICAgKiAqKnByb3h5KiogW1N0cmluZ10gJm1kYXNoOyB0aGUgVVJMIHRvIHByb3h5IHJlcXVlc3RzIHRocm91Z2gKICogICAgICogKiphZ2VudCoqIFtodHRwLkFnZW50LCBodHRwcy5BZ2VudF0gJm1kYXNoOyB0aGUgQWdlbnQgb2JqZWN0IHRvIHBlcmZvcm0KICogICAgICAgSFRUUCByZXF1ZXN0cyB3aXRoLiBVc2VkIGZvciBjb25uZWN0aW9uIHBvb2xpbmcuIE5vdGUgdGhhdCBmb3IKICogICAgICAgU1NMIGNvbm5lY3Rpb25zLCBhIHNwZWNpYWwgQWdlbnQgb2JqZWN0IGlzIHVzZWQgaW4gb3JkZXIgdG8gZW5hYmxlCiAqICAgICAgIHBlZXIgY2VydGlmaWNhdGUgdmVyaWZpY2F0aW9uLiBUaGlzIGZlYXR1cmUgaXMgb25seSBzdXBwb3J0ZWQgaW4gdGhlCiAqICAgICAgIE5vZGUuanMgZW52aXJvbm1lbnQuCiAqICAgICAqICoqY29ubmVjdFRpbWVvdXQqKiBbSW50ZWdlcl0gJm1kYXNoOyBTZXRzIHRoZSBzb2NrZXQgdG8gdGltZW91dCBhZnRlcgogKiAgICAgICBmYWlsaW5nIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gd2l0aCB0aGUgc2VydmVyIGFmdGVyCiAqICAgICAgIGBjb25uZWN0VGltZW91dGAgbWlsbGlzZWNvbmRzLiBUaGlzIHRpbWVvdXQgaGFzIG5vIGVmZmVjdCBvbmNlIGEgc29ja2V0CiAqICAgICAgIGNvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQuCiAqICAgICAqICoqdGltZW91dCoqIFtJbnRlZ2VyXSAmbWRhc2g7IFNldHMgdGhlIHNvY2tldCB0byB0aW1lb3V0IGFmdGVyIHRpbWVvdXQKICogICAgICAgbWlsbGlzZWNvbmRzIG9mIGluYWN0aXZpdHkgb24gdGhlIHNvY2tldC4gRGVmYXVsdHMgdG8gdHdvIG1pbnV0ZXMKICogICAgICAgKDEyMDAwMCkKICogICAgICogKip4aHJBc3luYyoqIFtCb29sZWFuXSAmbWRhc2g7IFdoZXRoZXIgdGhlIFNESyB3aWxsIHNlbmQgYXN5bmNocm9ub3VzCiAqICAgICAgIEhUVFAgcmVxdWVzdHMuIFVzZWQgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQgb25seS4gU2V0IHRvIGZhbHNlIHRvCiAqICAgICAgIHNlbmQgcmVxdWVzdHMgc3luY2hyb25vdXNseS4gRGVmYXVsdHMgdG8gdHJ1ZSAoYXN5bmMgb24pLgogKiAgICAgKiAqKnhocldpdGhDcmVkZW50aWFscyoqIFtCb29sZWFuXSAmbWRhc2g7IFNldHMgdGhlICJ3aXRoQ3JlZGVudGlhbHMiCiAqICAgICAgIHByb3BlcnR5IG9mIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4gVXNlZCBpbiB0aGUgYnJvd3NlciBlbnZpcm9ubWVudAogKiAgICAgICBvbmx5LiBEZWZhdWx0cyB0byBmYWxzZS4KICogQCFhdHRyaWJ1dGUgbG9nZ2VyCiAqICAgQHJldHVybiBbI3dyaXRlLCNsb2ddIGFuIG9iamVjdCB0aGF0IHJlc3BvbmRzIHRvIC53cml0ZSgpIChsaWtlIGEgc3RyZWFtKQogKiAgICAgb3IgLmxvZygpIChsaWtlIHRoZSBjb25zb2xlIG9iamVjdCkgaW4gb3JkZXIgdG8gbG9nIGluZm9ybWF0aW9uIGFib3V0CiAqICAgICByZXF1ZXN0cwogKgogKiBAIWF0dHJpYnV0ZSBzeXN0ZW1DbG9ja09mZnNldAogKiAgIEByZXR1cm4gW051bWJlcl0gYW4gb2Zmc2V0IHZhbHVlIGluIG1pbGxpc2Vjb25kcyB0byBhcHBseSB0byBhbGwgc2lnbmluZwogKiAgICAgdGltZXMuIFVzZSB0aGlzIHRvIGNvbXBlbnNhdGUgZm9yIGNsb2NrIHNrZXcgd2hlbiB5b3VyIHN5c3RlbSBtYXkgYmUKICogICAgIG91dCBvZiBzeW5jIHdpdGggdGhlIHNlcnZpY2UgdGltZS4gTm90ZSB0aGF0IHRoaXMgY29uZmlndXJhdGlvbiBvcHRpb24KICogICAgIGNhbiBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGdsb2JhbCBgQVdTLmNvbmZpZ2Agb2JqZWN0IGFuZCBjYW5ub3QgYmUKICogICAgIG92ZXJyaWRkZW4gaW4gc2VydmljZS1zcGVjaWZpYyBjb25maWd1cmF0aW9uLiBEZWZhdWx0cyB0byAwIG1pbGxpc2Vjb25kcy4KICoKICogQCFhdHRyaWJ1dGUgc2lnbmF0dXJlVmVyc2lvbgogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIHNpZ25hdHVyZSB2ZXJzaW9uIHRvIHNpZ24gcmVxdWVzdHMgd2l0aCAob3ZlcnJpZGluZwogKiAgICAgdGhlIEFQSSBjb25maWd1cmF0aW9uKS4gUG9zc2libGUgdmFsdWVzIGFyZTogJ3YyJywgJ3YzJywgJ3Y0Jy4KICoKICogQCFhdHRyaWJ1dGUgc2lnbmF0dXJlQ2FjaGUKICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBzaWduYXR1cmUgdG8gc2lnbiByZXF1ZXN0cyB3aXRoIChvdmVycmlkaW5nCiAqICAgICB0aGUgQVBJIGNvbmZpZ3VyYXRpb24pIGlzIGNhY2hlZC4gT25seSBhcHBsaWVzIHRvIHRoZSBzaWduYXR1cmUgdmVyc2lvbiAndjQnLgogKiAgICAgRGVmYXVsdHMgdG8gYHRydWVgLgogKgogKiBAIWF0dHJpYnV0ZSBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQKICogICBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRvIGVuYWJsZSBlbmRwb2ludCBkaXNjb3ZlcnkgZm9yIG9wZXJhdGlvbnMgdGhhdAogKiAgICAgYWxsb3cgb3B0aW9uYWxseSB1c2luZyBhbiBlbmRwb2ludCByZXR1cm5lZCBieSB0aGUgc2VydmljZS4KICogICAgIERlZmF1bHRzIHRvICdmYWxzZScKICoKICogQCFhdHRyaWJ1dGUgZW5kcG9pbnRDYWNoZVNpemUKICogICBAcmV0dXJuIFtOdW1iZXJdIHRoZSBzaXplIG9mIHRoZSBnbG9iYWwgY2FjaGUgc3RvcmluZyBlbmRwb2ludHMgZnJvbSBlbmRwb2ludAogKiAgICAgZGlzY292ZXJ5IG9wZXJhdGlvbnMuIE9uY2UgZW5kcG9pbnQgY2FjaGUgaXMgY3JlYXRlZCwgdXBkYXRpbmcgdGhpcyBzZXR0aW5nCiAqICAgICBjYW5ub3QgY2hhbmdlIGV4aXN0aW5nIGNhY2hlIHNpemUuCiAqICAgICBEZWZhdWx0cyB0byAxMDAwCiAqCiAqIEAhYXR0cmlidXRlIGhvc3RQcmVmaXhFbmFibGVkCiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0byBtYXJzaGFsIHJlcXVlc3QgcGFyYW1ldGVycyB0byB0aGUgcHJlZml4IG9mCiAqICAgICBob3N0bmFtZS4gRGVmYXVsdHMgdG8gYHRydWVgLgogKgogKiBAIWF0dHJpYnV0ZSBzdHNSZWdpb25hbEVuZHBvaW50cwogKiAgIEByZXR1cm4gWydsZWdhY3knfCdyZWdpb25hbCddIHdoZXRoZXIgdG8gc2VuZCBzdHMgcmVxdWVzdCB0byBnbG9iYWwgZW5kcG9pbnRzIG9yCiAqICAgICByZWdpb25hbCBlbmRwb2ludHMuCiAqICAgICBEZWZhdWx0cyB0byAnbGVnYWN5JwogKi8KQVdTLkNvbmZpZyA9IEFXUy51dGlsLmluaGVyaXQoewogIC8qKgogICAqIEAhZW5kZ3JvdXAKICAgKi8KCiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBjb25maWd1cmF0aW9uIG9iamVjdC4gVGhpcyBpcyB0aGUgb2JqZWN0IHRoYXQgcGFzc2VzCiAgICogb3B0aW9uIGRhdGEgYWxvbmcgdG8gc2VydmljZSByZXF1ZXN0cywgaW5jbHVkaW5nIGNyZWRlbnRpYWxzLCBzZWN1cml0eSwKICAgKiByZWdpb24gaW5mb3JtYXRpb24sIGFuZCBzb21lIHNlcnZpY2Ugc3BlY2lmaWMgc2V0dGluZ3MuCiAgICoKICAgKiBAZXhhbXBsZSBDcmVhdGluZyBhIG5ldyBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGNyZWRlbnRpYWxzIGFuZCByZWdpb24KICAgKiAgIHZhciBjb25maWcgPSBuZXcgQVdTLkNvbmZpZyh7CiAgICogICAgIGFjY2Vzc0tleUlkOiAnQUtJRCcsIHNlY3JldEFjY2Vzc0tleTogJ1NFQ1JFVCcsIHJlZ2lvbjogJ3VzLXdlc3QtMicKICAgKiAgIH0pOwogICAqIEBvcHRpb24gb3B0aW9ucyBhY2Nlc3NLZXlJZCBbU3RyaW5nXSB5b3VyIEFXUyBhY2Nlc3Mga2V5IElELgogICAqIEBvcHRpb24gb3B0aW9ucyBzZWNyZXRBY2Nlc3NLZXkgW1N0cmluZ10geW91ciBBV1Mgc2VjcmV0IGFjY2VzcyBrZXkuCiAgICogQG9wdGlvbiBvcHRpb25zIHNlc3Npb25Ub2tlbiBbQVdTLkNyZWRlbnRpYWxzXSB0aGUgb3B0aW9uYWwgQVdTCiAgICogICBzZXNzaW9uIHRva2VuIHRvIHNpZ24gcmVxdWVzdHMgd2l0aC4KICAgKiBAb3B0aW9uIG9wdGlvbnMgY3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gdGhlIEFXUyBjcmVkZW50aWFscwogICAqICAgdG8gc2lnbiByZXF1ZXN0cyB3aXRoLiBZb3UgY2FuIGVpdGhlciBzcGVjaWZ5IHRoaXMgb2JqZWN0LCBvcgogICAqICAgc3BlY2lmeSB0aGUgYWNjZXNzS2V5SWQgYW5kIHNlY3JldEFjY2Vzc0tleSBvcHRpb25zIGRpcmVjdGx5LgogICAqIEBvcHRpb24gb3B0aW9ucyBjcmVkZW50aWFsUHJvdmlkZXIgW0FXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbl0gdGhlCiAgICogICBwcm92aWRlciBjaGFpbiB1c2VkIHRvIHJlc29sdmUgY3JlZGVudGlhbHMgaWYgbm8gc3RhdGljIGBjcmVkZW50aWFsc2AKICAgKiAgIHByb3BlcnR5IGlzIHNldC4KICAgKiBAb3B0aW9uIG9wdGlvbnMgcmVnaW9uIFtTdHJpbmddIHRoZSByZWdpb24gdG8gc2VuZCBzZXJ2aWNlIHJlcXVlc3RzIHRvLgogICAqICAgU2VlIHtyZWdpb259IGZvciBtb3JlIGluZm9ybWF0aW9uLgogICAqIEBvcHRpb24gb3B0aW9ucyBtYXhSZXRyaWVzIFtJbnRlZ2VyXSB0aGUgbWF4aW11bSBhbW91bnQgb2YgcmV0cmllcyB0bwogICAqICAgYXR0ZW1wdCB3aXRoIGEgcmVxdWVzdC4gU2VlIHttYXhSZXRyaWVzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgKiBAb3B0aW9uIG9wdGlvbnMgbWF4UmVkaXJlY3RzIFtJbnRlZ2VyXSB0aGUgbWF4aW11bSBhbW91bnQgb2YgcmVkaXJlY3RzIHRvCiAgICogICBmb2xsb3cgd2l0aCBhIHJlcXVlc3QuIFNlZSB7bWF4UmVkaXJlY3RzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4KICAgKiBAb3B0aW9uIG9wdGlvbnMgc3NsRW5hYmxlZCBbQm9vbGVhbl0gd2hldGhlciB0byBlbmFibGUgU1NMIGZvcgogICAqICAgcmVxdWVzdHMuCiAgICogQG9wdGlvbiBvcHRpb25zIHBhcmFtVmFsaWRhdGlvbiBbQm9vbGVhbnxtYXBdIHdoZXRoZXIgaW5wdXQgcGFyYW1ldGVycwogICAqICAgc2hvdWxkIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IHRoZSBvcGVyYXRpb24gZGVzY3JpcHRpb24gYmVmb3JlIHNlbmRpbmcKICAgKiAgIHRoZSByZXF1ZXN0LiBEZWZhdWx0cyB0byB0cnVlLiBQYXNzIGEgbWFwIHRvIGVuYWJsZSBhbnkgb2YgdGhlCiAgICogICBmb2xsb3dpbmcgc3BlY2lmaWMgdmFsaWRhdGlvbiBmZWF0dXJlczoKICAgKgogICAqICAgKiAqKm1pbioqIFtCb29sZWFuXSAmbWRhc2g7IFZhbGlkYXRlcyB0aGF0IGEgdmFsdWUgbWVldHMgdGhlIG1pbgogICAqICAgICBjb25zdHJhaW50LiBUaGlzIGlzIGVuYWJsZWQgYnkgZGVmYXVsdCB3aGVuIHBhcmFtVmFsaWRhdGlvbiBpcyBzZXQKICAgKiAgICAgdG8gYHRydWVgLgogICAqICAgKiAqKm1heCoqIFtCb29sZWFuXSAmbWRhc2g7IFZhbGlkYXRlcyB0aGF0IGEgdmFsdWUgbWVldHMgdGhlIG1heAogICAqICAgICBjb25zdHJhaW50LgogICAqICAgKiAqKnBhdHRlcm4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHN0cmluZyB2YWx1ZSBtYXRjaGVzIGEKICAgKiAgICAgcmVndWxhciBleHByZXNzaW9uLgogICAqICAgKiAqKmVudW0qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHN0cmluZyB2YWx1ZSBtYXRjaGVzIG9uZQogICAqICAgICBvZiB0aGUgYWxsb3dhYmxlIGVudW0gdmFsdWVzLgogICAqIEBvcHRpb24gb3B0aW9ucyBjb21wdXRlQ2hlY2tzdW1zIFtCb29sZWFuXSB3aGV0aGVyIHRvIGNvbXB1dGUgY2hlY2tzdW1zCiAgICogICBmb3IgcGF5bG9hZCBib2RpZXMgd2hlbiB0aGUgc2VydmljZSBhY2NlcHRzIGl0IChjdXJyZW50bHkgc3VwcG9ydGVkCiAgICogICBpbiBTMyBvbmx5KQogICAqIEBvcHRpb24gb3B0aW9ucyBjb252ZXJ0UmVzcG9uc2VUeXBlcyBbQm9vbGVhbl0gd2hldGhlciB0eXBlcyBhcmUgY29udmVydGVkCiAgICogICAgIHdoZW4gcGFyc2luZyByZXNwb25zZSBkYXRhLiBDdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgZm9yIEpTT04gYmFzZWQKICAgKiAgICAgc2VydmljZXMuIFR1cm5pbmcgdGhpcyBvZmYgbWF5IGltcHJvdmUgcGVyZm9ybWFuY2Ugb24gbGFyZ2UgcmVzcG9uc2UKICAgKiAgICAgcGF5bG9hZHMuIERlZmF1bHRzIHRvIGB0cnVlYC4KICAgKiBAb3B0aW9uIG9wdGlvbnMgY29ycmVjdENsb2NrU2tldyBbQm9vbGVhbl0gd2hldGhlciB0byBhcHBseSBhIGNsb2NrIHNrZXcKICAgKiAgICAgY29ycmVjdGlvbiBhbmQgcmV0cnkgcmVxdWVzdHMgdGhhdCBmYWlsIGJlY2F1c2Ugb2YgYW4gc2tld2VkIGNsaWVudAogICAqICAgICBjbG9jay4gRGVmYXVsdHMgdG8gYGZhbHNlYC4KICAgKiBAb3B0aW9uIG9wdGlvbnMgczNGb3JjZVBhdGhTdHlsZSBbQm9vbGVhbl0gd2hldGhlciB0byBmb3JjZSBwYXRoCiAgICogICBzdHlsZSBVUkxzIGZvciBTMyBvYmplY3RzLgogICAqIEBvcHRpb24gb3B0aW9ucyBzM0J1Y2tldEVuZHBvaW50IFtCb29sZWFuXSB3aGV0aGVyIHRoZSBwcm92aWRlZCBlbmRwb2ludAogICAqICAgYWRkcmVzc2VzIGFuIGluZGl2aWR1YWwgYnVja2V0IChmYWxzZSBpZiBpdCBhZGRyZXNzZXMgdGhlIHJvb3QgQVBJCiAgICogICBlbmRwb2ludCkuIE5vdGUgdGhhdCBzZXR0aW5nIHRoaXMgY29uZmlndXJhdGlvbiBvcHRpb24gcmVxdWlyZXMgYW4KICAgKiAgIGBlbmRwb2ludGAgdG8gYmUgcHJvdmlkZWQgZXhwbGljaXRseSB0byB0aGUgc2VydmljZSBjb25zdHJ1Y3Rvci4KICAgKiBAb3B0aW9uIG9wdGlvbnMgczNEaXNhYmxlQm9keVNpZ25pbmcgW0Jvb2xlYW5dIHdoZXRoZXIgUzMgYm9keSBzaWduaW5nCiAgICogICBzaG91bGQgYmUgZGlzYWJsZWQgd2hlbiB1c2luZyBzaWduYXR1cmUgdmVyc2lvbiBgdjRgLiBCb2R5IHNpZ25pbmcKICAgKiAgIGNhbiBvbmx5IGJlIGRpc2FibGVkIHdoZW4gdXNpbmcgaHR0cHMuIERlZmF1bHRzIHRvIGB0cnVlYC4KICAgKgogICAqIEBvcHRpb24gb3B0aW9ucyByZXRyeURlbGF5T3B0aW9ucyBbbWFwXSBBIHNldCBvZiBvcHRpb25zIHRvIGNvbmZpZ3VyZQogICAqICAgdGhlIHJldHJ5IGRlbGF5IG9uIHJldHJ5YWJsZSBlcnJvcnMuIEN1cnJlbnRseSBzdXBwb3J0ZWQgb3B0aW9ucyBhcmU6CiAgICoKICAgKiAgICogKipiYXNlKiogW0ludGVnZXJdICZtZGFzaDsgVGhlIGJhc2UgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB1c2UgaW4gdGhlCiAgICogICAgIGV4cG9uZW50aWFsIGJhY2tvZmYgZm9yIG9wZXJhdGlvbiByZXRyaWVzLiBEZWZhdWx0cyB0byAxMDAgbXMgZm9yIGFsbAogICAqICAgICBzZXJ2aWNlcyBleGNlcHQgRHluYW1vREIsIHdoZXJlIGl0IGRlZmF1bHRzIHRvIDUwbXMuCiAgICogICAqICoqY3VzdG9tQmFja29mZiAqKiBbZnVuY3Rpb25dICZtZGFzaDsgQSBjdXN0b20gZnVuY3Rpb24gdGhhdCBhY2NlcHRzIGEgcmV0cnkgY291bnQKICAgKiAgICAgYW5kIHJldHVybnMgdGhlIGFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IGluIG1pbGxpc2Vjb25kcy4gVGhlIGBiYXNlYCBvcHRpb24gd2lsbCBiZQogICAqICAgICBpZ25vcmVkIGlmIHRoaXMgb3B0aW9uIGlzIHN1cHBsaWVkLgogICAqIEBvcHRpb24gb3B0aW9ucyBodHRwT3B0aW9ucyBbbWFwXSBBIHNldCBvZiBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIGxvdy1sZXZlbAogICAqICAgSFRUUCByZXF1ZXN0LiBDdXJyZW50bHkgc3VwcG9ydGVkIG9wdGlvbnMgYXJlOgogICAqCiAgICogICAqICoqcHJveHkqKiBbU3RyaW5nXSAmbWRhc2g7IHRoZSBVUkwgdG8gcHJveHkgcmVxdWVzdHMgdGhyb3VnaAogICAqICAgKiAqKmFnZW50KiogW2h0dHAuQWdlbnQsIGh0dHBzLkFnZW50XSAmbWRhc2g7IHRoZSBBZ2VudCBvYmplY3QgdG8gcGVyZm9ybQogICAqICAgICBIVFRQIHJlcXVlc3RzIHdpdGguIFVzZWQgZm9yIGNvbm5lY3Rpb24gcG9vbGluZy4gRGVmYXVsdHMgdG8gdGhlIGdsb2JhbAogICAqICAgICBhZ2VudCAoYGh0dHAuZ2xvYmFsQWdlbnRgKSBmb3Igbm9uLVNTTCBjb25uZWN0aW9ucy4gTm90ZSB0aGF0IGZvcgogICAqICAgICBTU0wgY29ubmVjdGlvbnMsIGEgc3BlY2lhbCBBZ2VudCBvYmplY3QgaXMgdXNlZCBpbiBvcmRlciB0byBlbmFibGUKICAgKiAgICAgcGVlciBjZXJ0aWZpY2F0ZSB2ZXJpZmljYXRpb24uIFRoaXMgZmVhdHVyZSBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUKICAgKiAgICAgTm9kZS5qcyBlbnZpcm9ubWVudC4KICAgKiAgICogKipjb25uZWN0VGltZW91dCoqIFtJbnRlZ2VyXSAmbWRhc2g7IFNldHMgdGhlIHNvY2tldCB0byB0aW1lb3V0IGFmdGVyCiAgICogICAgIGZhaWxpbmcgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBzZXJ2ZXIgYWZ0ZXIKICAgKiAgICAgYGNvbm5lY3RUaW1lb3V0YCBtaWxsaXNlY29uZHMuIFRoaXMgdGltZW91dCBoYXMgbm8gZWZmZWN0IG9uY2UgYSBzb2NrZXQKICAgKiAgICAgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC4KICAgKiAgICogKip0aW1lb3V0KiogW0ludGVnZXJdICZtZGFzaDsgU2V0cyB0aGUgc29ja2V0IHRvIHRpbWVvdXQgYWZ0ZXIgdGltZW91dAogICAqICAgICBtaWxsaXNlY29uZHMgb2YgaW5hY3Rpdml0eSBvbiB0aGUgc29ja2V0LiBEZWZhdWx0cyB0byB0d28gbWludXRlcwogICAqICAgICAoMTIwMDAwKS4KICAgKiAgICogKip4aHJBc3luYyoqIFtCb29sZWFuXSAmbWRhc2g7IFdoZXRoZXIgdGhlIFNESyB3aWxsIHNlbmQgYXN5bmNocm9ub3VzCiAgICogICAgIEhUVFAgcmVxdWVzdHMuIFVzZWQgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQgb25seS4gU2V0IHRvIGZhbHNlIHRvCiAgICogICAgIHNlbmQgcmVxdWVzdHMgc3luY2hyb25vdXNseS4gRGVmYXVsdHMgdG8gdHJ1ZSAoYXN5bmMgb24pLgogICAqICAgKiAqKnhocldpdGhDcmVkZW50aWFscyoqIFtCb29sZWFuXSAmbWRhc2g7IFNldHMgdGhlICJ3aXRoQ3JlZGVudGlhbHMiCiAgICogICAgIHByb3BlcnR5IG9mIGFuIFhNTEh0dHBSZXF1ZXN0IG9iamVjdC4gVXNlZCBpbiB0aGUgYnJvd3NlciBlbnZpcm9ubWVudAogICAqICAgICBvbmx5LiBEZWZhdWx0cyB0byBmYWxzZS4KICAgKiBAb3B0aW9uIG9wdGlvbnMgYXBpVmVyc2lvbiBbU3RyaW5nLCBEYXRlXSBhIFN0cmluZyBpbiBZWVlZLU1NLUREIGZvcm1hdAogICAqICAgKG9yIGEgZGF0ZSkgdGhhdCByZXByZXNlbnRzIHRoZSBsYXRlc3QgcG9zc2libGUgQVBJIHZlcnNpb24gdGhhdCBjYW4gYmUKICAgKiAgIHVzZWQgaW4gYWxsIHNlcnZpY2VzICh1bmxlc3Mgb3ZlcnJpZGRlbiBieSBgYXBpVmVyc2lvbnNgKS4gU3BlY2lmeQogICAqICAgJ2xhdGVzdCcgdG8gdXNlIHRoZSBsYXRlc3QgcG9zc2libGUgdmVyc2lvbi4KICAgKiBAb3B0aW9uIG9wdGlvbnMgYXBpVmVyc2lvbnMgW21hcDxTdHJpbmcsIFN0cmluZ3xEYXRlPl0gYSBtYXAgb2Ygc2VydmljZQogICAqICAgaWRlbnRpZmllcnMgKHRoZSBsb3dlcmNhc2Ugc2VydmljZSBjbGFzcyBuYW1lKSB3aXRoIHRoZSBBUEkgdmVyc2lvbiB0bwogICAqICAgdXNlIHdoZW4gaW5zdGFudGlhdGluZyBhIHNlcnZpY2UuIFNwZWNpZnkgJ2xhdGVzdCcgZm9yIGVhY2ggaW5kaXZpZHVhbAogICAqICAgdGhhdCBjYW4gdXNlIHRoZSBsYXRlc3QgYXZhaWxhYmxlIHZlcnNpb24uCiAgICogQG9wdGlvbiBvcHRpb25zIGxvZ2dlciBbI3dyaXRlLCNsb2ddIGFuIG9iamVjdCB0aGF0IHJlc3BvbmRzIHRvIC53cml0ZSgpCiAgICogICAobGlrZSBhIHN0cmVhbSkgb3IgLmxvZygpIChsaWtlIHRoZSBjb25zb2xlIG9iamVjdCkgaW4gb3JkZXIgdG8gbG9nCiAgICogICBpbmZvcm1hdGlvbiBhYm91dCByZXF1ZXN0cwogICAqIEBvcHRpb24gb3B0aW9ucyBzeXN0ZW1DbG9ja09mZnNldCBbTnVtYmVyXSBhbiBvZmZzZXQgdmFsdWUgaW4gbWlsbGlzZWNvbmRzCiAgICogICB0byBhcHBseSB0byBhbGwgc2lnbmluZyB0aW1lcy4gVXNlIHRoaXMgdG8gY29tcGVuc2F0ZSBmb3IgY2xvY2sgc2tldwogICAqICAgd2hlbiB5b3VyIHN5c3RlbSBtYXkgYmUgb3V0IG9mIHN5bmMgd2l0aCB0aGUgc2VydmljZSB0aW1lLiBOb3RlIHRoYXQKICAgKiAgIHRoaXMgY29uZmlndXJhdGlvbiBvcHRpb24gY2FuIG9ubHkgYmUgYXBwbGllZCB0byB0aGUgZ2xvYmFsIGBBV1MuY29uZmlnYAogICAqICAgb2JqZWN0IGFuZCBjYW5ub3QgYmUgb3ZlcnJpZGRlbiBpbiBzZXJ2aWNlLXNwZWNpZmljIGNvbmZpZ3VyYXRpb24uCiAgICogICBEZWZhdWx0cyB0byAwIG1pbGxpc2Vjb25kcy4KICAgKiBAb3B0aW9uIG9wdGlvbnMgc2lnbmF0dXJlVmVyc2lvbiBbU3RyaW5nXSB0aGUgc2lnbmF0dXJlIHZlcnNpb24gdG8gc2lnbgogICAqICAgcmVxdWVzdHMgd2l0aCAob3ZlcnJpZGluZyB0aGUgQVBJIGNvbmZpZ3VyYXRpb24pLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOgogICAqICAgJ3YyJywgJ3YzJywgJ3Y0Jy4KICAgKiBAb3B0aW9uIG9wdGlvbnMgc2lnbmF0dXJlQ2FjaGUgW0Jvb2xlYW5dIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSB0byBzaWduCiAgICogICByZXF1ZXN0cyB3aXRoIChvdmVycmlkaW5nIHRoZSBBUEkgY29uZmlndXJhdGlvbikgaXMgY2FjaGVkLiBPbmx5IGFwcGxpZXMKICAgKiAgIHRvIHRoZSBzaWduYXR1cmUgdmVyc2lvbiAndjQnLiBEZWZhdWx0cyB0byBgdHJ1ZWAuCiAgICogQG9wdGlvbiBvcHRpb25zIGR5bmFtb0RiQ3JjMzIgW0Jvb2xlYW5dIHdoZXRoZXIgdG8gdmFsaWRhdGUgdGhlIENSQzMyCiAgICogICBjaGVja3N1bSBvZiBIVFRQIHJlc3BvbnNlIGJvZGllcyByZXR1cm5lZCBieSBEeW5hbW9EQi4gRGVmYXVsdDogYHRydWVgLgogICAqIEBvcHRpb24gb3B0aW9ucyB1c2VBY2NlbGVyYXRlRW5kcG9pbnQgW0Jvb2xlYW5dIFdoZXRoZXIgdG8gdXNlIHRoZQogICAqICAgUzMgVHJhbnNmZXIgQWNjZWxlcmF0aW9uIGVuZHBvaW50IHdpdGggdGhlIFMzIHNlcnZpY2UuIERlZmF1bHQ6IGBmYWxzZWAuCiAgICogQG9wdGlvbiBvcHRpb25zIGNsaWVudFNpZGVNb25pdG9yaW5nIFtCb29sZWFuXSB3aGV0aGVyIHRvIGNvbGxlY3QgYW5kCiAgICogICBwdWJsaXNoIHRoaXMgY2xpZW50J3MgcGVyZm9ybWFuY2UgbWV0cmljcyBvZiBhbGwgaXRzIEFQSSByZXF1ZXN0cy4KICAgKiBAb3B0aW9uIG9wdGlvbnMgZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkIFtCb29sZWFuXSB3aGV0aGVyIHRvIGVuYWJsZSBlbmRwb2ludAogICAqICAgZGlzY292ZXJ5IGZvciBvcGVyYXRpb25zIHRoYXQgYWxsb3cgb3B0aW9uYWxseSB1c2luZyBhbiBlbmRwb2ludCByZXR1cm5lZCBieQogICAqICAgdGhlIHNlcnZpY2UuCiAgICogICBEZWZhdWx0cyB0byAnZmFsc2UnCiAgICogQG9wdGlvbiBvcHRpb25zIGVuZHBvaW50Q2FjaGVTaXplIFtOdW1iZXJdIHRoZSBzaXplIG9mIHRoZSBnbG9iYWwgY2FjaGUgc3RvcmluZwogICAqICAgZW5kcG9pbnRzIGZyb20gZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbnMuIE9uY2UgZW5kcG9pbnQgY2FjaGUgaXMgY3JlYXRlZCwKICAgKiAgIHVwZGF0aW5nIHRoaXMgc2V0dGluZyBjYW5ub3QgY2hhbmdlIGV4aXN0aW5nIGNhY2hlIHNpemUuCiAgICogICBEZWZhdWx0cyB0byAxMDAwCiAgICogQG9wdGlvbiBvcHRpb25zIGhvc3RQcmVmaXhFbmFibGVkIFtCb29sZWFuXSB3aGV0aGVyIHRvIG1hcnNoYWwgcmVxdWVzdAogICAqICAgcGFyYW1ldGVycyB0byB0aGUgcHJlZml4IG9mIGhvc3RuYW1lLgogICAqICAgRGVmYXVsdHMgdG8gYHRydWVgLgogICAqIEBvcHRpb24gb3B0aW9ucyBzdHNSZWdpb25hbEVuZHBvaW50cyBbJ2xlZ2FjeSd8J3JlZ2lvbmFsJ10gd2hldGhlciB0byBzZW5kIHN0cyByZXF1ZXN0CiAgICogICB0byBnbG9iYWwgZW5kcG9pbnRzIG9yIHJlZ2lvbmFsIGVuZHBvaW50cy4KICAgKiAgIERlZmF1bHRzIHRvICdsZWdhY3knLgogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBDb25maWcob3B0aW9ucykgewogICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9OwogICAgb3B0aW9ucyA9IHRoaXMuZXh0cmFjdENyZWRlbnRpYWxzKG9wdGlvbnMpOwoKICAgIEFXUy51dGlsLmVhY2guY2FsbCh0aGlzLCB0aGlzLmtleXMsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgIHRoaXMuc2V0KGtleSwgb3B0aW9uc1trZXldLCB2YWx1ZSk7CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBAIWdyb3VwIE1hbmFnaW5nIENyZWRlbnRpYWxzCiAgICovCgogIC8qKgogICAqIExvYWRzIGNyZWRlbnRpYWxzIGZyb20gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseQogICAqIGJ5IHRoZSBTREsgdG8gZW5zdXJlIHRoYXQgcmVmcmVzaGFibGUge0NyZWRlbnRpYWxzfSBvYmplY3RzIGFyZSBwcm9wZXJseQogICAqIHJlZnJlc2hlZCBhbmQgbG9hZGVkIHdoZW4gc2VuZGluZyBhIHJlcXVlc3QuIElmIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0CiAgICogeW91ciBjcmVkZW50aWFscyBhcmUgbG9hZGVkIHByaW9yIHRvIGEgcmVxdWVzdCwgeW91IGNhbiB1c2UgdGhpcyBtZXRob2QKICAgKiBkaXJlY3RseSB0byBwcm92aWRlIGFjY3VyYXRlIGNyZWRlbnRpYWwgZGF0YSBzdG9yZWQgaW4gdGhlIG9iamVjdC4KICAgKgogICAqIEBub3RlIElmIHlvdSBjb25maWd1cmUgdGhlIFNESyB3aXRoIHN0YXRpYyBvciBlbnZpcm9ubWVudCBjcmVkZW50aWFscywKICAgKiAgIHRoZSBjcmVkZW50aWFsIGRhdGEgc2hvdWxkIGFscmVhZHkgYmUgcHJlc2VudCBpbiB7Y3JlZGVudGlhbHN9IGF0dHJpYnV0ZS4KICAgKiAgIFRoaXMgbWV0aG9kIGlzIHByaW1hcmlseSBuZWNlc3NhcnkgdG8gbG9hZCBjcmVkZW50aWFscyBmcm9tIGFzeW5jaHJvbm91cwogICAqICAgc291cmNlcywgb3Igc291cmNlcyB0aGF0IGNhbiByZWZyZXNoIGNyZWRlbnRpYWxzIHBlcmlvZGljYWxseS4KICAgKiBAZXhhbXBsZSBHZXR0aW5nIHlvdXIgYWNjZXNzIGtleQogICAqICAgQVdTLmNvbmZpZy5nZXRDcmVkZW50aWFscyhmdW5jdGlvbihlcnIpIHsKICAgKiAgICAgaWYgKGVycikgY29uc29sZS5sb2coZXJyLnN0YWNrKTsgLy8gY3JlZGVudGlhbHMgbm90IGxvYWRlZAogICAqICAgICBlbHNlIGNvbnNvbGUubG9nKCJBY2Nlc3MgS2V5OiIsIEFXUy5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQpOwogICAqICAgfSkKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKQogICAqICAgQ2FsbGVkIHdoZW4gdGhlIHtjcmVkZW50aWFsc30gaGF2ZSBiZWVuIHByb3Blcmx5IHNldCBvbiB0aGUgY29uZmlndXJhdGlvbgogICAqICAgb2JqZWN0LgogICAqCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgdGhpcyBpcyBzZXQsIGNyZWRlbnRpYWxzIHdlcmUgbm90IHN1Y2Nlc3NmdWxseQogICAqICAgICBsb2FkZWQgYW5kIHRoaXMgZXJyb3IgcHJvdmlkZXMgaW5mb3JtYXRpb24gd2h5LgogICAqIEBzZWUgY3JlZGVudGlhbHMKICAgKiBAc2VlIENyZWRlbnRpYWxzCiAgICovCiAgZ2V0Q3JlZGVudGlhbHM6IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgZnVuY3Rpb24gZmluaXNoKGVycikgewogICAgICBjYWxsYmFjayhlcnIsIGVyciA/IG51bGwgOiBzZWxmLmNyZWRlbnRpYWxzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVkRXJyb3IobXNnLCBlcnIpIHsKICAgICAgcmV0dXJuIG5ldyBBV1MudXRpbC5lcnJvcihlcnIgfHwgbmV3IEVycm9yKCksIHsKICAgICAgICBjb2RlOiAnQ3JlZGVudGlhbHNFcnJvcicsCiAgICAgICAgbWVzc2FnZTogbXNnLAogICAgICAgIG5hbWU6ICdDcmVkZW50aWFsc0Vycm9yJwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRBc3luY0NyZWRlbnRpYWxzKCkgewogICAgICBzZWxmLmNyZWRlbnRpYWxzLmdldChmdW5jdGlvbihlcnIpIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICB2YXIgbXNnID0gJ0NvdWxkIG5vdCBsb2FkIGNyZWRlbnRpYWxzIGZyb20gJyArCiAgICAgICAgICAgIHNlbGYuY3JlZGVudGlhbHMuY29uc3RydWN0b3IubmFtZTsKICAgICAgICAgIGVyciA9IGNyZWRFcnJvcihtc2csIGVycik7CiAgICAgICAgfQogICAgICAgIGZpbmlzaChlcnIpOwogICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRTdGF0aWNDcmVkZW50aWFscygpIHsKICAgICAgdmFyIGVyciA9IG51bGw7CiAgICAgIGlmICghc2VsZi5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZCB8fCAhc2VsZi5jcmVkZW50aWFscy5zZWNyZXRBY2Nlc3NLZXkpIHsKICAgICAgICBlcnIgPSBjcmVkRXJyb3IoJ01pc3NpbmcgY3JlZGVudGlhbHMnKTsKICAgICAgfQogICAgICBmaW5pc2goZXJyKTsKICAgIH0KCiAgICBpZiAoc2VsZi5jcmVkZW50aWFscykgewogICAgICBpZiAodHlwZW9mIHNlbGYuY3JlZGVudGlhbHMuZ2V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgZ2V0QXN5bmNDcmVkZW50aWFscygpOwogICAgICB9IGVsc2UgeyAvLyBzdGF0aWMgY3JlZGVudGlhbHMKICAgICAgICBnZXRTdGF0aWNDcmVkZW50aWFscygpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHNlbGYuY3JlZGVudGlhbFByb3ZpZGVyKSB7CiAgICAgIHNlbGYuY3JlZGVudGlhbFByb3ZpZGVyLnJlc29sdmUoZnVuY3Rpb24oZXJyLCBjcmVkcykgewogICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgIGVyciA9IGNyZWRFcnJvcignQ291bGQgbm90IGxvYWQgY3JlZGVudGlhbHMgZnJvbSBhbnkgcHJvdmlkZXJzJywgZXJyKTsKICAgICAgICB9CiAgICAgICAgc2VsZi5jcmVkZW50aWFscyA9IGNyZWRzOwogICAgICAgIGZpbmlzaChlcnIpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGZpbmlzaChjcmVkRXJyb3IoJ05vIGNyZWRlbnRpYWxzIHRvIGxvYWQnKSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQCFncm91cCBMb2FkaW5nIGFuZCBTZXR0aW5nIENvbmZpZ3VyYXRpb24gT3B0aW9ucwogICAqLwoKICAvKioKICAgKiBAb3ZlcmxvYWQgdXBkYXRlKG9wdGlvbnMsIGFsbG93VW5rbm93bktleXMgPSBmYWxzZSkKICAgKiAgIFVwZGF0ZXMgdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBuZXcgb3B0aW9ucy4KICAgKgogICAqICAgQGV4YW1wbGUgVXBkYXRlIG1heFJldHJpZXMgcHJvcGVydHkgb2YgYSBjb25maWd1cmF0aW9uIG9iamVjdAogICAqICAgICBjb25maWcudXBkYXRlKHttYXhSZXRyaWVzOiAxMH0pOwogICAqICAgQHBhcmFtIFtPYmplY3RdIG9wdGlvbnMgYSBtYXAgb2Ygb3B0aW9uIGtleXMgYW5kIHZhbHVlcy4KICAgKiAgIEBwYXJhbSBbQm9vbGVhbl0gYWxsb3dVbmtub3duS2V5cyB3aGV0aGVyIHVua25vd24ga2V5cyBjYW4gYmUgc2V0IG9uCiAgICogICAgIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdC4gRGVmYXVsdHMgdG8gYGZhbHNlYC4KICAgKiAgIEBzZWUgY29uc3RydWN0b3IKICAgKi8KICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvcHRpb25zLCBhbGxvd1Vua25vd25LZXlzKSB7CiAgICBhbGxvd1Vua25vd25LZXlzID0gYWxsb3dVbmtub3duS2V5cyB8fCBmYWxzZTsKICAgIG9wdGlvbnMgPSB0aGlzLmV4dHJhY3RDcmVkZW50aWFscyhvcHRpb25zKTsKICAgIEFXUy51dGlsLmVhY2guY2FsbCh0aGlzLCBvcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgICBpZiAoYWxsb3dVbmtub3duS2V5cyB8fCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5rZXlzLCBrZXkpIHx8CiAgICAgICAgICBBV1MuU2VydmljZS5oYXNTZXJ2aWNlKGtleSkpIHsKICAgICAgICB0aGlzLnNldChrZXksIHZhbHVlKTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogTG9hZHMgY29uZmlndXJhdGlvbiBkYXRhIGZyb20gYSBKU09OIGZpbGUgaW50byB0aGlzIGNvbmZpZyBvYmplY3QuCiAgICogQG5vdGUgTG9hZGluZyBjb25maWd1cmF0aW9uIHdpbGwgcmVzZXQgYWxsIGV4aXN0aW5nIGNvbmZpZ3VyYXRpb24KICAgKiAgIG9uIHRoZSBvYmplY3QuCiAgICogQCFtYWNybyBub2Jyb3dzZXIKICAgKiBAcGFyYW0gcGF0aCBbU3RyaW5nXSB0aGUgcGF0aCByZWxhdGl2ZSB0byB5b3VyIHByb2Nlc3MncyBjdXJyZW50CiAgICogICAgd29ya2luZyBkaXJlY3RvcnkgdG8gbG9hZCBjb25maWd1cmF0aW9uIGZyb20uCiAgICogQHJldHVybiBbQVdTLkNvbmZpZ10gdGhlIHNhbWUgY29uZmlndXJhdGlvbiBvYmplY3QKICAgKi8KICBsb2FkRnJvbVBhdGg6IGZ1bmN0aW9uIGxvYWRGcm9tUGF0aChwYXRoKSB7CiAgICB0aGlzLmNsZWFyKCk7CgogICAgdmFyIG9wdGlvbnMgPSBKU09OLnBhcnNlKEFXUy51dGlsLnJlYWRGaWxlU3luYyhwYXRoKSk7CiAgICB2YXIgZmlsZVN5c3RlbUNyZWRzID0gbmV3IEFXUy5GaWxlU3lzdGVtQ3JlZGVudGlhbHMocGF0aCk7CiAgICB2YXIgY2hhaW4gPSBuZXcgQVdTLkNyZWRlbnRpYWxQcm92aWRlckNoYWluKCk7CiAgICBjaGFpbi5wcm92aWRlcnMudW5zaGlmdChmaWxlU3lzdGVtQ3JlZHMpOwogICAgY2hhaW4ucmVzb2x2ZShmdW5jdGlvbiAoZXJyLCBjcmVkcykgewogICAgICBpZiAoZXJyKSB0aHJvdyBlcnI7CiAgICAgIGVsc2Ugb3B0aW9ucy5jcmVkZW50aWFscyA9IGNyZWRzOwogICAgfSk7CgogICAgdGhpcy5jb25zdHJ1Y3RvcihvcHRpb25zKTsKCiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBDbGVhcnMgY29uZmlndXJhdGlvbiBkYXRhIG9uIHRoaXMgb2JqZWN0CiAgICoKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAvKmpzaGludCBmb3JpbjpmYWxzZSAqLwogICAgQVdTLnV0aWwuZWFjaC5jYWxsKHRoaXMsIHRoaXMua2V5cywgZnVuY3Rpb24gKGtleSkgewogICAgICBkZWxldGUgdGhpc1trZXldOwogICAgfSk7CgogICAgLy8gcmVzZXQgY3JlZGVudGlhbCBwcm92aWRlcgogICAgdGhpcy5zZXQoJ2NyZWRlbnRpYWxzJywgdW5kZWZpbmVkKTsKICAgIHRoaXMuc2V0KCdjcmVkZW50aWFsUHJvdmlkZXInLCB1bmRlZmluZWQpOwogIH0sCgogIC8qKgogICAqIFNldHMgYSBwcm9wZXJ0eSBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QsIGFsbG93aW5nIGZvciBhCiAgICogZGVmYXVsdCB2YWx1ZQogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIHNldDogZnVuY3Rpb24gc2V0KHByb3BlcnR5LCB2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpIHsKICAgICAgICBkZWZhdWx0VmFsdWUgPSB0aGlzLmtleXNbcHJvcGVydHldOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgZGVmYXVsdFZhbHVlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBkZWZhdWx0VmFsdWUuY2FsbCh0aGlzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IGRlZmF1bHRWYWx1ZTsKICAgICAgfQogICAgfSBlbHNlIGlmIChwcm9wZXJ0eSA9PT0gJ2h0dHBPcHRpb25zJyAmJiB0aGlzW3Byb3BlcnR5XSkgewogICAgICAvLyBkZWVwIG1lcmdlIGh0dHBPcHRpb25zCiAgICAgIHRoaXNbcHJvcGVydHldID0gQVdTLnV0aWwubWVyZ2UodGhpc1twcm9wZXJ0eV0sIHZhbHVlKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXNbcHJvcGVydHldID0gdmFsdWU7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQWxsIG9mIHRoZSBrZXlzIHdpdGggdGhlaXIgZGVmYXVsdCB2YWx1ZXMuCiAgICoKICAgKiBAY29uc3RhbnQKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBrZXlzOiB7CiAgICBjcmVkZW50aWFsczogbnVsbCwKICAgIGNyZWRlbnRpYWxQcm92aWRlcjogbnVsbCwKICAgIHJlZ2lvbjogbnVsbCwKICAgIGxvZ2dlcjogbnVsbCwKICAgIGFwaVZlcnNpb25zOiB7fSwKICAgIGFwaVZlcnNpb246IG51bGwsCiAgICBlbmRwb2ludDogdW5kZWZpbmVkLAogICAgaHR0cE9wdGlvbnM6IHsKICAgICAgdGltZW91dDogMTIwMDAwCiAgICB9LAogICAgbWF4UmV0cmllczogdW5kZWZpbmVkLAogICAgbWF4UmVkaXJlY3RzOiAxMCwKICAgIHBhcmFtVmFsaWRhdGlvbjogdHJ1ZSwKICAgIHNzbEVuYWJsZWQ6IHRydWUsCiAgICBzM0ZvcmNlUGF0aFN0eWxlOiBmYWxzZSwKICAgIHMzQnVja2V0RW5kcG9pbnQ6IGZhbHNlLAogICAgczNEaXNhYmxlQm9keVNpZ25pbmc6IHRydWUsCiAgICBjb21wdXRlQ2hlY2tzdW1zOiB0cnVlLAogICAgY29udmVydFJlc3BvbnNlVHlwZXM6IHRydWUsCiAgICBjb3JyZWN0Q2xvY2tTa2V3OiBmYWxzZSwKICAgIGN1c3RvbVVzZXJBZ2VudDogbnVsbCwKICAgIGR5bmFtb0RiQ3JjMzI6IHRydWUsCiAgICBzeXN0ZW1DbG9ja09mZnNldDogMCwKICAgIHNpZ25hdHVyZVZlcnNpb246IG51bGwsCiAgICBzaWduYXR1cmVDYWNoZTogdHJ1ZSwKICAgIHJldHJ5RGVsYXlPcHRpb25zOiB7fSwKICAgIHVzZUFjY2VsZXJhdGVFbmRwb2ludDogZmFsc2UsCiAgICBjbGllbnRTaWRlTW9uaXRvcmluZzogZmFsc2UsCiAgICBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQ6IGZhbHNlLAogICAgZW5kcG9pbnRDYWNoZVNpemU6IDEwMDAsCiAgICBob3N0UHJlZml4RW5hYmxlZDogdHJ1ZSwKICAgIHN0c1JlZ2lvbmFsRW5kcG9pbnRzOiBudWxsCiAgfSwKCiAgLyoqCiAgICogRXh0cmFjdHMgYWNjZXNzS2V5SWQsIHNlY3JldEFjY2Vzc0tleSBhbmQgc2Vzc2lvblRva2VuCiAgICogZnJvbSBhIGNvbmZpZ3VyYXRpb24gaGFzaC4KICAgKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGV4dHJhY3RDcmVkZW50aWFsczogZnVuY3Rpb24gZXh0cmFjdENyZWRlbnRpYWxzKG9wdGlvbnMpIHsKICAgIGlmIChvcHRpb25zLmFjY2Vzc0tleUlkICYmIG9wdGlvbnMuc2VjcmV0QWNjZXNzS2V5KSB7CiAgICAgIG9wdGlvbnMgPSBBV1MudXRpbC5jb3B5KG9wdGlvbnMpOwogICAgICBvcHRpb25zLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5DcmVkZW50aWFscyhvcHRpb25zKTsKICAgIH0KICAgIHJldHVybiBvcHRpb25zOwogIH0sCgogIC8qKgogICAqIFNldHMgdGhlIHByb21pc2UgZGVwZW5kZW5jeSB0aGUgU0RLIHdpbGwgdXNlIHdoZXJldmVyIFByb21pc2VzIGFyZSByZXR1cm5lZC4KICAgKiBQYXNzaW5nIGBudWxsYCB3aWxsIGZvcmNlIHRoZSBTREsgdG8gdXNlIG5hdGl2ZSBQcm9taXNlcyBpZiB0aGV5IGFyZSBhdmFpbGFibGUuCiAgICogSWYgbmF0aXZlIFByb21pc2VzIGFyZSBub3QgYXZhaWxhYmxlLCBwYXNzaW5nIGBudWxsYCB3aWxsIGhhdmUgbm8gZWZmZWN0LgogICAqIEBwYXJhbSBbQ29uc3RydWN0b3JdIGRlcCBBIHJlZmVyZW5jZSB0byBhIFByb21pc2UgY29uc3RydWN0b3IKICAgKi8KICBzZXRQcm9taXNlc0RlcGVuZGVuY3k6IGZ1bmN0aW9uIHNldFByb21pc2VzRGVwZW5kZW5jeShkZXApIHsKICAgIFByb21pc2VzRGVwZW5kZW5jeSA9IGRlcDsKICAgIC8vIGlmIG51bGwgd2FzIHBhc3NlZCBpbiwgd2Ugc2hvdWxkIHRyeSB0byB1c2UgbmF0aXZlIHByb21pc2VzCiAgICBpZiAoZGVwID09PSBudWxsICYmIHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIFByb21pc2VzRGVwZW5kZW5jeSA9IFByb21pc2U7CiAgICB9CiAgICB2YXIgY29uc3RydWN0b3JzID0gW0FXUy5SZXF1ZXN0LCBBV1MuQ3JlZGVudGlhbHMsIEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbl07CiAgICBpZiAoQVdTLlMzKSB7CiAgICAgIGNvbnN0cnVjdG9ycy5wdXNoKEFXUy5TMyk7CiAgICAgIGlmIChBV1MuUzMuTWFuYWdlZFVwbG9hZCkgewogICAgICAgIGNvbnN0cnVjdG9ycy5wdXNoKEFXUy5TMy5NYW5hZ2VkVXBsb2FkKTsKICAgICAgfQogICAgfQogICAgQVdTLnV0aWwuYWRkUHJvbWlzZXMoY29uc3RydWN0b3JzLCBQcm9taXNlc0RlcGVuZGVuY3kpOwogIH0sCgogIC8qKgogICAqIEdldHMgdGhlIHByb21pc2UgZGVwZW5kZW5jeSBzZXQgYnkgYEFXUy5jb25maWcuc2V0UHJvbWlzZXNEZXBlbmRlbmN5YC4KICAgKi8KICBnZXRQcm9taXNlc0RlcGVuZGVuY3k6IGZ1bmN0aW9uIGdldFByb21pc2VzRGVwZW5kZW5jeSgpIHsKICAgIHJldHVybiBQcm9taXNlc0RlcGVuZGVuY3k7CiAgfQp9KTsKCi8qKgogKiBAcmV0dXJuIFtBV1MuQ29uZmlnXSBUaGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHNpbmdsZXRvbiBpbnN0YW5jZQogKiBAcmVhZG9ubHkKICogQHNlZSBBV1MuQ29uZmlnCiAqLwpBV1MuY29uZmlnID0gbmV3IEFXUy5Db25maWcoKTsKCn0seyIuL2NvcmUiOjE4LCIuL2NyZWRlbnRpYWxzIjoxOSwiLi9jcmVkZW50aWFscy9jcmVkZW50aWFsX3Byb3ZpZGVyX2NoYWluIjoyMn1dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIFRoZSBtYWluIEFXUyBuYW1lc3BhY2UKICovCnZhciBBV1MgPSB7IHV0aWw6IHJlcXVpcmUoJy4vdXRpbCcpIH07CgovKioKICogQGFwaSBwcml2YXRlCiAqIEAhbWFjcm8gW25ld10gbm9icm93c2VyCiAqICAgQG5vdGUgVGhpcyBmZWF0dXJlIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQgb2YgdGhlIFNESy4KICovCnZhciBfaGlkZGVuID0ge307IF9oaWRkZW4udG9TdHJpbmcoKTsgLy8gaGFjayB0byBwYXJzZSBtYWNybwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBV1M7CgpBV1MudXRpbC51cGRhdGUoQVdTLCB7CgogIC8qKgogICAqIEBjb25zdGFudAogICAqLwogIFZFUlNJT046ICcyLjU1My4wJywKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgU2lnbmVyczoge30sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIFByb3RvY29sOiB7CiAgICBKc29uOiByZXF1aXJlKCcuL3Byb3RvY29sL2pzb24nKSwKICAgIFF1ZXJ5OiByZXF1aXJlKCcuL3Byb3RvY29sL3F1ZXJ5JyksCiAgICBSZXN0OiByZXF1aXJlKCcuL3Byb3RvY29sL3Jlc3QnKSwKICAgIFJlc3RKc29uOiByZXF1aXJlKCcuL3Byb3RvY29sL3Jlc3RfanNvbicpLAogICAgUmVzdFhtbDogcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0X3htbCcpCiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgWE1MOiB7CiAgICBCdWlsZGVyOiByZXF1aXJlKCcuL3htbC9idWlsZGVyJyksCiAgICBQYXJzZXI6IG51bGwgLy8gY29uZGl0aW9uYWxseSBzZXQgYmFzZWQgb24gZW52aXJvbm1lbnQKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBKU09OOiB7CiAgICBCdWlsZGVyOiByZXF1aXJlKCcuL2pzb24vYnVpbGRlcicpLAogICAgUGFyc2VyOiByZXF1aXJlKCcuL2pzb24vcGFyc2VyJykKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBNb2RlbDogewogICAgQXBpOiByZXF1aXJlKCcuL21vZGVsL2FwaScpLAogICAgT3BlcmF0aW9uOiByZXF1aXJlKCcuL21vZGVsL29wZXJhdGlvbicpLAogICAgU2hhcGU6IHJlcXVpcmUoJy4vbW9kZWwvc2hhcGUnKSwKICAgIFBhZ2luYXRvcjogcmVxdWlyZSgnLi9tb2RlbC9wYWdpbmF0b3InKSwKICAgIFJlc291cmNlV2FpdGVyOiByZXF1aXJlKCcuL21vZGVsL3Jlc291cmNlX3dhaXRlcicpCiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXBpTG9hZGVyOiByZXF1aXJlKCcuL2FwaV9sb2FkZXInKSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgRW5kcG9pbnRDYWNoZTogcmVxdWlyZSgnLi4vdmVuZG9yL2VuZHBvaW50LWNhY2hlJykuRW5kcG9pbnRDYWNoZQp9KTsKcmVxdWlyZSgnLi9zZXF1ZW50aWFsX2V4ZWN1dG9yJyk7CnJlcXVpcmUoJy4vc2VydmljZScpOwpyZXF1aXJlKCcuL2NvbmZpZycpOwpyZXF1aXJlKCcuL2h0dHAnKTsKcmVxdWlyZSgnLi9ldmVudF9saXN0ZW5lcnMnKTsKcmVxdWlyZSgnLi9yZXF1ZXN0Jyk7CnJlcXVpcmUoJy4vcmVzcG9uc2UnKTsKcmVxdWlyZSgnLi9yZXNvdXJjZV93YWl0ZXInKTsKcmVxdWlyZSgnLi9zaWduZXJzL3JlcXVlc3Rfc2lnbmVyJyk7CnJlcXVpcmUoJy4vcGFyYW1fdmFsaWRhdG9yJyk7CgovKioKICogQHJlYWRvbmx5CiAqIEByZXR1cm4gW0FXUy5TZXF1ZW50aWFsRXhlY3V0b3JdIGEgY29sbGVjdGlvbiBvZiBnbG9iYWwgZXZlbnQgbGlzdGVuZXJzIHRoYXQKICogICBhcmUgYXR0YWNoZWQgdG8gZXZlcnkgc2VudCByZXF1ZXN0LgogKiBAc2VlIEFXUy5SZXF1ZXN0IEFXUy5SZXF1ZXN0IGZvciBhIGxpc3Qgb2YgZXZlbnRzIHRvIGxpc3RlbiBmb3IKICogQGV4YW1wbGUgTG9nZ2luZyB0aGUgdGltZSB0YWtlbiB0byBzZW5kIGEgcmVxdWVzdAogKiAgIEFXUy5ldmVudHMub24oJ3NlbmQnLCBmdW5jdGlvbiBzdGFydFNlbmQocmVzcCkgewogKiAgICAgcmVzcC5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICogICB9KS5vbignY29tcGxldGUnLCBmdW5jdGlvbiBjYWxjdWxhdGVUaW1lKHJlc3ApIHsKICogICAgIHZhciB0aW1lID0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gcmVzcC5zdGFydFRpbWUpIC8gMTAwMDsKICogICAgIGNvbnNvbGUubG9nKCdSZXF1ZXN0IHRvb2sgJyArIHRpbWUgKyAnIHNlY29uZHMnKTsKICogICB9KTsKICoKICogICBuZXcgQVdTLlMzKCkubGlzdEJ1Y2tldHMoKTsgLy8gcHJpbnRzICdSZXF1ZXN0IHRvb2sgMC4yODUgc2Vjb25kcycKICovCkFXUy5ldmVudHMgPSBuZXcgQVdTLlNlcXVlbnRpYWxFeGVjdXRvcigpOwoKLy9jcmVhdGUgZW5kcG9pbnQgY2FjaGUgbGF6aWx5CkFXUy51dGlsLm1lbW9pemVkUHJvcGVydHkoQVdTLCAnZW5kcG9pbnRDYWNoZScsIGZ1bmN0aW9uKCkgewogIHJldHVybiBuZXcgQVdTLkVuZHBvaW50Q2FjaGUoQVdTLmNvbmZpZy5lbmRwb2ludENhY2hlU2l6ZSk7Cn0sIHRydWUpOwoKfSx7Ii4uL3ZlbmRvci9lbmRwb2ludC1jYWNoZSI6MTAzLCIuL2FwaV9sb2FkZXIiOjksIi4vY29uZmlnIjoxNywiLi9ldmVudF9saXN0ZW5lcnMiOjMzLCIuL2h0dHAiOjM0LCIuL2pzb24vYnVpbGRlciI6MzYsIi4vanNvbi9wYXJzZXIiOjM3LCIuL21vZGVsL2FwaSI6MzgsIi4vbW9kZWwvb3BlcmF0aW9uIjo0MCwiLi9tb2RlbC9wYWdpbmF0b3IiOjQxLCIuL21vZGVsL3Jlc291cmNlX3dhaXRlciI6NDIsIi4vbW9kZWwvc2hhcGUiOjQzLCIuL3BhcmFtX3ZhbGlkYXRvciI6NDQsIi4vcHJvdG9jb2wvanNvbiI6NDYsIi4vcHJvdG9jb2wvcXVlcnkiOjQ3LCIuL3Byb3RvY29sL3Jlc3QiOjQ4LCIuL3Byb3RvY29sL3Jlc3RfanNvbiI6NDksIi4vcHJvdG9jb2wvcmVzdF94bWwiOjUwLCIuL3JlcXVlc3QiOjU1LCIuL3Jlc291cmNlX3dhaXRlciI6NTYsIi4vcmVzcG9uc2UiOjU3LCIuL3NlcXVlbnRpYWxfZXhlY3V0b3IiOjU4LCIuL3NlcnZpY2UiOjU5LCIuL3NpZ25lcnMvcmVxdWVzdF9zaWduZXIiOjYzLCIuL3V0aWwiOjcxLCIuL3htbC9idWlsZGVyIjo3M31dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpOwoKLyoqCiAqIFJlcHJlc2VudHMgeW91ciBBV1Mgc2VjdXJpdHkgY3JlZGVudGlhbHMsIHNwZWNpZmljYWxseSB0aGUKICoge2FjY2Vzc0tleUlkfSwge3NlY3JldEFjY2Vzc0tleX0sIGFuZCBvcHRpb25hbCB7c2Vzc2lvblRva2VufS4KICogQ3JlYXRpbmcgYSBgQ3JlZGVudGlhbHNgIG9iamVjdCBhbGxvd3MgeW91IHRvIHBhc3MgYXJvdW5kIHlvdXIKICogc2VjdXJpdHkgaW5mb3JtYXRpb24gdG8gY29uZmlndXJhdGlvbiBhbmQgc2VydmljZSBvYmplY3RzLgogKgogKiBOb3RlIHRoYXQgdGhpcyBjbGFzcyB0eXBpY2FsbHkgZG9lcyBub3QgbmVlZCB0byBiZSBjb25zdHJ1Y3RlZCBtYW51YWxseSwKICogYXMgdGhlIHtBV1MuQ29uZmlnfSBhbmQge0FXUy5TZXJ2aWNlfSBjbGFzc2VzIGJvdGggYWNjZXB0IHNpbXBsZQogKiBvcHRpb25zIGhhc2hlcyB3aXRoIHRoZSB0aHJlZSBrZXlzLiBUaGVzZSBzdHJ1Y3R1cmVzIHdpbGwgYmUgY29udmVydGVkCiAqIGludG8gQ3JlZGVudGlhbHMgb2JqZWN0cyBhdXRvbWF0aWNhbGx5LgogKgogKiAjIyBFeHBpcmluZyBhbmQgUmVmcmVzaGluZyBDcmVkZW50aWFscwogKgogKiBPY2Nhc2lvbmFsbHkgY3JlZGVudGlhbHMgY2FuIGV4cGlyZSBpbiB0aGUgbWlkZGxlIG9mIGEgbG9uZy1ydW5uaW5nCiAqIGFwcGxpY2F0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBTREsgd2lsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8KICogcmVmcmVzaCB0aGUgY3JlZGVudGlhbHMgZnJvbSB0aGUgc3RvcmFnZSBsb2NhdGlvbiBpZiB0aGUgQ3JlZGVudGlhbHMKICogY2xhc3MgaW1wbGVtZW50cyB0aGUge3JlZnJlc2h9IG1ldGhvZC4KICoKICogSWYgeW91IGFyZSBpbXBsZW1lbnRpbmcgYSBjcmVkZW50aWFsIHN0b3JhZ2UgbG9jYXRpb24sIHlvdQogKiB3aWxsIHdhbnQgdG8gY3JlYXRlIGEgc3ViY2xhc3Mgb2YgdGhlIGBDcmVkZW50aWFsc2AgY2xhc3MgYW5kCiAqIG92ZXJyaWRlIHRoZSB7cmVmcmVzaH0gbWV0aG9kLiBUaGlzIG1ldGhvZCBhbGxvd3MgY3JlZGVudGlhbHMgdG8gYmUKICogcmV0cmlldmVkIGZyb20gdGhlIGJhY2tpbmcgc3RvcmUsIGJlIGl0IGEgZmlsZSBzeXN0ZW0sIGRhdGFiYXNlLCBvcgogKiBzb21lIG5ldHdvcmsgc3RvcmFnZS4gVGhlIG1ldGhvZCBzaG91bGQgcmVzZXQgdGhlIGNyZWRlbnRpYWwgYXR0cmlidXRlcwogKiBvbiB0aGUgb2JqZWN0LgogKgogKiBAIWF0dHJpYnV0ZSBleHBpcmVkCiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0aGUgY3JlZGVudGlhbHMgaGF2ZSBiZWVuIGV4cGlyZWQgYW5kCiAqICAgICByZXF1aXJlIGEgcmVmcmVzaC4gVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHtleHBpcmVUaW1lfS4KICogQCFhdHRyaWJ1dGUgZXhwaXJlVGltZQogKiAgIEByZXR1cm4gW0RhdGVdIGEgdGltZSB3aGVuIGNyZWRlbnRpYWxzIHNob3VsZCBiZSBjb25zaWRlcmVkIGV4cGlyZWQuIFVzZWQKICogICAgIGluIGNvbmp1bmN0aW9uIHdpdGgge2V4cGlyZWR9LgogKiBAIWF0dHJpYnV0ZSBhY2Nlc3NLZXlJZAogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIEFXUyBhY2Nlc3Mga2V5IElECiAqIEAhYXR0cmlidXRlIHNlY3JldEFjY2Vzc0tleQogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIEFXUyBzZWNyZXQgYWNjZXNzIGtleQogKiBAIWF0dHJpYnV0ZSBzZXNzaW9uVG9rZW4KICogICBAcmV0dXJuIFtTdHJpbmddIGFuIG9wdGlvbmFsIEFXUyBzZXNzaW9uIHRva2VuCiAqLwpBV1MuQ3JlZGVudGlhbHMgPSBBV1MudXRpbC5pbmhlcml0KHsKICAvKioKICAgKiBBIGNyZWRlbnRpYWxzIG9iamVjdCBjYW4gYmUgY3JlYXRlZCB1c2luZyBwb3NpdGlvbmFsIGFyZ3VtZW50cyBvciBhbiBvcHRpb25zCiAgICogaGFzaC4KICAgKgogICAqIEBvdmVybG9hZCBBV1MuQ3JlZGVudGlhbHMoYWNjZXNzS2V5SWQsIHNlY3JldEFjY2Vzc0tleSwgc2Vzc2lvblRva2VuPW51bGwpCiAgICogICBDcmVhdGVzIGEgQ3JlZGVudGlhbHMgb2JqZWN0IHdpdGggYSBnaXZlbiBzZXQgb2YgY3JlZGVudGlhbCBpbmZvcm1hdGlvbgogICAqICAgYXMgcG9zaXRpb25hbCBhcmd1bWVudHMuCiAgICogICBAcGFyYW0gYWNjZXNzS2V5SWQgW1N0cmluZ10gdGhlIEFXUyBhY2Nlc3Mga2V5IElECiAgICogICBAcGFyYW0gc2VjcmV0QWNjZXNzS2V5IFtTdHJpbmddIHRoZSBBV1Mgc2VjcmV0IGFjY2VzcyBrZXkKICAgKiAgIEBwYXJhbSBzZXNzaW9uVG9rZW4gW1N0cmluZ10gdGhlIG9wdGlvbmFsIEFXUyBzZXNzaW9uIHRva2VuCiAgICogICBAZXhhbXBsZSBDcmVhdGUgYSBjcmVkZW50aWFscyBvYmplY3Qgd2l0aCBBV1MgY3JlZGVudGlhbHMKICAgKiAgICAgdmFyIGNyZWRzID0gbmV3IEFXUy5DcmVkZW50aWFscygnYWtpZCcsICdzZWNyZXQnLCAnc2Vzc2lvbicpOwogICAqIEBvdmVybG9hZCBBV1MuQ3JlZGVudGlhbHMob3B0aW9ucykKICAgKiAgIENyZWF0ZXMgYSBDcmVkZW50aWFscyBvYmplY3Qgd2l0aCBhIGdpdmVuIHNldCBvZiBjcmVkZW50aWFsIGluZm9ybWF0aW9uCiAgICogICBhcyBhbiBvcHRpb25zIGhhc2guCiAgICogICBAb3B0aW9uIG9wdGlvbnMgYWNjZXNzS2V5SWQgW1N0cmluZ10gdGhlIEFXUyBhY2Nlc3Mga2V5IElECiAgICogICBAb3B0aW9uIG9wdGlvbnMgc2VjcmV0QWNjZXNzS2V5IFtTdHJpbmddIHRoZSBBV1Mgc2VjcmV0IGFjY2VzcyBrZXkKICAgKiAgIEBvcHRpb24gb3B0aW9ucyBzZXNzaW9uVG9rZW4gW1N0cmluZ10gdGhlIG9wdGlvbmFsIEFXUyBzZXNzaW9uIHRva2VuCiAgICogICBAZXhhbXBsZSBDcmVhdGUgYSBjcmVkZW50aWFscyBvYmplY3Qgd2l0aCBBV1MgY3JlZGVudGlhbHMKICAgKiAgICAgdmFyIGNyZWRzID0gbmV3IEFXUy5DcmVkZW50aWFscyh7CiAgICogICAgICAgYWNjZXNzS2V5SWQ6ICdha2lkJywgc2VjcmV0QWNjZXNzS2V5OiAnc2VjcmV0Jywgc2Vzc2lvblRva2VuOiAnc2Vzc2lvbicKICAgKiAgICAgfSk7CiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIENyZWRlbnRpYWxzKCkgewogICAgLy8gaGlkZSBzZWNyZXRBY2Nlc3NLZXkgZnJvbSBiZWluZyBkaXNwbGF5ZWQgd2l0aCB1dGlsLmluc3BlY3QKICAgIEFXUy51dGlsLmhpZGVQcm9wZXJ0aWVzKHRoaXMsIFsnc2VjcmV0QWNjZXNzS2V5J10pOwoKICAgIHRoaXMuZXhwaXJlZCA9IGZhbHNlOwogICAgdGhpcy5leHBpcmVUaW1lID0gbnVsbDsKICAgIHRoaXMucmVmcmVzaENhbGxiYWNrcyA9IFtdOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHsKICAgICAgdmFyIGNyZWRzID0gYXJndW1lbnRzWzBdLmNyZWRlbnRpYWxzIHx8IGFyZ3VtZW50c1swXTsKICAgICAgdGhpcy5hY2Nlc3NLZXlJZCA9IGNyZWRzLmFjY2Vzc0tleUlkOwogICAgICB0aGlzLnNlY3JldEFjY2Vzc0tleSA9IGNyZWRzLnNlY3JldEFjY2Vzc0tleTsKICAgICAgdGhpcy5zZXNzaW9uVG9rZW4gPSBjcmVkcy5zZXNzaW9uVG9rZW47CiAgICB9IGVsc2UgewogICAgICB0aGlzLmFjY2Vzc0tleUlkID0gYXJndW1lbnRzWzBdOwogICAgICB0aGlzLnNlY3JldEFjY2Vzc0tleSA9IGFyZ3VtZW50c1sxXTsKICAgICAgdGhpcy5zZXNzaW9uVG9rZW4gPSBhcmd1bWVudHNbMl07CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQHJldHVybiBbSW50ZWdlcl0gdGhlIG51bWJlciBvZiBzZWNvbmRzIGJlZm9yZSB7ZXhwaXJlVGltZX0gZHVyaW5nIHdoaWNoCiAgICogICB0aGUgY3JlZGVudGlhbHMgd2lsbCBiZSBjb25zaWRlcmVkIGV4cGlyZWQuCiAgICovCiAgZXhwaXJ5V2luZG93OiAxNSwKCiAgLyoqCiAgICogQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0aGUgY3JlZGVudGlhbHMgb2JqZWN0IHNob3VsZCBjYWxsIHtyZWZyZXNofQogICAqIEBub3RlIFN1YmNsYXNzZXMgc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHByb3ZpZGUgY3VzdG9tIHJlZnJlc2gKICAgKiAgIGxvZ2ljLgogICAqLwogIG5lZWRzUmVmcmVzaDogZnVuY3Rpb24gbmVlZHNSZWZyZXNoKCkgewogICAgdmFyIGN1cnJlbnRUaW1lID0gQVdTLnV0aWwuZGF0ZS5nZXREYXRlKCkuZ2V0VGltZSgpOwogICAgdmFyIGFkanVzdGVkVGltZSA9IG5ldyBEYXRlKGN1cnJlbnRUaW1lICsgdGhpcy5leHBpcnlXaW5kb3cgKiAxMDAwKTsKCiAgICBpZiAodGhpcy5leHBpcmVUaW1lICYmIGFkanVzdGVkVGltZSA+IHRoaXMuZXhwaXJlVGltZSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiB0aGlzLmV4cGlyZWQgfHwgIXRoaXMuYWNjZXNzS2V5SWQgfHwgIXRoaXMuc2VjcmV0QWNjZXNzS2V5OwogICAgfQogIH0sCgogIC8qKgogICAqIEdldHMgdGhlIGV4aXN0aW5nIGNyZWRlbnRpYWxzLCByZWZyZXNoaW5nIHRoZW0gaWYgdGhleSBhcmUgbm90IHlldCBsb2FkZWQKICAgKiBvciBoYXZlIGV4cGlyZWQuIFVzZXJzIHNob3VsZCBjYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSB1c2luZyB7cmVmcmVzaH0sCiAgICogYXMgdGhpcyB3aWxsIG5vdCBhdHRlbXB0IHRvIHJlbG9hZCBjcmVkZW50aWFscyB3aGVuIHRoZXkgYXJlIGFscmVhZHkKICAgKiBsb2FkZWQgaW50byB0aGUgb2JqZWN0LgogICAqCiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVycikKICAgKiAgIFdoZW4gdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgZWl0aGVyIGNyZWRlbnRpYWxzCiAgICogICBkbyBub3QgbmVlZCB0byBiZSByZWZyZXNoZWQgb3IgcmVmcmVzaGVkIGNyZWRlbnRpYWxzIGluZm9ybWF0aW9uIGhhcwogICAqICAgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCwgYHNlY3JldEFjY2Vzc0tleWAsCiAgICogICBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWQKICAgKi8KICBnZXQ6IGZ1bmN0aW9uIGdldChjYWxsYmFjaykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgaWYgKHRoaXMubmVlZHNSZWZyZXNoKCkpIHsKICAgICAgdGhpcy5yZWZyZXNoKGZ1bmN0aW9uKGVycikgewogICAgICAgIGlmICghZXJyKSBzZWxmLmV4cGlyZWQgPSBmYWxzZTsgLy8gcmVzZXQgZXhwaXJlZCBmbGFnCiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpOwogICAgICB9KTsKICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHsKICAgICAgY2FsbGJhY2soKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBAIW1ldGhvZCAgZ2V0UHJvbWlzZSgpCiAgICogICBSZXR1cm5zIGEgJ3RoZW5hYmxlJyBwcm9taXNlLgogICAqICAgR2V0cyB0aGUgZXhpc3RpbmcgY3JlZGVudGlhbHMsIHJlZnJlc2hpbmcgdGhlbSBpZiB0aGV5IGFyZSBub3QgeWV0IGxvYWRlZAogICAqICAgb3IgaGF2ZSBleHBpcmVkLiBVc2VycyBzaG91bGQgY2FsbCB0aGlzIG1ldGhvZCBiZWZvcmUgdXNpbmcge3JlZnJlc2h9LAogICAqICAgYXMgdGhpcyB3aWxsIG5vdCBhdHRlbXB0IHRvIHJlbG9hZCBjcmVkZW50aWFscyB3aGVuIHRoZXkgYXJlIGFscmVhZHkKICAgKiAgIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QuCiAgICoKICAgKiAgIFR3byBjYWxsYmFja3MgY2FuIGJlIHByb3ZpZGVkIHRvIHRoZSBgdGhlbmAgbWV0aG9kIG9uIHRoZSByZXR1cm5lZCBwcm9taXNlLgogICAqICAgVGhlIGZpcnN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZCwgYW5kIHRoZSBzZWNvbmQKICAgKiAgIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLgogICAqICAgQGNhbGxiYWNrIGZ1bGZpbGxlZENhbGxiYWNrIGZ1bmN0aW9uKCkKICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZC4gV2hlbiB0aGlzIGNhbGxiYWNrIGlzIGNhbGxlZCwgaXQKICAgKiAgICAgbWVhbnMgZWl0aGVyIGNyZWRlbnRpYWxzIGRvIG5vdCBuZWVkIHRvIGJlIHJlZnJlc2hlZCBvciByZWZyZXNoZWQKICAgKiAgICAgY3JlZGVudGlhbHMgaW5mb3JtYXRpb24gaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIG9iamVjdCAoYXMgdGhlCiAgICogICAgIGBhY2Nlc3NLZXlJZGAsIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAY2FsbGJhY2sgcmVqZWN0ZWRDYWxsYmFjayBmdW5jdGlvbihlcnIpCiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZC4KICAgKiAgICAgQHBhcmFtIGVyciBbRXJyb3JdIGlmIGFuIGVycm9yIG9jY3VycmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgZmlsbGVkCiAgICogICBAcmV0dXJuIFtQcm9taXNlXSBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgYGdldGAgY2FsbC4KICAgKiAgIEBleGFtcGxlIENhbGxpbmcgdGhlIGBnZXRQcm9taXNlYCBtZXRob2QuCiAgICogICAgIHZhciBwcm9taXNlID0gY3JlZFByb3ZpZGVyLmdldFByb21pc2UoKTsKICAgKiAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgeyAuLi4gfSwgZnVuY3Rpb24oZXJyKSB7IC4uLiB9KTsKICAgKi8KCiAgLyoqCiAgICogQCFtZXRob2QgIHJlZnJlc2hQcm9taXNlKCkKICAgKiAgIFJldHVybnMgYSAndGhlbmFibGUnIHByb21pc2UuCiAgICogICBSZWZyZXNoZXMgdGhlIGNyZWRlbnRpYWxzLiBVc2VycyBzaG91bGQgY2FsbCB7Z2V0fSBiZWZvcmUgYXR0ZW1wdGluZwogICAqICAgdG8gZm9yY2libHkgcmVmcmVzaCBjcmVkZW50aWFscy4KICAgKgogICAqICAgVHdvIGNhbGxiYWNrcyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIGB0aGVuYCBtZXRob2Qgb24gdGhlIHJldHVybmVkIHByb21pc2UuCiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZAogICAqICAgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQuCiAgICogICBAY2FsbGJhY2sgZnVsZmlsbGVkQ2FsbGJhY2sgZnVuY3Rpb24oKQogICAqICAgICBDYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLiBXaGVuIHRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkLCBpdAogICAqICAgICBtZWFucyByZWZyZXNoZWQgY3JlZGVudGlhbHMgaW5mb3JtYXRpb24gaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIG9iamVjdAogICAqICAgICAoYXMgdGhlIGBhY2Nlc3NLZXlJZGAsIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAY2FsbGJhY2sgcmVqZWN0ZWRDYWxsYmFjayBmdW5jdGlvbihlcnIpCiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZC4KICAgKiAgICAgQHBhcmFtIGVyciBbRXJyb3JdIGlmIGFuIGVycm9yIG9jY3VycmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgZmlsbGVkCiAgICogICBAcmV0dXJuIFtQcm9taXNlXSBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgYHJlZnJlc2hgIGNhbGwuCiAgICogICBAZXhhbXBsZSBDYWxsaW5nIHRoZSBgcmVmcmVzaFByb21pc2VgIG1ldGhvZC4KICAgKiAgICAgdmFyIHByb21pc2UgPSBjcmVkUHJvdmlkZXIucmVmcmVzaFByb21pc2UoKTsKICAgKiAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgeyAuLi4gfSwgZnVuY3Rpb24oZXJyKSB7IC4uLiB9KTsKICAgKi8KCiAgLyoqCiAgICogUmVmcmVzaGVzIHRoZSBjcmVkZW50aWFscy4gVXNlcnMgc2hvdWxkIGNhbGwge2dldH0gYmVmb3JlIGF0dGVtcHRpbmcKICAgKiB0byBmb3JjaWJseSByZWZyZXNoIGNyZWRlbnRpYWxzLgogICAqCiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVycikKICAgKiAgIFdoZW4gdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgcmVmcmVzaGVkCiAgICogICBjcmVkZW50aWFscyBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUKICAgKiAgIGBhY2Nlc3NLZXlJZGAsIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWQKICAgKiBAbm90ZSBTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZSB0aGlzIGNsYXNzIHRvIHJlc2V0IHRoZQogICAqICAge2FjY2Vzc0tleUlkfSwge3NlY3JldEFjY2Vzc0tleX0gYW5kIG9wdGlvbmFsIHtzZXNzaW9uVG9rZW59CiAgICogICBvbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0IGFuZCB0aGVuIGNhbGwgdGhlIGNhbGxiYWNrIHdpdGgKICAgKiAgIGFueSBlcnJvciBpbmZvcm1hdGlvbi4KICAgKiBAc2VlIGdldAogICAqLwogIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goY2FsbGJhY2spIHsKICAgIHRoaXMuZXhwaXJlZCA9IGZhbHNlOwogICAgY2FsbGJhY2soKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKiBAcGFyYW0gY2FsbGJhY2sKICAgKi8KICBjb2FsZXNjZVJlZnJlc2g6IGZ1bmN0aW9uIGNvYWxlc2NlUmVmcmVzaChjYWxsYmFjaywgc3luYykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgaWYgKHNlbGYucmVmcmVzaENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKSA9PT0gMSkgewogICAgICBzZWxmLmxvYWQoZnVuY3Rpb24gb25Mb2FkKGVycikgewogICAgICAgIEFXUy51dGlsLmFycmF5RWFjaChzZWxmLnJlZnJlc2hDYWxsYmFja3MsIGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICAgICBpZiAoc3luYykgewogICAgICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gY2FsbGJhY2sgY291bGQgdGhyb3csIHNvIGRlZmVyIHRvIGVuc3VyZSBhbGwgY2FsbGJhY2tzIGFyZSBub3RpZmllZAogICAgICAgICAgICBBV1MudXRpbC5kZWZlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgc2VsZi5yZWZyZXNoQ2FsbGJhY2tzLmxlbmd0aCA9IDA7CiAgICAgIH0pOwogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqIEBwYXJhbSBjYWxsYmFjawogICAqLwogIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoY2FsbGJhY2spIHsKICAgIGNhbGxiYWNrKCk7CiAgfQp9KTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5DcmVkZW50aWFscy5hZGRQcm9taXNlc1RvQ2xhc3MgPSBmdW5jdGlvbiBhZGRQcm9taXNlc1RvQ2xhc3MoUHJvbWlzZURlcGVuZGVuY3kpIHsKICB0aGlzLnByb3RvdHlwZS5nZXRQcm9taXNlID0gQVdTLnV0aWwucHJvbWlzaWZ5TWV0aG9kKCdnZXQnLCBQcm9taXNlRGVwZW5kZW5jeSk7CiAgdGhpcy5wcm90b3R5cGUucmVmcmVzaFByb21pc2UgPSBBV1MudXRpbC5wcm9taXNpZnlNZXRob2QoJ3JlZnJlc2gnLCBQcm9taXNlRGVwZW5kZW5jeSk7Cn07CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuQ3JlZGVudGlhbHMuZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MgPSBmdW5jdGlvbiBkZWxldGVQcm9taXNlc0Zyb21DbGFzcygpIHsKICBkZWxldGUgdGhpcy5wcm90b3R5cGUuZ2V0UHJvbWlzZTsKICBkZWxldGUgdGhpcy5wcm90b3R5cGUucmVmcmVzaFByb21pc2U7Cn07CgpBV1MudXRpbC5hZGRQcm9taXNlcyhBV1MuQ3JlZGVudGlhbHMpOwoKfSx7Ii4vY29yZSI6MTh9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBTVFMgPSByZXF1aXJlKCcuLi8uLi9jbGllbnRzL3N0cycpOwoKLyoqCiAqIFJlcHJlc2VudHMgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIHJldHJpZXZlZCBmcm9tIHtBV1MuU1RTfS4gV2l0aG91dCBhbnkKICogZXh0cmEgcGFyYW1ldGVycywgY3JlZGVudGlhbHMgd2lsbCBiZSBmZXRjaGVkIGZyb20gdGhlCiAqIHtBV1MuU1RTLmdldFNlc3Npb25Ub2tlbn0gb3BlcmF0aW9uLiBJZiBhbiBJQU0gcm9sZSBpcyBwcm92aWRlZCwgdGhlCiAqIHtBV1MuU1RTLmFzc3VtZVJvbGV9IG9wZXJhdGlvbiB3aWxsIGJlIHVzZWQgdG8gZmV0Y2ggY3JlZGVudGlhbHMgZm9yIHRoZQogKiByb2xlIGluc3RlYWQuCiAqCiAqIEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyBkaWZmZXJzIGZyb20gQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzIGluCiAqIHRoZSB3YXkgbWFzdGVyQ3JlZGVudGlhbHMgYW5kIHJlZnJlc2hlcyBhcmUgaGFuZGxlZC4KICogQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzIHJlZnJlc2hlcyBleHBpcmVkIGNyZWRlbnRpYWxzIHVzaW5nIHRoZQogKiBtYXN0ZXJDcmVkZW50aWFscyBwYXNzZWQgYnkgdGhlIHVzZXIgdG8gc3VwcG9ydCBjaGFpbmluZyBvZiBTVFMgY3JlZGVudGlhbHMuCiAqIEhvd2V2ZXIsIEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscyByZWN1cnNpdmVseSBjb2xsYXBzZXMgdGhlIG1hc3RlckNyZWRlbnRpYWxzCiAqIGR1cmluZyBpbnN0YW50aWF0aW9uLCBwcmVjbHVkaW5nIHRoZSBhYmlsaXR5IHRvIHJlZnJlc2ggY3JlZGVudGlhbHMgd2hpY2gKICogcmVxdWlyZSBpbnRlcm1lZGlhdGUsIHRlbXBvcmFyeSBjcmVkZW50aWFscy4KICoKICogRm9yIGV4YW1wbGUsIGlmIHRoZSBhcHBsaWNhdGlvbiBzaG91bGQgdXNlIFJvbGVBLCB3aGljaCBtdXN0IGJlIGFzc3VtZWQgZnJvbQogKiBSb2xlQiwgYW5kIHRoZSBlbnZpcm9ubWVudCBwcm92aWRlcyBjcmVkZW50aWFscyB3aGljaCBjYW4gYXNzdW1lIFJvbGVCLCB0aGVuCiAqIEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyBtdXN0IGJlIHVzZWQgdG8gc3VwcG9ydCByZWZyZXNoaW5nIHRoZQogKiB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZm9yIFJvbGVBOgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIHZhciByb2xlQUNyZWRzID0gbmV3IEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyh7CiAqICAgcGFyYW1zOiB7Um9sZUFybjogJ1JvbGVBJ30sCiAqICAgbWFzdGVyQ3JlZGVudGlhbHM6IG5ldyBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoewogKiAgICAgcGFyYW1zOiB7Um9sZUFybjogJ1JvbGVCJ30sCiAqICAgICBtYXN0ZXJDcmVkZW50aWFsczogbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBV1MnKQogKiAgIH0pCiAqIH0pOwogKiBgYGAKICoKICogSWYgQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzIGhhZCBiZWVuIHVzZWQgaW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsCiAqIGByb2xlQUNyZWRzYCB3b3VsZCBmYWlsIHRvIHJlZnJlc2ggYmVjYXVzZSBgcm9sZUFDcmVkc2Agd291bGQKICogdXNlIHRoZSBlbnZpcm9ubWVudCBjcmVkZW50aWFscyBmb3IgdGhlIEFzc3VtZVJvbGUgcmVxdWVzdC4KICoKICogQW5vdGhlciBkaWZmZXJlbmNlIGlzIHRoYXQgQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzIGNyZWF0ZXMgdGhlIFNUUwogKiBzZXJ2aWNlIGluc3RhbmNlIGR1cmluZyBpbnN0YW50aWF0aW9uIHdoaWxlIEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscyBjcmVhdGVzCiAqIHRoZSBTVFMgc2VydmljZSBpbnN0YW5jZSBkdXJpbmcgdGhlIGZpcnN0IHJlZnJlc2guIENyZWF0aW5nIHRoZSBzZXJ2aWNlCiAqIGluc3RhbmNlIGR1cmluZyBpbnN0YW50aWF0aW9uIGVmZmVjdGl2ZWx5IGNhcHR1cmVzIHRoZSBtYXN0ZXIgY3JlZGVudGlhbHMKICogZnJvbSB0aGUgZ2xvYmFsIGNvbmZpZywgc28gdGhhdCBzdWJzZXF1ZW50IGNoYW5nZXMgdG8gdGhlIGdsb2JhbCBjb25maWcgZG8KICogbm90IGFmZmVjdCB0aGUgbWFzdGVyIGNyZWRlbnRpYWxzIHVzZWQgdG8gcmVmcmVzaCB0aGUgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzLgogKgogKiBUaGlzIGFsbG93cyBhbiBpbnN0YW5jZSBvZiBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMgdG8gYmUgYXNzaWduZWQKICogdG8gQVdTLmNvbmZpZy5jcmVkZW50aWFsczoKICoKICogYGBgamF2YXNjcmlwdAogKiB2YXIgZW52Q3JlZHMgPSBuZXcgQVdTLkVudmlyb25tZW50Q3JlZGVudGlhbHMoJ0FXUycpOwogKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gZW52Q3JlZHM7CiAqIC8vIG1hc3RlckNyZWRlbnRpYWxzIHdpbGwgYmUgZW52Q3JlZHMKICogQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoewogKiAgIHBhcmFtczoge1JvbGVBcm46ICcuLi4nfQogKiB9KTsKICogYGBgCiAqCiAqIFNpbWlsYXJseSwgdG8gdXNlIHRoZSBDcmVkZW50aWFsUHJvdmlkZXJDaGFpbidzIGRlZmF1bHQgcHJvdmlkZXJzIGFzIHRoZQogKiBtYXN0ZXIgY3JlZGVudGlhbHMsIHNpbXBseSBjcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YKICogQVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzOgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBuZXcgQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoewogKiAgIHBhcmFtczoge1JvbGVBcm46ICcuLi4nfQogKiB9KTsKICogYGBgCiAqCiAqIEAhYXR0cmlidXRlIHNlcnZpY2UKICogICBAcmV0dXJuIFtBV1MuU1RTXSB0aGUgU1RTIHNlcnZpY2UgaW5zdGFuY2UgdXNlZCB0bwogKiAgICAgZ2V0IGFuZCByZWZyZXNoIHRlbXBvcmFyeSBjcmVkZW50aWFscyBmcm9tIEFXUyBTVFMuCiAqIEBub3RlIChzZWUgY29uc3RydWN0b3IpCiAqLwpBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMgPSBBV1MudXRpbC5pbmhlcml0KEFXUy5DcmVkZW50aWFscywgewogIC8qKgogICAqIENyZWF0ZXMgYSBuZXcgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIG9iamVjdC4KICAgKgogICAqIEBwYXJhbSBvcHRpb25zIFttYXBdIGEgc2V0IG9mIG9wdGlvbnMKICAgKiBAb3B0aW9uIG9wdGlvbnMgcGFyYW1zIFttYXBdICh7fSkgYSBtYXAgb2Ygb3B0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG8gdGhlCiAgICogICB7QVdTLlNUUy5hc3N1bWVSb2xlfSBvciB7QVdTLlNUUy5nZXRTZXNzaW9uVG9rZW59IG9wZXJhdGlvbnMuCiAgICogICBJZiBhIGBSb2xlQXJuYCBwYXJhbWV0ZXIgaXMgcGFzc2VkIGluLCBjcmVkZW50aWFscyB3aWxsIGJlIGJhc2VkIG9uIHRoZQogICAqICAgSUFNIHJvbGUuIElmIGEgYFNlcmlhbE51bWJlcmAgcGFyYW1ldGVyIGlzIHBhc3NlZCBpbiwge3Rva2VuQ29kZUZufSBtdXN0CiAgICogICBhbHNvIGJlIHBhc3NlZCBpbiBvciBhbiBlcnJvciB3aWxsIGJlIHRocm93bi4KICAgKiBAb3B0aW9uIG9wdGlvbnMgbWFzdGVyQ3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gdGhlIG1hc3RlciBjcmVkZW50aWFscwogICAqICAgdXNlZCB0byBnZXQgYW5kIHJlZnJlc2ggdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gQVdTIFNUUy4gQnkgZGVmYXVsdCwKICAgKiAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMgb3IgQVdTLmNvbmZpZy5jcmVkZW50aWFsUHJvdmlkZXIgd2lsbCBiZSB1c2VkLgogICAqIEBvcHRpb24gb3B0aW9ucyB0b2tlbkNvZGVGbiBbRnVuY3Rpb25dIChudWxsKSBGdW5jdGlvbiB0byBwcm92aWRlCiAgICogICBgVG9rZW5Db2RlYCwgaWYgYFNlcmlhbE51bWJlcmAgaXMgcHJvdmlkZWQgZm9yIHByb2ZpbGUgaW4ge3BhcmFtc30uIEZ1bmN0aW9uCiAgICogICBpcyBjYWxsZWQgd2l0aCB2YWx1ZSBvZiBgU2VyaWFsTnVtYmVyYCBhbmQgYGNhbGxiYWNrYCwgYW5kIHNob3VsZCBwcm92aWRlCiAgICogICB0aGUgYFRva2VuQ29kZWAgb3IgYW4gZXJyb3IgdG8gdGhlIGNhbGxiYWNrIGluIHRoZSBmb3JtYXQKICAgKiAgIGBjYWxsYmFjayhlcnIsIHRva2VuKWAuCiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0IGZvciBnZW5lcmljIHRlbXBvcmFyeSBjcmVkZW50aWFscwogICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMoKTsKICAgKiBAZXhhbXBsZSBDcmVhdGluZyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QgZm9yIGFuIElBTSByb2xlCiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5DaGFpbmFibGVUZW1wb3JhcnlDcmVkZW50aWFscyh7CiAgICogICAgIHBhcmFtczogewogICAqICAgICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1RlbXBvcmFyeUNyZWRlbnRpYWxzJwogICAqICAgICB9CiAgICogICB9KTsKICAgKiBAc2VlIEFXUy5TVFMuYXNzdW1lUm9sZQogICAqIEBzZWUgQVdTLlNUUy5nZXRTZXNzaW9uVG9rZW4KICAgKi8KICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ2hhaW5hYmxlVGVtcG9yYXJ5Q3JlZGVudGlhbHMob3B0aW9ucykgewogICAgQVdTLkNyZWRlbnRpYWxzLmNhbGwodGhpcyk7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIHRoaXMuZXJyb3JDb2RlID0gJ0NoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzUHJvdmlkZXJGYWlsdXJlJzsKICAgIHRoaXMuZXhwaXJlZCA9IHRydWU7CiAgICB0aGlzLnRva2VuQ29kZUZuID0gbnVsbDsKCiAgICB2YXIgcGFyYW1zID0gQVdTLnV0aWwuY29weShvcHRpb25zLnBhcmFtcykgfHwge307CiAgICBpZiAocGFyYW1zLlJvbGVBcm4pIHsKICAgICAgcGFyYW1zLlJvbGVTZXNzaW9uTmFtZSA9IHBhcmFtcy5Sb2xlU2Vzc2lvbk5hbWUgfHwgJ3RlbXBvcmFyeS1jcmVkZW50aWFscyc7CiAgICB9CiAgICBpZiAocGFyYW1zLlNlcmlhbE51bWJlcikgewogICAgICBpZiAoIW9wdGlvbnMudG9rZW5Db2RlRm4gfHwgKHR5cGVvZiBvcHRpb25zLnRva2VuQ29kZUZuICE9PSAnZnVuY3Rpb24nKSkgewogICAgICAgIHRocm93IG5ldyBBV1MudXRpbC5lcnJvcigKICAgICAgICAgIG5ldyBFcnJvcigndG9rZW5Db2RlRm4gbXVzdCBiZSBhIGZ1bmN0aW9uIHdoZW4gcGFyYW1zLlNlcmlhbE51bWJlciBpcyBnaXZlbicpLAogICAgICAgICAge2NvZGU6IHRoaXMuZXJyb3JDb2RlfQogICAgICAgICk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy50b2tlbkNvZGVGbiA9IG9wdGlvbnMudG9rZW5Db2RlRm47CiAgICAgIH0KICAgIH0KICAgIHZhciBjb25maWcgPSBBV1MudXRpbC5tZXJnZSgKICAgICAgewogICAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zLm1hc3RlckNyZWRlbnRpYWxzIHx8IEFXUy5jb25maWcuY3JlZGVudGlhbHMKICAgICAgfSwKICAgICAgb3B0aW9ucy5zdHNDb25maWcgfHwge30KICAgICk7CiAgICB0aGlzLnNlcnZpY2UgPSBuZXcgU1RTKGNvbmZpZyk7CiAgfSwKCiAgLyoqCiAgICogUmVmcmVzaGVzIGNyZWRlbnRpYWxzIHVzaW5nIHtBV1MuU1RTLmFzc3VtZVJvbGV9IG9yCiAgICoge0FXUy5TVFMuZ2V0U2Vzc2lvblRva2VufSwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYW4gSUFNIHJvbGUgQVJOIHdhcyBwYXNzZWQKICAgKiB0byB0aGUgY3JlZGVudGlhbHMge2NvbnN0cnVjdG9yfS4KICAgKgogICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIpCiAgICogICBDYWxsZWQgd2hlbiB0aGUgU1RTIHNlcnZpY2UgcmVzcG9uZHMgKG9yIGZhaWxzKS4gV2hlbgogICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHMKICAgKiAgIGluZm9ybWF0aW9uIGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QgKGFzIHRoZSBgYWNjZXNzS2V5SWRgLAogICAqICAgYHNlY3JldEFjY2Vzc0tleWAsIGFuZCBgc2Vzc2lvblRva2VuYCBwcm9wZXJ0aWVzKS4KICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZAogICAqIEBzZWUgQVdTLkNyZWRlbnRpYWxzLmdldAogICAqLwogIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goY2FsbGJhY2spIHsKICAgIHRoaXMuY29hbGVzY2VSZWZyZXNoKGNhbGxiYWNrIHx8IEFXUy51dGlsLmZuLmNhbGxiYWNrKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKiBAcGFyYW0gY2FsbGJhY2sKICAgKi8KICBsb2FkOiBmdW5jdGlvbiBsb2FkKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgb3BlcmF0aW9uID0gc2VsZi5zZXJ2aWNlLmNvbmZpZy5wYXJhbXMuUm9sZUFybiA/ICdhc3N1bWVSb2xlJyA6ICdnZXRTZXNzaW9uVG9rZW4nOwogICAgdGhpcy5nZXRUb2tlbkNvZGUoZnVuY3Rpb24gKGVyciwgdG9rZW5Db2RlKSB7CiAgICAgIHZhciBwYXJhbXMgPSB7fTsKICAgICAgaWYgKGVycikgewogICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICh0b2tlbkNvZGUpIHsKICAgICAgICBwYXJhbXMuVG9rZW5Db2RlID0gdG9rZW5Db2RlOwogICAgICB9CiAgICAgIHNlbGYuc2VydmljZVtvcGVyYXRpb25dKHBhcmFtcywgZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICBzZWxmLnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKGRhdGEsIHNlbGYpOwogICAgICAgIH0KICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICB9KTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGdldFRva2VuQ29kZTogZnVuY3Rpb24gZ2V0VG9rZW5Db2RlKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAodGhpcy50b2tlbkNvZGVGbikgewogICAgICB0aGlzLnRva2VuQ29kZUZuKHRoaXMuc2VydmljZS5jb25maWcucGFyYW1zLlNlcmlhbE51bWJlciwgZnVuY3Rpb24gKGVyciwgdG9rZW4pIHsKICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICB2YXIgbWVzc2FnZSA9IGVycjsKICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgICAgICBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7CiAgICAgICAgICB9CiAgICAgICAgICBjYWxsYmFjaygKICAgICAgICAgICAgQVdTLnV0aWwuZXJyb3IoCiAgICAgICAgICAgICAgbmV3IEVycm9yKCdFcnJvciBmZXRjaGluZyBNRkEgdG9rZW46ICcgKyBtZXNzYWdlKSwKICAgICAgICAgICAgICB7IGNvZGU6IHNlbGYuZXJyb3JDb2RlfQogICAgICAgICAgICApCiAgICAgICAgICApOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBjYWxsYmFjayhudWxsLCB0b2tlbik7CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgY2FsbGJhY2sobnVsbCk7CiAgICB9CiAgfQp9KTsKCn0seyIuLi8uLi9jbGllbnRzL3N0cyI6OCwiLi4vY29yZSI6MTh9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBDb2duaXRvSWRlbnRpdHkgPSByZXF1aXJlKCcuLi8uLi9jbGllbnRzL2NvZ25pdG9pZGVudGl0eScpOwp2YXIgU1RTID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50cy9zdHMnKTsKCi8qKgogKiBSZXByZXNlbnRzIGNyZWRlbnRpYWxzIHJldHJpZXZlZCBmcm9tIFNUUyBXZWIgSWRlbnRpdHkgRmVkZXJhdGlvbiB1c2luZwogKiB0aGUgQW1hem9uIENvZ25pdG8gSWRlbnRpdHkgc2VydmljZS4KICoKICogQnkgZGVmYXVsdCB0aGlzIHByb3ZpZGVyIGdldHMgY3JlZGVudGlhbHMgdXNpbmcgdGhlCiAqIHtBV1MuQ29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHl9IHNlcnZpY2Ugb3BlcmF0aW9uLCB3aGljaAogKiByZXF1aXJlcyBlaXRoZXIgYW4gYElkZW50aXR5SWRgIG9yIGFuIGBJZGVudGl0eVBvb2xJZGAgKEFtYXpvbiBDb2duaXRvCiAqIElkZW50aXR5IFBvb2wgSUQpLCB3aGljaCBpcyB1c2VkIHRvIGNhbGwge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SWR9IHRvCiAqIG9idGFpbiBhbiBgSWRlbnRpdHlJZGAuIElmIHRoZSBpZGVudGl0eSBvciBpZGVudGl0eSBwb29sIGlzIG5vdCBjb25maWd1cmVkIGluCiAqIHRoZSBBbWF6b24gQ29nbml0byBDb25zb2xlIHRvIHVzZSBJQU0gcm9sZXMgd2l0aCB0aGUgYXBwcm9wcmlhdGUgcGVybWlzc2lvbnMsCiAqIHRoZW4gYWRkaXRpb25hbGx5IGEgYFJvbGVBcm5gIGlzIHJlcXVpcmVkIGNvbnRhaW5pbmcgdGhlIEFSTiBvZiB0aGUgSUFNIHRydXN0CiAqIHBvbGljeSBmb3IgdGhlIEFtYXpvbiBDb2duaXRvIHJvbGUgdGhhdCB0aGUgdXNlciB3aWxsIGxvZyBpbnRvLiBJZiBhIGBSb2xlQXJuYAogKiBpcyBwcm92aWRlZCwgdGhlbiB0aGlzIHByb3ZpZGVyIGdldHMgY3JlZGVudGlhbHMgdXNpbmcgdGhlCiAqIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9IHNlcnZpY2Ugb3BlcmF0aW9uLCBhZnRlciBmaXJzdCBnZXR0aW5nIGFuCiAqIE9wZW4gSUQgdG9rZW4gZnJvbSB7QVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbn0uCiAqCiAqIEluIGFkZGl0aW9uLCBpZiB0aGlzIGNyZWRlbnRpYWwgcHJvdmlkZXIgaXMgdXNlZCB0byBwcm92aWRlIGF1dGhlbnRpY2F0ZWQKICogbG9naW4sIHRoZSBgTG9naW5zYCBtYXAgbWF5IGJlIHNldCB0byB0aGUgdG9rZW5zIHByb3ZpZGVkIGJ5IHRoZSByZXNwZWN0aXZlCiAqIGlkZW50aXR5IHByb3ZpZGVycy4gU2VlIHtjb25zdHJ1Y3Rvcn0gZm9yIGFuIGV4YW1wbGUgb24gY3JlYXRpbmcgYSBjcmVkZW50aWFscwogKiBvYmplY3Qgd2l0aCBwcm9wZXIgcHJvcGVydHkgdmFsdWVzLgogKgogKiAjIyBSZWZyZXNoaW5nIENyZWRlbnRpYWxzIGZyb20gSWRlbnRpdHkgU2VydmljZQogKgogKiBJbiBhZGRpdGlvbiB0byBBV1MgY3JlZGVudGlhbHMgZXhwaXJpbmcgYWZ0ZXIgYSBnaXZlbiBhbW91bnQgb2YgdGltZSwgdGhlCiAqIGxvZ2luIHRva2VuIGZyb20gdGhlIGlkZW50aXR5IHByb3ZpZGVyIHdpbGwgYWxzbyBleHBpcmUuIE9uY2UgdGhpcyB0b2tlbgogKiBleHBpcmVzLCBpdCB3aWxsIG5vdCBiZSB1c2FibGUgdG8gcmVmcmVzaCBBV1MgY3JlZGVudGlhbHMsIGFuZCBhbm90aGVyCiAqIHRva2VuIHdpbGwgYmUgbmVlZGVkLiBUaGUgU0RLIGRvZXMgbm90IG1hbmFnZSByZWZyZXNoaW5nIG9mIHRoZSB0b2tlbiB2YWx1ZSwKICogYnV0IHRoaXMgY2FuIGJlIGRvbmUgdGhyb3VnaCBhICJyZWZyZXNoIHRva2VuIiBzdXBwb3J0ZWQgYnkgbW9zdCBpZGVudGl0eQogKiBwcm92aWRlcnMuIENvbnN1bHQgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBpZGVudGl0eSBwcm92aWRlciBmb3IgcmVmcmVzaGluZwogKiB0b2tlbnMuIE9uY2UgdGhlIHJlZnJlc2hlZCB0b2tlbiBpcyBhY3F1aXJlZCwgeW91IHNob3VsZCBtYWtlIHN1cmUgdG8gdXBkYXRlCiAqIHRoaXMgbmV3IHRva2VuIGluIHRoZSBjcmVkZW50aWFscyBvYmplY3QncyB7cGFyYW1zfSBwcm9wZXJ0eS4gVGhlIGZvbGxvd2luZwogKiBjb2RlIHdpbGwgdXBkYXRlIHRoZSBXZWJJZGVudGl0eVRva2VuLCBhc3N1bWluZyB5b3UgaGF2ZSByZXRyaWV2ZWQgYW4gdXBkYXRlZAogKiB0b2tlbiBmcm9tIHRoZSBpZGVudGl0eSBwcm92aWRlcjoKICoKICogYGBgamF2YXNjcmlwdAogKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLnBhcmFtcy5Mb2dpbnNbJ2dyYXBoLmZhY2Vib29rLmNvbSddID0gdXBkYXRlZFRva2VuOwogKiBgYGAKICoKICogRnV0dXJlIGNhbGxzIHRvIGBjcmVkZW50aWFscy5yZWZyZXNoKClgIHdpbGwgbm93IHVzZSB0aGUgbmV3IHRva2VuLgogKgogKiBAIWF0dHJpYnV0ZSBwYXJhbXMKICogICBAcmV0dXJuIFttYXBdIHRoZSBtYXAgb2YgcGFyYW1zIHBhc3NlZCB0bwogKiAgICAge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SWR9LAogKiAgICAge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0T3BlbklkVG9rZW59LCBhbmQKICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBUbyB1cGRhdGUgdGhlIHRva2VuLCBzZXQgdGhlCiAqICAgICBgcGFyYW1zLldlYklkZW50aXR5VG9rZW5gIHByb3BlcnR5LgogKiBAIWF0dHJpYnV0ZSBkYXRhCiAqICAgQHJldHVybiBbbWFwXSB0aGUgcmF3IGRhdGEgcmVzcG9uc2UgZnJvbSB0aGUgY2FsbCB0bwogKiAgICAge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eX0sIG9yCiAqICAgICB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5fS4gVXNlIHRoaXMgaWYgeW91IHdhbnQgdG8gZ2V0CiAqICAgICBhY2Nlc3MgdG8gb3RoZXIgcHJvcGVydGllcyBmcm9tIHRoZSByZXNwb25zZS4KICogQCFhdHRyaWJ1dGUgaWRlbnRpdHlJZAogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIENvZ25pdG8gSUQgcmV0dXJuZWQgYnkgdGhlIGxhc3QgY2FsbCB0bwogKiAgICAge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0T3BlbklkVG9rZW59LiBUaGlzIElEIHJlcHJlc2VudHMgdGhlIGFjdHVhbAogKiAgICAgZmluYWwgcmVzb2x2ZWQgaWRlbnRpdHkgSUQgZnJvbSBBbWF6b24gQ29nbml0by4KICovCkFXUy5Db2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyA9IEFXUy51dGlsLmluaGVyaXQoQVdTLkNyZWRlbnRpYWxzLCB7CiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9jYWxTdG9yYWdlS2V5OiB7CiAgICBpZDogJ2F3cy5jb2duaXRvLmlkZW50aXR5LWlkLicsCiAgICBwcm92aWRlcnM6ICdhd3MuY29nbml0by5pZGVudGl0eS1wcm92aWRlcnMuJwogIH0sCgogIC8qKgogICAqIENyZWF0ZXMgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0LgogICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdAogICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMoewogICAqCiAgICogICAgIC8vIGVpdGhlciBJZGVudGl0eVBvb2xJZCBvciBJZGVudGl0eUlkIGlzIHJlcXVpcmVkCiAgICogICAgIC8vIFNlZSB0aGUgSWRlbnRpdHlQb29sSWQgcGFyYW0gZm9yIEFXUy5Db2duaXRvSWRlbnRpdHkuZ2V0SUQgKGxpbmtlZCBiZWxvdykKICAgKiAgICAgLy8gU2VlIHRoZSBJZGVudGl0eUlkIHBhcmFtIGZvciBBV1MuQ29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkKICAgKiAgICAgLy8gb3IgQVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbiAobGlua2VkIGJlbG93KQogICAqICAgICBJZGVudGl0eVBvb2xJZDogJ3VzLWVhc3QtMToxNjk5ZWJjMC03OTAwLTQwOTktYjkxMC0yZGY5NGY1MmEwMzAnLAogICAqICAgICBJZGVudGl0eUlkOiAndXMtZWFzdC0xOjEyOGQwYTc0LWM4MmYtNDU1My05MTZkLTkwMDUzZTRhOGIwZicKICAgKgogICAqICAgICAvLyBvcHRpb25hbCwgb25seSBuZWNlc3Nhcnkgd2hlbiB0aGUgaWRlbnRpdHkgcG9vbCBpcyBub3QgY29uZmlndXJlZAogICAqICAgICAvLyB0byB1c2UgSUFNIHJvbGVzIGluIHRoZSBBbWF6b24gQ29nbml0byBDb25zb2xlCiAgICogICAgIC8vIFNlZSB0aGUgUm9sZUFybiBwYXJhbSBmb3IgQVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5IChsaW5rZWQgYmVsb3cpCiAgICogICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL01ZQVBQLUNvZ25pdG9JZGVudGl0eScsCiAgICoKICAgKiAgICAgLy8gb3B0aW9uYWwgdG9rZW5zLCB1c2VkIGZvciBhdXRoZW50aWNhdGVkIGxvZ2luCiAgICogICAgIC8vIFNlZSB0aGUgTG9naW5zIHBhcmFtIGZvciBBV1MuQ29nbml0b0lkZW50aXR5LmdldElEIChsaW5rZWQgYmVsb3cpCiAgICogICAgIExvZ2luczogewogICAqICAgICAgICdncmFwaC5mYWNlYm9vay5jb20nOiAnRkJUT0tFTicsCiAgICogICAgICAgJ3d3dy5hbWF6b24uY29tJzogJ0FNQVpPTlRPS0VOJywKICAgKiAgICAgICAnYWNjb3VudHMuZ29vZ2xlLmNvbSc6ICdHT09HTEVUT0tFTicsCiAgICogICAgICAgJ2FwaS50d2l0dGVyLmNvbSc6ICdUV0lUVEVSVE9LRU4nLAogICAqICAgICAgICd3d3cuZGlnaXRzLmNvbSc6ICdESUdJVFNUT0tFTicKICAgKiAgICAgfSwKICAgKgogICAqICAgICAvLyBvcHRpb25hbCBuYW1lLCBkZWZhdWx0cyB0byB3ZWItaWRlbnRpdHkKICAgKiAgICAgLy8gU2VlIHRoZSBSb2xlU2Vzc2lvbk5hbWUgcGFyYW0gZm9yIEFXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eSAobGlua2VkIGJlbG93KQogICAqICAgICBSb2xlU2Vzc2lvbk5hbWU6ICd3ZWInLAogICAqCiAgICogICAgIC8vIG9wdGlvbmFsLCBvbmx5IG5lY2Vzc2FyeSB3aGVuIGFwcGxpY2F0aW9uIHJ1bnMgaW4gYSBicm93c2VyCiAgICogICAgIC8vIGFuZCBtdWx0aXBsZSB1c2VycyBhcmUgc2lnbmVkIGluIGF0IG9uY2UsIHVzZWQgZm9yIGNhY2hpbmcKICAgKiAgICAgTG9naW5JZDogJ2V4YW1wbGVAZ21haWwuY29tJwogICAqCiAgICogICB9LCB7CiAgICogICAgICAvLyBvcHRpb25hbGx5IHByb3ZpZGUgY29uZmlndXJhdGlvbiB0byBhcHBseSB0byB0aGUgdW5kZXJseWluZyBzZXJ2aWNlIGNsaWVudHMKICAgKiAgICAgIC8vIGlmIGNvbmZpZ3VyYXRpb24gaXMgbm90IHByb3ZpZGVkLCB0aGVuIGNvbmZpZ3VyYXRpb24gd2lsbCBiZSBwdWxsZWQgZnJvbSBBV1MuY29uZmlnCiAgICoKICAgKiAgICAgIC8vIHJlZ2lvbiBzaG91bGQgbWF0Y2ggdGhlIHJlZ2lvbiB5b3VyIGlkZW50aXR5IHBvb2wgaXMgbG9jYXRlZCBpbgogICAqICAgICAgcmVnaW9uOiAndXMtZWFzdC0xJywKICAgKgogICAqICAgICAgLy8gc3BlY2lmeSB0aW1lb3V0IG9wdGlvbnMKICAgKiAgICAgIGh0dHBPcHRpb25zOiB7CiAgICogICAgICAgIHRpbWVvdXQ6IDEwMAogICAqICAgICAgfQogICAqICAgfSk7CiAgICogQHNlZSBBV1MuQ29nbml0b0lkZW50aXR5LmdldElkCiAgICogQHNlZSBBV1MuQ29nbml0b0lkZW50aXR5LmdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkKICAgKiBAc2VlIEFXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eQogICAqIEBzZWUgQVdTLkNvZ25pdG9JZGVudGl0eS5nZXRPcGVuSWRUb2tlbgogICAqIEBzZWUgQVdTLkNvbmZpZwogICAqIEBub3RlIElmIGEgcmVnaW9uIGlzIG5vdCBwcm92aWRlZCBpbiB0aGUgZ2xvYmFsIEFXUy5jb25maWcsIG9yCiAgICogICBzcGVjaWZpZWQgaW4gdGhlIGBjbGllbnRDb25maWdgIHRvIHRoZSBDb2duaXRvSWRlbnRpdHlDcmVkZW50aWFscwogICAqICAgY29uc3RydWN0b3IsIHlvdSBtYXkgZW5jb3VudGVyIGEgJ01pc3NpbmcgY3JlZGVudGlhbHMgaW4gY29uZmlnJyBlcnJvcgogICAqICAgd2hlbiBjYWxsaW5nIG1ha2luZyBhIHNlcnZpY2UgY2FsbC4KICAgKi8KICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMocGFyYW1zLCBjbGllbnRDb25maWcpIHsKICAgIEFXUy5DcmVkZW50aWFscy5jYWxsKHRoaXMpOwogICAgdGhpcy5leHBpcmVkID0gdHJ1ZTsKICAgIHRoaXMucGFyYW1zID0gcGFyYW1zOwogICAgdGhpcy5kYXRhID0gbnVsbDsKICAgIHRoaXMuX2lkZW50aXR5SWQgPSBudWxsOwogICAgdGhpcy5fY2xpZW50Q29uZmlnID0gQVdTLnV0aWwuY29weShjbGllbnRDb25maWcgfHwge30pOwogICAgdGhpcy5sb2FkQ2FjaGVkSWQoKTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaWRlbnRpdHlJZCcsIHsKICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICBzZWxmLmxvYWRDYWNoZWRJZCgpOwogICAgICAgIHJldHVybiBzZWxmLl9pZGVudGl0eUlkIHx8IHNlbGYucGFyYW1zLklkZW50aXR5SWQ7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24oaWRlbnRpdHlJZCkgewogICAgICAgIHNlbGYuX2lkZW50aXR5SWQgPSBpZGVudGl0eUlkOwogICAgICB9CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5Db2duaXRvSWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eX0sCiAgICogb3Ige0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eX0uCiAgICoKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKQogICAqICAgQ2FsbGVkIHdoZW4gdGhlIFNUUyBzZXJ2aWNlIHJlc3BvbmRzIChvciBmYWlscykuIFdoZW4KICAgKiAgIHRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggbm8gZXJyb3IsIGl0IG1lYW5zIHRoYXQgdGhlIGNyZWRlbnRpYWxzCiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCwKICAgKiAgIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWQKICAgKiBAc2VlIEFXUy5DcmVkZW50aWFscy5nZXQKICAgKi8KICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKGNhbGxiYWNrKSB7CiAgICB0aGlzLmNvYWxlc2NlUmVmcmVzaChjYWxsYmFjayB8fCBBV1MudXRpbC5mbi5jYWxsYmFjayk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICogQHBhcmFtIGNhbGxiYWNrCiAgICovCiAgbG9hZDogZnVuY3Rpb24gbG9hZChjYWxsYmFjaykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jcmVhdGVDbGllbnRzKCk7CiAgICBzZWxmLmRhdGEgPSBudWxsOwogICAgc2VsZi5faWRlbnRpdHlJZCA9IG51bGw7CiAgICBzZWxmLmdldElkKGZ1bmN0aW9uKGVycikgewogICAgICBpZiAoIWVycikgewogICAgICAgIGlmICghc2VsZi5wYXJhbXMuUm9sZUFybikgewogICAgICAgICAgc2VsZi5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KGNhbGxiYWNrKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2VsZi5nZXRDcmVkZW50aWFsc0Zyb21TVFMoY2FsbGJhY2spOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmNsZWFySWRPbk5vdEF1dGhvcml6ZWQoZXJyKTsKICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICB9CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBDbGVhcnMgdGhlIGNhY2hlZCBDb2duaXRvIElEIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudGx5IGNvbmZpZ3VyZWQKICAgKiBpZGVudGl0eSBwb29sIElELiBVc2UgdGhpcyB0byBtYW51YWxseSBpbnZhbGlkYXRlIHlvdXIgY2FjaGUgaWYKICAgKiB0aGUgaWRlbnRpdHkgcG9vbCBJRCB3YXMgZGVsZXRlZC4KICAgKi8KICBjbGVhckNhY2hlZElkOiBmdW5jdGlvbiBjbGVhckNhY2hlKCkgewogICAgdGhpcy5faWRlbnRpdHlJZCA9IG51bGw7CiAgICBkZWxldGUgdGhpcy5wYXJhbXMuSWRlbnRpdHlJZDsKCiAgICB2YXIgcG9vbElkID0gdGhpcy5wYXJhbXMuSWRlbnRpdHlQb29sSWQ7CiAgICB2YXIgbG9naW5JZCA9IHRoaXMucGFyYW1zLkxvZ2luSWQgfHwgJyc7CiAgICBkZWxldGUgdGhpcy5zdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlS2V5LmlkICsgcG9vbElkICsgbG9naW5JZF07CiAgICBkZWxldGUgdGhpcy5zdG9yYWdlW3RoaXMubG9jYWxTdG9yYWdlS2V5LnByb3ZpZGVycyArIHBvb2xJZCArIGxvZ2luSWRdOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGNsZWFySWRPbk5vdEF1dGhvcml6ZWQ6IGZ1bmN0aW9uIGNsZWFySWRPbk5vdEF1dGhvcml6ZWQoZXJyKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAoZXJyLmNvZGUgPT0gJ05vdEF1dGhvcml6ZWRFeGNlcHRpb24nKSB7CiAgICAgIHNlbGYuY2xlYXJDYWNoZWRJZCgpOwogICAgfQogIH0sCgogIC8qKgogICAqIFJldHJpZXZlcyBhIENvZ25pdG8gSUQsIGxvYWRpbmcgZnJvbSBjYWNoZSBpZiBpdCB3YXMgYWxyZWFkeSByZXRyaWV2ZWQKICAgKiBvbiB0aGlzIGRldmljZS4KICAgKgogICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIsIGlkZW50aXR5SWQpCiAgICogICBAcGFyYW0gZXJyIFtFcnJvciwgbnVsbF0gYW4gZXJyb3Igb2JqZWN0IGlmIHRoZSBjYWxsIGZhaWxlZCBvciBudWxsIGlmCiAgICogICAgIGl0IHN1Y2NlZWRlZC4KICAgKiAgIEBwYXJhbSBpZGVudGl0eUlkIFtTdHJpbmcsIG51bGxdIGlmIHN1Y2Nlc3NmdWwsIHRoZSBjYWxsYmFjayB3aWxsIHJldHVybgogICAqICAgICB0aGUgQ29nbml0byBJRC4KICAgKiBAbm90ZSBJZiBub3QgbG9hZGVkIGV4cGxpY2l0bHksIHRoZSBDb2duaXRvIElEIGlzIGxvYWRlZCBhbmQgc3RvcmVkIGluCiAgICogICBsb2NhbFN0b3JhZ2UgaW4gdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQgb2YgYSBkZXZpY2UuCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZ2V0SWQ6IGZ1bmN0aW9uIGdldElkKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAodHlwZW9mIHNlbGYucGFyYW1zLklkZW50aXR5SWQgPT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBzZWxmLnBhcmFtcy5JZGVudGl0eUlkKTsKICAgIH0KCiAgICBzZWxmLmNvZ25pdG8uZ2V0SWQoZnVuY3Rpb24oZXJyLCBkYXRhKSB7CiAgICAgIGlmICghZXJyICYmIGRhdGEuSWRlbnRpdHlJZCkgewogICAgICAgIHNlbGYucGFyYW1zLklkZW50aXR5SWQgPSBkYXRhLklkZW50aXR5SWQ7CiAgICAgICAgY2FsbGJhY2sobnVsbCwgZGF0YS5JZGVudGl0eUlkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICB9CiAgICB9KTsKICB9LAoKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZENyZWRlbnRpYWxzOiBmdW5jdGlvbiBsb2FkQ3JlZGVudGlhbHMoZGF0YSwgY3JlZGVudGlhbHMpIHsKICAgIGlmICghZGF0YSB8fCAhY3JlZGVudGlhbHMpIHJldHVybjsKICAgIGNyZWRlbnRpYWxzLmV4cGlyZWQgPSBmYWxzZTsKICAgIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkID0gZGF0YS5DcmVkZW50aWFscy5BY2Nlc3NLZXlJZDsKICAgIGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSA9IGRhdGEuQ3JlZGVudGlhbHMuU2VjcmV0S2V5OwogICAgY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuID0gZGF0YS5DcmVkZW50aWFscy5TZXNzaW9uVG9rZW47CiAgICBjcmVkZW50aWFscy5leHBpcmVUaW1lID0gZGF0YS5DcmVkZW50aWFscy5FeHBpcmF0aW9uOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHk6IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzRm9ySWRlbnRpdHkoY2FsbGJhY2spIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY29nbml0by5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAgICBpZiAoIWVycikgewogICAgICAgIHNlbGYuY2FjaGVJZChkYXRhKTsKICAgICAgICBzZWxmLmRhdGEgPSBkYXRhOwogICAgICAgIHNlbGYubG9hZENyZWRlbnRpYWxzKHNlbGYuZGF0YSwgc2VsZik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2VsZi5jbGVhcklkT25Ob3RBdXRob3JpemVkKGVycik7CiAgICAgIH0KICAgICAgY2FsbGJhY2soZXJyKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGdldENyZWRlbnRpYWxzRnJvbVNUUzogZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHNGcm9tU1RTKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBzZWxmLmNvZ25pdG8uZ2V0T3BlbklkVG9rZW4oZnVuY3Rpb24oZXJyLCBkYXRhKSB7CiAgICAgIGlmICghZXJyKSB7CiAgICAgICAgc2VsZi5jYWNoZUlkKGRhdGEpOwogICAgICAgIHNlbGYucGFyYW1zLldlYklkZW50aXR5VG9rZW4gPSBkYXRhLlRva2VuOwogICAgICAgIHNlbGYud2ViSWRlbnRpdHlDcmVkZW50aWFscy5yZWZyZXNoKGZ1bmN0aW9uKHdlYkVycikgewogICAgICAgICAgaWYgKCF3ZWJFcnIpIHsKICAgICAgICAgICAgc2VsZi5kYXRhID0gc2VsZi53ZWJJZGVudGl0eUNyZWRlbnRpYWxzLmRhdGE7CiAgICAgICAgICAgIHNlbGYuc3RzLmNyZWRlbnRpYWxzRnJvbShzZWxmLmRhdGEsIHNlbGYpOwogICAgICAgICAgfQogICAgICAgICAgY2FsbGJhY2sod2ViRXJyKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZWxmLmNsZWFySWRPbk5vdEF1dGhvcml6ZWQoZXJyKTsKICAgICAgICBjYWxsYmFjayhlcnIpOwogICAgICB9CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBsb2FkQ2FjaGVkSWQ6IGZ1bmN0aW9uIGxvYWRDYWNoZWRJZCgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAvLyBpbiB0aGUgYnJvd3NlciB3ZSBzb3VyY2UgZGVmYXVsdCBJZGVudGl0eUlkIGZyb20gbG9jYWxTdG9yYWdlCiAgICBpZiAoQVdTLnV0aWwuaXNCcm93c2VyKCkgJiYgIXNlbGYucGFyYW1zLklkZW50aXR5SWQpIHsKICAgICAgdmFyIGlkID0gc2VsZi5nZXRTdG9yYWdlKCdpZCcpOwogICAgICBpZiAoaWQgJiYgc2VsZi5wYXJhbXMuTG9naW5zKSB7CiAgICAgICAgdmFyIGFjdHVhbFByb3ZpZGVycyA9IE9iamVjdC5rZXlzKHNlbGYucGFyYW1zLkxvZ2lucyk7CiAgICAgICAgdmFyIGNhY2hlZFByb3ZpZGVycyA9CiAgICAgICAgICAoc2VsZi5nZXRTdG9yYWdlKCdwcm92aWRlcnMnKSB8fCAnJykuc3BsaXQoJywnKTsKCiAgICAgICAgLy8gb25seSBsb2FkIElEIGlmIGF0IGxlYXN0IG9uZSBwcm92aWRlciB1c2VkIHRoaXMgSUQgYmVmb3JlCiAgICAgICAgdmFyIGludGVyc2VjdCA9IGNhY2hlZFByb3ZpZGVycy5maWx0ZXIoZnVuY3Rpb24obikgewogICAgICAgICAgcmV0dXJuIGFjdHVhbFByb3ZpZGVycy5pbmRleE9mKG4pICE9PSAtMTsKICAgICAgICB9KTsKICAgICAgICBpZiAoaW50ZXJzZWN0Lmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgc2VsZi5wYXJhbXMuSWRlbnRpdHlJZCA9IGlkOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChpZCkgewogICAgICAgIHNlbGYucGFyYW1zLklkZW50aXR5SWQgPSBpZDsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGNyZWF0ZUNsaWVudHM6IGZ1bmN0aW9uKCkgewogICAgdmFyIGNsaWVudENvbmZpZyA9IHRoaXMuX2NsaWVudENvbmZpZzsKICAgIHRoaXMud2ViSWRlbnRpdHlDcmVkZW50aWFscyA9IHRoaXMud2ViSWRlbnRpdHlDcmVkZW50aWFscyB8fAogICAgICBuZXcgQVdTLldlYklkZW50aXR5Q3JlZGVudGlhbHModGhpcy5wYXJhbXMsIGNsaWVudENvbmZpZyk7CiAgICBpZiAoIXRoaXMuY29nbml0bykgewogICAgICB2YXIgY29nbml0b0NvbmZpZyA9IEFXUy51dGlsLm1lcmdlKHt9LCBjbGllbnRDb25maWcpOwogICAgICBjb2duaXRvQ29uZmlnLnBhcmFtcyA9IHRoaXMucGFyYW1zOwogICAgICB0aGlzLmNvZ25pdG8gPSBuZXcgQ29nbml0b0lkZW50aXR5KGNvZ25pdG9Db25maWcpOwogICAgfQogICAgdGhpcy5zdHMgPSB0aGlzLnN0cyB8fCBuZXcgU1RTKGNsaWVudENvbmZpZyk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY2FjaGVJZDogZnVuY3Rpb24gY2FjaGVJZChkYXRhKSB7CiAgICB0aGlzLl9pZGVudGl0eUlkID0gZGF0YS5JZGVudGl0eUlkOwogICAgdGhpcy5wYXJhbXMuSWRlbnRpdHlJZCA9IHRoaXMuX2lkZW50aXR5SWQ7CgogICAgLy8gY2FjaGUgdGhpcyBJZGVudGl0eUlkIGluIGJyb3dzZXIgbG9jYWxTdG9yYWdlIGlmIHBvc3NpYmxlCiAgICBpZiAoQVdTLnV0aWwuaXNCcm93c2VyKCkpIHsKICAgICAgdGhpcy5zZXRTdG9yYWdlKCdpZCcsIGRhdGEuSWRlbnRpdHlJZCk7CgogICAgICBpZiAodGhpcy5wYXJhbXMuTG9naW5zKSB7CiAgICAgICAgdGhpcy5zZXRTdG9yYWdlKCdwcm92aWRlcnMnLCBPYmplY3Qua2V5cyh0aGlzLnBhcmFtcy5Mb2dpbnMpLmpvaW4oJywnKSk7CiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBnZXRTdG9yYWdlOiBmdW5jdGlvbiBnZXRTdG9yYWdlKGtleSkgewogICAgcmV0dXJuIHRoaXMuc3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUtleVtrZXldICsgdGhpcy5wYXJhbXMuSWRlbnRpdHlQb29sSWQgKyAodGhpcy5wYXJhbXMuTG9naW5JZCB8fCAnJyldOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIHNldFN0b3JhZ2U6IGZ1bmN0aW9uIHNldFN0b3JhZ2Uoa2V5LCB2YWwpIHsKICAgIHRyeSB7CiAgICAgIHRoaXMuc3RvcmFnZVt0aGlzLmxvY2FsU3RvcmFnZUtleVtrZXldICsgdGhpcy5wYXJhbXMuSWRlbnRpdHlQb29sSWQgKyAodGhpcy5wYXJhbXMuTG9naW5JZCB8fCAnJyldID0gdmFsOwogICAgfSBjYXRjaCAoXykge30KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBzdG9yYWdlOiAoZnVuY3Rpb24oKSB7CiAgICB0cnkgewogICAgICB2YXIgc3RvcmFnZSA9IEFXUy51dGlsLmlzQnJvd3NlcigpICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UgIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UgPT09ICdvYmplY3QnID8KICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UgOiB7fTsKCiAgICAgIC8vIFRlc3Qgc2V0L3JlbW92ZSB3aGljaCB3b3VsZCB0aHJvdyBhbiBlcnJvciBpbiBTYWZhcmkncyBwcml2YXRlIGJyb3dzaW5nCiAgICAgIHN0b3JhZ2VbJ2F3cy50ZXN0LXN0b3JhZ2UnXSA9ICdmb29iYXInOwogICAgICBkZWxldGUgc3RvcmFnZVsnYXdzLnRlc3Qtc3RvcmFnZSddOwoKICAgICAgcmV0dXJuIHN0b3JhZ2U7CiAgICB9IGNhdGNoIChfKSB7CiAgICAgIHJldHVybiB7fTsKICAgIH0KICB9KSgpCn0pOwoKfSx7Ii4uLy4uL2NsaWVudHMvY29nbml0b2lkZW50aXR5Ijo3LCIuLi8uLi9jbGllbnRzL3N0cyI6OCwiLi4vY29yZSI6MTh9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CgovKioKICogQ3JlYXRlcyBhIGNyZWRlbnRpYWwgcHJvdmlkZXIgY2hhaW4gdGhhdCBzZWFyY2hlcyBmb3IgQVdTIGNyZWRlbnRpYWxzCiAqIGluIGEgbGlzdCBvZiBjcmVkZW50aWFsIHByb3ZpZGVycyBzcGVjaWZpZWQgYnkgdGhlIHtwcm92aWRlcnN9IHByb3BlcnR5LgogKgogKiBCeSBkZWZhdWx0LCB0aGUgY2hhaW4gd2lsbCB1c2UgdGhlIHtkZWZhdWx0UHJvdmlkZXJzfSB0byByZXNvbHZlIGNyZWRlbnRpYWxzLgogKiBUaGVzZSBwcm92aWRlcnMgd2lsbCBsb29rIGluIHRoZSBlbnZpcm9ubWVudCB1c2luZyB0aGUKICoge0FXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzfSBjbGFzcyB3aXRoIHRoZSAnQVdTJyBhbmQgJ0FNQVpPTicgcHJlZml4ZXMuCiAqCiAqICMjIFNldHRpbmcgUHJvdmlkZXJzCiAqCiAqIEVhY2ggcHJvdmlkZXIgaW4gdGhlIHtwcm92aWRlcnN9IGxpc3Qgc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zCiAqIGEge0FXUy5DcmVkZW50aWFsc30gb2JqZWN0LCBvciBhIGhhcmRjb2RlZCBjcmVkZW50aWFscyBvYmplY3QuIFRoZSBmdW5jdGlvbgogKiBmb3JtIGFsbG93cyBmb3IgZGVsYXllZCBleGVjdXRpb24gb2YgdGhlIGNyZWRlbnRpYWwgY29uc3RydWN0aW9uLgogKgogKiAjIyBSZXNvbHZpbmcgQ3JlZGVudGlhbHMgZnJvbSBhIENoYWluCiAqCiAqIENhbGwge3Jlc29sdmV9IHRvIHJldHVybiB0aGUgZmlyc3QgdmFsaWQgY3JlZGVudGlhbCBvYmplY3QgdGhhdCBjYW4gYmUKICogbG9hZGVkIGJ5IHRoZSBwcm92aWRlciBjaGFpbi4KICoKICogRm9yIGV4YW1wbGUsIHRvIHJlc29sdmUgYSBjaGFpbiB3aXRoIGEgY3VzdG9tIHByb3ZpZGVyIHRoYXQgY2hlY2tzIGEgZmlsZQogKiBvbiBkaXNrIGFmdGVyIHRoZSBzZXQgb2Yge2RlZmF1bHRQcm92aWRlcnN9OgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIHZhciBkaXNrUHJvdmlkZXIgPSBuZXcgQVdTLkZpbGVTeXN0ZW1DcmVkZW50aWFscygnLi9jcmVkcy5qc29uJyk7CiAqIHZhciBjaGFpbiA9IG5ldyBBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4oKTsKICogY2hhaW4ucHJvdmlkZXJzLnB1c2goZGlza1Byb3ZpZGVyKTsKICogY2hhaW4ucmVzb2x2ZSgpOwogKiBgYGAKICoKICogVGhlIGFib3ZlIGNvZGUgd2lsbCByZXR1cm4gdGhlIGBkaXNrUHJvdmlkZXJgIG9iamVjdCBpZiB0aGUKICogZmlsZSBjb250YWlucyBjcmVkZW50aWFscyBhbmQgdGhlIGBkZWZhdWx0UHJvdmlkZXJzYCBkbyBub3QgY29udGFpbgogKiBhbnkgY3JlZGVudGlhbCBzZXR0aW5ncy4KICoKICogQCFhdHRyaWJ1dGUgcHJvdmlkZXJzCiAqICAgQHJldHVybiBbQXJyYXk8QVdTLkNyZWRlbnRpYWxzLCBGdW5jdGlvbj5dCiAqICAgICBhIGxpc3Qgb2YgY3JlZGVudGlhbHMgb2JqZWN0cyBvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gY3JlZGVudGlhbHMKICogICAgIG9iamVjdHMuIElmIHRoZSBwcm92aWRlciBpcyBhIGZ1bmN0aW9uLCB0aGUgZnVuY3Rpb24gd2lsbCBiZQogKiAgICAgZXhlY3V0ZWQgbGF6aWx5IHdoZW4gdGhlIHByb3ZpZGVyIG5lZWRzIHRvIGJlIGNoZWNrZWQgZm9yIHZhbGlkCiAqICAgICBjcmVkZW50aWFscy4gQnkgZGVmYXVsdCwgdGhpcyBvYmplY3Qgd2lsbCBiZSBzZXQgdG8gdGhlCiAqICAgICB7ZGVmYXVsdFByb3ZpZGVyc30uCiAqICAgQHNlZSBkZWZhdWx0UHJvdmlkZXJzCiAqLwpBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4gPSBBV1MudXRpbC5pbmhlcml0KEFXUy5DcmVkZW50aWFscywgewoKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IENyZWRlbnRpYWxQcm92aWRlckNoYWluIHdpdGggYSBkZWZhdWx0IHNldCBvZiBwcm92aWRlcnMKICAgKiBzcGVjaWZpZWQgYnkge2RlZmF1bHRQcm92aWRlcnN9LgogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBDcmVkZW50aWFsUHJvdmlkZXJDaGFpbihwcm92aWRlcnMpIHsKICAgIGlmIChwcm92aWRlcnMpIHsKICAgICAgdGhpcy5wcm92aWRlcnMgPSBwcm92aWRlcnM7CiAgICB9IGVsc2UgewogICAgICB0aGlzLnByb3ZpZGVycyA9IEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzLnNsaWNlKDApOwogICAgfQogICAgdGhpcy5yZXNvbHZlQ2FsbGJhY2tzID0gW107CiAgfSwKCiAgLyoqCiAgICogQCFtZXRob2QgIHJlc29sdmVQcm9taXNlKCkKICAgKiAgIFJldHVybnMgYSAndGhlbmFibGUnIHByb21pc2UuCiAgICogICBSZXNvbHZlcyB0aGUgcHJvdmlkZXIgY2hhaW4gYnkgc2VhcmNoaW5nIGZvciB0aGUgZmlyc3Qgc2V0IG9mCiAgICogICBjcmVkZW50aWFscyBpbiB7cHJvdmlkZXJzfS4KICAgKgogICAqICAgVHdvIGNhbGxiYWNrcyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIGB0aGVuYCBtZXRob2Qgb24gdGhlIHJldHVybmVkIHByb21pc2UuCiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZAogICAqICAgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQuCiAgICogICBAY2FsbGJhY2sgZnVsZmlsbGVkQ2FsbGJhY2sgZnVuY3Rpb24oY3JlZGVudGlhbHMpCiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyBmdWxmaWxsZWQgYW5kIHRoZSBwcm92aWRlciByZXNvbHZlcyB0aGUgY2hhaW4KICAgKiAgICAgdG8gYSBjcmVkZW50aWFscyBvYmplY3QKICAgKiAgICAgQHBhcmFtIGNyZWRlbnRpYWxzIFtBV1MuQ3JlZGVudGlhbHNdIHRoZSBjcmVkZW50aWFscyBvYmplY3QgcmVzb2x2ZWQKICAgKiAgICAgICBieSB0aGUgcHJvdmlkZXIgY2hhaW4uCiAgICogICBAY2FsbGJhY2sgcmVqZWN0ZWRDYWxsYmFjayBmdW5jdGlvbihlcnJvcikKICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIHJlamVjdGVkLgogICAqICAgICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBpZiBubyBjcmVkZW50aWFscyBhcmUgZm91bmQuCiAgICogICBAcmV0dXJuIFtQcm9taXNlXSBBIHByb21pc2UgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgYHJlc29sdmVgIG1ldGhvZCBjYWxsLgogICAqICAgQGV4YW1wbGUgQ2FsbGluZyB0aGUgYHJlc29sdmVQcm9taXNlYCBtZXRob2QuCiAgICogICAgIHZhciBwcm9taXNlID0gY2hhaW4ucmVzb2x2ZVByb21pc2UoKTsKICAgKiAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNyZWRlbnRpYWxzKSB7IC4uLiB9LCBmdW5jdGlvbihlcnIpIHsgLi4uIH0pOwogICAqLwoKICAvKioKICAgKiBSZXNvbHZlcyB0aGUgcHJvdmlkZXIgY2hhaW4gYnkgc2VhcmNoaW5nIGZvciB0aGUgZmlyc3Qgc2V0IG9mCiAgICogY3JlZGVudGlhbHMgaW4ge3Byb3ZpZGVyc30uCiAgICoKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBjcmVkZW50aWFscykKICAgKiAgIENhbGxlZCB3aGVuIHRoZSBwcm92aWRlciByZXNvbHZlcyB0aGUgY2hhaW4gdG8gYSBjcmVkZW50aWFscyBvYmplY3QKICAgKiAgIG9yIG51bGwgaWYgbm8gY3JlZGVudGlhbHMgY2FuIGJlIGZvdW5kLgogICAqCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBpZiBubyBjcmVkZW50aWFscyBhcmUKICAgKiAgICAgZm91bmQuCiAgICogICBAcGFyYW0gY3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gdGhlIGNyZWRlbnRpYWxzIG9iamVjdCByZXNvbHZlZAogICAqICAgICBieSB0aGUgcHJvdmlkZXIgY2hhaW4uCiAgICogQHJldHVybiBbQVdTLkNyZWRlbnRpYWxQcm92aWRlckNoYWluXSB0aGUgcHJvdmlkZXIsIGZvciBjaGFpbmluZy4KICAgKi8KICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAoc2VsZi5wcm92aWRlcnMubGVuZ3RoID09PSAwKSB7CiAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignTm8gcHJvdmlkZXJzJykpOwogICAgICByZXR1cm4gc2VsZjsKICAgIH0KCiAgICBpZiAoc2VsZi5yZXNvbHZlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spID09PSAxKSB7CiAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgIHZhciBwcm92aWRlcnMgPSBzZWxmLnByb3ZpZGVycy5zbGljZSgwKTsKCiAgICAgIGZ1bmN0aW9uIHJlc29sdmVOZXh0KGVyciwgY3JlZHMpIHsKICAgICAgICBpZiAoKCFlcnIgJiYgY3JlZHMpIHx8IGluZGV4ID09PSBwcm92aWRlcnMubGVuZ3RoKSB7CiAgICAgICAgICBBV1MudXRpbC5hcnJheUVhY2goc2VsZi5yZXNvbHZlQ2FsbGJhY2tzLCBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBjcmVkcyk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHNlbGYucmVzb2x2ZUNhbGxiYWNrcy5sZW5ndGggPSAwOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIHByb3ZpZGVyID0gcHJvdmlkZXJzW2luZGV4KytdOwogICAgICAgIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIGNyZWRzID0gcHJvdmlkZXIuY2FsbCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjcmVkcyA9IHByb3ZpZGVyOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNyZWRzLmdldCkgewogICAgICAgICAgY3JlZHMuZ2V0KGZ1bmN0aW9uIChnZXRFcnIpIHsKICAgICAgICAgICAgcmVzb2x2ZU5leHQoZ2V0RXJyLCBnZXRFcnIgPyBudWxsIDogY3JlZHMpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmVOZXh0KG51bGwsIGNyZWRzKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJlc29sdmVOZXh0KCk7CiAgICB9CgogICAgcmV0dXJuIHNlbGY7CiAgfQp9KTsKCi8qKgogKiBUaGUgZGVmYXVsdCBzZXQgb2YgcHJvdmlkZXJzIHVzZWQgYnkgYSB2YW5pbGxhIENyZWRlbnRpYWxQcm92aWRlckNoYWluLgogKgogKiBJbiB0aGUgYnJvd3NlcjoKICoKICogYGBgamF2YXNjcmlwdAogKiBBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uZGVmYXVsdFByb3ZpZGVycyA9IFtdCiAqIGBgYAogKgogKiBJbiBOb2RlLmpzOgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIEFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzID0gWwogKiAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBV1MuRW52aXJvbm1lbnRDcmVkZW50aWFscygnQVdTJyk7IH0sCiAqICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBTUFaT04nKTsgfSwKICogICBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQVdTLlNoYXJlZEluaUZpbGVDcmVkZW50aWFscygpOyB9LAogKiAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBV1MuRUNTQ3JlZGVudGlhbHMoKTsgfSwKICogICBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQVdTLlByb2Nlc3NDcmVkZW50aWFscygpOyB9LAogKiAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBV1MuVG9rZW5GaWxlV2ViSWRlbnRpdHlDcmVkZW50aWFscygpOyB9LAogKiAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBBV1MuRUMyTWV0YWRhdGFDcmVkZW50aWFscygpIH0KICogXQogKiBgYGAKICovCkFXUy5DcmVkZW50aWFsUHJvdmlkZXJDaGFpbi5kZWZhdWx0UHJvdmlkZXJzID0gW107CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uYWRkUHJvbWlzZXNUb0NsYXNzID0gZnVuY3Rpb24gYWRkUHJvbWlzZXNUb0NsYXNzKFByb21pc2VEZXBlbmRlbmN5KSB7CiAgdGhpcy5wcm90b3R5cGUucmVzb2x2ZVByb21pc2UgPSBBV1MudXRpbC5wcm9taXNpZnlNZXRob2QoJ3Jlc29sdmUnLCBQcm9taXNlRGVwZW5kZW5jeSk7Cn07CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4uZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MgPSBmdW5jdGlvbiBkZWxldGVQcm9taXNlc0Zyb21DbGFzcygpIHsKICBkZWxldGUgdGhpcy5wcm90b3R5cGUucmVzb2x2ZVByb21pc2U7Cn07CgpBV1MudXRpbC5hZGRQcm9taXNlcyhBV1MuQ3JlZGVudGlhbFByb3ZpZGVyQ2hhaW4pOwoKfSx7Ii4uL2NvcmUiOjE4fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpOwp2YXIgU1RTID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50cy9zdHMnKTsKCi8qKgogKiBSZXByZXNlbnRzIGNyZWRlbnRpYWxzIHJldHJpZXZlZCBmcm9tIFNUUyBTQU1MIHN1cHBvcnQuCiAqCiAqIEJ5IGRlZmF1bHQgdGhpcyBwcm92aWRlciBnZXRzIGNyZWRlbnRpYWxzIHVzaW5nIHRoZQogKiB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFNBTUx9IHNlcnZpY2Ugb3BlcmF0aW9uLiBUaGlzIG9wZXJhdGlvbgogKiByZXF1aXJlcyBhIGBSb2xlQXJuYCBjb250YWluaW5nIHRoZSBBUk4gb2YgdGhlIElBTSB0cnVzdCBwb2xpY3kgZm9yIHRoZQogKiBhcHBsaWNhdGlvbiBmb3Igd2hpY2ggY3JlZGVudGlhbHMgd2lsbCBiZSBnaXZlbiwgYXMgd2VsbCBhcyBhIGBQcmluY2lwYWxBcm5gCiAqIHJlcHJlc2VudGluZyB0aGUgQVJOIGZvciB0aGUgU0FNTCBpZGVudGl0eSBwcm92aWRlci4gSW4gYWRkaXRpb24sIHRoZQogKiBgU0FNTEFzc2VydGlvbmAgbXVzdCBiZSBzZXQgdG8gdGhlIHRva2VuIHByb3ZpZGVkIGJ5IHRoZSBpZGVudGl0eQogKiBwcm92aWRlci4gU2VlIHtjb25zdHJ1Y3Rvcn0gZm9yIGFuIGV4YW1wbGUgb24gY3JlYXRpbmcgYSBjcmVkZW50aWFscwogKiBvYmplY3Qgd2l0aCBwcm9wZXIgYFJvbGVBcm5gLCBgUHJpbmNpcGFsQXJuYCwgYW5kIGBTQU1MQXNzZXJ0aW9uYCB2YWx1ZXMuCiAqCiAqICMjIFJlZnJlc2hpbmcgQ3JlZGVudGlhbHMgZnJvbSBJZGVudGl0eSBTZXJ2aWNlCiAqCiAqIEluIGFkZGl0aW9uIHRvIEFXUyBjcmVkZW50aWFscyBleHBpcmluZyBhZnRlciBhIGdpdmVuIGFtb3VudCBvZiB0aW1lLCB0aGUKICogbG9naW4gdG9rZW4gZnJvbSB0aGUgaWRlbnRpdHkgcHJvdmlkZXIgd2lsbCBhbHNvIGV4cGlyZS4gT25jZSB0aGlzIHRva2VuCiAqIGV4cGlyZXMsIGl0IHdpbGwgbm90IGJlIHVzYWJsZSB0byByZWZyZXNoIEFXUyBjcmVkZW50aWFscywgYW5kIGFub3RoZXIKICogdG9rZW4gd2lsbCBiZSBuZWVkZWQuIFRoZSBTREsgZG9lcyBub3QgbWFuYWdlIHJlZnJlc2hpbmcgb2YgdGhlIHRva2VuIHZhbHVlLAogKiBidXQgdGhpcyBjYW4gYmUgZG9uZSB0aHJvdWdoIGEgInJlZnJlc2ggdG9rZW4iIHN1cHBvcnRlZCBieSBtb3N0IGlkZW50aXR5CiAqIHByb3ZpZGVycy4gQ29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGlkZW50aXR5IHByb3ZpZGVyIGZvciByZWZyZXNoaW5nCiAqIHRva2Vucy4gT25jZSB0aGUgcmVmcmVzaGVkIHRva2VuIGlzIGFjcXVpcmVkLCB5b3Ugc2hvdWxkIG1ha2Ugc3VyZSB0byB1cGRhdGUKICogdGhpcyBuZXcgdG9rZW4gaW4gdGhlIGNyZWRlbnRpYWxzIG9iamVjdCdzIHtwYXJhbXN9IHByb3BlcnR5LiBUaGUgZm9sbG93aW5nCiAqIGNvZGUgd2lsbCB1cGRhdGUgdGhlIFNBTUxBc3NlcnRpb24sIGFzc3VtaW5nIHlvdSBoYXZlIHJldHJpZXZlZCBhbiB1cGRhdGVkCiAqIHRva2VuIGZyb20gdGhlIGlkZW50aXR5IHByb3ZpZGVyOgogKgogKiBgYGBqYXZhc2NyaXB0CiAqIEFXUy5jb25maWcuY3JlZGVudGlhbHMucGFyYW1zLlNBTUxBc3NlcnRpb24gPSB1cGRhdGVkVG9rZW47CiAqIGBgYAogKgogKiBGdXR1cmUgY2FsbHMgdG8gYGNyZWRlbnRpYWxzLnJlZnJlc2goKWAgd2lsbCBub3cgdXNlIHRoZSBuZXcgdG9rZW4uCiAqCiAqIEAhYXR0cmlidXRlIHBhcmFtcwogKiAgIEByZXR1cm4gW21hcF0gdGhlIG1hcCBvZiBwYXJhbXMgcGFzc2VkIHRvCiAqICAgICB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFNBTUx9LiBUbyB1cGRhdGUgdGhlIHRva2VuLCBzZXQgdGhlCiAqICAgICBgcGFyYW1zLlNBTUxBc3NlcnRpb25gIHByb3BlcnR5LgogKi8KQVdTLlNBTUxDcmVkZW50aWFscyA9IEFXUy51dGlsLmluaGVyaXQoQVdTLkNyZWRlbnRpYWxzLCB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QuCiAgICogQHBhcmFtIChzZWUgQVdTLlNUUy5hc3N1bWVSb2xlV2l0aFNBTUwpCiAgICogQGV4YW1wbGUgQ3JlYXRpbmcgYSBuZXcgY3JlZGVudGlhbHMgb2JqZWN0CiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5TQU1MQ3JlZGVudGlhbHMoewogICAqICAgICBSb2xlQXJuOiAnYXJuOmF3czppYW06OjEyMzQ1Njc4OTA6cm9sZS9TQU1MUm9sZScsCiAgICogICAgIFByaW5jaXBhbEFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwOnJvbGUvU0FNTFByaW5jaXBhbCcsCiAgICogICAgIFNBTUxBc3NlcnRpb246ICdiYXNlNjQtdG9rZW4nLCAvLyBiYXNlNjQtZW5jb2RlZCB0b2tlbiBmcm9tIElkUAogICAqICAgfSk7CiAgICogQHNlZSBBV1MuU1RTLmFzc3VtZVJvbGVXaXRoU0FNTAogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBTQU1MQ3JlZGVudGlhbHMocGFyYW1zKSB7CiAgICBBV1MuQ3JlZGVudGlhbHMuY2FsbCh0aGlzKTsKICAgIHRoaXMuZXhwaXJlZCA9IHRydWU7CiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKICB9LAoKICAvKioKICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhTQU1MfQogICAqCiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVycikKICAgKiAgIENhbGxlZCB3aGVuIHRoZSBTVFMgc2VydmljZSByZXNwb25kcyAob3IgZmFpbHMpLiBXaGVuCiAgICogICB0aGlzIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIG5vIGVycm9yLCBpdCBtZWFucyB0aGF0IHRoZSBjcmVkZW50aWFscwogICAqICAgaW5mb3JtYXRpb24gaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIG9iamVjdCAoYXMgdGhlIGBhY2Nlc3NLZXlJZGAsCiAgICogICBgc2VjcmV0QWNjZXNzS2V5YCwgYW5kIGBzZXNzaW9uVG9rZW5gIHByb3BlcnRpZXMpLgogICAqICAgQHBhcmFtIGVyciBbRXJyb3JdIGlmIGFuIGVycm9yIG9jY3VycmVkLCB0aGlzIHZhbHVlIHdpbGwgYmUgZmlsbGVkCiAgICogQHNlZSBnZXQKICAgKi8KICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKGNhbGxiYWNrKSB7CiAgICB0aGlzLmNvYWxlc2NlUmVmcmVzaChjYWxsYmFjayB8fCBBV1MudXRpbC5mbi5jYWxsYmFjayk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZDogZnVuY3Rpb24gbG9hZChjYWxsYmFjaykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jcmVhdGVDbGllbnRzKCk7CiAgICBzZWxmLnNlcnZpY2UuYXNzdW1lUm9sZVdpdGhTQU1MKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgaWYgKCFlcnIpIHsKICAgICAgICBzZWxmLnNlcnZpY2UuY3JlZGVudGlhbHNGcm9tKGRhdGEsIHNlbGYpOwogICAgICB9CiAgICAgIGNhbGxiYWNrKGVycik7CiAgICB9KTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjcmVhdGVDbGllbnRzOiBmdW5jdGlvbigpIHsKICAgIHRoaXMuc2VydmljZSA9IHRoaXMuc2VydmljZSB8fCBuZXcgU1RTKHtwYXJhbXM6IHRoaXMucGFyYW1zfSk7CiAgfQoKfSk7Cgp9LHsiLi4vLi4vY2xpZW50cy9zdHMiOjgsIi4uL2NvcmUiOjE4fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpOwp2YXIgU1RTID0gcmVxdWlyZSgnLi4vLi4vY2xpZW50cy9zdHMnKTsKCi8qKgogKiBSZXByZXNlbnRzIHRlbXBvcmFyeSBjcmVkZW50aWFscyByZXRyaWV2ZWQgZnJvbSB7QVdTLlNUU30uIFdpdGhvdXQgYW55CiAqIGV4dHJhIHBhcmFtZXRlcnMsIGNyZWRlbnRpYWxzIHdpbGwgYmUgZmV0Y2hlZCBmcm9tIHRoZQogKiB7QVdTLlNUUy5nZXRTZXNzaW9uVG9rZW59IG9wZXJhdGlvbi4gSWYgYW4gSUFNIHJvbGUgaXMgcHJvdmlkZWQsIHRoZQogKiB7QVdTLlNUUy5hc3N1bWVSb2xlfSBvcGVyYXRpb24gd2lsbCBiZSB1c2VkIHRvIGZldGNoIGNyZWRlbnRpYWxzIGZvciB0aGUKICogcm9sZSBpbnN0ZWFkLgogKgogKiBAbm90ZSBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMgaXMgZGVwcmVjYXRlZCwgYnV0IHJlbWFpbnMgYXZhaWxhYmxlIGZvcgogKiAgIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LiB7QVdTLkNoYWluYWJsZVRlbXBvcmFyeUNyZWRlbnRpYWxzfSBpcyB0aGUKICogICBwcmVmZXJyZWQgY2xhc3MgZm9yIHRlbXBvcmFyeSBjcmVkZW50aWFscy4KICoKICogVG8gc2V0dXAgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzLCBjb25maWd1cmUgYSBzZXQgb2YgbWFzdGVyIGNyZWRlbnRpYWxzCiAqIHVzaW5nIHRoZSBzdGFuZGFyZCBjcmVkZW50aWFscyBwcm92aWRlcnMgKGVudmlyb25tZW50LCBFQzIgaW5zdGFuY2UgbWV0YWRhdGEsCiAqIG9yIGZyb20gdGhlIGZpbGVzeXN0ZW0pLCB0aGVuIHNldCB0aGUgZ2xvYmFsIGNyZWRlbnRpYWxzIHRvIGEgbmV3CiAqIHRlbXBvcmFyeSBjcmVkZW50aWFscyBvYmplY3Q6CiAqCiAqIGBgYGphdmFzY3JpcHQKICogLy8gTm90ZSB0aGF0IGVudmlyb25tZW50IGNyZWRlbnRpYWxzIGFyZSBsb2FkZWQgYnkgZGVmYXVsdCwKICogLy8gdGhlIGZvbGxvd2luZyBsaW5lIGlzIHNob3duIGZvciBjbGFyaXR5OgogKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5FbnZpcm9ubWVudENyZWRlbnRpYWxzKCdBV1MnKTsKICoKICogLy8gTm93IHNldCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgc2VlZGVkIGZyb20gdGhlIG1hc3RlciBjcmVkZW50aWFscwogKiBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscygpOwogKgogKiAvLyBzdWJzZXF1ZW50IHJlcXVlc3RzIHdpbGwgbm93IHVzZSB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBBV1MgU1RTLgogKiBuZXcgQVdTLlMzKCkubGlzdEJ1Y2tldChmdW5jdGlvbihlcnIsIGRhdGEpIHsgLi4uIH0pOwogKiBgYGAKICoKICogQCFhdHRyaWJ1dGUgbWFzdGVyQ3JlZGVudGlhbHMKICogICBAcmV0dXJuIFtBV1MuQ3JlZGVudGlhbHNdIHRoZSBtYXN0ZXIgKG5vbi10ZW1wb3JhcnkpIGNyZWRlbnRpYWxzIHVzZWQgdG8KICogICAgIGdldCBhbmQgcmVmcmVzaCB0ZW1wb3JhcnkgY3JlZGVudGlhbHMgZnJvbSBBV1MgU1RTLgogKiBAbm90ZSAoc2VlIGNvbnN0cnVjdG9yKQogKi8KQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzID0gQVdTLnV0aWwuaW5oZXJpdChBV1MuQ3JlZGVudGlhbHMsIHsKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IHRlbXBvcmFyeSBjcmVkZW50aWFscyBvYmplY3QuCiAgICoKICAgKiBAbm90ZSBJbiBvcmRlciB0byBjcmVhdGUgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzLCB5b3UgZmlyc3QgbmVlZCB0byBoYXZlCiAgICogICAibWFzdGVyIiBjcmVkZW50aWFscyBjb25maWd1cmVkIGluIHtBV1MuQ29uZmlnLmNyZWRlbnRpYWxzfS4gVGhlc2UKICAgKiAgIG1hc3RlciBjcmVkZW50aWFscyBhcmUgbmVjZXNzYXJ5IHRvIHJldHJpZXZlIHRoZSB0ZW1wb3JhcnkgY3JlZGVudGlhbHMsCiAgICogICBhcyB3ZWxsIGFzIHJlZnJlc2ggdGhlIGNyZWRlbnRpYWxzIHdoZW4gdGhleSBleHBpcmUuCiAgICogQHBhcmFtIHBhcmFtcyBbbWFwXSBhIG1hcCBvZiBvcHRpb25zIHRoYXQgYXJlIHBhc3NlZCB0byB0aGUKICAgKiAgIHtBV1MuU1RTLmFzc3VtZVJvbGV9IG9yIHtBV1MuU1RTLmdldFNlc3Npb25Ub2tlbn0gb3BlcmF0aW9ucy4KICAgKiAgIElmIGEgYFJvbGVBcm5gIHBhcmFtZXRlciBpcyBwYXNzZWQgaW4sIGNyZWRlbnRpYWxzIHdpbGwgYmUgYmFzZWQgb24gdGhlCiAgICogICBJQU0gcm9sZS4KICAgKiBAcGFyYW0gbWFzdGVyQ3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gdGhlIG1hc3RlciAobm9uLXRlbXBvcmFyeSkgY3JlZGVudGlhbHMKICAgKiAgdXNlZCB0byBnZXQgYW5kIHJlZnJlc2ggdGVtcG9yYXJ5IGNyZWRlbnRpYWxzIGZyb20gQVdTIFNUUy4KICAgKiBAZXhhbXBsZSBDcmVhdGluZyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QgZm9yIGdlbmVyaWMgdGVtcG9yYXJ5IGNyZWRlbnRpYWxzCiAgICogICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscygpOwogICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdCBmb3IgYW4gSUFNIHJvbGUKICAgKiAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMgPSBuZXcgQVdTLlRlbXBvcmFyeUNyZWRlbnRpYWxzKHsKICAgKiAgICAgUm9sZUFybjogJ2Fybjphd3M6aWFtOjoxMjM0NTY3ODkwOnJvbGUvVGVtcG9yYXJ5Q3JlZGVudGlhbHMnLAogICAqICAgfSk7CiAgICogQHNlZSBBV1MuU1RTLmFzc3VtZVJvbGUKICAgKiBAc2VlIEFXUy5TVFMuZ2V0U2Vzc2lvblRva2VuCiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFRlbXBvcmFyeUNyZWRlbnRpYWxzKHBhcmFtcywgbWFzdGVyQ3JlZGVudGlhbHMpIHsKICAgIEFXUy5DcmVkZW50aWFscy5jYWxsKHRoaXMpOwogICAgdGhpcy5sb2FkTWFzdGVyQ3JlZGVudGlhbHMobWFzdGVyQ3JlZGVudGlhbHMpOwogICAgdGhpcy5leHBpcmVkID0gdHJ1ZTsKCiAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcyB8fCB7fTsKICAgIGlmICh0aGlzLnBhcmFtcy5Sb2xlQXJuKSB7CiAgICAgIHRoaXMucGFyYW1zLlJvbGVTZXNzaW9uTmFtZSA9CiAgICAgICAgdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lIHx8ICd0ZW1wb3JhcnktY3JlZGVudGlhbHMnOwogICAgfQogIH0sCgogIC8qKgogICAqIFJlZnJlc2hlcyBjcmVkZW50aWFscyB1c2luZyB7QVdTLlNUUy5hc3N1bWVSb2xlfSBvcgogICAqIHtBV1MuU1RTLmdldFNlc3Npb25Ub2tlbn0sIGRlcGVuZGluZyBvbiB3aGV0aGVyIGFuIElBTSByb2xlIEFSTiB3YXMgcGFzc2VkCiAgICogdG8gdGhlIGNyZWRlbnRpYWxzIHtjb25zdHJ1Y3Rvcn0uCiAgICoKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyKQogICAqICAgQ2FsbGVkIHdoZW4gdGhlIFNUUyBzZXJ2aWNlIHJlc3BvbmRzIChvciBmYWlscykuIFdoZW4KICAgKiAgIHRoaXMgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGggbm8gZXJyb3IsIGl0IG1lYW5zIHRoYXQgdGhlIGNyZWRlbnRpYWxzCiAgICogICBpbmZvcm1hdGlvbiBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgb2JqZWN0IChhcyB0aGUgYGFjY2Vzc0tleUlkYCwKICAgKiAgIGBzZWNyZXRBY2Nlc3NLZXlgLCBhbmQgYHNlc3Npb25Ub2tlbmAgcHJvcGVydGllcykuCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gaWYgYW4gZXJyb3Igb2NjdXJyZWQsIHRoaXMgdmFsdWUgd2lsbCBiZSBmaWxsZWQKICAgKiBAc2VlIGdldAogICAqLwogIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2ggKGNhbGxiYWNrKSB7CiAgICB0aGlzLmNvYWxlc2NlUmVmcmVzaChjYWxsYmFjayB8fCBBV1MudXRpbC5mbi5jYWxsYmFjayk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZDogZnVuY3Rpb24gbG9hZCAoY2FsbGJhY2spIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY3JlYXRlQ2xpZW50cygpOwogICAgc2VsZi5tYXN0ZXJDcmVkZW50aWFscy5nZXQoZnVuY3Rpb24gKCkgewogICAgICBzZWxmLnNlcnZpY2UuY29uZmlnLmNyZWRlbnRpYWxzID0gc2VsZi5tYXN0ZXJDcmVkZW50aWFsczsKICAgICAgdmFyIG9wZXJhdGlvbiA9IHNlbGYucGFyYW1zLlJvbGVBcm4gPwogICAgICAgIHNlbGYuc2VydmljZS5hc3N1bWVSb2xlIDogc2VsZi5zZXJ2aWNlLmdldFNlc3Npb25Ub2tlbjsKICAgICAgb3BlcmF0aW9uLmNhbGwoc2VsZi5zZXJ2aWNlLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgIHNlbGYuc2VydmljZS5jcmVkZW50aWFsc0Zyb20oZGF0YSwgc2VsZik7CiAgICAgICAgfQogICAgICAgIGNhbGxiYWNrKGVycik7CiAgICAgIH0pOwogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZE1hc3RlckNyZWRlbnRpYWxzOiBmdW5jdGlvbiBsb2FkTWFzdGVyQ3JlZGVudGlhbHMgKG1hc3RlckNyZWRlbnRpYWxzKSB7CiAgICB0aGlzLm1hc3RlckNyZWRlbnRpYWxzID0gbWFzdGVyQ3JlZGVudGlhbHMgfHwgQVdTLmNvbmZpZy5jcmVkZW50aWFsczsKICAgIHdoaWxlICh0aGlzLm1hc3RlckNyZWRlbnRpYWxzLm1hc3RlckNyZWRlbnRpYWxzKSB7CiAgICAgIHRoaXMubWFzdGVyQ3JlZGVudGlhbHMgPSB0aGlzLm1hc3RlckNyZWRlbnRpYWxzLm1hc3RlckNyZWRlbnRpYWxzOwogICAgfQoKICAgIGlmICh0eXBlb2YgdGhpcy5tYXN0ZXJDcmVkZW50aWFscy5nZXQgIT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5tYXN0ZXJDcmVkZW50aWFscyA9IG5ldyBBV1MuQ3JlZGVudGlhbHModGhpcy5tYXN0ZXJDcmVkZW50aWFscyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY3JlYXRlQ2xpZW50czogZnVuY3Rpb24gKCkgewogICAgdGhpcy5zZXJ2aWNlID0gdGhpcy5zZXJ2aWNlIHx8IG5ldyBTVFMoe3BhcmFtczogdGhpcy5wYXJhbXN9KTsKICB9Cgp9KTsKCn0seyIuLi8uLi9jbGllbnRzL3N0cyI6OCwiLi4vY29yZSI6MTh9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBTVFMgPSByZXF1aXJlKCcuLi8uLi9jbGllbnRzL3N0cycpOwoKLyoqCiAqIFJlcHJlc2VudHMgY3JlZGVudGlhbHMgcmV0cmlldmVkIGZyb20gU1RTIFdlYiBJZGVudGl0eSBGZWRlcmF0aW9uIHN1cHBvcnQuCiAqCiAqIEJ5IGRlZmF1bHQgdGhpcyBwcm92aWRlciBnZXRzIGNyZWRlbnRpYWxzIHVzaW5nIHRoZQogKiB7QVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5fSBzZXJ2aWNlIG9wZXJhdGlvbi4gVGhpcyBvcGVyYXRpb24KICogcmVxdWlyZXMgYSBgUm9sZUFybmAgY29udGFpbmluZyB0aGUgQVJOIG9mIHRoZSBJQU0gdHJ1c3QgcG9saWN5IGZvciB0aGUKICogYXBwbGljYXRpb24gZm9yIHdoaWNoIGNyZWRlbnRpYWxzIHdpbGwgYmUgZ2l2ZW4uIEluIGFkZGl0aW9uLCB0aGUKICogYFdlYklkZW50aXR5VG9rZW5gIG11c3QgYmUgc2V0IHRvIHRoZSB0b2tlbiBwcm92aWRlZCBieSB0aGUgaWRlbnRpdHkKICogcHJvdmlkZXIuIFNlZSB7Y29uc3RydWN0b3J9IGZvciBhbiBleGFtcGxlIG9uIGNyZWF0aW5nIGEgY3JlZGVudGlhbHMKICogb2JqZWN0IHdpdGggcHJvcGVyIGBSb2xlQXJuYCBhbmQgYFdlYklkZW50aXR5VG9rZW5gIHZhbHVlcy4KICoKICogIyMgUmVmcmVzaGluZyBDcmVkZW50aWFscyBmcm9tIElkZW50aXR5IFNlcnZpY2UKICoKICogSW4gYWRkaXRpb24gdG8gQVdTIGNyZWRlbnRpYWxzIGV4cGlyaW5nIGFmdGVyIGEgZ2l2ZW4gYW1vdW50IG9mIHRpbWUsIHRoZQogKiBsb2dpbiB0b2tlbiBmcm9tIHRoZSBpZGVudGl0eSBwcm92aWRlciB3aWxsIGFsc28gZXhwaXJlLiBPbmNlIHRoaXMgdG9rZW4KICogZXhwaXJlcywgaXQgd2lsbCBub3QgYmUgdXNhYmxlIHRvIHJlZnJlc2ggQVdTIGNyZWRlbnRpYWxzLCBhbmQgYW5vdGhlcgogKiB0b2tlbiB3aWxsIGJlIG5lZWRlZC4gVGhlIFNESyBkb2VzIG5vdCBtYW5hZ2UgcmVmcmVzaGluZyBvZiB0aGUgdG9rZW4gdmFsdWUsCiAqIGJ1dCB0aGlzIGNhbiBiZSBkb25lIHRocm91Z2ggYSAicmVmcmVzaCB0b2tlbiIgc3VwcG9ydGVkIGJ5IG1vc3QgaWRlbnRpdHkKICogcHJvdmlkZXJzLiBDb25zdWx0IHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgaWRlbnRpdHkgcHJvdmlkZXIgZm9yIHJlZnJlc2hpbmcKICogdG9rZW5zLiBPbmNlIHRoZSByZWZyZXNoZWQgdG9rZW4gaXMgYWNxdWlyZWQsIHlvdSBzaG91bGQgbWFrZSBzdXJlIHRvIHVwZGF0ZQogKiB0aGlzIG5ldyB0b2tlbiBpbiB0aGUgY3JlZGVudGlhbHMgb2JqZWN0J3Mge3BhcmFtc30gcHJvcGVydHkuIFRoZSBmb2xsb3dpbmcKICogY29kZSB3aWxsIHVwZGF0ZSB0aGUgV2ViSWRlbnRpdHlUb2tlbiwgYXNzdW1pbmcgeW91IGhhdmUgcmV0cmlldmVkIGFuIHVwZGF0ZWQKICogdG9rZW4gZnJvbSB0aGUgaWRlbnRpdHkgcHJvdmlkZXI6CiAqCiAqIGBgYGphdmFzY3JpcHQKICogQVdTLmNvbmZpZy5jcmVkZW50aWFscy5wYXJhbXMuV2ViSWRlbnRpdHlUb2tlbiA9IHVwZGF0ZWRUb2tlbjsKICogYGBgCiAqCiAqIEZ1dHVyZSBjYWxscyB0byBgY3JlZGVudGlhbHMucmVmcmVzaCgpYCB3aWxsIG5vdyB1c2UgdGhlIG5ldyB0b2tlbi4KICoKICogQCFhdHRyaWJ1dGUgcGFyYW1zCiAqICAgQHJldHVybiBbbWFwXSB0aGUgbWFwIG9mIHBhcmFtcyBwYXNzZWQgdG8KICogICAgIHtBV1MuU1RTLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHl9LiBUbyB1cGRhdGUgdGhlIHRva2VuLCBzZXQgdGhlCiAqICAgICBgcGFyYW1zLldlYklkZW50aXR5VG9rZW5gIHByb3BlcnR5LgogKiBAIWF0dHJpYnV0ZSBkYXRhCiAqICAgQHJldHVybiBbbWFwXSB0aGUgcmF3IGRhdGEgcmVzcG9uc2UgZnJvbSB0aGUgY2FsbCB0bwogKiAgICAge0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eX0uIFVzZSB0aGlzIGlmIHlvdSB3YW50IHRvIGdldAogKiAgICAgYWNjZXNzIHRvIG90aGVyIHByb3BlcnRpZXMgZnJvbSB0aGUgcmVzcG9uc2UuCiAqLwpBV1MuV2ViSWRlbnRpdHlDcmVkZW50aWFscyA9IEFXUy51dGlsLmluaGVyaXQoQVdTLkNyZWRlbnRpYWxzLCB7CiAgLyoqCiAgICogQ3JlYXRlcyBhIG5ldyBjcmVkZW50aWFscyBvYmplY3QuCiAgICogQHBhcmFtIChzZWUgQVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5KQogICAqIEBleGFtcGxlIENyZWF0aW5nIGEgbmV3IGNyZWRlbnRpYWxzIG9iamVjdAogICAqICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuV2ViSWRlbnRpdHlDcmVkZW50aWFscyh7CiAgICogICAgIFJvbGVBcm46ICdhcm46YXdzOmlhbTo6MTIzNDU2Nzg5MDpyb2xlL1dlYklkZW50aXR5JywKICAgKiAgICAgV2ViSWRlbnRpdHlUb2tlbjogJ0FCQ0RFRkdISUpLTE1OT1AnLCAvLyB0b2tlbiBmcm9tIGlkZW50aXR5IHNlcnZpY2UKICAgKiAgICAgUm9sZVNlc3Npb25OYW1lOiAnd2ViJyAvLyBvcHRpb25hbCBuYW1lLCBkZWZhdWx0cyB0byB3ZWItaWRlbnRpdHkKICAgKiAgIH0sIHsKICAgKiAgICAgLy8gb3B0aW9uYWxseSBwcm92aWRlIGNvbmZpZ3VyYXRpb24gdG8gYXBwbHkgdG8gdGhlIHVuZGVybHlpbmcgQVdTLlNUUyBzZXJ2aWNlIGNsaWVudAogICAqICAgICAvLyBpZiBjb25maWd1cmF0aW9uIGlzIG5vdCBwcm92aWRlZCwgdGhlbiBjb25maWd1cmF0aW9uIHdpbGwgYmUgcHVsbGVkIGZyb20gQVdTLmNvbmZpZwogICAqCiAgICogICAgIC8vIHNwZWNpZnkgdGltZW91dCBvcHRpb25zCiAgICogICAgIGh0dHBPcHRpb25zOiB7CiAgICogICAgICAgdGltZW91dDogMTAwCiAgICogICAgIH0KICAgKiAgIH0pOwogICAqIEBzZWUgQVdTLlNUUy5hc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5CiAgICogQHNlZSBBV1MuQ29uZmlnCiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFdlYklkZW50aXR5Q3JlZGVudGlhbHMocGFyYW1zLCBjbGllbnRDb25maWcpIHsKICAgIEFXUy5DcmVkZW50aWFscy5jYWxsKHRoaXMpOwogICAgdGhpcy5leHBpcmVkID0gdHJ1ZTsKICAgIHRoaXMucGFyYW1zID0gcGFyYW1zOwogICAgdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lID0gdGhpcy5wYXJhbXMuUm9sZVNlc3Npb25OYW1lIHx8ICd3ZWItaWRlbnRpdHknOwogICAgdGhpcy5kYXRhID0gbnVsbDsKICAgIHRoaXMuX2NsaWVudENvbmZpZyA9IEFXUy51dGlsLmNvcHkoY2xpZW50Q29uZmlnIHx8IHt9KTsKICB9LAoKICAvKioKICAgKiBSZWZyZXNoZXMgY3JlZGVudGlhbHMgdXNpbmcge0FXUy5TVFMuYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eX0KICAgKgogICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIpCiAgICogICBDYWxsZWQgd2hlbiB0aGUgU1RTIHNlcnZpY2UgcmVzcG9uZHMgKG9yIGZhaWxzKS4gV2hlbgogICAqICAgdGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBubyBlcnJvciwgaXQgbWVhbnMgdGhhdCB0aGUgY3JlZGVudGlhbHMKICAgKiAgIGluZm9ybWF0aW9uIGhhcyBiZWVuIGxvYWRlZCBpbnRvIHRoZSBvYmplY3QgKGFzIHRoZSBgYWNjZXNzS2V5SWRgLAogICAqICAgYHNlY3JldEFjY2Vzc0tleWAsIGFuZCBgc2Vzc2lvblRva2VuYCBwcm9wZXJ0aWVzKS4KICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBpZiBhbiBlcnJvciBvY2N1cnJlZCwgdGhpcyB2YWx1ZSB3aWxsIGJlIGZpbGxlZAogICAqIEBzZWUgZ2V0CiAgICovCiAgcmVmcmVzaDogZnVuY3Rpb24gcmVmcmVzaChjYWxsYmFjaykgewogICAgdGhpcy5jb2FsZXNjZVJlZnJlc2goY2FsbGJhY2sgfHwgQVdTLnV0aWwuZm4uY2FsbGJhY2spOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoY2FsbGJhY2spIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuY3JlYXRlQ2xpZW50cygpOwogICAgc2VsZi5zZXJ2aWNlLmFzc3VtZVJvbGVXaXRoV2ViSWRlbnRpdHkoZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICBzZWxmLmRhdGEgPSBudWxsOwogICAgICBpZiAoIWVycikgewogICAgICAgIHNlbGYuZGF0YSA9IGRhdGE7CiAgICAgICAgc2VsZi5zZXJ2aWNlLmNyZWRlbnRpYWxzRnJvbShkYXRhLCBzZWxmKTsKICAgICAgfQogICAgICBjYWxsYmFjayhlcnIpOwogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY3JlYXRlQ2xpZW50czogZnVuY3Rpb24oKSB7CiAgICBpZiAoIXRoaXMuc2VydmljZSkgewogICAgICB2YXIgc3RzQ29uZmlnID0gQVdTLnV0aWwubWVyZ2Uoe30sIHRoaXMuX2NsaWVudENvbmZpZyk7CiAgICAgIHN0c0NvbmZpZy5wYXJhbXMgPSB0aGlzLnBhcmFtczsKICAgICAgdGhpcy5zZXJ2aWNlID0gbmV3IFNUUyhzdHNDb25maWcpOwogICAgfQogIH0KCn0pOwoKfSx7Ii4uLy4uL2NsaWVudHMvc3RzIjo4LCIuLi9jb3JlIjoxOH1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsoZnVuY3Rpb24gKCl7CnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTsKdmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTsKdmFyIGVuZHBvaW50RGlzY292ZXJ5RW5hYmxlZEVudnMgPSBbJ0FXU19FTkFCTEVfRU5EUE9JTlRfRElTQ09WRVJZJywgJ0FXU19FTkRQT0lOVF9ESVNDT1ZFUllfRU5BQkxFRCddOwoKLyoqCiAqIEdlbmVyYXRlIGtleSAoZXhjZXB0IHJlc291cmNlcyBhbmQgb3BlcmF0aW9uIHBhcnQpIHRvIGluZGV4IHRoZSBlbmRwb2ludHMgaW4gdGhlIGNhY2hlCiAqIElmIGlucHV0IHNoYXBlIGhhcyBlbmRwb2ludGRpc2NvdmVyeWlkIHRyYWl0IHRoZW4gdXNlCiAqICAgYWNjZXNzS2V5ICsgb3BlcmF0aW9uICsgcmVzb3VyY2VzICsgcmVnaW9uICsgc2VydmljZSBhcyBjYWNoZSBrZXkKICogSWYgaW5wdXQgc2hhcGUgZG9lc24ndCBoYXZlIGVuZHBvaW50ZGlzY292ZXJ5aWQgdHJhaXQgdGhlbiB1c2UKICogICBhY2Nlc3NLZXkgKyByZWdpb24gKyBzZXJ2aWNlIGFzIGNhY2hlIGtleQogKiBAcmV0dXJuIFttYXA8U3RyaW5nLFN0cmluZz5dIG9iamVjdCB3aXRoIGtleXMgdG8gaW5kZXggZW5kcG9pbnRzLgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGdldENhY2hlS2V5KHJlcXVlc3QpIHsKICB2YXIgc2VydmljZSA9IHJlcXVlc3Quc2VydmljZTsKICB2YXIgYXBpID0gc2VydmljZS5hcGkgfHwge307CiAgdmFyIG9wZXJhdGlvbnMgPSBhcGkub3BlcmF0aW9uczsKICB2YXIgaWRlbnRpZmllcnMgPSB7fTsKICBpZiAoc2VydmljZS5jb25maWcucmVnaW9uKSB7CiAgICBpZGVudGlmaWVycy5yZWdpb24gPSBzZXJ2aWNlLmNvbmZpZy5yZWdpb247CiAgfQogIGlmIChhcGkuc2VydmljZUlkKSB7CiAgICBpZGVudGlmaWVycy5zZXJ2aWNlSWQgPSBhcGkuc2VydmljZUlkOwogIH0KICBpZiAoc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQpIHsKICAgIGlkZW50aWZpZXJzLmFjY2Vzc0tleUlkID0gc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQ7CiAgfQogIHJldHVybiBpZGVudGlmaWVyczsKfQoKLyoqCiAqIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMoKS4KICogTG9va3MgZm9yIHJlcXVpcmVkIHN0cmluZyBpbnB1dCBtZW1iZXJzIHRoYXQgaGF2ZSAnZW5kcG9pbnRkaXNjb3ZlcnlpZCcgdHJhaXQuCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gbWFyc2hhbGxDdXN0b21JZGVudGlmaWVyc0hlbHBlcihyZXN1bHQsIHBhcmFtcywgc2hhcGUpIHsKICBpZiAoIXNoYXBlIHx8IHBhcmFtcyA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcyA9PT0gbnVsbCkgcmV0dXJuOwogIGlmIChzaGFwZS50eXBlID09PSAnc3RydWN0dXJlJyAmJiBzaGFwZS5yZXF1aXJlZCAmJiBzaGFwZS5yZXF1aXJlZC5sZW5ndGggPiAwKSB7CiAgICB1dGlsLmFycmF5RWFjaChzaGFwZS5yZXF1aXJlZCwgZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgbWVtYmVyU2hhcGUgPSBzaGFwZS5tZW1iZXJzW25hbWVdOwogICAgICBpZiAobWVtYmVyU2hhcGUuZW5kcG9pbnREaXNjb3ZlcnlJZCA9PT0gdHJ1ZSkgewogICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBtZW1iZXJTaGFwZS5pc0xvY2F0aW9uTmFtZSA/IG1lbWJlclNoYXBlLm5hbWUgOiBuYW1lOwogICAgICAgIHJlc3VsdFtsb2NhdGlvbk5hbWVdID0gU3RyaW5nKHBhcmFtc1tuYW1lXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWFyc2hhbGxDdXN0b21JZGVudGlmaWVyc0hlbHBlcihyZXN1bHQsIHBhcmFtc1tuYW1lXSwgbWVtYmVyU2hhcGUpOwogICAgICB9CiAgICB9KTsKICB9Cn0KCi8qKgogKiBHZXQgY3VzdG9tIGlkZW50aWZpZXJzIGZvciBjYWNoZSBrZXkuCiAqIElkZW50aWZpZXMgY3VzdG9tIGlkZW50aWZpZXJzIGJ5IGNoZWNraW5nIGVhY2ggc2hhcGUncyBgZW5kcG9pbnREaXNjb3ZlcnlJZGAgdHJhaXQuCiAqIEBwYXJhbSBbb2JqZWN0XSByZXF1ZXN0IG9iamVjdAogKiBAcGFyYW0gW29iamVjdF0gaW5wdXQgc2hhcGUgb2YgdGhlIGdpdmVuIG9wZXJhdGlvbidzIGFwaQogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMocmVxdWVzdCwgc2hhcGUpIHsKICB2YXIgaWRlbnRpZmllcnMgPSB7fTsKICBtYXJzaGFsbEN1c3RvbUlkZW50aWZpZXJzSGVscGVyKGlkZW50aWZpZXJzLCByZXF1ZXN0LnBhcmFtcywgc2hhcGUpOwogIHJldHVybiBpZGVudGlmaWVyczsKfQoKLyoqCiAqIENhbGwgZW5kcG9pbnQgZGlzY292ZXJ5IG9wZXJhdGlvbiB3aGVuIGl0J3Mgb3B0aW9uYWwuCiAqIFdoZW4gZW5kcG9pbnQgaXMgYXZhaWxhYmxlIGluIGNhY2hlIHRoZW4gdXNlIHRoZSBjYWNoZWQgZW5kcG9pbnRzLiBJZiBlbmRwb2ludHMKICogYXJlIHVuYXZhaWxhYmxlIHRoZW4gdXNlIHJlZ2lvbmFsIGVuZHBvaW50cyBhbmQgY2FsbCBlbmRwb2ludCBkaXNjb3Zlcnkgb3BlcmF0aW9uCiAqIGFzeW5jaHJvbm91c2x5LiBUaGlzIGlzIHR1cm5lZCBvZmYgYnkgZGVmYXVsdC4KICogQHBhcmFtIFtvYmplY3RdIHJlcXVlc3Qgb2JqZWN0CiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gb3B0aW9uYWxEaXNjb3ZlckVuZHBvaW50KHJlcXVlc3QpIHsKICB2YXIgc2VydmljZSA9IHJlcXVlc3Quc2VydmljZTsKICB2YXIgYXBpID0gc2VydmljZS5hcGk7CiAgdmFyIG9wZXJhdGlvbk1vZGVsID0gYXBpLm9wZXJhdGlvbnMgPyBhcGkub3BlcmF0aW9uc1tyZXF1ZXN0Lm9wZXJhdGlvbl0gOiB1bmRlZmluZWQ7CiAgdmFyIGlucHV0U2hhcGUgPSBvcGVyYXRpb25Nb2RlbCA/IG9wZXJhdGlvbk1vZGVsLmlucHV0IDogdW5kZWZpbmVkOwoKICB2YXIgaWRlbnRpZmllcnMgPSBtYXJzaGFsbEN1c3RvbUlkZW50aWZpZXJzKHJlcXVlc3QsIGlucHV0U2hhcGUpOwogIHZhciBjYWNoZUtleSA9IGdldENhY2hlS2V5KHJlcXVlc3QpOwogIGlmIChPYmplY3Qua2V5cyhpZGVudGlmaWVycykubGVuZ3RoID4gMCkgewogICAgY2FjaGVLZXkgPSB1dGlsLnVwZGF0ZShjYWNoZUtleSwgaWRlbnRpZmllcnMpOwogICAgaWYgKG9wZXJhdGlvbk1vZGVsKSBjYWNoZUtleS5vcGVyYXRpb24gPSBvcGVyYXRpb25Nb2RlbC5uYW1lOwogIH0KICB2YXIgZW5kcG9pbnRzID0gQVdTLmVuZHBvaW50Q2FjaGUuZ2V0KGNhY2hlS2V5KTsKICBpZiAoZW5kcG9pbnRzICYmIGVuZHBvaW50cy5sZW5ndGggPT09IDEgJiYgZW5kcG9pbnRzWzBdLkFkZHJlc3MgPT09ICcnKSB7CiAgICAvL2VuZHBvaW50IG9wZXJhdGlvbiBpcyBiZWluZyBtYWRlIGJ1dCByZXNwb25zZSBub3QgeWV0IHJlY2VpdmVkCiAgICAvL29yIGVuZHBvaW50IG9wZXJhdGlvbiBqdXN0IGZhaWxlZCBpbiAxIG1pbnV0ZQogICAgcmV0dXJuOwogIH0gZWxzZSBpZiAoZW5kcG9pbnRzICYmIGVuZHBvaW50cy5sZW5ndGggPiAwKSB7CiAgICAvL2ZvdW5kIGVuZHBvaW50IHJlY29yZCBmcm9tIGNhY2hlCiAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LnVwZGF0ZUVuZHBvaW50KGVuZHBvaW50c1swXS5BZGRyZXNzKTsKICB9IGVsc2UgewogICAgLy9lbmRwb2ludCByZWNvcmQgbm90IGluIGNhY2hlIG9yIG91dGRhdGVkLiBtYWtlIGRpc2NvdmVyeSBvcGVyYXRpb24KICAgIHZhciBlbmRwb2ludFJlcXVlc3QgPSBzZXJ2aWNlLm1ha2VSZXF1ZXN0KGFwaS5lbmRwb2ludE9wZXJhdGlvbiwgewogICAgICBPcGVyYXRpb246IG9wZXJhdGlvbk1vZGVsLm5hbWUsCiAgICAgIElkZW50aWZpZXJzOiBpZGVudGlmaWVycywKICAgIH0pOwogICAgYWRkQXBpVmVyc2lvbkhlYWRlcihlbmRwb2ludFJlcXVlc3QpOwogICAgZW5kcG9pbnRSZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCd2YWxpZGF0ZScsIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlZBTElEQVRFX1BBUkFNRVRFUlMpOwogICAgZW5kcG9pbnRSZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdyZXRyeScsIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlJFVFJZX0NIRUNLKTsKICAgIC8vcHV0IGluIGEgcGxhY2Vob2xkZXIgZm9yIGVuZHBvaW50cyBhbHJlYWR5IHJlcXVlc3RlZCwgcHJldmVudAogICAgLy90b28gbXVjaCBpbi1mbGlnaHQgY2FsbHMKICAgIEFXUy5lbmRwb2ludENhY2hlLnB1dChjYWNoZUtleSwgW3sKICAgICAgQWRkcmVzczogJycsCiAgICAgIENhY2hlUGVyaW9kSW5NaW51dGVzOiAxCiAgICB9XSk7CiAgICBlbmRwb2ludFJlcXVlc3Quc2VuZChmdW5jdGlvbihlcnIsIGRhdGEpIHsKICAgICAgaWYgKGRhdGEgJiYgZGF0YS5FbmRwb2ludHMpIHsKICAgICAgICBBV1MuZW5kcG9pbnRDYWNoZS5wdXQoY2FjaGVLZXksIGRhdGEuRW5kcG9pbnRzKTsKICAgICAgfSBlbHNlIGlmIChlcnIpIHsKICAgICAgICBBV1MuZW5kcG9pbnRDYWNoZS5wdXQoY2FjaGVLZXksIFt7CiAgICAgICAgICBBZGRyZXNzOiAnJywKICAgICAgICAgIENhY2hlUGVyaW9kSW5NaW51dGVzOiAxIC8vbm90IHRvIG1ha2UgbW9yZSBlbmRwb2ludCBvcGVyYXRpb24gaW4gbmV4dCAxIG1pbnV0ZQogICAgICAgIH1dKTsKICAgICAgfQogICAgfSk7CiAgfQp9Cgp2YXIgcmVxdWVzdFF1ZXVlID0ge307CgovKioKICogQ2FsbCBlbmRwb2ludCBkaXNjb3Zlcnkgb3BlcmF0aW9uIHdoZW4gaXQncyByZXF1aXJlZC4KICogV2hlbiBlbmRwb2ludCBpcyBhdmFpbGFibGUgaW4gY2FjaGUgdGhlbiB1c2UgY2FjaGVkIG9uZXMuIElmIGVuZHBvaW50cyBhcmUKICogdW5hdmFpbGFibGUgdGhlbiBTREsgc2hvdWxkIGNhbGwgZW5kcG9pbnQgb3BlcmF0aW9uIHRoZW4gdXNlIHJldHVybmVkIG5ldwogKiBlbmRwb2ludCBmb3IgdGhlIGFwaSBjYWxsLiBTREsgd2lsbCBhdXRvbWF0aWNhbGx5IGF0dGVtcHQgdG8gZG8gZW5kcG9pbnQKICogZGlzY292ZXJ5LiBUaGlzIGlzIHR1cm5lZCBvZmYgYnkgZGVmYXVsdAogKiBAcGFyYW0gW29iamVjdF0gcmVxdWVzdCBvYmplY3QKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiByZXF1aXJlZERpc2NvdmVyRW5kcG9pbnQocmVxdWVzdCwgZG9uZSkgewogIHZhciBzZXJ2aWNlID0gcmVxdWVzdC5zZXJ2aWNlOwogIHZhciBhcGkgPSBzZXJ2aWNlLmFwaTsKICB2YXIgb3BlcmF0aW9uTW9kZWwgPSBhcGkub3BlcmF0aW9ucyA/IGFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXSA6IHVuZGVmaW5lZDsKICB2YXIgaW5wdXRTaGFwZSA9IG9wZXJhdGlvbk1vZGVsID8gb3BlcmF0aW9uTW9kZWwuaW5wdXQgOiB1bmRlZmluZWQ7CgogIHZhciBpZGVudGlmaWVycyA9IG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMocmVxdWVzdCwgaW5wdXRTaGFwZSk7CiAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkocmVxdWVzdCk7CiAgaWYgKE9iamVjdC5rZXlzKGlkZW50aWZpZXJzKS5sZW5ndGggPiAwKSB7CiAgICBjYWNoZUtleSA9IHV0aWwudXBkYXRlKGNhY2hlS2V5LCBpZGVudGlmaWVycyk7CiAgICBpZiAob3BlcmF0aW9uTW9kZWwpIGNhY2hlS2V5Lm9wZXJhdGlvbiA9IG9wZXJhdGlvbk1vZGVsLm5hbWU7CiAgfQogIHZhciBjYWNoZUtleVN0ciA9IEFXUy5FbmRwb2ludENhY2hlLmdldEtleVN0cmluZyhjYWNoZUtleSk7CiAgdmFyIGVuZHBvaW50cyA9IEFXUy5lbmRwb2ludENhY2hlLmdldChjYWNoZUtleVN0cik7IC8vZW5kcG9pbnQgY2FjaGUgYWxzbyBhY2NlcHRzIHN0cmluZyBrZXlzCiAgaWYgKGVuZHBvaW50cyAmJiBlbmRwb2ludHMubGVuZ3RoID09PSAxICYmIGVuZHBvaW50c1swXS5BZGRyZXNzID09PSAnJykgewogICAgLy9lbmRwb2ludCBvcGVyYXRpb24gaXMgYmVpbmcgbWFkZSBidXQgcmVzcG9uc2Ugbm90IHlldCByZWNlaXZlZAogICAgLy9wdXNoIHJlcXVlc3Qgb2JqZWN0IHRvIGEgcGVuZGluZyBxdWV1ZQogICAgaWYgKCFyZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdKSByZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdID0gW107CiAgICByZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdLnB1c2goe3JlcXVlc3Q6IHJlcXVlc3QsIGNhbGxiYWNrOiBkb25lfSk7CiAgICByZXR1cm47CiAgfSBlbHNlIGlmIChlbmRwb2ludHMgJiYgZW5kcG9pbnRzLmxlbmd0aCA+IDApIHsKICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQoZW5kcG9pbnRzWzBdLkFkZHJlc3MpOwogICAgZG9uZSgpOwogIH0gZWxzZSB7CiAgICB2YXIgZW5kcG9pbnRSZXF1ZXN0ID0gc2VydmljZS5tYWtlUmVxdWVzdChhcGkuZW5kcG9pbnRPcGVyYXRpb24sIHsKICAgICAgT3BlcmF0aW9uOiBvcGVyYXRpb25Nb2RlbC5uYW1lLAogICAgICBJZGVudGlmaWVyczogaWRlbnRpZmllcnMsCiAgICB9KTsKICAgIGVuZHBvaW50UmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9QQVJBTUVURVJTKTsKICAgIGFkZEFwaVZlcnNpb25IZWFkZXIoZW5kcG9pbnRSZXF1ZXN0KTsKCiAgICAvL3B1dCBpbiBhIHBsYWNlaG9sZGVyIGZvciBlbmRwb2ludHMgYWxyZWFkeSByZXF1ZXN0ZWQsIHByZXZlbnQKICAgIC8vdG9vIG11Y2ggaW4tZmxpZ2h0IGNhbGxzCiAgICBBV1MuZW5kcG9pbnRDYWNoZS5wdXQoY2FjaGVLZXlTdHIsIFt7CiAgICAgIEFkZHJlc3M6ICcnLAogICAgICBDYWNoZVBlcmlvZEluTWludXRlczogNjAgLy9sb25nLWxpdmUgY2FjaGUKICAgIH1dKTsKICAgIGVuZHBvaW50UmVxdWVzdC5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgdmFyIGVycm9yUGFyYW1zID0gewogICAgICAgICAgY29kZTogJ0VuZHBvaW50RGlzY292ZXJ5RXhjZXB0aW9uJywKICAgICAgICAgIG1lc3NhZ2U6ICdSZXF1ZXN0IGNhbm5vdCBiZSBmdWxmaWxsZWQgd2l0aG91dCBzcGVjaWZ5aW5nIGFuIGVuZHBvaW50JywKICAgICAgICAgIHJldHJ5YWJsZTogZmFsc2UKICAgICAgICB9OwogICAgICAgIHJlcXVlc3QucmVzcG9uc2UuZXJyb3IgPSB1dGlsLmVycm9yKGVyciwgZXJyb3JQYXJhbXMpOwogICAgICAgIEFXUy5lbmRwb2ludENhY2hlLnJlbW92ZShjYWNoZUtleSk7CgogICAgICAgIC8vZmFpbCBhbGwgdGhlIHBlbmRpbmcgcmVxdWVzdHMgaW4gYmF0Y2gKICAgICAgICBpZiAocmVxdWVzdFF1ZXVlW2NhY2hlS2V5U3RyXSkgewogICAgICAgICAgdmFyIHBlbmRpbmdSZXF1ZXN0cyA9IHJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl07CiAgICAgICAgICB1dGlsLmFycmF5RWFjaChwZW5kaW5nUmVxdWVzdHMsIGZ1bmN0aW9uKHJlcXVlc3RDb250ZXh0KSB7CiAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0LnJlcXVlc3QucmVzcG9uc2UuZXJyb3IgPSB1dGlsLmVycm9yKGVyciwgZXJyb3JQYXJhbXMpOwogICAgICAgICAgICByZXF1ZXN0Q29udGV4dC5jYWxsYmFjaygpOwogICAgICAgICAgfSk7CiAgICAgICAgICBkZWxldGUgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5U3RyXTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoZGF0YSkgewogICAgICAgIEFXUy5lbmRwb2ludENhY2hlLnB1dChjYWNoZUtleVN0ciwgZGF0YS5FbmRwb2ludHMpOwogICAgICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QudXBkYXRlRW5kcG9pbnQoZGF0YS5FbmRwb2ludHNbMF0uQWRkcmVzcyk7CgogICAgICAgIC8vdXBkYXRlIHRoZSBlbmRwb2ludCBmb3IgYWxsIHRoZSBwZW5kaW5nIHJlcXVlc3RzIGluIGJhdGNoCiAgICAgICAgaWYgKHJlcXVlc3RRdWV1ZVtjYWNoZUtleVN0cl0pIHsKICAgICAgICAgIHZhciBwZW5kaW5nUmVxdWVzdHMgPSByZXF1ZXN0UXVldWVbY2FjaGVLZXlTdHJdOwogICAgICAgICAgdXRpbC5hcnJheUVhY2gocGVuZGluZ1JlcXVlc3RzLCBmdW5jdGlvbihyZXF1ZXN0Q29udGV4dCkgewogICAgICAgICAgICByZXF1ZXN0Q29udGV4dC5yZXF1ZXN0Lmh0dHBSZXF1ZXN0LnVwZGF0ZUVuZHBvaW50KGRhdGEuRW5kcG9pbnRzWzBdLkFkZHJlc3MpOwogICAgICAgICAgICByZXF1ZXN0Q29udGV4dC5jYWxsYmFjaygpOwogICAgICAgICAgfSk7CiAgICAgICAgICBkZWxldGUgcmVxdWVzdFF1ZXVlW2NhY2hlS2V5U3RyXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZG9uZSgpOwogICAgfSk7CiAgfQp9CgovKioKICogYWRkIGFwaSB2ZXJzaW9uIGhlYWRlciB0byBlbmRwb2ludCBvcGVyYXRpb24KICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBhZGRBcGlWZXJzaW9uSGVhZGVyKGVuZHBvaW50UmVxdWVzdCkgewogIHZhciBhcGkgPSBlbmRwb2ludFJlcXVlc3Quc2VydmljZS5hcGk7CiAgdmFyIGFwaVZlcnNpb24gPSBhcGkuYXBpVmVyc2lvbjsKICBpZiAoYXBpVmVyc2lvbiAmJiAhZW5kcG9pbnRSZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ3gtYW16LWFwaS12ZXJzaW9uJ10pIHsKICAgIGVuZHBvaW50UmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWyd4LWFtei1hcGktdmVyc2lvbiddID0gYXBpVmVyc2lvbjsKICB9Cn0KCi8qKgogKiBJZiBhcGkgY2FsbCBnZXRzIGludmFsaWQgZW5kcG9pbnQgZXhjZXB0aW9uLCBTREsgc2hvdWxkIGF0dGVtcHQgdG8gcmVtb3ZlIHRoZSBpbnZhbGlkCiAqIGVuZHBvaW50IGZyb20gY2FjaGUuCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gaW52YWxpZGF0ZUNhY2hlZEVuZHBvaW50cyhyZXNwb25zZSkgewogIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yOwogIHZhciBodHRwUmVzcG9uc2UgPSByZXNwb25zZS5odHRwUmVzcG9uc2U7CiAgaWYgKGVycm9yICYmCiAgICAoZXJyb3IuY29kZSA9PT0gJ0ludmFsaWRFbmRwb2ludEV4Y2VwdGlvbicgfHwgaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQyMSkKICApIHsKICAgIHZhciByZXF1ZXN0ID0gcmVzcG9uc2UucmVxdWVzdDsKICAgIHZhciBvcGVyYXRpb25zID0gcmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zIHx8IHt9OwogICAgdmFyIGlucHV0U2hhcGUgPSBvcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXSA/IG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dLmlucHV0IDogdW5kZWZpbmVkOwogICAgdmFyIGlkZW50aWZpZXJzID0gbWFyc2hhbGxDdXN0b21JZGVudGlmaWVycyhyZXF1ZXN0LCBpbnB1dFNoYXBlKTsKICAgIHZhciBjYWNoZUtleSA9IGdldENhY2hlS2V5KHJlcXVlc3QpOwogICAgaWYgKE9iamVjdC5rZXlzKGlkZW50aWZpZXJzKS5sZW5ndGggPiAwKSB7CiAgICAgIGNhY2hlS2V5ID0gdXRpbC51cGRhdGUoY2FjaGVLZXksIGlkZW50aWZpZXJzKTsKICAgICAgaWYgKG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dKSBjYWNoZUtleS5vcGVyYXRpb24gPSBvcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXS5uYW1lOwogICAgfQogICAgQVdTLmVuZHBvaW50Q2FjaGUucmVtb3ZlKGNhY2hlS2V5KTsKICB9Cn0KCi8qKgogKiBJZiBlbmRwb2ludCBpcyBleHBsaWNpdGx5IGNvbmZpZ3VyZWQsIFNESyBzaG91bGQgbm90IGRvIGVuZHBvaW50IGRpc2NvdmVyeSBpbiBhbnl0aW1lLgogKiBAcGFyYW0gW29iamVjdF0gY2xpZW50IFNlcnZpY2UgY2xpZW50IG9iamVjdC4KICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBoYXNDdXN0b21FbmRwb2ludChjbGllbnQpIHsKICAvL2lmIHNldCBlbmRwb2ludCBpcyBzZXQgZm9yIHNwZWNpZmljIGNsaWVudCwgZW5hYmxlIGVuZHBvaW50IGRpc2NvdmVyeSB3aWxsIHJhaXNlIGFuIGVycm9yLgogIGlmIChjbGllbnQuX29yaWdpbmFsQ29uZmlnICYmIGNsaWVudC5fb3JpZ2luYWxDb25maWcuZW5kcG9pbnQgJiYgY2xpZW50Ll9vcmlnaW5hbENvbmZpZy5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWQgPT09IHRydWUpIHsKICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHsKICAgICAgY29kZTogJ0NvbmZpZ3VyYXRpb25FeGNlcHRpb24nLAogICAgICBtZXNzYWdlOiAnQ3VzdG9tIGVuZHBvaW50IGlzIHN1cHBsaWVkOyBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQgbXVzdCBub3QgYmUgdHJ1ZS4nCiAgICB9KTsKICB9OwogIHZhciBzdmNDb25maWcgPSBBV1MuY29uZmlnW2NsaWVudC5zZXJ2aWNlSWRlbnRpZmllcl0gfHwge307CiAgcmV0dXJuIEJvb2xlYW4oQVdTLmNvbmZpZy5lbmRwb2ludCB8fCBzdmNDb25maWcuZW5kcG9pbnQgfHwgKGNsaWVudC5fb3JpZ2luYWxDb25maWcgJiYgY2xpZW50Ll9vcmlnaW5hbENvbmZpZy5lbmRwb2ludCkpOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBpc0ZhbHN5KHZhbHVlKSB7CiAgcmV0dXJuIFsnZmFsc2UnLCAnMCddLmluZGV4T2YodmFsdWUpID49IDA7Cn0KCi8qKgogKiBJZiBlbmRwb2ludCBkaXNjb3Zlcnkgc2hvdWxkIHBlcmZvcm0gZm9yIHRoaXMgcmVxdWVzdCB3aGVuIGVuZHBvaW50IGRpc2NvdmVyeSBpcyBvcHRpb25hbC4KICogU0RLIHBlcmZvcm1zIGNvbmZpZyByZXNvbHV0aW9uIGluIG9yZGVyIGxpa2UgYmVsb3c6CiAqIDEuIElmIHR1cm5lZCBvbiBjbGllbnQgY29uZmlndXJhdGlvbihkZWZhdWx0IHRvIG9mZikgdGhlbiB0dXJuIG9uIGVuZHBvaW50IGRpc2NvdmVyeS4KICogMi4gSWYgdHVybmVkIG9uIGluIGVudiBBV1NfRU5BQkxFX0VORFBPSU5UX0RJU0NPVkVSWSB0aGVuIHR1cm4gb24gZW5kcG9pbnQgZGlzY292ZXJ5LgogKiAzLiBJZiB0dXJuZWQgb24gaW4gc2hhcmVkIGluaSBjb25maWcgZmlsZSB3aXRoIGtleSAnZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQnLCB0aGVuCiAqICAgdHVybiBvbiBlbmRwb2ludCBkaXNjb3ZlcnkuCiAqIEBwYXJhbSBbb2JqZWN0XSByZXF1ZXN0IHJlcXVlc3Qgb2JqZWN0LgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGlzRW5kcG9pbnREaXNjb3ZlcnlBcHBsaWNhYmxlKHJlcXVlc3QpIHsKICB2YXIgc2VydmljZSA9IHJlcXVlc3Quc2VydmljZSB8fCB7fTsKICBpZiAoc2VydmljZS5jb25maWcuZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID09PSB0cnVlKSByZXR1cm4gdHJ1ZTsKCiAgLy9zaGFyZWQgaW5pIGZpbGUgaXMgb25seSBhdmFpbGFibGUgaW4gTm9kZQogIC8vbm90IHRvIGNoZWNrIGVudiBpbiBicm93c2VyCiAgaWYgKHV0aWwuaXNCcm93c2VyKCkpIHJldHVybiBmYWxzZTsKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWRFbnZzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZW52ID0gZW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkRW52c1tpXTsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvY2Vzcy5lbnYsIGVudikpIHsKICAgICAgaWYgKHByb2Nlc3MuZW52W2Vudl0gPT09ICcnIHx8IHByb2Nlc3MuZW52W2Vudl0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHsKICAgICAgICAgIGNvZGU6ICdDb25maWd1cmF0aW9uRXhjZXB0aW9uJywKICAgICAgICAgIG1lc3NhZ2U6ICdlbnZpcm9ubWVudGFsIHZhcmlhYmxlICcgKyBlbnYgKyAnIGNhbm5vdCBiZSBzZXQgdG8gbm90aGluZycKICAgICAgICB9KTsKICAgICAgfQogICAgICBpZiAoIWlzRmFsc3kocHJvY2Vzcy5lbnZbZW52XSkpIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgdmFyIGNvbmZpZ0ZpbGUgPSB7fTsKICB0cnkgewogICAgY29uZmlnRmlsZSA9IEFXUy51dGlsLmluaUxvYWRlciA/IEFXUy51dGlsLmluaUxvYWRlci5sb2FkRnJvbSh7CiAgICAgIGlzQ29uZmlnOiB0cnVlLAogICAgICBmaWxlbmFtZTogcHJvY2Vzcy5lbnZbQVdTLnV0aWwuc2hhcmVkQ29uZmlnRmlsZUVudl0KICAgIH0pIDoge307CiAgfSBjYXRjaCAoZSkge30KICB2YXIgc2hhcmVkRmlsZUNvbmZpZyA9IGNvbmZpZ0ZpbGVbCiAgICBwcm9jZXNzLmVudi5BV1NfUFJPRklMRSB8fCBBV1MudXRpbC5kZWZhdWx0UHJvZmlsZQogIF0gfHwge307CiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzaGFyZWRGaWxlQ29uZmlnLCAnZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQnKSkgewogICAgaWYgKHNoYXJlZEZpbGVDb25maWcuZW5kcG9pbnRfZGlzY292ZXJ5X2VuYWJsZWQgPT09IHVuZGVmaW5lZCkgewogICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgICAgY29kZTogJ0NvbmZpZ3VyYXRpb25FeGNlcHRpb24nLAogICAgICAgIG1lc3NhZ2U6ICdjb25maWcgZmlsZSBlbnRyeSBcJ2VuZHBvaW50X2Rpc2NvdmVyeV9lbmFibGVkXCcgY2Fubm90IGJlIHNldCB0byBub3RoaW5nJwogICAgICB9KTsKICAgIH0KICAgIGlmICghaXNGYWxzeShzaGFyZWRGaWxlQ29uZmlnLmVuZHBvaW50X2Rpc2NvdmVyeV9lbmFibGVkKSkgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBmYWxzZTsKfQoKLyoqCiAqIGF0dGFjaCBlbmRwb2ludCBkaXNjb3ZlcnkgbG9naWMgdG8gcmVxdWVzdCBvYmplY3QKICogQHBhcmFtIFtvYmplY3RdIHJlcXVlc3QKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBkaXNjb3ZlckVuZHBvaW50KHJlcXVlc3QsIGRvbmUpIHsKICB2YXIgc2VydmljZSA9IHJlcXVlc3Quc2VydmljZSB8fCB7fTsKICBpZiAoaGFzQ3VzdG9tRW5kcG9pbnQoc2VydmljZSkgfHwgcmVxdWVzdC5pc1ByZXNpZ25lZCgpKSByZXR1cm4gZG9uZSgpOwoKICBpZiAoIWlzRW5kcG9pbnREaXNjb3ZlcnlBcHBsaWNhYmxlKHJlcXVlc3QpKSByZXR1cm4gZG9uZSgpOwoKICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KCdlbmRwb2ludC1kaXNjb3ZlcnknKTsKCiAgdmFyIG9wZXJhdGlvbnMgPSBzZXJ2aWNlLmFwaS5vcGVyYXRpb25zIHx8IHt9OwogIHZhciBvcGVyYXRpb25Nb2RlbCA9IG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dOwogIHZhciBpc0VuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWQgPSBvcGVyYXRpb25Nb2RlbCA/IG9wZXJhdGlvbk1vZGVsLmVuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWQgOiAnTlVMTCc7CiAgc3dpdGNoIChpc0VuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWQpIHsKICAgIGNhc2UgJ09QVElPTkFMJzoKICAgICAgb3B0aW9uYWxEaXNjb3ZlckVuZHBvaW50KHJlcXVlc3QpOwogICAgICByZXF1ZXN0LmFkZE5hbWVkTGlzdGVuZXIoJ0lOVkFMSURBVEVfQ0FDSEVEX0VORFBPSU5UUycsICdleHRyYWN0RXJyb3InLCBpbnZhbGlkYXRlQ2FjaGVkRW5kcG9pbnRzKTsKICAgICAgZG9uZSgpOwogICAgICBicmVhazsKICAgIGNhc2UgJ1JFUVVJUkVEJzoKICAgICAgcmVxdWVzdC5hZGROYW1lZExpc3RlbmVyKCdJTlZBTElEQVRFX0NBQ0hFRF9FTkRQT0lOVFMnLCAnZXh0cmFjdEVycm9yJywgaW52YWxpZGF0ZUNhY2hlZEVuZHBvaW50cyk7CiAgICAgIHJlcXVpcmVkRGlzY292ZXJFbmRwb2ludChyZXF1ZXN0LCBkb25lKTsKICAgICAgYnJlYWs7CiAgICBjYXNlICdOVUxMJzoKICAgIGRlZmF1bHQ6CiAgICAgIGRvbmUoKTsKICAgICAgYnJlYWs7CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBkaXNjb3ZlckVuZHBvaW50OiBkaXNjb3ZlckVuZHBvaW50LAogIHJlcXVpcmVkRGlzY292ZXJFbmRwb2ludDogcmVxdWlyZWREaXNjb3ZlckVuZHBvaW50LAogIG9wdGlvbmFsRGlzY292ZXJFbmRwb2ludDogb3B0aW9uYWxEaXNjb3ZlckVuZHBvaW50LAogIG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnM6IG1hcnNoYWxsQ3VzdG9tSWRlbnRpZmllcnMsCiAgZ2V0Q2FjaGVLZXk6IGdldENhY2hlS2V5LAogIGludmFsaWRhdGVDYWNoZWRFbmRwb2ludDogaW52YWxpZGF0ZUNhY2hlZEVuZHBvaW50cywKfTsKCn0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKfSx7Ii4vY29yZSI6MTgsIi4vdXRpbCI6NzEsIl9wcm9jZXNzIjo4Nn1dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGV2ZW50TWVzc2FnZUNodW5rZXIgPSByZXF1aXJlKCcuLi9ldmVudC1zdHJlYW0vZXZlbnQtbWVzc2FnZS1jaHVua2VyJykuZXZlbnRNZXNzYWdlQ2h1bmtlcjsKdmFyIHBhcnNlRXZlbnQgPSByZXF1aXJlKCcuL3BhcnNlLWV2ZW50JykucGFyc2VFdmVudDsKCmZ1bmN0aW9uIGNyZWF0ZUV2ZW50U3RyZWFtKGJvZHksIHBhcnNlciwgbW9kZWwpIHsKICAgIHZhciBldmVudE1lc3NhZ2VzID0gZXZlbnRNZXNzYWdlQ2h1bmtlcihib2R5KTsKCiAgICB2YXIgZXZlbnRzID0gW107CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudE1lc3NhZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZXZlbnRzLnB1c2gocGFyc2VFdmVudChwYXJzZXIsIGV2ZW50TWVzc2FnZXNbaV0sIG1vZGVsKSk7CiAgICB9CgogICAgcmV0dXJuIGV2ZW50czsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSB7CiAgICBjcmVhdGVFdmVudFN0cmVhbTogY3JlYXRlRXZlbnRTdHJlYW0KfTsKCn0seyIuLi9ldmVudC1zdHJlYW0vZXZlbnQtbWVzc2FnZS1jaHVua2VyIjoyOCwiLi9wYXJzZS1ldmVudCI6MzB9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBUYWtlcyBpbiBhIGJ1ZmZlciBvZiBldmVudCBtZXNzYWdlcyBhbmQgc3BsaXRzIHRoZW0gaW50byBpbmRpdmlkdWFsIG1lc3NhZ2VzLgogKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gZXZlbnRNZXNzYWdlQ2h1bmtlcihidWZmZXIpIHsKICAgIC8qKiBAdHlwZSBCdWZmZXJbXSAqLwogICAgdmFyIG1lc3NhZ2VzID0gW107CiAgICB2YXIgb2Zmc2V0ID0gMDsKCiAgICB3aGlsZSAob2Zmc2V0IDwgYnVmZmVyLmxlbmd0aCkgewogICAgICAgIHZhciB0b3RhbExlbmd0aCA9IGJ1ZmZlci5yZWFkSW50MzJCRShvZmZzZXQpOwoKICAgICAgICAvLyBjcmVhdGUgbmV3IGJ1ZmZlciBmb3IgaW5kaXZpZHVhbCBtZXNzYWdlIChzaGFyZXMgbWVtb3J5IHdpdGggb3JpZ2luYWwpCiAgICAgICAgdmFyIG1lc3NhZ2UgPSBidWZmZXIuc2xpY2Uob2Zmc2V0LCB0b3RhbExlbmd0aCArIG9mZnNldCk7CiAgICAgICAgLy8gaW5jcmVtZW50IG9mZnNldCB0byBpdCBzdGFydHMgYXQgdGhlIG5leHQgbWVzc2FnZQogICAgICAgIG9mZnNldCArPSB0b3RhbExlbmd0aDsKCiAgICAgICAgbWVzc2FnZXMucHVzaChtZXNzYWdlKTsKICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZXM7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgZXZlbnRNZXNzYWdlQ2h1bmtlcjogZXZlbnRNZXNzYWdlQ2h1bmtlcgp9OwoKfSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL2NvcmUnKS51dGlsOwp2YXIgdG9CdWZmZXIgPSB1dGlsLmJ1ZmZlci50b0J1ZmZlcjsKCi8qKgogKiBBIGxvc3NsZXNzIHJlcHJlc2VudGF0aW9uIG9mIGEgc2lnbmVkLCA2NC1iaXQgaW50ZWdlci4gSW5zdGFuY2VzIG9mIHRoaXMKICogY2xhc3MgbWF5IGJlIHVzZWQgaW4gYXJpdGhtZXRpYyBleHByZXNzaW9ucyBhcyBpZiB0aGV5IHdlcmUgbnVtZXJpYwogKiBwcmltaXRpdmVzLCBidXQgdGhlIGJpbmFyeSByZXByZXNlbnRhdGlvbiB3aWxsIGJlIHByZXNlcnZlZCB1bmNoYW5nZWQgYXMgdGhlCiAqIGBieXRlc2AgcHJvcGVydHkgb2YgdGhlIG9iamVjdC4gVGhlIGJ5dGVzIHNob3VsZCBiZSBlbmNvZGVkIGFzIGJpZy1lbmRpYW4sCiAqIHR3bydzIGNvbXBsZW1lbnQgaW50ZWdlcnMuCiAqIEBwYXJhbSB7QnVmZmVyfSBieXRlcwogKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIEludDY0KGJ5dGVzKSB7CiAgICBpZiAoYnl0ZXMubGVuZ3RoICE9PSA4KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnQ2NCBidWZmZXJzIG11c3QgYmUgZXhhY3RseSA4IGJ5dGVzJyk7CiAgICB9CiAgICBpZiAoIXV0aWwuQnVmZmVyLmlzQnVmZmVyKGJ5dGVzKSkgYnl0ZXMgPSB0b0J1ZmZlcihieXRlcyk7CgogICAgdGhpcy5ieXRlcyA9IGJ5dGVzOwp9CgovKioKICogQHBhcmFtIHtudW1iZXJ9IG51bWJlcgogKiBAcmV0dXJucyB7SW50NjR9CiAqCiAqIEBhcGkgcHJpdmF0ZQogKi8KSW50NjQuZnJvbU51bWJlciA9IGZ1bmN0aW9uKG51bWJlcikgewogICAgaWYgKG51bWJlciA+IDkyMjMzNzIwMzY4NTQ3NzU4MDcgfHwgbnVtYmVyIDwgLTkyMjMzNzIwMzY4NTQ3NzU4MDgpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgICAgIG51bWJlciArICcgaXMgdG9vIGxhcmdlIChvciwgaWYgbmVnYXRpdmUsIHRvbyBzbWFsbCkgdG8gcmVwcmVzZW50IGFzIGFuIEludDY0JwogICAgICAgICk7CiAgICB9CgogICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoOCk7CiAgICBmb3IgKAogICAgICAgIHZhciBpID0gNywgcmVtYWluaW5nID0gTWF0aC5hYnMoTWF0aC5yb3VuZChudW1iZXIpKTsKICAgICAgICBpID4gLTEgJiYgcmVtYWluaW5nID4gMDsKICAgICAgICBpLS0sIHJlbWFpbmluZyAvPSAyNTYKICAgICkgewogICAgICAgIGJ5dGVzW2ldID0gcmVtYWluaW5nOwogICAgfQoKICAgIGlmIChudW1iZXIgPCAwKSB7CiAgICAgICAgbmVnYXRlKGJ5dGVzKTsKICAgIH0KCiAgICByZXR1cm4gbmV3IEludDY0KGJ5dGVzKTsKfTsKCi8qKgogKiBAcmV0dXJucyB7bnVtYmVyfQogKgogKiBAYXBpIHByaXZhdGUKICovCkludDY0LnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYnl0ZXMgPSB0aGlzLmJ5dGVzLnNsaWNlKDApOwogICAgdmFyIG5lZ2F0aXZlID0gYnl0ZXNbMF0gJiAxMjg7CiAgICBpZiAobmVnYXRpdmUpIHsKICAgICAgICBuZWdhdGUoYnl0ZXMpOwogICAgfQoKICAgIHJldHVybiBwYXJzZUludChieXRlcy50b1N0cmluZygnaGV4JyksIDE2KSAqIChuZWdhdGl2ZSA/IC0xIDogMSk7Cn07CgpJbnQ2NC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiBTdHJpbmcodGhpcy52YWx1ZU9mKCkpOwp9OwoKLyoqCiAqIEBwYXJhbSB7QnVmZmVyfSBieXRlcwogKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIG5lZ2F0ZShieXRlcykgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHsKICAgICAgICBieXRlc1tpXSBePSAweEZGOwogICAgfQogICAgZm9yICh2YXIgaSA9IDc7IGkgPiAtMTsgaS0tKSB7CiAgICAgICAgYnl0ZXNbaV0rKzsKICAgICAgICBpZiAoYnl0ZXNbaV0gIT09IDApIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgfQp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IHsKICAgIEludDY0OiBJbnQ2NAp9OwoKfSx7Ii4uL2NvcmUiOjE4fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcGFyc2VNZXNzYWdlID0gcmVxdWlyZSgnLi9wYXJzZS1tZXNzYWdlJykucGFyc2VNZXNzYWdlOwoKLyoqCiAqCiAqIEBwYXJhbSB7Kn0gcGFyc2VyCiAqIEBwYXJhbSB7QnVmZmVyfSBtZXNzYWdlCiAqIEBwYXJhbSB7Kn0gc2hhcGUKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBwYXJzZUV2ZW50KHBhcnNlciwgbWVzc2FnZSwgc2hhcGUpIHsKICAgIHZhciBwYXJzZWRNZXNzYWdlID0gcGFyc2VNZXNzYWdlKG1lc3NhZ2UpOwoKICAgIC8vIGNoZWNrIGlmIG1lc3NhZ2UgaXMgYW4gZXZlbnQgb3IgZXJyb3IKICAgIHZhciBtZXNzYWdlVHlwZSA9IHBhcnNlZE1lc3NhZ2UuaGVhZGVyc1snOm1lc3NhZ2UtdHlwZSddOwogICAgaWYgKG1lc3NhZ2VUeXBlKSB7CiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlLnZhbHVlID09PSAnZXJyb3InKSB7CiAgICAgICAgICAgIHRocm93IHBhcnNlRXJyb3IocGFyc2VkTWVzc2FnZSk7CiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlVHlwZS52YWx1ZSAhPT0gJ2V2ZW50JykgewogICAgICAgICAgICAvLyBub3Qgc3VyZSBob3cgdG8gcGFyc2Ugbm9uLWV2ZW50cy9ub24tZXJyb3JzLCBpZ25vcmUgZm9yIG5vdwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQoKICAgIC8vIGRldGVybWluZSBldmVudCB0eXBlCiAgICB2YXIgZXZlbnRUeXBlID0gcGFyc2VkTWVzc2FnZS5oZWFkZXJzWyc6ZXZlbnQtdHlwZSddOwogICAgLy8gY2hlY2sgdGhhdCB0aGUgZXZlbnQgdHlwZSBpcyBtb2RlbGVkCiAgICB2YXIgZXZlbnRNb2RlbCA9IHNoYXBlLm1lbWJlcnNbZXZlbnRUeXBlLnZhbHVlXTsKICAgIGlmICghZXZlbnRNb2RlbCkgewogICAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgcmVzdWx0ID0ge307CiAgICAvLyBjaGVjayBpZiBhbiBldmVudCBwYXlsb2FkIGV4aXN0cwogICAgdmFyIGV2ZW50UGF5bG9hZE1lbWJlck5hbWUgPSBldmVudE1vZGVsLmV2ZW50UGF5bG9hZE1lbWJlck5hbWU7CiAgICBpZiAoZXZlbnRQYXlsb2FkTWVtYmVyTmFtZSkgewogICAgICAgIHZhciBwYXlsb2FkU2hhcGUgPSBldmVudE1vZGVsLm1lbWJlcnNbZXZlbnRQYXlsb2FkTWVtYmVyTmFtZV07CiAgICAgICAgLy8gaWYgdGhlIHNoYXBlIGlzIGJpbmFyeSwgcmV0dXJuIHRoZSBieXRlIGFycmF5CiAgICAgICAgaWYgKHBheWxvYWRTaGFwZS50eXBlID09PSAnYmluYXJ5JykgewogICAgICAgICAgICByZXN1bHRbZXZlbnRQYXlsb2FkTWVtYmVyTmFtZV0gPSBwYXJzZWRNZXNzYWdlLmJvZHk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0W2V2ZW50UGF5bG9hZE1lbWJlck5hbWVdID0gcGFyc2VyLnBhcnNlKHBhcnNlZE1lc3NhZ2UuYm9keS50b1N0cmluZygpLCBwYXlsb2FkU2hhcGUpOwogICAgICAgIH0KICAgIH0KCiAgICAvLyByZWFkIGV2ZW50IGhlYWRlcnMKICAgIHZhciBldmVudEhlYWRlck5hbWVzID0gZXZlbnRNb2RlbC5ldmVudEhlYWRlck1lbWJlck5hbWVzOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhlYWRlck5hbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIG5hbWUgPSBldmVudEhlYWRlck5hbWVzW2ldOwogICAgICAgIGlmIChwYXJzZWRNZXNzYWdlLmhlYWRlcnNbbmFtZV0pIHsKICAgICAgICAgICAgLy8gcGFyc2UgdGhlIGhlYWRlciEKICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gZXZlbnRNb2RlbC5tZW1iZXJzW25hbWVdLnRvVHlwZShwYXJzZWRNZXNzYWdlLmhlYWRlcnNbbmFtZV0udmFsdWUpOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgb3V0cHV0ID0ge307CiAgICBvdXRwdXRbZXZlbnRUeXBlLnZhbHVlXSA9IHJlc3VsdDsKICAgIHJldHVybiBvdXRwdXQ7Cn0KCmZ1bmN0aW9uIHBhcnNlRXJyb3IobWVzc2FnZSkgewogICAgdmFyIGVycm9yQ29kZSA9IG1lc3NhZ2UuaGVhZGVyc1snOmVycm9yLWNvZGUnXTsKICAgIHZhciBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlLmhlYWRlcnNbJzplcnJvci1tZXNzYWdlJ107CiAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlLnZhbHVlIHx8IGVycm9yTWVzc2FnZSk7CiAgICBlcnJvci5jb2RlID0gZXJyb3IubmFtZSA9IGVycm9yQ29kZS52YWx1ZSB8fCBlcnJvckNvZGU7CiAgICByZXR1cm4gZXJyb3I7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgcGFyc2VFdmVudDogcGFyc2VFdmVudAp9OwoKfSx7Ii4vcGFyc2UtbWVzc2FnZSI6MzF9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBJbnQ2NCA9IHJlcXVpcmUoJy4vaW50NjQnKS5JbnQ2NDsKCnZhciBzcGxpdE1lc3NhZ2UgPSByZXF1aXJlKCcuL3NwbGl0LW1lc3NhZ2UnKS5zcGxpdE1lc3NhZ2U7Cgp2YXIgQk9PTEVBTl9UQUcgPSAnYm9vbGVhbic7CnZhciBCWVRFX1RBRyA9ICdieXRlJzsKdmFyIFNIT1JUX1RBRyA9ICdzaG9ydCc7CnZhciBJTlRfVEFHID0gJ2ludGVnZXInOwp2YXIgTE9OR19UQUcgPSAnbG9uZyc7CnZhciBCSU5BUllfVEFHID0gJ2JpbmFyeSc7CnZhciBTVFJJTkdfVEFHID0gJ3N0cmluZyc7CnZhciBUSU1FU1RBTVBfVEFHID0gJ3RpbWVzdGFtcCc7CnZhciBVVUlEX1RBRyA9ICd1dWlkJzsKCi8qKgogKiBAYXBpIHByaXZhdGUKICoKICogQHBhcmFtIHtCdWZmZXJ9IGhlYWRlcnMKICovCmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7CiAgICB2YXIgb3V0ID0ge307CiAgICB2YXIgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgaGVhZGVycy5sZW5ndGgpIHsKICAgICAgICB2YXIgbmFtZUxlbmd0aCA9IGhlYWRlcnMucmVhZFVJbnQ4KHBvc2l0aW9uKyspOwogICAgICAgIHZhciBuYW1lID0gaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBuYW1lTGVuZ3RoKS50b1N0cmluZygpOwogICAgICAgIHBvc2l0aW9uICs9IG5hbWVMZW5ndGg7CiAgICAgICAgc3dpdGNoIChoZWFkZXJzLnJlYWRVSW50OChwb3NpdGlvbisrKSkgewogICAgICAgICAgICBjYXNlIDAgLyogYm9vbFRydWUgKi86CiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogQk9PTEVBTl9UQUcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxIC8qIGJvb2xGYWxzZSAqLzoKICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiBCT09MRUFOX1RBRywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAyIC8qIGJ5dGUgKi86CiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogQllURV9UQUcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGhlYWRlcnMucmVhZEludDgocG9zaXRpb24rKykKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzIC8qIHNob3J0ICovOgogICAgICAgICAgICAgICAgb3V0W25hbWVdID0gewogICAgICAgICAgICAgICAgICAgIHR5cGU6IFNIT1JUX1RBRywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVycy5yZWFkSW50MTZCRShwb3NpdGlvbikKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNCAvKiBpbnRlZ2VyICovOgogICAgICAgICAgICAgICAgb3V0W25hbWVdID0gewogICAgICAgICAgICAgICAgICAgIHR5cGU6IElOVF9UQUcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGhlYWRlcnMucmVhZEludDMyQkUocG9zaXRpb24pCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gNDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDUgLyogbG9uZyAqLzoKICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiBMT05HX1RBRywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IEludDY0KGhlYWRlcnMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgOCkpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDYgLyogYnl0ZUFycmF5ICovOgogICAgICAgICAgICAgICAgdmFyIGJpbmFyeUxlbmd0aCA9IGhlYWRlcnMucmVhZFVJbnQxNkJFKHBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDI7CiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogQklOQVJZX1RBRywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyBiaW5hcnlMZW5ndGgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gYmluYXJ5TGVuZ3RoOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNyAvKiBzdHJpbmcgKi86CiAgICAgICAgICAgICAgICB2YXIgc3RyaW5nTGVuZ3RoID0gaGVhZGVycy5yZWFkVUludDE2QkUocG9zaXRpb24pOwogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gMjsKICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiBTVFJJTkdfVEFHLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBoZWFkZXJzLnNsaWNlKAogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKyBzdHJpbmdMZW5ndGgKICAgICAgICAgICAgICAgICAgICApLnRvU3RyaW5nKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBwb3NpdGlvbiArPSBzdHJpbmdMZW5ndGg7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA4IC8qIHRpbWVzdGFtcCAqLzoKICAgICAgICAgICAgICAgIG91dFtuYW1lXSA9IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiBUSU1FU1RBTVBfVEFHLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEludDY0KGhlYWRlcnMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgOCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWVPZigpCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IDg7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA5IC8qIHV1aWQgKi86CiAgICAgICAgICAgICAgICB2YXIgdXVpZENoYXJzID0gaGVhZGVycy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAxNikKICAgICAgICAgICAgICAgICAgICAudG9TdHJpbmcoJ2hleCcpOwogICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gMTY7CiAgICAgICAgICAgICAgICBvdXRbbmFtZV0gPSB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVVJRF9UQUcsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHV1aWRDaGFycy5zdWJzdHIoMCwgOCkgKyAnLScgKwogICAgICAgICAgICAgICAgICAgICAgICB1dWlkQ2hhcnMuc3Vic3RyKDgsIDQpICsgJy0nICsKICAgICAgICAgICAgICAgICAgICAgICAgdXVpZENoYXJzLnN1YnN0cigxMiwgNCkgKyAnLScgKwogICAgICAgICAgICAgICAgICAgICAgICB1dWlkQ2hhcnMuc3Vic3RyKDE2LCA0KSArICctJyArCiAgICAgICAgICAgICAgICAgICAgICAgIHV1aWRDaGFycy5zdWJzdHIoMjApCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBoZWFkZXIgdHlwZSB0YWcnKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gb3V0Owp9CgpmdW5jdGlvbiBwYXJzZU1lc3NhZ2UobWVzc2FnZSkgewogICAgdmFyIHBhcnNlZCA9IHNwbGl0TWVzc2FnZShtZXNzYWdlKTsKICAgIHJldHVybiB7IGhlYWRlcnM6IHBhcnNlSGVhZGVycyhwYXJzZWQuaGVhZGVycyksIGJvZHk6IHBhcnNlZC5ib2R5IH07Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgcGFyc2VNZXNzYWdlOiBwYXJzZU1lc3NhZ2UKfTsKCn0seyIuL2ludDY0IjoyOSwiLi9zcGxpdC1tZXNzYWdlIjozMn1dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHV0aWwgPSByZXF1aXJlKCcuLi9jb3JlJykudXRpbDsKdmFyIHRvQnVmZmVyID0gdXRpbC5idWZmZXIudG9CdWZmZXI7CgovLyBBbGwgcHJlbHVkZSBjb21wb25lbnRzIGFyZSB1bnNpZ25lZCwgMzItYml0IGludGVnZXJzCnZhciBQUkVMVURFX01FTUJFUl9MRU5HVEggPSA0OwovLyBUaGUgcHJlbHVkZSBjb25zaXN0cyBvZiB0d28gY29tcG9uZW50cwp2YXIgUFJFTFVERV9MRU5HVEggPSBQUkVMVURFX01FTUJFUl9MRU5HVEggKiAyOwovLyBDaGVja3N1bXMgYXJlIGFsd2F5cyBDUkMzMiBoYXNoZXMuCnZhciBDSEVDS1NVTV9MRU5HVEggPSA0OwovLyBNZXNzYWdlcyBtdXN0IGluY2x1ZGUgYSBmdWxsIHByZWx1ZGUsIGEgcHJlbHVkZSBjaGVja3N1bSwgYW5kIGEgbWVzc2FnZSBjaGVja3N1bQp2YXIgTUlOSU1VTV9NRVNTQUdFX0xFTkdUSCA9IFBSRUxVREVfTEVOR1RIICsgQ0hFQ0tTVU1fTEVOR1RIICogMjsKCi8qKgogKiBAYXBpIHByaXZhdGUKICoKICogQHBhcmFtIHtCdWZmZXJ9IG1lc3NhZ2UKICovCmZ1bmN0aW9uIHNwbGl0TWVzc2FnZShtZXNzYWdlKSB7CiAgICBpZiAoIXV0aWwuQnVmZmVyLmlzQnVmZmVyKG1lc3NhZ2UpKSBtZXNzYWdlID0gdG9CdWZmZXIobWVzc2FnZSk7CgogICAgaWYgKG1lc3NhZ2UubGVuZ3RoIDwgTUlOSU1VTV9NRVNTQUdFX0xFTkdUSCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgbWVzc2FnZSB0b28gc2hvcnQgdG8gYWNjb21tb2RhdGUgZXZlbnQgc3RyZWFtIG1lc3NhZ2Ugb3ZlcmhlYWQnKTsKICAgIH0KCiAgICBpZiAobWVzc2FnZS5sZW5ndGggIT09IG1lc3NhZ2UucmVhZFVJbnQzMkJFKDApKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBvcnRlZCBtZXNzYWdlIGxlbmd0aCBkb2VzIG5vdCBtYXRjaCByZWNlaXZlZCBtZXNzYWdlIGxlbmd0aCcpOwogICAgfQoKICAgIHZhciBleHBlY3RlZFByZWx1ZGVDaGVja3N1bSA9IG1lc3NhZ2UucmVhZFVJbnQzMkJFKFBSRUxVREVfTEVOR1RIKTsKCiAgICBpZiAoCiAgICAgICAgZXhwZWN0ZWRQcmVsdWRlQ2hlY2tzdW0gIT09IHV0aWwuY3J5cHRvLmNyYzMyKAogICAgICAgICAgICBtZXNzYWdlLnNsaWNlKDAsIFBSRUxVREVfTEVOR1RIKQogICAgICAgICkKICAgICkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgJ1RoZSBwcmVsdWRlIGNoZWNrc3VtIHNwZWNpZmllZCBpbiB0aGUgbWVzc2FnZSAoJyArCiAgICAgICAgICAgIGV4cGVjdGVkUHJlbHVkZUNoZWNrc3VtICsKICAgICAgICAgICAgJykgZG9lcyBub3QgbWF0Y2ggdGhlIGNhbGN1bGF0ZWQgQ1JDMzIgY2hlY2tzdW0uJwogICAgICAgICk7CiAgICB9CgogICAgdmFyIGV4cGVjdGVkTWVzc2FnZUNoZWNrc3VtID0gbWVzc2FnZS5yZWFkVUludDMyQkUobWVzc2FnZS5sZW5ndGggLSBDSEVDS1NVTV9MRU5HVEgpOwoKICAgIGlmICgKICAgICAgICBleHBlY3RlZE1lc3NhZ2VDaGVja3N1bSAhPT0gdXRpbC5jcnlwdG8uY3JjMzIoCiAgICAgICAgICAgIG1lc3NhZ2Uuc2xpY2UoMCwgbWVzc2FnZS5sZW5ndGggLSBDSEVDS1NVTV9MRU5HVEgpCiAgICAgICAgKQogICAgKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgICAgICAnVGhlIG1lc3NhZ2UgY2hlY2tzdW0gZGlkIG5vdCBtYXRjaCB0aGUgZXhwZWN0ZWQgdmFsdWUgb2YgJyArCiAgICAgICAgICAgICAgICBleHBlY3RlZE1lc3NhZ2VDaGVja3N1bQogICAgICAgICk7CiAgICB9CgogICAgdmFyIGhlYWRlcnNTdGFydCA9IFBSRUxVREVfTEVOR1RIICsgQ0hFQ0tTVU1fTEVOR1RIOwogICAgdmFyIGhlYWRlcnNFbmQgPSBoZWFkZXJzU3RhcnQgKyBtZXNzYWdlLnJlYWRVSW50MzJCRShQUkVMVURFX01FTUJFUl9MRU5HVEgpOwoKICAgIHJldHVybiB7CiAgICAgICAgaGVhZGVyczogbWVzc2FnZS5zbGljZShoZWFkZXJzU3RhcnQsIGhlYWRlcnNFbmQpLAogICAgICAgIGJvZHk6IG1lc3NhZ2Uuc2xpY2UoaGVhZGVyc0VuZCwgbWVzc2FnZS5sZW5ndGggLSBDSEVDS1NVTV9MRU5HVEgpLAogICAgfTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSB7CiAgICBzcGxpdE1lc3NhZ2U6IHNwbGl0TWVzc2FnZQp9OwoKfSx7Ii4uL2NvcmUiOjE4fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CnZhciBTZXF1ZW50aWFsRXhlY3V0b3IgPSByZXF1aXJlKCcuL3NlcXVlbnRpYWxfZXhlY3V0b3InKTsKdmFyIERJU0NPVkVSX0VORFBPSU5UID0gcmVxdWlyZSgnLi9kaXNjb3Zlcl9lbmRwb2ludCcpLmRpc2NvdmVyRW5kcG9pbnQ7Ci8qKgogKiBUaGUgbmFtZXNwYWNlIHVzZWQgdG8gcmVnaXN0ZXIgZ2xvYmFsIGV2ZW50IGxpc3RlbmVycyBmb3IgcmVxdWVzdCBidWlsZGluZwogKiBhbmQgc2VuZGluZy4KICovCkFXUy5FdmVudExpc3RlbmVycyA9IHsKICAvKioKICAgKiBAIWF0dHJpYnV0ZSBWQUxJREFURV9DUkVERU5USUFMUwogICAqICAgQSByZXF1ZXN0IGxpc3RlbmVyIHRoYXQgdmFsaWRhdGVzIHdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgYmVpbmcKICAgKiAgIHNlbnQgd2l0aCBjcmVkZW50aWFscy4KICAgKiAgIEhhbmRsZXMgdGhlIHtBV1MuUmVxdWVzdH52YWxpZGF0ZSAndmFsaWRhdGUnIFJlcXVlc3QgZXZlbnR9CiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB3aXRob3V0IHZhbGlkYXRpbmcgY3JlZGVudGlhbHMKICAgKiAgICAgdmFyIGxpc3RlbmVyID0gQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfQ1JFREVOVElBTFM7CiAgICogICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3ZhbGlkYXRlJywgbGlzdGVuZXIpOwogICAqICAgQHJlYWRvbmx5CiAgICogICBAcmV0dXJuIFtGdW5jdGlvbl0KICAgKiBAIWF0dHJpYnV0ZSBWQUxJREFURV9SRUdJT04KICAgKiAgIEEgcmVxdWVzdCBsaXN0ZW5lciB0aGF0IHZhbGlkYXRlcyB3aGV0aGVyIHRoZSByZWdpb24gaXMgc2V0CiAgICogICBmb3IgYSByZXF1ZXN0LgogICAqICAgSGFuZGxlcyB0aGUge0FXUy5SZXF1ZXN0fnZhbGlkYXRlICd2YWxpZGF0ZScgUmVxdWVzdCBldmVudH0KICAgKiAgIEBleGFtcGxlIFNlbmRpbmcgYSByZXF1ZXN0IHdpdGhvdXQgdmFsaWRhdGluZyByZWdpb24gY29uZmlndXJhdGlvbgogICAqICAgICB2YXIgbGlzdGVuZXIgPSBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9SRUdJT047CiAgICogICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3ZhbGlkYXRlJywgbGlzdGVuZXIpOwogICAqICAgQHJlYWRvbmx5CiAgICogICBAcmV0dXJuIFtGdW5jdGlvbl0KICAgKiBAIWF0dHJpYnV0ZSBWQUxJREFURV9QQVJBTUVURVJTCiAgICogICBBIHJlcXVlc3QgbGlzdGVuZXIgdGhhdCB2YWxpZGF0ZXMgaW5wdXQgcGFyYW1ldGVycyBpbiBhIHJlcXVlc3QuCiAgICogICBIYW5kbGVzIHRoZSB7QVdTLlJlcXVlc3R+dmFsaWRhdGUgJ3ZhbGlkYXRlJyBSZXF1ZXN0IGV2ZW50fQogICAqICAgQGV4YW1wbGUgU2VuZGluZyBhIHJlcXVlc3Qgd2l0aG91dCB2YWxpZGF0aW5nIHBhcmFtZXRlcnMKICAgKiAgICAgdmFyIGxpc3RlbmVyID0gQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUEFSQU1FVEVSUzsKICAgKiAgICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBsaXN0ZW5lcik7CiAgICogICBAZXhhbXBsZSBEaXNhYmxlIHBhcmFtZXRlciB2YWxpZGF0aW9uIGdsb2JhbGx5CiAgICogICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLnJlbW92ZUxpc3RlbmVyKCd2YWxpZGF0ZScsCiAgICogICAgICAgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfUkVHSU9OKTsKICAgKiAgIEByZWFkb25seQogICAqICAgQHJldHVybiBbRnVuY3Rpb25dCiAgICogQCFhdHRyaWJ1dGUgU0VORAogICAqICAgQSByZXF1ZXN0IGxpc3RlbmVyIHRoYXQgaW5pdGlhdGVzIHRoZSBIVFRQIGNvbm5lY3Rpb24gZm9yIGEKICAgKiAgIHJlcXVlc3QgYmVpbmcgc2VudC4gSGFuZGxlcyB0aGUge0FXUy5SZXF1ZXN0fnNlbmQgJ3NlbmQnIFJlcXVlc3QgZXZlbnR9CiAgICogICBAZXhhbXBsZSBSZXBsYWNpbmcgdGhlIEhUVFAgaGFuZGxlcgogICAqICAgICB2YXIgbGlzdGVuZXIgPSBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5TRU5EOwogICAqICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdzZW5kJywgbGlzdGVuZXIpOwogICAqICAgICByZXF1ZXN0Lm9uKCdzZW5kJywgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgKiAgICAgICBjdXN0b21IYW5kbGVyLnNlbmQocmVzcG9uc2UpOwogICAqICAgICB9KTsKICAgKiAgIEByZXR1cm4gW0Z1bmN0aW9uXQogICAqICAgQHJlYWRvbmx5CiAgICogQCFhdHRyaWJ1dGUgSFRUUF9EQVRBCiAgICogICBBIHJlcXVlc3QgbGlzdGVuZXIgdGhhdCByZWFkcyBkYXRhIGZyb20gdGhlIEhUVFAgY29ubmVjdGlvbiBpbiBvcmRlcgogICAqICAgdG8gYnVpbGQgdGhlIHJlc3BvbnNlIGRhdGEuCiAgICogICBIYW5kbGVzIHRoZSB7QVdTLlJlcXVlc3R+aHR0cERhdGEgJ2h0dHBEYXRhJyBSZXF1ZXN0IGV2ZW50fS4KICAgKiAgIFJlbW92ZSB0aGlzIGhhbmRsZXIgaWYgeW91IGFyZSBvdmVycmlkaW5nIHRoZSAnaHR0cERhdGEnIGV2ZW50IGFuZAogICAqICAgZG8gbm90IHdhbnQgZXh0cmEgZGF0YSBwcm9jZXNzaW5nIGFuZCBidWZmZXJpbmcgb3ZlcmhlYWQuCiAgICogICBAZXhhbXBsZSBEaXNhYmxpbmcgZGVmYXVsdCBkYXRhIHByb2Nlc3NpbmcKICAgKiAgICAgdmFyIGxpc3RlbmVyID0gQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuSFRUUF9EQVRBOwogICAqICAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdodHRwRGF0YScsIGxpc3RlbmVyKTsKICAgKiAgIEByZXR1cm4gW0Z1bmN0aW9uXQogICAqICAgQHJlYWRvbmx5CiAgICovCiAgQ29yZToge30gLyogZG9jIGhhY2sgKi8KfTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGdldE9wZXJhdGlvbkF1dGh0eXBlKHJlcSkgewogIGlmICghcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMpIHsKICAgIHJldHVybiAnJzsKICB9CiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dOwogIHJldHVybiBvcGVyYXRpb24gPyBvcGVyYXRpb24uYXV0aHR5cGUgOiAnJzsKfQoKQVdTLkV2ZW50TGlzdGVuZXJzID0gewogIENvcmU6IG5ldyBTZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQsIGFkZEFzeW5jKSB7CiAgICBhZGRBc3luYygnVkFMSURBVEVfQ1JFREVOVElBTFMnLCAndmFsaWRhdGUnLAogICAgICAgIGZ1bmN0aW9uIFZBTElEQVRFX0NSRURFTlRJQUxTKHJlcSwgZG9uZSkgewogICAgICBpZiAoIXJlcS5zZXJ2aWNlLmFwaS5zaWduYXR1cmVWZXJzaW9uICYmICFyZXEuc2VydmljZS5jb25maWcuc2lnbmF0dXJlVmVyc2lvbikgcmV0dXJuIGRvbmUoKTsgLy8gbm9uZQogICAgICByZXEuc2VydmljZS5jb25maWcuZ2V0Q3JlZGVudGlhbHMoZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmVxLnJlc3BvbnNlLmVycm9yID0gQVdTLnV0aWwuZXJyb3IoZXJyLAogICAgICAgICAgICB7Y29kZTogJ0NyZWRlbnRpYWxzRXJyb3InLCBtZXNzYWdlOiAnTWlzc2luZyBjcmVkZW50aWFscyBpbiBjb25maWcnfSk7CiAgICAgICAgfQogICAgICAgIGRvbmUoKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBhZGQoJ1ZBTElEQVRFX1JFR0lPTicsICd2YWxpZGF0ZScsIGZ1bmN0aW9uIFZBTElEQVRFX1JFR0lPTihyZXEpIHsKICAgICAgaWYgKCFyZXEuc2VydmljZS5jb25maWcucmVnaW9uICYmICFyZXEuc2VydmljZS5pc0dsb2JhbEVuZHBvaW50KSB7CiAgICAgICAgcmVxLnJlc3BvbnNlLmVycm9yID0gQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksCiAgICAgICAgICB7Y29kZTogJ0NvbmZpZ0Vycm9yJywgbWVzc2FnZTogJ01pc3NpbmcgcmVnaW9uIGluIGNvbmZpZyd9KTsKICAgICAgfQogICAgfSk7CgogICAgYWRkKCdCVUlMRF9JREVNUE9URU5DWV9UT0tFTlMnLCAndmFsaWRhdGUnLCBmdW5jdGlvbiBCVUlMRF9JREVNUE9URU5DWV9UT0tFTlMocmVxKSB7CiAgICAgIGlmICghcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dOwogICAgICBpZiAoIW9wZXJhdGlvbikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgaWRlbXBvdGVudE1lbWJlcnMgPSBvcGVyYXRpb24uaWRlbXBvdGVudE1lbWJlcnM7CiAgICAgIGlmICghaWRlbXBvdGVudE1lbWJlcnMubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIC8vIGNyZWF0ZXMgYSBjb3B5IG9mIHBhcmFtcyBzbyB1c2VyJ3MgcGFyYW0gb2JqZWN0IGlzbid0IG11dGF0ZWQKICAgICAgdmFyIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkocmVxLnBhcmFtcyk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBpTGVuID0gaWRlbXBvdGVudE1lbWJlcnMubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7CiAgICAgICAgaWYgKCFwYXJhbXNbaWRlbXBvdGVudE1lbWJlcnNbaV1dKSB7CiAgICAgICAgICAvLyBhZGQgdGhlIG1lbWJlcgogICAgICAgICAgcGFyYW1zW2lkZW1wb3RlbnRNZW1iZXJzW2ldXSA9IEFXUy51dGlsLnV1aWQudjQoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmVxLnBhcmFtcyA9IHBhcmFtczsKICAgIH0pOwoKICAgIGFkZCgnVkFMSURBVEVfUEFSQU1FVEVSUycsICd2YWxpZGF0ZScsIGZ1bmN0aW9uIFZBTElEQVRFX1BBUkFNRVRFUlMocmVxKSB7CiAgICAgIGlmICghcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIHJ1bGVzID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0uaW5wdXQ7CiAgICAgIHZhciB2YWxpZGF0aW9uID0gcmVxLnNlcnZpY2UuY29uZmlnLnBhcmFtVmFsaWRhdGlvbjsKICAgICAgbmV3IEFXUy5QYXJhbVZhbGlkYXRvcih2YWxpZGF0aW9uKS52YWxpZGF0ZShydWxlcywgcmVxLnBhcmFtcyk7CiAgICB9KTsKCiAgICBhZGRBc3luYygnQ09NUFVURV9TSEEyNTYnLCAnYWZ0ZXJCdWlsZCcsIGZ1bmN0aW9uIENPTVBVVEVfU0hBMjU2KHJlcSwgZG9uZSkgewogICAgICByZXEuaGFsdEhhbmRsZXJzT25FcnJvcigpOwogICAgICBpZiAoIXJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTsKICAgICAgdmFyIGF1dGh0eXBlID0gb3BlcmF0aW9uID8gb3BlcmF0aW9uLmF1dGh0eXBlIDogJyc7CiAgICAgIGlmICghcmVxLnNlcnZpY2UuYXBpLnNpZ25hdHVyZVZlcnNpb24gJiYgIWF1dGh0eXBlICYmICFyZXEuc2VydmljZS5jb25maWcuc2lnbmF0dXJlVmVyc2lvbikgcmV0dXJuIGRvbmUoKTsgLy8gbm9uZQogICAgICBpZiAocmVxLnNlcnZpY2UuZ2V0U2lnbmVyQ2xhc3MocmVxKSA9PT0gQVdTLlNpZ25lcnMuVjQpIHsKICAgICAgICB2YXIgYm9keSA9IHJlcS5odHRwUmVxdWVzdC5ib2R5IHx8ICcnOwogICAgICAgIGlmIChhdXRodHlwZS5pbmRleE9mKCd1bnNpZ25lZC1ib2R5JykgPj0gMCkgewogICAgICAgICAgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LUNvbnRlbnQtU2hhMjU2J10gPSAnVU5TSUdORUQtUEFZTE9BRCc7CiAgICAgICAgICByZXR1cm4gZG9uZSgpOwogICAgICAgIH0KICAgICAgICBBV1MudXRpbC5jb21wdXRlU2hhMjU2KGJvZHksIGZ1bmN0aW9uKGVyciwgc2hhKSB7CiAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgIGRvbmUoZXJyKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snWC1BbXotQ29udGVudC1TaGEyNTYnXSA9IHNoYTsKICAgICAgICAgICAgZG9uZSgpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGRvbmUoKTsKICAgICAgfQogICAgfSk7CgogICAgYWRkKCdTRVRfQ09OVEVOVF9MRU5HVEgnLCAnYWZ0ZXJCdWlsZCcsIGZ1bmN0aW9uIFNFVF9DT05URU5UX0xFTkdUSChyZXEpIHsKICAgICAgdmFyIGF1dGh0eXBlID0gZ2V0T3BlcmF0aW9uQXV0aHR5cGUocmVxKTsKICAgICAgdmFyIHBheWxvYWRNZW1iZXIgPSBBV1MudXRpbC5nZXRSZXF1ZXN0UGF5bG9hZFNoYXBlKHJlcSk7CiAgICAgIGlmIChyZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBsZW5ndGggPSBBV1MudXRpbC5zdHJpbmcuYnl0ZUxlbmd0aChyZXEuaHR0cFJlcXVlc3QuYm9keSk7CiAgICAgICAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1MZW5ndGgnXSA9IGxlbmd0aDsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIGlmIChwYXlsb2FkTWVtYmVyICYmIHBheWxvYWRNZW1iZXIuaXNTdHJlYW1pbmcpIHsKICAgICAgICAgICAgaWYgKHBheWxvYWRNZW1iZXIucmVxdWlyZXNMZW5ndGgpIHsKICAgICAgICAgICAgICAvL3N0cmVhbWluZyBwYXlsb2FkIHJlcXVpcmVzIGxlbmd0aChzMywgZ2xhY2llcikKICAgICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXV0aHR5cGUuaW5kZXhPZigndW5zaWduZWQtYm9keScpID49IDApIHsKICAgICAgICAgICAgICAvL3VuYm91bmRlZCBzdHJlYW1pbmcgcGF5bG9hZChsZXgsIG1lZGlhc3RvcmUpCiAgICAgICAgICAgICAgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1RyYW5zZmVyLUVuY29kaW5nJ10gPSAnY2h1bmtlZCc7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgdGhyb3cgZXJyOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogICAgYWRkKCdTRVRfSFRUUF9IT1NUJywgJ2FmdGVyQnVpbGQnLCBmdW5jdGlvbiBTRVRfSFRUUF9IT1NUKHJlcSkgewogICAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snSG9zdCddID0gcmVxLmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3Q7CiAgICB9KTsKCiAgICBhZGQoJ1JFU1RBUlQnLCAncmVzdGFydCcsIGZ1bmN0aW9uIFJFU1RBUlQoKSB7CiAgICAgIHZhciBlcnIgPSB0aGlzLnJlc3BvbnNlLmVycm9yOwogICAgICBpZiAoIWVyciB8fCAhZXJyLnJldHJ5YWJsZSkgcmV0dXJuOwoKICAgICAgdGhpcy5odHRwUmVxdWVzdCA9IG5ldyBBV1MuSHR0cFJlcXVlc3QoCiAgICAgICAgdGhpcy5zZXJ2aWNlLmVuZHBvaW50LAogICAgICAgIHRoaXMuc2VydmljZS5yZWdpb24KICAgICAgKTsKCiAgICAgIGlmICh0aGlzLnJlc3BvbnNlLnJldHJ5Q291bnQgPCB0aGlzLnNlcnZpY2UuY29uZmlnLm1heFJldHJpZXMpIHsKICAgICAgICB0aGlzLnJlc3BvbnNlLnJldHJ5Q291bnQrKzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnJlc3BvbnNlLmVycm9yID0gbnVsbDsKICAgICAgfQogICAgfSk7CgogICAgdmFyIGFkZFRvSGVhZCA9IHRydWU7CiAgICBhZGRBc3luYygnRElTQ09WRVJfRU5EUE9JTlQnLCAnc2lnbicsIERJU0NPVkVSX0VORFBPSU5ULCBhZGRUb0hlYWQpOwoKICAgIGFkZEFzeW5jKCdTSUdOJywgJ3NpZ24nLCBmdW5jdGlvbiBTSUdOKHJlcSwgZG9uZSkgewogICAgICB2YXIgc2VydmljZSA9IHJlcS5zZXJ2aWNlOwogICAgICB2YXIgb3BlcmF0aW9ucyA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zIHx8IHt9OwogICAgICB2YXIgb3BlcmF0aW9uID0gb3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTsKICAgICAgdmFyIGF1dGh0eXBlID0gb3BlcmF0aW9uID8gb3BlcmF0aW9uLmF1dGh0eXBlIDogJyc7CiAgICAgIGlmICghc2VydmljZS5hcGkuc2lnbmF0dXJlVmVyc2lvbiAmJiAhYXV0aHR5cGUgJiYgIXNlcnZpY2UuY29uZmlnLnNpZ25hdHVyZVZlcnNpb24pIHJldHVybiBkb25lKCk7IC8vIG5vbmUKCiAgICAgIHNlcnZpY2UuY29uZmlnLmdldENyZWRlbnRpYWxzKGZ1bmN0aW9uIChlcnIsIGNyZWRlbnRpYWxzKSB7CiAgICAgICAgaWYgKGVycikgewogICAgICAgICAgcmVxLnJlc3BvbnNlLmVycm9yID0gZXJyOwogICAgICAgICAgcmV0dXJuIGRvbmUoKTsKICAgICAgICB9CgogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgZGF0ZSA9IHNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKTsKICAgICAgICAgIHZhciBTaWduZXJDbGFzcyA9IHNlcnZpY2UuZ2V0U2lnbmVyQ2xhc3MocmVxKTsKICAgICAgICAgIHZhciBzaWduZXIgPSBuZXcgU2lnbmVyQ2xhc3MocmVxLmh0dHBSZXF1ZXN0LAogICAgICAgICAgICBzZXJ2aWNlLmFwaS5zaWduaW5nTmFtZSB8fCBzZXJ2aWNlLmFwaS5lbmRwb2ludFByZWZpeCwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHNpZ25hdHVyZUNhY2hlOiBzZXJ2aWNlLmNvbmZpZy5zaWduYXR1cmVDYWNoZSwKICAgICAgICAgICAgICBvcGVyYXRpb246IG9wZXJhdGlvbiwKICAgICAgICAgICAgICBzaWduYXR1cmVWZXJzaW9uOiBzZXJ2aWNlLmFwaS5zaWduYXR1cmVWZXJzaW9uCiAgICAgICAgICAgIH0pOwogICAgICAgICAgc2lnbmVyLnNldFNlcnZpY2VDbGllbnRJZChzZXJ2aWNlLl9jbGllbnRJZCk7CgogICAgICAgICAgLy8gY2xlYXIgb2xkIGF1dGhvcml6YXRpb24gaGVhZGVycwogICAgICAgICAgZGVsZXRlIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzWydBdXRob3JpemF0aW9uJ107CiAgICAgICAgICBkZWxldGUgcmVxLmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ0RhdGUnXTsKICAgICAgICAgIGRlbGV0ZSByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snWC1BbXotRGF0ZSddOwoKICAgICAgICAgIC8vIGFkZCBuZXcgYXV0aG9yaXphdGlvbgogICAgICAgICAgc2lnbmVyLmFkZEF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGUpOwogICAgICAgICAgcmVxLnNpZ25lZEF0ID0gZGF0ZTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZXEucmVzcG9uc2UuZXJyb3IgPSBlOwogICAgICAgIH0KICAgICAgICBkb25lKCk7CiAgICAgIH0pOwogICAgfSk7CgogICAgYWRkKCdWQUxJREFURV9SRVNQT05TRScsICd2YWxpZGF0ZVJlc3BvbnNlJywgZnVuY3Rpb24gVkFMSURBVEVfUkVTUE9OU0UocmVzcCkgewogICAgICBpZiAodGhpcy5zZXJ2aWNlLnN1Y2Nlc3NmdWxSZXNwb25zZShyZXNwLCB0aGlzKSkgewogICAgICAgIHJlc3AuZGF0YSA9IHt9OwogICAgICAgIHJlc3AuZXJyb3IgPSBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3AuZGF0YSA9IG51bGw7CiAgICAgICAgcmVzcC5lcnJvciA9IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLAogICAgICAgICAge2NvZGU6ICdVbmtub3duRXJyb3InLCBtZXNzYWdlOiAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZC4nfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIGFkZEFzeW5jKCdTRU5EJywgJ3NlbmQnLCBmdW5jdGlvbiBTRU5EKHJlc3AsIGRvbmUpIHsKICAgICAgcmVzcC5odHRwUmVzcG9uc2UuX2Fib3J0Q2FsbGJhY2sgPSBkb25lOwogICAgICByZXNwLmVycm9yID0gbnVsbDsKICAgICAgcmVzcC5kYXRhID0gbnVsbDsKCiAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGh0dHBSZXNwKSB7CiAgICAgICAgcmVzcC5odHRwUmVzcG9uc2Uuc3RyZWFtID0gaHR0cFJlc3A7CiAgICAgICAgdmFyIHN0cmVhbSA9IHJlc3AucmVxdWVzdC5odHRwUmVxdWVzdC5zdHJlYW07CiAgICAgICAgdmFyIHNlcnZpY2UgPSByZXNwLnJlcXVlc3Quc2VydmljZTsKICAgICAgICB2YXIgYXBpID0gc2VydmljZS5hcGk7CiAgICAgICAgdmFyIG9wZXJhdGlvbk5hbWUgPSByZXNwLnJlcXVlc3Qub3BlcmF0aW9uOwogICAgICAgIHZhciBvcGVyYXRpb24gPSBhcGkub3BlcmF0aW9uc1tvcGVyYXRpb25OYW1lXSB8fCB7fTsKCiAgICAgICAgaHR0cFJlc3Aub24oJ2hlYWRlcnMnLCBmdW5jdGlvbiBvbkhlYWRlcnMoc3RhdHVzQ29kZSwgaGVhZGVycywgc3RhdHVzTWVzc2FnZSkgewogICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoCiAgICAgICAgICAgICdodHRwSGVhZGVycycsCiAgICAgICAgICAgIFtzdGF0dXNDb2RlLCBoZWFkZXJzLCByZXNwLCBzdGF0dXNNZXNzYWdlXQogICAgICAgICAgKTsKCiAgICAgICAgICBpZiAoIXJlc3AuaHR0cFJlc3BvbnNlLnN0cmVhbWluZykgewogICAgICAgICAgICBpZiAoQVdTLkh0dHBDbGllbnQuc3RyZWFtc0FwaVZlcnNpb24gPT09IDIpIHsgLy8gc3RyZWFtczIgQVBJIGNoZWNrCiAgICAgICAgICAgICAgLy8gaWYgd2UgZGV0ZWN0IGV2ZW50IHN0cmVhbXMsIHdlJ3JlIGdvaW5nIHRvIGhhdmUgdG8KICAgICAgICAgICAgICAvLyByZXR1cm4gdGhlIHN0cmVhbSBpbW1lZGlhdGVseQogICAgICAgICAgICAgIGlmIChvcGVyYXRpb24uaGFzRXZlbnRPdXRwdXQgJiYgc2VydmljZS5zdWNjZXNzZnVsUmVzcG9uc2UocmVzcCkpIHsKICAgICAgICAgICAgICAgIC8vIHNraXAgcmVhZGluZyB0aGUgSW5jb21pbmdTdHJlYW0KICAgICAgICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwRG9uZScpOwogICAgICAgICAgICAgICAgZG9uZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaHR0cFJlc3Aub24oJ3JlYWRhYmxlJywgZnVuY3Rpb24gb25SZWFkYWJsZSgpIHsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gaHR0cFJlc3AucmVhZCgpOwogICAgICAgICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEYXRhJywgW2RhdGEsIHJlc3BdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsgLy8gbGVnYWN5IHN0cmVhbXMgQVBJCiAgICAgICAgICAgICAgaHR0cFJlc3Aub24oJ2RhdGEnLCBmdW5jdGlvbiBvbkRhdGEoZGF0YSkgewogICAgICAgICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEYXRhJywgW2RhdGEsIHJlc3BdKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBodHRwUmVzcC5vbignZW5kJywgZnVuY3Rpb24gb25FbmQoKSB7CiAgICAgICAgICBpZiAoIXN0cmVhbSB8fCAhc3RyZWFtLmRpZENhbGxiYWNrKSB7CiAgICAgICAgICAgIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMiAmJiAob3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0ICYmIHNlcnZpY2Uuc3VjY2Vzc2Z1bFJlc3BvbnNlKHJlc3ApKSkgewogICAgICAgICAgICAgIC8vIGRvbid0IGNvbmNhdGVuYXRlIHJlc3BvbnNlIGNodW5rcyB3aGVuIHN0cmVhbWluZyBldmVudCBzdHJlYW0gZGF0YSB3aGVuIHJlc3BvbnNlIGlzIHN1Y2Nlc3NmdWwKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEb25lJyk7CiAgICAgICAgICAgIGRvbmUoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gcHJvZ3Jlc3MoaHR0cFJlc3ApIHsKICAgICAgICBodHRwUmVzcC5vbignc2VuZFByb2dyZXNzJywgZnVuY3Rpb24gb25TZW5kUHJvZ3Jlc3ModmFsdWUpIHsKICAgICAgICAgIHJlc3AucmVxdWVzdC5lbWl0KCdodHRwVXBsb2FkUHJvZ3Jlc3MnLCBbdmFsdWUsIHJlc3BdKTsKICAgICAgICB9KTsKCiAgICAgICAgaHR0cFJlc3Aub24oJ3JlY2VpdmVQcm9ncmVzcycsIGZ1bmN0aW9uIG9uUmVjZWl2ZVByb2dyZXNzKHZhbHVlKSB7CiAgICAgICAgICByZXNwLnJlcXVlc3QuZW1pdCgnaHR0cERvd25sb2FkUHJvZ3Jlc3MnLCBbdmFsdWUsIHJlc3BdKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZXJyb3IoZXJyKSB7CiAgICAgICAgaWYgKGVyci5jb2RlICE9PSAnUmVxdWVzdEFib3J0ZWRFcnJvcicpIHsKICAgICAgICAgIHZhciBlcnJDb2RlID0gZXJyLmNvZGUgPT09ICdUaW1lb3V0RXJyb3InID8gZXJyLmNvZGUgOiAnTmV0d29ya2luZ0Vycm9yJzsKICAgICAgICAgIGVyciA9IEFXUy51dGlsLmVycm9yKGVyciwgewogICAgICAgICAgICBjb2RlOiBlcnJDb2RlLAogICAgICAgICAgICByZWdpb246IHJlc3AucmVxdWVzdC5odHRwUmVxdWVzdC5yZWdpb24sCiAgICAgICAgICAgIGhvc3RuYW1lOiByZXNwLnJlcXVlc3QuaHR0cFJlcXVlc3QuZW5kcG9pbnQuaG9zdG5hbWUsCiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJlc3AuZXJyb3IgPSBlcnI7CiAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBFcnJvcicsIFtyZXNwLmVycm9yLCByZXNwXSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICBkb25lKCk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVTZW5kKCkgewogICAgICAgIHZhciBodHRwID0gQVdTLkh0dHBDbGllbnQuZ2V0SW5zdGFuY2UoKTsKICAgICAgICB2YXIgaHR0cE9wdGlvbnMgPSByZXNwLnJlcXVlc3Quc2VydmljZS5jb25maWcuaHR0cE9wdGlvbnMgfHwge307CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBzdHJlYW0gPSBodHRwLmhhbmRsZVJlcXVlc3QocmVzcC5yZXF1ZXN0Lmh0dHBSZXF1ZXN0LCBodHRwT3B0aW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2ssIGVycm9yKTsKICAgICAgICAgIHByb2dyZXNzKHN0cmVhbSk7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBlcnJvcihlcnIpOwogICAgICAgIH0KICAgICAgfQogICAgICB2YXIgdGltZURpZmYgPSAocmVzcC5yZXF1ZXN0LnNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKSAtIHRoaXMuc2lnbmVkQXQpIC8gMTAwMDsKICAgICAgaWYgKHRpbWVEaWZmID49IDYwICogMTApIHsgLy8gaWYgd2Ugc2lnbmVkIDEwbWluIGFnbywgcmUtc2lnbgogICAgICAgIHRoaXMuZW1pdCgnc2lnbicsIFt0aGlzXSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICBpZiAoZXJyKSBkb25lKGVycik7CiAgICAgICAgICBlbHNlIGV4ZWN1dGVTZW5kKCk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZXhlY3V0ZVNlbmQoKTsKICAgICAgfQogICAgfSk7CgogICAgYWRkKCdIVFRQX0hFQURFUlMnLCAnaHR0cEhlYWRlcnMnLAogICAgICAgIGZ1bmN0aW9uIEhUVFBfSEVBREVSUyhzdGF0dXNDb2RlLCBoZWFkZXJzLCByZXNwLCBzdGF0dXNNZXNzYWdlKSB7CiAgICAgIHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlOwogICAgICByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNNZXNzYWdlID0gc3RhdHVzTWVzc2FnZTsKICAgICAgcmVzcC5odHRwUmVzcG9uc2UuaGVhZGVycyA9IGhlYWRlcnM7CiAgICAgIHJlc3AuaHR0cFJlc3BvbnNlLmJvZHkgPSBBV1MudXRpbC5idWZmZXIudG9CdWZmZXIoJycpOwogICAgICByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzID0gW107CiAgICAgIHJlc3AuaHR0cFJlc3BvbnNlLm51bUJ5dGVzID0gMDsKICAgICAgdmFyIGRhdGVIZWFkZXIgPSBoZWFkZXJzLmRhdGUgfHwgaGVhZGVycy5EYXRlOwogICAgICB2YXIgc2VydmljZSA9IHJlc3AucmVxdWVzdC5zZXJ2aWNlOwogICAgICBpZiAoZGF0ZUhlYWRlcikgewogICAgICAgIHZhciBzZXJ2ZXJUaW1lID0gRGF0ZS5wYXJzZShkYXRlSGVhZGVyKTsKICAgICAgICBpZiAoc2VydmljZS5jb25maWcuY29ycmVjdENsb2NrU2tldwogICAgICAgICAgICAmJiBzZXJ2aWNlLmlzQ2xvY2tTa2V3ZWQoc2VydmVyVGltZSkpIHsKICAgICAgICAgIHNlcnZpY2UuYXBwbHlDbG9ja09mZnNldChzZXJ2ZXJUaW1lKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIGFkZCgnSFRUUF9EQVRBJywgJ2h0dHBEYXRhJywgZnVuY3Rpb24gSFRUUF9EQVRBKGNodW5rLCByZXNwKSB7CiAgICAgIGlmIChjaHVuaykgewogICAgICAgIGlmIChBV1MudXRpbC5pc05vZGUoKSkgewogICAgICAgICAgcmVzcC5odHRwUmVzcG9uc2UubnVtQnl0ZXMgKz0gY2h1bmsubGVuZ3RoOwoKICAgICAgICAgIHZhciB0b3RhbCA9IHJlc3AuaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ107CiAgICAgICAgICB2YXIgcHJvZ3Jlc3MgPSB7IGxvYWRlZDogcmVzcC5odHRwUmVzcG9uc2UubnVtQnl0ZXMsIHRvdGFsOiB0b3RhbCB9OwogICAgICAgICAgcmVzcC5yZXF1ZXN0LmVtaXQoJ2h0dHBEb3dubG9hZFByb2dyZXNzJywgW3Byb2dyZXNzLCByZXNwXSk7CiAgICAgICAgfQoKICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzLnB1c2goQVdTLnV0aWwuYnVmZmVyLnRvQnVmZmVyKGNodW5rKSk7CiAgICAgIH0KICAgIH0pOwoKICAgIGFkZCgnSFRUUF9ET05FJywgJ2h0dHBEb25lJywgZnVuY3Rpb24gSFRUUF9ET05FKHJlc3ApIHsKICAgICAgLy8gY29udmVydCBidWZmZXJzIGFycmF5IGludG8gc2luZ2xlIGJ1ZmZlcgogICAgICBpZiAocmVzcC5odHRwUmVzcG9uc2UuYnVmZmVycyAmJiByZXNwLmh0dHBSZXNwb25zZS5idWZmZXJzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgYm9keSA9IEFXUy51dGlsLmJ1ZmZlci5jb25jYXQocmVzcC5odHRwUmVzcG9uc2UuYnVmZmVycyk7CiAgICAgICAgcmVzcC5odHRwUmVzcG9uc2UuYm9keSA9IGJvZHk7CiAgICAgIH0KICAgICAgZGVsZXRlIHJlc3AuaHR0cFJlc3BvbnNlLm51bUJ5dGVzOwogICAgICBkZWxldGUgcmVzcC5odHRwUmVzcG9uc2UuYnVmZmVyczsKICAgIH0pOwoKICAgIGFkZCgnRklOQUxJWkVfRVJST1InLCAncmV0cnknLCBmdW5jdGlvbiBGSU5BTElaRV9FUlJPUihyZXNwKSB7CiAgICAgIGlmIChyZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlKSB7CiAgICAgICAgcmVzcC5lcnJvci5zdGF0dXNDb2RlID0gcmVzcC5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTsKICAgICAgICBpZiAocmVzcC5lcnJvci5yZXRyeWFibGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVzcC5lcnJvci5yZXRyeWFibGUgPSB0aGlzLnNlcnZpY2UucmV0cnlhYmxlRXJyb3IocmVzcC5lcnJvciwgdGhpcyk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCiAgICBhZGQoJ0lOVkFMSURBVEVfQ1JFREVOVElBTFMnLCAncmV0cnknLCBmdW5jdGlvbiBJTlZBTElEQVRFX0NSRURFTlRJQUxTKHJlc3ApIHsKICAgICAgaWYgKCFyZXNwLmVycm9yKSByZXR1cm47CiAgICAgIHN3aXRjaCAocmVzcC5lcnJvci5jb2RlKSB7CiAgICAgICAgY2FzZSAnUmVxdWVzdEV4cGlyZWQnOiAvLyBFQzIgb25seQogICAgICAgIGNhc2UgJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbic6CiAgICAgICAgY2FzZSAnRXhwaXJlZFRva2VuJzoKICAgICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTsKICAgICAgICAgIHJlc3AucmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5leHBpcmVkID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CgogICAgYWRkKCdFWFBJUkVEX1NJR05BVFVSRScsICdyZXRyeScsIGZ1bmN0aW9uIEVYUElSRURfU0lHTkFUVVJFKHJlc3ApIHsKICAgICAgdmFyIGVyciA9IHJlc3AuZXJyb3I7CiAgICAgIGlmICghZXJyKSByZXR1cm47CiAgICAgIGlmICh0eXBlb2YgZXJyLmNvZGUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICBpZiAoZXJyLmNvZGUubWF0Y2goL1NpZ25hdHVyZS8pICYmIGVyci5tZXNzYWdlLm1hdGNoKC9leHBpcmVkLykpIHsKICAgICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIGFkZCgnQ0xPQ0tfU0tFV0VEJywgJ3JldHJ5JywgZnVuY3Rpb24gQ0xPQ0tfU0tFV0VEKHJlc3ApIHsKICAgICAgaWYgKCFyZXNwLmVycm9yKSByZXR1cm47CiAgICAgIGlmICh0aGlzLnNlcnZpY2UuY2xvY2tTa2V3RXJyb3IocmVzcC5lcnJvcikKICAgICAgICAgICYmIHRoaXMuc2VydmljZS5jb25maWcuY29ycmVjdENsb2NrU2tldykgewogICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTsKICAgICAgfQogICAgfSk7CgogICAgYWRkKCdSRURJUkVDVCcsICdyZXRyeScsIGZ1bmN0aW9uIFJFRElSRUNUKHJlc3ApIHsKICAgICAgaWYgKHJlc3AuZXJyb3IgJiYgcmVzcC5lcnJvci5zdGF0dXNDb2RlID49IDMwMCAmJgogICAgICAgICAgcmVzcC5lcnJvci5zdGF0dXNDb2RlIDwgNDAwICYmIHJlc3AuaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ2xvY2F0aW9uJ10pIHsKICAgICAgICB0aGlzLmh0dHBSZXF1ZXN0LmVuZHBvaW50ID0KICAgICAgICAgIG5ldyBBV1MuRW5kcG9pbnQocmVzcC5odHRwUmVzcG9uc2UuaGVhZGVyc1snbG9jYXRpb24nXSk7CiAgICAgICAgdGhpcy5odHRwUmVxdWVzdC5oZWFkZXJzWydIb3N0J10gPSB0aGlzLmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3Q7CiAgICAgICAgcmVzcC5lcnJvci5yZWRpcmVjdCA9IHRydWU7CiAgICAgICAgcmVzcC5lcnJvci5yZXRyeWFibGUgPSB0cnVlOwogICAgICB9CiAgICB9KTsKCiAgICBhZGQoJ1JFVFJZX0NIRUNLJywgJ3JldHJ5JywgZnVuY3Rpb24gUkVUUllfQ0hFQ0socmVzcCkgewogICAgICBpZiAocmVzcC5lcnJvcikgewogICAgICAgIGlmIChyZXNwLmVycm9yLnJlZGlyZWN0ICYmIHJlc3AucmVkaXJlY3RDb3VudCA8IHJlc3AubWF4UmVkaXJlY3RzKSB7CiAgICAgICAgICByZXNwLmVycm9yLnJldHJ5RGVsYXkgPSAwOwogICAgICAgIH0gZWxzZSBpZiAocmVzcC5yZXRyeUNvdW50IDwgcmVzcC5tYXhSZXRyaWVzKSB7CiAgICAgICAgICByZXNwLmVycm9yLnJldHJ5RGVsYXkgPSB0aGlzLnNlcnZpY2UucmV0cnlEZWxheXMocmVzcC5yZXRyeUNvdW50KSB8fCAwOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogICAgYWRkQXN5bmMoJ1JFU0VUX1JFVFJZX1NUQVRFJywgJ2FmdGVyUmV0cnknLCBmdW5jdGlvbiBSRVNFVF9SRVRSWV9TVEFURShyZXNwLCBkb25lKSB7CiAgICAgIHZhciBkZWxheSwgd2lsbFJldHJ5ID0gZmFsc2U7CgogICAgICBpZiAocmVzcC5lcnJvcikgewogICAgICAgIGRlbGF5ID0gcmVzcC5lcnJvci5yZXRyeURlbGF5IHx8IDA7CiAgICAgICAgaWYgKHJlc3AuZXJyb3IucmV0cnlhYmxlICYmIHJlc3AucmV0cnlDb3VudCA8IHJlc3AubWF4UmV0cmllcykgewogICAgICAgICAgcmVzcC5yZXRyeUNvdW50Kys7CiAgICAgICAgICB3aWxsUmV0cnkgPSB0cnVlOwogICAgICAgIH0gZWxzZSBpZiAocmVzcC5lcnJvci5yZWRpcmVjdCAmJiByZXNwLnJlZGlyZWN0Q291bnQgPCByZXNwLm1heFJlZGlyZWN0cykgewogICAgICAgICAgcmVzcC5yZWRpcmVjdENvdW50Kys7CiAgICAgICAgICB3aWxsUmV0cnkgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHdpbGxSZXRyeSkgewogICAgICAgIHJlc3AuZXJyb3IgPSBudWxsOwogICAgICAgIHNldFRpbWVvdXQoZG9uZSwgZGVsYXkpOwogICAgICB9IGVsc2UgewogICAgICAgIGRvbmUoKTsKICAgICAgfQogICAgfSk7CiAgfSksCgogIENvcmVQb3N0OiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7CiAgICBhZGQoJ0VYVFJBQ1RfUkVRVUVTVF9JRCcsICdleHRyYWN0RGF0YScsIEFXUy51dGlsLmV4dHJhY3RSZXF1ZXN0SWQpOwogICAgYWRkKCdFWFRSQUNUX1JFUVVFU1RfSUQnLCAnZXh0cmFjdEVycm9yJywgQVdTLnV0aWwuZXh0cmFjdFJlcXVlc3RJZCk7CgogICAgYWRkKCdFTk9URk9VTkRfRVJST1InLCAnaHR0cEVycm9yJywgZnVuY3Rpb24gRU5PVEZPVU5EX0VSUk9SKGVycikgewogICAgICBpZiAoZXJyLmNvZGUgPT09ICdOZXR3b3JraW5nRXJyb3InICYmIGVyci5lcnJubyA9PT0gJ0VOT1RGT1VORCcpIHsKICAgICAgICB2YXIgbWVzc2FnZSA9ICdJbmFjY2Vzc2libGUgaG9zdDogYCcgKyBlcnIuaG9zdG5hbWUgKwogICAgICAgICAgJ1wnLiBUaGlzIHNlcnZpY2UgbWF5IG5vdCBiZSBhdmFpbGFibGUgaW4gdGhlIGAnICsgZXJyLnJlZ2lvbiArCiAgICAgICAgICAnXCcgcmVnaW9uLic7CiAgICAgICAgdGhpcy5yZXNwb25zZS5lcnJvciA9IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcihtZXNzYWdlKSwgewogICAgICAgICAgY29kZTogJ1Vua25vd25FbmRwb2ludCcsCiAgICAgICAgICByZWdpb246IGVyci5yZWdpb24sCiAgICAgICAgICBob3N0bmFtZTogZXJyLmhvc3RuYW1lLAogICAgICAgICAgcmV0cnlhYmxlOiB0cnVlLAogICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0pLAoKICBMb2dnZXI6IG5ldyBTZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQpIHsKICAgIGFkZCgnTE9HX1JFUVVFU1QnLCAnY29tcGxldGUnLCBmdW5jdGlvbiBMT0dfUkVRVUVTVChyZXNwKSB7CiAgICAgIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7CiAgICAgIHZhciBsb2dnZXIgPSByZXEuc2VydmljZS5jb25maWcubG9nZ2VyOwogICAgICBpZiAoIWxvZ2dlcikgcmV0dXJuOwogICAgICBmdW5jdGlvbiBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZSwgc2hhcGUpIHsKICAgICAgICBpZiAoIXNoYXBlKSB7CiAgICAgICAgICByZXR1cm4gc2hhcGU7CiAgICAgICAgfQogICAgICAgIHN3aXRjaCAoaW5wdXRTaGFwZS50eXBlKSB7CiAgICAgICAgICBjYXNlICdzdHJ1Y3R1cmUnOgogICAgICAgICAgICB2YXIgc3RydWN0ID0ge307CiAgICAgICAgICAgIEFXUy51dGlsLmVhY2goc2hhcGUsIGZ1bmN0aW9uKHN1YlNoYXBlTmFtZSwgc3ViU2hhcGUpIHsKICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGlucHV0U2hhcGUubWVtYmVycywgc3ViU2hhcGVOYW1lKSkgewogICAgICAgICAgICAgICAgc3RydWN0W3N1YlNoYXBlTmFtZV0gPSBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZS5tZW1iZXJzW3N1YlNoYXBlTmFtZV0sIHN1YlNoYXBlKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3RydWN0W3N1YlNoYXBlTmFtZV0gPSBzdWJTaGFwZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gc3RydWN0OwogICAgICAgICAgY2FzZSAnbGlzdCc6CiAgICAgICAgICAgIHZhciBsaXN0ID0gW107CiAgICAgICAgICAgIEFXUy51dGlsLmFycmF5RWFjaChzaGFwZSwgZnVuY3Rpb24oc3ViU2hhcGUsIGluZGV4KSB7CiAgICAgICAgICAgICAgbGlzdC5wdXNoKGZpbHRlclNlbnNpdGl2ZUxvZyhpbnB1dFNoYXBlLm1lbWJlciwgc3ViU2hhcGUpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBsaXN0OwogICAgICAgICAgY2FzZSAnbWFwJzoKICAgICAgICAgICAgdmFyIG1hcCA9IHt9OwogICAgICAgICAgICBBV1MudXRpbC5lYWNoKHNoYXBlLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgICAgbWFwW2tleV0gPSBmaWx0ZXJTZW5zaXRpdmVMb2coaW5wdXRTaGFwZS52YWx1ZSwgdmFsdWUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG1hcDsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIGlmIChpbnB1dFNoYXBlLmlzU2Vuc2l0aXZlKSB7CiAgICAgICAgICAgICAgcmV0dXJuICcqKipTZW5zaXRpdmVJbmZvcm1hdGlvbioqKic7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHNoYXBlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICBmdW5jdGlvbiBidWlsZE1lc3NhZ2UoKSB7CiAgICAgICAgdmFyIHRpbWUgPSByZXNwLnJlcXVlc3Quc2VydmljZS5nZXRTa2V3Q29ycmVjdGVkRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICB2YXIgZGVsdGEgPSAodGltZSAtIHJlcS5zdGFydFRpbWUuZ2V0VGltZSgpKSAvIDEwMDA7CiAgICAgICAgdmFyIGFuc2kgPSBsb2dnZXIuaXNUVFkgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgdmFyIHN0YXR1cyA9IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU7CiAgICAgICAgdmFyIGNlbnNvcmVkUGFyYW1zID0gcmVxLnBhcmFtczsKICAgICAgICBpZiAoCiAgICAgICAgICByZXEuc2VydmljZS5hcGkub3BlcmF0aW9ucyAmJgogICAgICAgICAgICAgIHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dICYmCiAgICAgICAgICAgICAgcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0uaW5wdXQKICAgICAgICApIHsKICAgICAgICAgIHZhciBpbnB1dFNoYXBlID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0uaW5wdXQ7CiAgICAgICAgICBjZW5zb3JlZFBhcmFtcyA9IGZpbHRlclNlbnNpdGl2ZUxvZyhpbnB1dFNoYXBlLCByZXEucGFyYW1zKTsKICAgICAgICB9CiAgICAgICAgdmFyIHBhcmFtcyA9IHJlcXVpcmUoJ3V0aWwnKS5pbnNwZWN0KGNlbnNvcmVkUGFyYW1zLCB0cnVlLCBudWxsKTsKICAgICAgICB2YXIgbWVzc2FnZSA9ICcnOwogICAgICAgIGlmIChhbnNpKSBtZXNzYWdlICs9ICdceDFCWzMzbSc7CiAgICAgICAgbWVzc2FnZSArPSAnW0FXUyAnICsgcmVxLnNlcnZpY2Uuc2VydmljZUlkZW50aWZpZXIgKyAnICcgKyBzdGF0dXM7CiAgICAgICAgbWVzc2FnZSArPSAnICcgKyBkZWx0YS50b1N0cmluZygpICsgJ3MgJyArIHJlc3AucmV0cnlDb3VudCArICcgcmV0cmllc10nOwogICAgICAgIGlmIChhbnNpKSBtZXNzYWdlICs9ICdceDFCWzA7MW0nOwogICAgICAgIG1lc3NhZ2UgKz0gJyAnICsgQVdTLnV0aWwuc3RyaW5nLmxvd2VyRmlyc3QocmVxLm9wZXJhdGlvbik7CiAgICAgICAgbWVzc2FnZSArPSAnKCcgKyBwYXJhbXMgKyAnKSc7CiAgICAgICAgaWYgKGFuc2kpIG1lc3NhZ2UgKz0gJ1x4MUJbMG0nOwogICAgICAgIHJldHVybiBtZXNzYWdlOwogICAgICB9CgogICAgICB2YXIgbGluZSA9IGJ1aWxkTWVzc2FnZSgpOwogICAgICBpZiAodHlwZW9mIGxvZ2dlci5sb2cgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBsb2dnZXIubG9nKGxpbmUpOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsb2dnZXIud3JpdGUgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBsb2dnZXIud3JpdGUobGluZSArICdcbicpOwogICAgICB9CiAgICB9KTsKICB9KSwKCiAgSnNvbjogbmV3IFNlcXVlbnRpYWxFeGVjdXRvcigpLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKGFkZCkgewogICAgdmFyIHN2YyA9IHJlcXVpcmUoJy4vcHJvdG9jb2wvanNvbicpOwogICAgYWRkKCdCVUlMRCcsICdidWlsZCcsIHN2Yy5idWlsZFJlcXVlc3QpOwogICAgYWRkKCdFWFRSQUNUX0RBVEEnLCAnZXh0cmFjdERhdGEnLCBzdmMuZXh0cmFjdERhdGEpOwogICAgYWRkKCdFWFRSQUNUX0VSUk9SJywgJ2V4dHJhY3RFcnJvcicsIHN2Yy5leHRyYWN0RXJyb3IpOwogIH0pLAoKICBSZXN0OiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7CiAgICB2YXIgc3ZjID0gcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0Jyk7CiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7CiAgICBhZGQoJ0VYVFJBQ1RfREFUQScsICdleHRyYWN0RGF0YScsIHN2Yy5leHRyYWN0RGF0YSk7CiAgICBhZGQoJ0VYVFJBQ1RfRVJST1InLCAnZXh0cmFjdEVycm9yJywgc3ZjLmV4dHJhY3RFcnJvcik7CiAgfSksCgogIFJlc3RKc29uOiBuZXcgU2VxdWVudGlhbEV4ZWN1dG9yKCkuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7CiAgICB2YXIgc3ZjID0gcmVxdWlyZSgnLi9wcm90b2NvbC9yZXN0X2pzb24nKTsKICAgIGFkZCgnQlVJTEQnLCAnYnVpbGQnLCBzdmMuYnVpbGRSZXF1ZXN0KTsKICAgIGFkZCgnRVhUUkFDVF9EQVRBJywgJ2V4dHJhY3REYXRhJywgc3ZjLmV4dHJhY3REYXRhKTsKICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTsKICB9KSwKCiAgUmVzdFhtbDogbmV3IFNlcXVlbnRpYWxFeGVjdXRvcigpLmFkZE5hbWVkTGlzdGVuZXJzKGZ1bmN0aW9uKGFkZCkgewogICAgdmFyIHN2YyA9IHJlcXVpcmUoJy4vcHJvdG9jb2wvcmVzdF94bWwnKTsKICAgIGFkZCgnQlVJTEQnLCAnYnVpbGQnLCBzdmMuYnVpbGRSZXF1ZXN0KTsKICAgIGFkZCgnRVhUUkFDVF9EQVRBJywgJ2V4dHJhY3REYXRhJywgc3ZjLmV4dHJhY3REYXRhKTsKICAgIGFkZCgnRVhUUkFDVF9FUlJPUicsICdleHRyYWN0RXJyb3InLCBzdmMuZXh0cmFjdEVycm9yKTsKICB9KSwKCiAgUXVlcnk6IG5ldyBTZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQpIHsKICAgIHZhciBzdmMgPSByZXF1aXJlKCcuL3Byb3RvY29sL3F1ZXJ5Jyk7CiAgICBhZGQoJ0JVSUxEJywgJ2J1aWxkJywgc3ZjLmJ1aWxkUmVxdWVzdCk7CiAgICBhZGQoJ0VYVFJBQ1RfREFUQScsICdleHRyYWN0RGF0YScsIHN2Yy5leHRyYWN0RGF0YSk7CiAgICBhZGQoJ0VYVFJBQ1RfRVJST1InLCAnZXh0cmFjdEVycm9yJywgc3ZjLmV4dHJhY3RFcnJvcik7CiAgfSkKfTsKCn0seyIuL2NvcmUiOjE4LCIuL2Rpc2NvdmVyX2VuZHBvaW50IjoyNiwiLi9wcm90b2NvbC9qc29uIjo0NiwiLi9wcm90b2NvbC9xdWVyeSI6NDcsIi4vcHJvdG9jb2wvcmVzdCI6NDgsIi4vcHJvdG9jb2wvcmVzdF9qc29uIjo0OSwiLi9wcm90b2NvbC9yZXN0X3htbCI6NTAsIi4vc2VxdWVudGlhbF9leGVjdXRvciI6NTgsInV0aWwiOjk3fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDsKCi8qKgogKiBUaGUgZW5kcG9pbnQgdGhhdCBhIHNlcnZpY2Ugd2lsbCB0YWxrIHRvLCBmb3IgZXhhbXBsZSwKICogYCdodHRwczovL2VjMi5hcC1zb3V0aGVhc3QtMS5hbWF6b25hd3MuY29tJ2AuIElmCiAqIHlvdSBuZWVkIHRvIG92ZXJyaWRlIGFuIGVuZHBvaW50IGZvciBhIHNlcnZpY2UsIHlvdSBjYW4KICogc2V0IHRoZSBlbmRwb2ludCBvbiBhIHNlcnZpY2UgYnkgcGFzc2luZyB0aGUgZW5kcG9pbnQKICogb2JqZWN0IHdpdGggdGhlIGBlbmRwb2ludGAgb3B0aW9uIGtleToKICoKICogYGBgamF2YXNjcmlwdAogKiB2YXIgZXAgPSBuZXcgQVdTLkVuZHBvaW50KCdhd3Nwcm94eS5leGFtcGxlLmNvbScpOwogKiB2YXIgczMgPSBuZXcgQVdTLlMzKHtlbmRwb2ludDogZXB9KTsKICogczMuc2VydmljZS5lbmRwb2ludC5ob3N0bmFtZSA9PSAnYXdzcHJveHkuZXhhbXBsZS5jb20nCiAqIGBgYAogKgogKiBOb3RlIHRoYXQgaWYgeW91IGRvIG5vdCBzcGVjaWZ5IGEgcHJvdG9jb2wsIHRoZSBwcm90b2NvbCB3aWxsCiAqIGJlIHNlbGVjdGVkIGJhc2VkIG9uIHlvdXIgY3VycmVudCB7QVdTLmNvbmZpZ30gY29uZmlndXJhdGlvbi4KICoKICogQCFhdHRyaWJ1dGUgcHJvdG9jb2wKICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBwcm90b2NvbCAoaHR0cCBvciBodHRwcykgb2YgdGhlIGVuZHBvaW50CiAqICAgICBVUkwKICogQCFhdHRyaWJ1dGUgaG9zdG5hbWUKICogICBAcmV0dXJuIFtTdHJpbmddIHRoZSBob3N0IHBvcnRpb24gb2YgdGhlIGVuZHBvaW50LCBlLmcuLAogKiAgICAgZXhhbXBsZS5jb20KICogQCFhdHRyaWJ1dGUgaG9zdAogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIGhvc3QgcG9ydGlvbiBvZiB0aGUgZW5kcG9pbnQgaW5jbHVkaW5nCiAqICAgICB0aGUgcG9ydCwgZS5nLiwgZXhhbXBsZS5jb206ODAKICogQCFhdHRyaWJ1dGUgcG9ydAogKiAgIEByZXR1cm4gW0ludGVnZXJdIHRoZSBwb3J0IG9mIHRoZSBlbmRwb2ludAogKiBAIWF0dHJpYnV0ZSBocmVmCiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgZnVsbCBVUkwgb2YgdGhlIGVuZHBvaW50CiAqLwpBV1MuRW5kcG9pbnQgPSBpbmhlcml0KHsKCiAgLyoqCiAgICogQG92ZXJsb2FkIEVuZHBvaW50KGVuZHBvaW50KQogICAqICAgQ29uc3RydWN0cyBhIG5ldyBlbmRwb2ludCBnaXZlbiBhbiBlbmRwb2ludCBVUkwuIElmIHRoZQogICAqICAgVVJMIG9taXRzIGEgcHJvdG9jb2wgKGh0dHAgb3IgaHR0cHMpLCB0aGUgZGVmYXVsdCBwcm90b2NvbAogICAqICAgc2V0IGluIHRoZSBnbG9iYWwge0FXUy5jb25maWd9IHdpbGwgYmUgdXNlZC4KICAgKiAgIEBwYXJhbSBlbmRwb2ludCBbU3RyaW5nXSB0aGUgVVJMIHRvIGNvbnN0cnVjdCBhbiBlbmRwb2ludCBmcm9tCiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIEVuZHBvaW50KGVuZHBvaW50LCBjb25maWcpIHsKICAgIEFXUy51dGlsLmhpZGVQcm9wZXJ0aWVzKHRoaXMsIFsnc2xhc2hlcycsICdhdXRoJywgJ2hhc2gnLCAnc2VhcmNoJywgJ3F1ZXJ5J10pOwoKICAgIGlmICh0eXBlb2YgZW5kcG9pbnQgPT09ICd1bmRlZmluZWQnIHx8IGVuZHBvaW50ID09PSBudWxsKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbmRwb2ludDogJyArIGVuZHBvaW50KTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZHBvaW50ICE9PSAnc3RyaW5nJykgewogICAgICByZXR1cm4gQVdTLnV0aWwuY29weShlbmRwb2ludCk7CiAgICB9CgogICAgaWYgKCFlbmRwb2ludC5tYXRjaCgvXmh0dHAvKSkgewogICAgICB2YXIgdXNlU1NMID0gY29uZmlnICYmIGNvbmZpZy5zc2xFbmFibGVkICE9PSB1bmRlZmluZWQgPwogICAgICAgIGNvbmZpZy5zc2xFbmFibGVkIDogQVdTLmNvbmZpZy5zc2xFbmFibGVkOwogICAgICBlbmRwb2ludCA9ICh1c2VTU0wgPyAnaHR0cHMnIDogJ2h0dHAnKSArICc6Ly8nICsgZW5kcG9pbnQ7CiAgICB9CgogICAgQVdTLnV0aWwudXBkYXRlKHRoaXMsIEFXUy51dGlsLnVybFBhcnNlKGVuZHBvaW50KSk7CgogICAgLy8gRW5zdXJlIHRoZSBwb3J0IHByb3BlcnR5IGlzIHNldCBhcyBhbiBpbnRlZ2VyCiAgICBpZiAodGhpcy5wb3J0KSB7CiAgICAgIHRoaXMucG9ydCA9IHBhcnNlSW50KHRoaXMucG9ydCwgMTApOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5wb3J0ID0gdGhpcy5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyA0NDMgOiA4MDsKICAgIH0KICB9Cgp9KTsKCi8qKgogKiBUaGUgbG93IGxldmVsIEhUVFAgcmVxdWVzdCBvYmplY3QsIGVuY2Fwc3VsYXRpbmcgYWxsIEhUVFAgaGVhZGVyCiAqIGFuZCBib2R5IGRhdGEgc2VudCBieSBhIHNlcnZpY2UgcmVxdWVzdC4KICoKICogQCFhdHRyaWJ1dGUgbWV0aG9kCiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgSFRUUCBtZXRob2Qgb2YgdGhlIHJlcXVlc3QKICogQCFhdHRyaWJ1dGUgcGF0aAogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIHBhdGggcG9ydGlvbiBvZiB0aGUgVVJJLCBlLmcuLAogKiAgICAgIi9saXN0Lz9zdGFydD01Jm51bT0xMCIKICogQCFhdHRyaWJ1dGUgaGVhZGVycwogKiAgIEByZXR1cm4gW21hcDxTdHJpbmcsU3RyaW5nPl0KICogICAgIGEgbWFwIG9mIGhlYWRlciBrZXlzIGFuZCB0aGVpciByZXNwZWN0aXZlIHZhbHVlcwogKiBAIWF0dHJpYnV0ZSBib2R5CiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgcmVxdWVzdCBib2R5IHBheWxvYWQKICogQCFhdHRyaWJ1dGUgZW5kcG9pbnQKICogICBAcmV0dXJuIFtBV1MuRW5kcG9pbnRdIHRoZSBlbmRwb2ludCBmb3IgdGhlIHJlcXVlc3QKICogQCFhdHRyaWJ1dGUgcmVnaW9uCiAqICAgQGFwaSBwcml2YXRlCiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgcmVnaW9uLCBmb3Igc2lnbmluZyBwdXJwb3NlcyBvbmx5LgogKi8KQVdTLkh0dHBSZXF1ZXN0ID0gaW5oZXJpdCh7CgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBIdHRwUmVxdWVzdChlbmRwb2ludCwgcmVnaW9uKSB7CiAgICBlbmRwb2ludCA9IG5ldyBBV1MuRW5kcG9pbnQoZW5kcG9pbnQpOwogICAgdGhpcy5tZXRob2QgPSAnUE9TVCc7CiAgICB0aGlzLnBhdGggPSBlbmRwb2ludC5wYXRoIHx8ICcvJzsKICAgIHRoaXMuaGVhZGVycyA9IHt9OwogICAgdGhpcy5ib2R5ID0gJyc7CiAgICB0aGlzLmVuZHBvaW50ID0gZW5kcG9pbnQ7CiAgICB0aGlzLnJlZ2lvbiA9IHJlZ2lvbjsKICAgIHRoaXMuX3VzZXJBZ2VudCA9ICcnOwogICAgdGhpcy5zZXRVc2VyQWdlbnQoKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBzZXRVc2VyQWdlbnQ6IGZ1bmN0aW9uIHNldFVzZXJBZ2VudCgpIHsKICAgIHRoaXMuX3VzZXJBZ2VudCA9IHRoaXMuaGVhZGVyc1t0aGlzLmdldFVzZXJBZ2VudEhlYWRlck5hbWUoKV0gPSBBV1MudXRpbC51c2VyQWdlbnQoKTsKICB9LAoKICBnZXRVc2VyQWdlbnRIZWFkZXJOYW1lOiBmdW5jdGlvbiBnZXRVc2VyQWdlbnRIZWFkZXJOYW1lKCkgewogICAgdmFyIHByZWZpeCA9IEFXUy51dGlsLmlzQnJvd3NlcigpID8gJ1gtQW16LScgOiAnJzsKICAgIHJldHVybiBwcmVmaXggKyAnVXNlci1BZ2VudCc7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXBwZW5kVG9Vc2VyQWdlbnQ6IGZ1bmN0aW9uIGFwcGVuZFRvVXNlckFnZW50KGFnZW50UGFydGlhbCkgewogICAgaWYgKHR5cGVvZiBhZ2VudFBhcnRpYWwgPT09ICdzdHJpbmcnICYmIGFnZW50UGFydGlhbCkgewogICAgICB0aGlzLl91c2VyQWdlbnQgKz0gJyAnICsgYWdlbnRQYXJ0aWFsOwogICAgfQogICAgdGhpcy5oZWFkZXJzW3RoaXMuZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpXSA9IHRoaXMuX3VzZXJBZ2VudDsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBnZXRVc2VyQWdlbnQ6IGZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpIHsKICAgIHJldHVybiB0aGlzLl91c2VyQWdlbnQ7CiAgfSwKCiAgLyoqCiAgICogQHJldHVybiBbU3RyaW5nXSB0aGUgcGFydCBvZiB0aGUge3BhdGh9IGV4Y2x1ZGluZyB0aGUKICAgKiAgIHF1ZXJ5IHN0cmluZwogICAqLwogIHBhdGhuYW1lOiBmdW5jdGlvbiBwYXRobmFtZSgpIHsKICAgIHJldHVybiB0aGlzLnBhdGguc3BsaXQoJz8nLCAxKVswXTsKICB9LAoKICAvKioKICAgKiBAcmV0dXJuIFtTdHJpbmddIHRoZSBxdWVyeSBzdHJpbmcgcG9ydGlvbiBvZiB0aGUge3BhdGh9CiAgICovCiAgc2VhcmNoOiBmdW5jdGlvbiBzZWFyY2goKSB7CiAgICB2YXIgcXVlcnkgPSB0aGlzLnBhdGguc3BsaXQoJz8nLCAyKVsxXTsKICAgIGlmIChxdWVyeSkgewogICAgICBxdWVyeSA9IEFXUy51dGlsLnF1ZXJ5U3RyaW5nUGFyc2UocXVlcnkpOwogICAgICByZXR1cm4gQVdTLnV0aWwucXVlcnlQYXJhbXNUb1N0cmluZyhxdWVyeSk7CiAgICB9CiAgICByZXR1cm4gJyc7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICogdXBkYXRlIGh0dHBSZXF1ZXN0IGVuZHBvaW50IHdpdGggZW5kcG9pbnQgc3RyaW5nCiAgICovCiAgdXBkYXRlRW5kcG9pbnQ6IGZ1bmN0aW9uIHVwZGF0ZUVuZHBvaW50KGVuZHBvaW50U3RyKSB7CiAgICB2YXIgbmV3RW5kcG9pbnQgPSBuZXcgQVdTLkVuZHBvaW50KGVuZHBvaW50U3RyKTsKICAgIHRoaXMuZW5kcG9pbnQgPSBuZXdFbmRwb2ludDsKICAgIHRoaXMucGF0aCA9IG5ld0VuZHBvaW50LnBhdGggfHwgJy8nOwogIH0KfSk7CgovKioKICogVGhlIGxvdyBsZXZlbCBIVFRQIHJlc3BvbnNlIG9iamVjdCwgZW5jYXBzdWxhdGluZyBhbGwgSFRUUCBoZWFkZXIKICogYW5kIGJvZHkgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LgogKgogKiBAIWF0dHJpYnV0ZSBzdGF0dXNDb2RlCiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIEhUVFAgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlIChlLmcuLCAyMDAsIDQwNCkKICogQCFhdHRyaWJ1dGUgaGVhZGVycwogKiAgIEByZXR1cm4gW21hcDxTdHJpbmcsU3RyaW5nPl0KICogICAgICBhIG1hcCBvZiByZXNwb25zZSBoZWFkZXIga2V5cyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSB2YWx1ZXMKICogQCFhdHRyaWJ1dGUgYm9keQogKiAgIEByZXR1cm4gW1N0cmluZ10gdGhlIHJlc3BvbnNlIGJvZHkgcGF5bG9hZAogKiBAIWF0dHJpYnV0ZSBbcl0gc3RyZWFtaW5nCiAqICAgQHJldHVybiBbQm9vbGVhbl0gd2hldGhlciB0aGlzIHJlc3BvbnNlIGlzIGJlaW5nIHN0cmVhbWVkIGF0IGEgbG93LWxldmVsLgogKiAgICAgRGVmYXVsdHMgdG8gYGZhbHNlYCAoYnVmZmVyZWQgcmVhZHMpLiBEbyBub3QgbW9kaWZ5IHRoaXMgbWFudWFsbHksIHVzZQogKiAgICAge2NyZWF0ZVVuYnVmZmVyZWRTdHJlYW19IHRvIGNvbnZlcnQgdGhlIHN0cmVhbSB0byB1bmJ1ZmZlcmVkIG1vZGUKICogICAgIGluc3RlYWQuCiAqLwpBV1MuSHR0cFJlc3BvbnNlID0gaW5oZXJpdCh7CgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBIdHRwUmVzcG9uc2UoKSB7CiAgICB0aGlzLnN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7CiAgICB0aGlzLmhlYWRlcnMgPSB7fTsKICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDsKICAgIHRoaXMuc3RyZWFtaW5nID0gZmFsc2U7CiAgICB0aGlzLnN0cmVhbSA9IG51bGw7CiAgfSwKCiAgLyoqCiAgICogRGlzYWJsZXMgYnVmZmVyaW5nIG9uIHRoZSBIVFRQIHJlc3BvbnNlIGFuZCByZXR1cm5zIHRoZSBzdHJlYW0gZm9yIHJlYWRpbmcuCiAgICogQHJldHVybiBbU3RyZWFtLCBYTUxIdHRwUmVxdWVzdCwgbnVsbF0gdGhlIHVuZGVybHlpbmcgc3RyZWFtIG9iamVjdC4KICAgKiAgIFVzZSB0aGlzIG9iamVjdCB0byBkaXJlY3RseSByZWFkIGRhdGEgb2ZmIG9mIHRoZSBzdHJlYW0uCiAgICogQG5vdGUgVGhpcyBvYmplY3QgaXMgb25seSBhdmFpbGFibGUgYWZ0ZXIgdGhlIHtBV1MuUmVxdWVzdH5odHRwSGVhZGVyc30KICAgKiAgIGV2ZW50IGhhcyBmaXJlZC4gVGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgcHJpb3IgdG8KICAgKiAgIHtBV1MuUmVxdWVzdH5odHRwRGF0YX0uCiAgICogQGV4YW1wbGUgVGFraW5nIGNvbnRyb2wgb2YgYSBzdHJlYW0KICAgKiAgIHJlcXVlc3Qub24oJ2h0dHBIZWFkZXJzJywgZnVuY3Rpb24oc3RhdHVzQ29kZSwgaGVhZGVycykgewogICAqICAgICBpZiAoc3RhdHVzQ29kZSA8IDMwMCkgewogICAqICAgICAgIGlmIChoZWFkZXJzLmV0YWcgPT09ICd4eXonKSB7CiAgICogICAgICAgICAvLyBwaXBlIHRoZSBzdHJlYW0sIGRpc2FibGluZyBidWZmZXJpbmcKICAgKiAgICAgICAgIHZhciBzdHJlYW0gPSB0aGlzLnJlc3BvbnNlLmh0dHBSZXNwb25zZS5jcmVhdGVVbmJ1ZmZlcmVkU3RyZWFtKCk7CiAgICogICAgICAgICBzdHJlYW0ucGlwZShwcm9jZXNzLnN0ZG91dCk7CiAgICogICAgICAgfSBlbHNlIHsgLy8gYWJvcnQgdGhpcyByZXF1ZXN0IGFuZCBzZXQgYSBiZXR0ZXIgZXJyb3IgbWVzc2FnZQogICAqICAgICAgICAgdGhpcy5hYm9ydCgpOwogICAqICAgICAgICAgdGhpcy5yZXNwb25zZS5lcnJvciA9IG5ldyBFcnJvcignSW52YWxpZCBFVGFnJyk7CiAgICogICAgICAgfQogICAqICAgICB9CiAgICogICB9KS5zZW5kKGNvbnNvbGUubG9nKTsKICAgKi8KICBjcmVhdGVVbmJ1ZmZlcmVkU3RyZWFtOiBmdW5jdGlvbiBjcmVhdGVVbmJ1ZmZlcmVkU3RyZWFtKCkgewogICAgdGhpcy5zdHJlYW1pbmcgPSB0cnVlOwogICAgcmV0dXJuIHRoaXMuc3RyZWFtOwogIH0KfSk7CgoKQVdTLkh0dHBDbGllbnQgPSBpbmhlcml0KHt9KTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5IdHRwQ2xpZW50LmdldEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0SW5zdGFuY2UoKSB7CiAgaWYgKHRoaXMuc2luZ2xldG9uID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXMuc2luZ2xldG9uID0gbmV3IHRoaXMoKTsKICB9CiAgcmV0dXJuIHRoaXMuc2luZ2xldG9uOwp9OwoKfSx7Ii4vY29yZSI6MTh9XSwzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7CnJlcXVpcmUoJy4uL2h0dHAnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5YSFJDbGllbnQgPSBBV1MudXRpbC5pbmhlcml0KHsKICBoYW5kbGVSZXF1ZXN0OiBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KGh0dHBSZXF1ZXN0LCBodHRwT3B0aW9ucywgY2FsbGJhY2ssIGVyckNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZW5kcG9pbnQgPSBodHRwUmVxdWVzdC5lbmRwb2ludDsKICAgIHZhciBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpOwogICAgdmFyIGhyZWYgPSBlbmRwb2ludC5wcm90b2NvbCArICcvLycgKyBlbmRwb2ludC5ob3N0bmFtZTsKICAgIGlmIChlbmRwb2ludC5wb3J0ICE9PSA4MCAmJiBlbmRwb2ludC5wb3J0ICE9PSA0NDMpIHsKICAgICAgaHJlZiArPSAnOicgKyBlbmRwb2ludC5wb3J0OwogICAgfQogICAgaHJlZiArPSBodHRwUmVxdWVzdC5wYXRoOwoKICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSwgaGVhZGVyc0VtaXR0ZWQgPSBmYWxzZTsKICAgIGh0dHBSZXF1ZXN0LnN0cmVhbSA9IHhocjsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIGZ1bmN0aW9uKCkgewogICAgICB0cnkgewogICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAwKSByZXR1cm47IC8vIDAgY29kZSBpcyBpbnZhbGlkCiAgICAgIH0gY2F0Y2ggKGUpIHsgcmV0dXJuOyB9CgogICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID49IHRoaXMuSEVBREVSU19SRUNFSVZFRCAmJiAhaGVhZGVyc0VtaXR0ZWQpIHsKICAgICAgICBlbWl0dGVyLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzOwogICAgICAgIGVtaXR0ZXIuaGVhZGVycyA9IHNlbGYucGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSk7CiAgICAgICAgZW1pdHRlci5lbWl0KAogICAgICAgICAgJ2hlYWRlcnMnLAogICAgICAgICAgZW1pdHRlci5zdGF0dXNDb2RlLAogICAgICAgICAgZW1pdHRlci5oZWFkZXJzLAogICAgICAgICAgeGhyLnN0YXR1c1RleHQKICAgICAgICApOwogICAgICAgIGhlYWRlcnNFbWl0dGVkID0gdHJ1ZTsKICAgICAgfQogICAgICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSB0aGlzLkRPTkUpIHsKICAgICAgICBzZWxmLmZpbmlzaFJlcXVlc3QoeGhyLCBlbWl0dGVyKTsKICAgICAgfQogICAgfSwgZmFsc2UpOwogICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgZW1pdHRlci5lbWl0KCdzZW5kUHJvZ3Jlc3MnLCBldnQpOwogICAgfSk7CiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgIGVtaXR0ZXIuZW1pdCgncmVjZWl2ZVByb2dyZXNzJywgZXZ0KTsKICAgIH0sIGZhbHNlKTsKICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCd0aW1lb3V0JywgZnVuY3Rpb24gKCkgewogICAgICBlcnJDYWxsYmFjayhBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoJ1RpbWVvdXQnKSwge2NvZGU6ICdUaW1lb3V0RXJyb3InfSkpOwogICAgfSwgZmFsc2UpOwogICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkgewogICAgICBlcnJDYWxsYmFjayhBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoJ05ldHdvcmsgRmFpbHVyZScpLCB7CiAgICAgICAgY29kZTogJ05ldHdvcmtpbmdFcnJvcicKICAgICAgfSkpOwogICAgfSwgZmFsc2UpOwogICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkgewogICAgICBlcnJDYWxsYmFjayhBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcpLCB7CiAgICAgICAgY29kZTogJ1JlcXVlc3RBYm9ydGVkRXJyb3InCiAgICAgIH0pKTsKICAgIH0sIGZhbHNlKTsKCiAgICBjYWxsYmFjayhlbWl0dGVyKTsKICAgIHhoci5vcGVuKGh0dHBSZXF1ZXN0Lm1ldGhvZCwgaHJlZiwgaHR0cE9wdGlvbnMueGhyQXN5bmMgIT09IGZhbHNlKTsKICAgIEFXUy51dGlsLmVhY2goaHR0cFJlcXVlc3QuaGVhZGVycywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGtleSAhPT0gJ0NvbnRlbnQtTGVuZ3RoJyAmJiBrZXkgIT09ICdVc2VyLUFnZW50JyAmJiBrZXkgIT09ICdIb3N0JykgewogICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsdWUpOwogICAgICB9CiAgICB9KTsKCiAgICBpZiAoaHR0cE9wdGlvbnMudGltZW91dCAmJiBodHRwT3B0aW9ucy54aHJBc3luYyAhPT0gZmFsc2UpIHsKICAgICAgeGhyLnRpbWVvdXQgPSBodHRwT3B0aW9ucy50aW1lb3V0OwogICAgfQoKICAgIGlmIChodHRwT3B0aW9ucy54aHJXaXRoQ3JlZGVudGlhbHMpIHsKICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7CiAgICB9CiAgICB0cnkgeyB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJzsgfSBjYXRjaCAoZSkge30KCiAgICB0cnkgewogICAgICBpZiAoaHR0cFJlcXVlc3QuYm9keSkgewogICAgICAgIHhoci5zZW5kKGh0dHBSZXF1ZXN0LmJvZHkpOwogICAgICB9IGVsc2UgewogICAgICAgIHhoci5zZW5kKCk7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycikgewogICAgICBpZiAoaHR0cFJlcXVlc3QuYm9keSAmJiB0eXBlb2YgaHR0cFJlcXVlc3QuYm9keS5idWZmZXIgPT09ICdvYmplY3QnKSB7CiAgICAgICAgeGhyLnNlbmQoaHR0cFJlcXVlc3QuYm9keS5idWZmZXIpOyAvLyBzZW5kIEFycmF5QnVmZmVyIGRpcmVjdGx5CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgZXJyOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGVtaXR0ZXI7CiAgfSwKCiAgcGFyc2VIZWFkZXJzOiBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykgewogICAgdmFyIGhlYWRlcnMgPSB7fTsKICAgIEFXUy51dGlsLmFycmF5RWFjaChyYXdIZWFkZXJzLnNwbGl0KC9ccj9cbi8pLCBmdW5jdGlvbiAobGluZSkgewogICAgICB2YXIga2V5ID0gbGluZS5zcGxpdCgnOicsIDEpWzBdOwogICAgICB2YXIgdmFsdWUgPSBsaW5lLnN1YnN0cmluZyhrZXkubGVuZ3RoICsgMik7CiAgICAgIGlmIChrZXkubGVuZ3RoID4gMCkgaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTsKICAgIH0pOwogICAgcmV0dXJuIGhlYWRlcnM7CiAgfSwKCiAgZmluaXNoUmVxdWVzdDogZnVuY3Rpb24gZmluaXNoUmVxdWVzdCh4aHIsIGVtaXR0ZXIpIHsKICAgIHZhciBidWZmZXI7CiAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gJ2FycmF5YnVmZmVyJyAmJiB4aHIucmVzcG9uc2UpIHsKICAgICAgdmFyIGFiID0geGhyLnJlc3BvbnNlOwogICAgICBidWZmZXIgPSBuZXcgQVdTLnV0aWwuQnVmZmVyKGFiLmJ5dGVMZW5ndGgpOwogICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGFiKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyArK2kpIHsKICAgICAgICBidWZmZXJbaV0gPSB2aWV3W2ldOwogICAgICB9CiAgICB9CgogICAgdHJ5IHsKICAgICAgaWYgKCFidWZmZXIgJiYgdHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgYnVmZmVyID0gbmV3IEFXUy51dGlsLkJ1ZmZlcih4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgfQogICAgfSBjYXRjaCAoZSkge30KCiAgICBpZiAoYnVmZmVyKSBlbWl0dGVyLmVtaXQoJ2RhdGEnLCBidWZmZXIpOwogICAgZW1pdHRlci5lbWl0KCdlbmQnKTsKICB9Cn0pOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KQVdTLkh0dHBDbGllbnQucHJvdG90eXBlID0gQVdTLlhIUkNsaWVudC5wcm90b3R5cGU7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9IDE7Cgp9LHsiLi4vY29yZSI6MTgsIi4uL2h0dHAiOjM0LCJldmVudHMiOjgyfV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTsKCmZ1bmN0aW9uIEpzb25CdWlsZGVyKCkgeyB9CgpKc29uQnVpbGRlci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbih2YWx1ZSwgc2hhcGUpIHsKICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodHJhbnNsYXRlKHZhbHVlLCBzaGFwZSkpOwp9OwoKZnVuY3Rpb24gdHJhbnNsYXRlKHZhbHVlLCBzaGFwZSkgewogIGlmICghc2hhcGUgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKCiAgc3dpdGNoIChzaGFwZS50eXBlKSB7CiAgICBjYXNlICdzdHJ1Y3R1cmUnOiByZXR1cm4gdHJhbnNsYXRlU3RydWN0dXJlKHZhbHVlLCBzaGFwZSk7CiAgICBjYXNlICdtYXAnOiByZXR1cm4gdHJhbnNsYXRlTWFwKHZhbHVlLCBzaGFwZSk7CiAgICBjYXNlICdsaXN0JzogcmV0dXJuIHRyYW5zbGF0ZUxpc3QodmFsdWUsIHNoYXBlKTsKICAgIGRlZmF1bHQ6IHJldHVybiB0cmFuc2xhdGVTY2FsYXIodmFsdWUsIHNoYXBlKTsKICB9Cn0KCmZ1bmN0aW9uIHRyYW5zbGF0ZVN0cnVjdHVyZShzdHJ1Y3R1cmUsIHNoYXBlKSB7CiAgdmFyIHN0cnVjdCA9IHt9OwogIHV0aWwuZWFjaChzdHJ1Y3R1cmUsIGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7CiAgICB2YXIgbWVtYmVyU2hhcGUgPSBzaGFwZS5tZW1iZXJzW25hbWVdOwogICAgaWYgKG1lbWJlclNoYXBlKSB7CiAgICAgIGlmIChtZW1iZXJTaGFwZS5sb2NhdGlvbiAhPT0gJ2JvZHknKSByZXR1cm47CiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBtZW1iZXJTaGFwZS5pc0xvY2F0aW9uTmFtZSA/IG1lbWJlclNoYXBlLm5hbWUgOiBuYW1lOwogICAgICB2YXIgcmVzdWx0ID0gdHJhbnNsYXRlKHZhbHVlLCBtZW1iZXJTaGFwZSk7CiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgc3RydWN0W2xvY2F0aW9uTmFtZV0gPSByZXN1bHQ7CiAgICB9CiAgfSk7CiAgcmV0dXJuIHN0cnVjdDsKfQoKZnVuY3Rpb24gdHJhbnNsYXRlTGlzdChsaXN0LCBzaGFwZSkgewogIHZhciBvdXQgPSBbXTsKICB1dGlsLmFycmF5RWFjaChsaXN0LCBmdW5jdGlvbih2YWx1ZSkgewogICAgdmFyIHJlc3VsdCA9IHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUubWVtYmVyKTsKICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgb3V0LnB1c2gocmVzdWx0KTsKICB9KTsKICByZXR1cm4gb3V0Owp9CgpmdW5jdGlvbiB0cmFuc2xhdGVNYXAobWFwLCBzaGFwZSkgewogIHZhciBvdXQgPSB7fTsKICB1dGlsLmVhY2gobWFwLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICB2YXIgcmVzdWx0ID0gdHJhbnNsYXRlKHZhbHVlLCBzaGFwZS52YWx1ZSk7CiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIG91dFtrZXldID0gcmVzdWx0OwogIH0pOwogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIHRyYW5zbGF0ZVNjYWxhcih2YWx1ZSwgc2hhcGUpIHsKICByZXR1cm4gc2hhcGUudG9XaXJlRm9ybWF0KHZhbHVlKTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBKc29uQnVpbGRlcjsKCn0seyIuLi91dGlsIjo3MX1dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7CgpmdW5jdGlvbiBKc29uUGFyc2VyKCkgeyB9CgpKc29uUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHZhbHVlLCBzaGFwZSkgewogIHJldHVybiB0cmFuc2xhdGUoSlNPTi5wYXJzZSh2YWx1ZSksIHNoYXBlKTsKfTsKCmZ1bmN0aW9uIHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUpIHsKICBpZiAoIXNoYXBlIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7CgogIHN3aXRjaCAoc2hhcGUudHlwZSkgewogICAgY2FzZSAnc3RydWN0dXJlJzogcmV0dXJuIHRyYW5zbGF0ZVN0cnVjdHVyZSh2YWx1ZSwgc2hhcGUpOwogICAgY2FzZSAnbWFwJzogcmV0dXJuIHRyYW5zbGF0ZU1hcCh2YWx1ZSwgc2hhcGUpOwogICAgY2FzZSAnbGlzdCc6IHJldHVybiB0cmFuc2xhdGVMaXN0KHZhbHVlLCBzaGFwZSk7CiAgICBkZWZhdWx0OiByZXR1cm4gdHJhbnNsYXRlU2NhbGFyKHZhbHVlLCBzaGFwZSk7CiAgfQp9CgpmdW5jdGlvbiB0cmFuc2xhdGVTdHJ1Y3R1cmUoc3RydWN0dXJlLCBzaGFwZSkgewogIGlmIChzdHJ1Y3R1cmUgPT0gbnVsbCkgcmV0dXJuIHVuZGVmaW5lZDsKCiAgdmFyIHN0cnVjdCA9IHt9OwogIHZhciBzaGFwZU1lbWJlcnMgPSBzaGFwZS5tZW1iZXJzOwogIHV0aWwuZWFjaChzaGFwZU1lbWJlcnMsIGZ1bmN0aW9uKG5hbWUsIG1lbWJlclNoYXBlKSB7CiAgICB2YXIgbG9jYXRpb25OYW1lID0gbWVtYmVyU2hhcGUuaXNMb2NhdGlvbk5hbWUgPyBtZW1iZXJTaGFwZS5uYW1lIDogbmFtZTsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3RydWN0dXJlLCBsb2NhdGlvbk5hbWUpKSB7CiAgICAgIHZhciB2YWx1ZSA9IHN0cnVjdHVyZVtsb2NhdGlvbk5hbWVdOwogICAgICB2YXIgcmVzdWx0ID0gdHJhbnNsYXRlKHZhbHVlLCBtZW1iZXJTaGFwZSk7CiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkgc3RydWN0W25hbWVdID0gcmVzdWx0OwogICAgfQogIH0pOwogIHJldHVybiBzdHJ1Y3Q7Cn0KCmZ1bmN0aW9uIHRyYW5zbGF0ZUxpc3QobGlzdCwgc2hhcGUpIHsKICBpZiAobGlzdCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwoKICB2YXIgb3V0ID0gW107CiAgdXRpbC5hcnJheUVhY2gobGlzdCwgZnVuY3Rpb24odmFsdWUpIHsKICAgIHZhciByZXN1bHQgPSB0cmFuc2xhdGUodmFsdWUsIHNoYXBlLm1lbWJlcik7CiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIG91dC5wdXNoKG51bGwpOwogICAgZWxzZSBvdXQucHVzaChyZXN1bHQpOwogIH0pOwogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIHRyYW5zbGF0ZU1hcChtYXAsIHNoYXBlKSB7CiAgaWYgKG1hcCA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkOwoKICB2YXIgb3V0ID0ge307CiAgdXRpbC5lYWNoKG1hcCwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgdmFyIHJlc3VsdCA9IHRyYW5zbGF0ZSh2YWx1ZSwgc2hhcGUudmFsdWUpOwogICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSBvdXRba2V5XSA9IG51bGw7CiAgICBlbHNlIG91dFtrZXldID0gcmVzdWx0OwogIH0pOwogIHJldHVybiBvdXQ7Cn0KCmZ1bmN0aW9uIHRyYW5zbGF0ZVNjYWxhcih2YWx1ZSwgc2hhcGUpIHsKICByZXR1cm4gc2hhcGUudG9UeXBlKHZhbHVlKTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBKc29uUGFyc2VyOwoKfSx7Ii4uL3V0aWwiOjcxfV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4vY29sbGVjdGlvbicpOwp2YXIgT3BlcmF0aW9uID0gcmVxdWlyZSgnLi9vcGVyYXRpb24nKTsKdmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpOwp2YXIgUGFnaW5hdG9yID0gcmVxdWlyZSgnLi9wYWdpbmF0b3InKTsKdmFyIFJlc291cmNlV2FpdGVyID0gcmVxdWlyZSgnLi9yZXNvdXJjZV93YWl0ZXInKTsKCnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgcHJvcGVydHkgPSB1dGlsLnByb3BlcnR5Owp2YXIgbWVtb2l6ZWRQcm9wZXJ0eSA9IHV0aWwubWVtb2l6ZWRQcm9wZXJ0eTsKCmZ1bmN0aW9uIEFwaShhcGksIG9wdGlvbnMpIHsKICB2YXIgc2VsZiA9IHRoaXM7CiAgYXBpID0gYXBpIHx8IHt9OwogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwogIG9wdGlvbnMuYXBpID0gdGhpczsKCiAgYXBpLm1ldGFkYXRhID0gYXBpLm1ldGFkYXRhIHx8IHt9OwoKICBwcm9wZXJ0eSh0aGlzLCAnaXNBcGknLCB0cnVlLCBmYWxzZSk7CiAgcHJvcGVydHkodGhpcywgJ2FwaVZlcnNpb24nLCBhcGkubWV0YWRhdGEuYXBpVmVyc2lvbik7CiAgcHJvcGVydHkodGhpcywgJ2VuZHBvaW50UHJlZml4JywgYXBpLm1ldGFkYXRhLmVuZHBvaW50UHJlZml4KTsKICBwcm9wZXJ0eSh0aGlzLCAnc2lnbmluZ05hbWUnLCBhcGkubWV0YWRhdGEuc2lnbmluZ05hbWUpOwogIHByb3BlcnR5KHRoaXMsICdnbG9iYWxFbmRwb2ludCcsIGFwaS5tZXRhZGF0YS5nbG9iYWxFbmRwb2ludCk7CiAgcHJvcGVydHkodGhpcywgJ3NpZ25hdHVyZVZlcnNpb24nLCBhcGkubWV0YWRhdGEuc2lnbmF0dXJlVmVyc2lvbik7CiAgcHJvcGVydHkodGhpcywgJ2pzb25WZXJzaW9uJywgYXBpLm1ldGFkYXRhLmpzb25WZXJzaW9uKTsKICBwcm9wZXJ0eSh0aGlzLCAndGFyZ2V0UHJlZml4JywgYXBpLm1ldGFkYXRhLnRhcmdldFByZWZpeCk7CiAgcHJvcGVydHkodGhpcywgJ3Byb3RvY29sJywgYXBpLm1ldGFkYXRhLnByb3RvY29sKTsKICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgYXBpLm1ldGFkYXRhLnRpbWVzdGFtcEZvcm1hdCk7CiAgcHJvcGVydHkodGhpcywgJ3htbE5hbWVzcGFjZVVyaScsIGFwaS5tZXRhZGF0YS54bWxOYW1lc3BhY2UpOwogIHByb3BlcnR5KHRoaXMsICdhYmJyZXZpYXRpb24nLCBhcGkubWV0YWRhdGEuc2VydmljZUFiYnJldmlhdGlvbik7CiAgcHJvcGVydHkodGhpcywgJ2Z1bGxOYW1lJywgYXBpLm1ldGFkYXRhLnNlcnZpY2VGdWxsTmFtZSk7CiAgcHJvcGVydHkodGhpcywgJ3NlcnZpY2VJZCcsIGFwaS5tZXRhZGF0YS5zZXJ2aWNlSWQpOwoKICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdjbGFzc05hbWUnLCBmdW5jdGlvbigpIHsKICAgIHZhciBuYW1lID0gYXBpLm1ldGFkYXRhLnNlcnZpY2VBYmJyZXZpYXRpb24gfHwgYXBpLm1ldGFkYXRhLnNlcnZpY2VGdWxsTmFtZTsKICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7CgogICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvXkFtYXpvbnxBV1Nccyp8XCguKnxccyt8XFcrL2csICcnKTsKICAgIGlmIChuYW1lID09PSAnRWxhc3RpY0xvYWRCYWxhbmNpbmcnKSBuYW1lID0gJ0VMQic7CiAgICByZXR1cm4gbmFtZTsKICB9KTsKCiAgZnVuY3Rpb24gYWRkRW5kcG9pbnRPcGVyYXRpb24obmFtZSwgb3BlcmF0aW9uKSB7CiAgICBpZiAob3BlcmF0aW9uLmVuZHBvaW50b3BlcmF0aW9uID09PSB0cnVlKSB7CiAgICAgIHByb3BlcnR5KHNlbGYsICdlbmRwb2ludE9wZXJhdGlvbicsIHV0aWwuc3RyaW5nLmxvd2VyRmlyc3QobmFtZSkpOwogICAgfQogIH0KCiAgcHJvcGVydHkodGhpcywgJ29wZXJhdGlvbnMnLCBuZXcgQ29sbGVjdGlvbihhcGkub3BlcmF0aW9ucywgb3B0aW9ucywgZnVuY3Rpb24obmFtZSwgb3BlcmF0aW9uKSB7CiAgICByZXR1cm4gbmV3IE9wZXJhdGlvbihuYW1lLCBvcGVyYXRpb24sIG9wdGlvbnMpOwogIH0sIHV0aWwuc3RyaW5nLmxvd2VyRmlyc3QsIGFkZEVuZHBvaW50T3BlcmF0aW9uKSk7CgogIHByb3BlcnR5KHRoaXMsICdzaGFwZXMnLCBuZXcgQ29sbGVjdGlvbihhcGkuc2hhcGVzLCBvcHRpb25zLCBmdW5jdGlvbihuYW1lLCBzaGFwZSkgewogICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShzaGFwZSwgb3B0aW9ucyk7CiAgfSkpOwoKICBwcm9wZXJ0eSh0aGlzLCAncGFnaW5hdG9ycycsIG5ldyBDb2xsZWN0aW9uKGFwaS5wYWdpbmF0b3JzLCBvcHRpb25zLCBmdW5jdGlvbihuYW1lLCBwYWdpbmF0b3IpIHsKICAgIHJldHVybiBuZXcgUGFnaW5hdG9yKG5hbWUsIHBhZ2luYXRvciwgb3B0aW9ucyk7CiAgfSkpOwoKICBwcm9wZXJ0eSh0aGlzLCAnd2FpdGVycycsIG5ldyBDb2xsZWN0aW9uKGFwaS53YWl0ZXJzLCBvcHRpb25zLCBmdW5jdGlvbihuYW1lLCB3YWl0ZXIpIHsKICAgIHJldHVybiBuZXcgUmVzb3VyY2VXYWl0ZXIobmFtZSwgd2FpdGVyLCBvcHRpb25zKTsKICB9LCB1dGlsLnN0cmluZy5sb3dlckZpcnN0KSk7CgogIGlmIChvcHRpb25zLmRvY3VtZW50YXRpb24pIHsKICAgIHByb3BlcnR5KHRoaXMsICdkb2N1bWVudGF0aW9uJywgYXBpLmRvY3VtZW50YXRpb24pOwogICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb25VcmwnLCBhcGkuZG9jdW1lbnRhdGlvblVybCk7CiAgfQp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IEFwaTsKCn0seyIuLi91dGlsIjo3MSwiLi9jb2xsZWN0aW9uIjozOSwiLi9vcGVyYXRpb24iOjQwLCIuL3BhZ2luYXRvciI6NDEsIi4vcmVzb3VyY2Vfd2FpdGVyIjo0MiwiLi9zaGFwZSI6NDN9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZW1vaXplZFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vdXRpbCcpLm1lbW9pemVkUHJvcGVydHk7CgpmdW5jdGlvbiBtZW1vaXplKG5hbWUsIHZhbHVlLCBmYWN0b3J5LCBuYW1lVHIpIHsKICBtZW1vaXplZFByb3BlcnR5KHRoaXMsIG5hbWVUcihuYW1lKSwgZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZSk7CiAgfSk7Cn0KCmZ1bmN0aW9uIENvbGxlY3Rpb24oaXRlcmFibGUsIG9wdGlvbnMsIGZhY3RvcnksIG5hbWVUciwgY2FsbGJhY2spIHsKICBuYW1lVHIgPSBuYW1lVHIgfHwgU3RyaW5nOwogIHZhciBzZWxmID0gdGhpczsKCiAgZm9yICh2YXIgaWQgaW4gaXRlcmFibGUpIHsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlcmFibGUsIGlkKSkgewogICAgICBtZW1vaXplLmNhbGwoc2VsZiwgaWQsIGl0ZXJhYmxlW2lkXSwgZmFjdG9yeSwgbmFtZVRyKTsKICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhpZCwgaXRlcmFibGVbaWRdKTsKICAgIH0KICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGlvbjsKCn0seyIuLi91dGlsIjo3MX1dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIFNoYXBlID0gcmVxdWlyZSgnLi9zaGFwZScpOwoKdmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7CnZhciBwcm9wZXJ0eSA9IHV0aWwucHJvcGVydHk7CnZhciBtZW1vaXplZFByb3BlcnR5ID0gdXRpbC5tZW1vaXplZFByb3BlcnR5OwoKZnVuY3Rpb24gT3BlcmF0aW9uKG5hbWUsIG9wZXJhdGlvbiwgb3B0aW9ucykgewogIHZhciBzZWxmID0gdGhpczsKICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgcHJvcGVydHkodGhpcywgJ25hbWUnLCBvcGVyYXRpb24ubmFtZSB8fCBuYW1lKTsKICBwcm9wZXJ0eSh0aGlzLCAnYXBpJywgb3B0aW9ucy5hcGksIGZhbHNlKTsKCiAgb3BlcmF0aW9uLmh0dHAgPSBvcGVyYXRpb24uaHR0cCB8fCB7fTsKICBwcm9wZXJ0eSh0aGlzLCAnZW5kcG9pbnQnLCBvcGVyYXRpb24uZW5kcG9pbnQpOwogIHByb3BlcnR5KHRoaXMsICdodHRwTWV0aG9kJywgb3BlcmF0aW9uLmh0dHAubWV0aG9kIHx8ICdQT1NUJyk7CiAgcHJvcGVydHkodGhpcywgJ2h0dHBQYXRoJywgb3BlcmF0aW9uLmh0dHAucmVxdWVzdFVyaSB8fCAnLycpOwogIHByb3BlcnR5KHRoaXMsICdhdXRodHlwZScsIG9wZXJhdGlvbi5hdXRodHlwZSB8fCAnJyk7CiAgcHJvcGVydHkoCiAgICB0aGlzLAogICAgJ2VuZHBvaW50RGlzY292ZXJ5UmVxdWlyZWQnLAogICAgb3BlcmF0aW9uLmVuZHBvaW50ZGlzY292ZXJ5ID8KICAgICAgKG9wZXJhdGlvbi5lbmRwb2ludGRpc2NvdmVyeS5yZXF1aXJlZCA/ICdSRVFVSVJFRCcgOiAnT1BUSU9OQUwnKSA6CiAgICAnTlVMTCcKICApOwoKICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdpbnB1dCcsIGZ1bmN0aW9uKCkgewogICAgaWYgKCFvcGVyYXRpb24uaW5wdXQpIHsKICAgICAgcmV0dXJuIG5ldyBTaGFwZS5jcmVhdGUoe3R5cGU6ICdzdHJ1Y3R1cmUnfSwgb3B0aW9ucyk7CiAgICB9CiAgICByZXR1cm4gU2hhcGUuY3JlYXRlKG9wZXJhdGlvbi5pbnB1dCwgb3B0aW9ucyk7CiAgfSk7CgogIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ291dHB1dCcsIGZ1bmN0aW9uKCkgewogICAgaWYgKCFvcGVyYXRpb24ub3V0cHV0KSB7CiAgICAgIHJldHVybiBuZXcgU2hhcGUuY3JlYXRlKHt0eXBlOiAnc3RydWN0dXJlJ30sIG9wdGlvbnMpOwogICAgfQogICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShvcGVyYXRpb24ub3V0cHV0LCBvcHRpb25zKTsKICB9KTsKCiAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnZXJyb3JzJywgZnVuY3Rpb24oKSB7CiAgICB2YXIgbGlzdCA9IFtdOwogICAgaWYgKCFvcGVyYXRpb24uZXJyb3JzKSByZXR1cm4gbnVsbDsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wZXJhdGlvbi5lcnJvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgbGlzdC5wdXNoKFNoYXBlLmNyZWF0ZShvcGVyYXRpb24uZXJyb3JzW2ldLCBvcHRpb25zKSk7CiAgICB9CgogICAgcmV0dXJuIGxpc3Q7CiAgfSk7CgogIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ3BhZ2luYXRvcicsIGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIG9wdGlvbnMuYXBpLnBhZ2luYXRvcnNbbmFtZV07CiAgfSk7CgogIGlmIChvcHRpb25zLmRvY3VtZW50YXRpb24pIHsKICAgIHByb3BlcnR5KHRoaXMsICdkb2N1bWVudGF0aW9uJywgb3BlcmF0aW9uLmRvY3VtZW50YXRpb24pOwogICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb25VcmwnLCBvcGVyYXRpb24uZG9jdW1lbnRhdGlvblVybCk7CiAgfQoKICAvLyBpZGVtcG90ZW50TWVtYmVycyBvbmx5IHRyYWNrcyB0b3AtbGV2ZWwgaW5wdXQgc2hhcGVzCiAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnaWRlbXBvdGVudE1lbWJlcnMnLCBmdW5jdGlvbigpIHsKICAgIHZhciBpZGVtcG90ZW50TWVtYmVycyA9IFtdOwogICAgdmFyIGlucHV0ID0gc2VsZi5pbnB1dDsKICAgIHZhciBtZW1iZXJzID0gaW5wdXQubWVtYmVyczsKICAgIGlmICghaW5wdXQubWVtYmVycykgewogICAgICByZXR1cm4gaWRlbXBvdGVudE1lbWJlcnM7CiAgICB9CiAgICBmb3IgKHZhciBuYW1lIGluIG1lbWJlcnMpIHsKICAgICAgaWYgKCFtZW1iZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYgKG1lbWJlcnNbbmFtZV0uaXNJZGVtcG90ZW50ID09PSB0cnVlKSB7CiAgICAgICAgaWRlbXBvdGVudE1lbWJlcnMucHVzaChuYW1lKTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGlkZW1wb3RlbnRNZW1iZXJzOwogIH0pOwoKICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdoYXNFdmVudE91dHB1dCcsIGZ1bmN0aW9uKCkgewogICAgdmFyIG91dHB1dCA9IHNlbGYub3V0cHV0OwogICAgcmV0dXJuIGhhc0V2ZW50U3RyZWFtKG91dHB1dCk7CiAgfSk7Cn0KCmZ1bmN0aW9uIGhhc0V2ZW50U3RyZWFtKHRvcExldmVsU2hhcGUpIHsKICB2YXIgbWVtYmVycyA9IHRvcExldmVsU2hhcGUubWVtYmVyczsKICB2YXIgcGF5bG9hZCA9IHRvcExldmVsU2hhcGUucGF5bG9hZDsKCiAgaWYgKCF0b3BMZXZlbFNoYXBlLm1lbWJlcnMpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGlmIChwYXlsb2FkKSB7CiAgICB2YXIgcGF5bG9hZE1lbWJlciA9IG1lbWJlcnNbcGF5bG9hZF07CiAgICByZXR1cm4gcGF5bG9hZE1lbWJlci5pc0V2ZW50U3RyZWFtOwogIH0KCiAgLy8gY2hlY2sgaWYgYW55IG1lbWJlciBpcyBhbiBldmVudCBzdHJlYW0KICBmb3IgKHZhciBuYW1lIGluIG1lbWJlcnMpIHsKICAgIGlmICghbWVtYmVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICBpZiAobWVtYmVyc1tuYW1lXS5pc0V2ZW50U3RyZWFtID09PSB0cnVlKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgIH0KICB9CiAgcmV0dXJuIGZhbHNlOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IE9wZXJhdGlvbjsKCn0seyIuLi91dGlsIjo3MSwiLi9zaGFwZSI6NDN9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL3V0aWwnKS5wcm9wZXJ0eTsKCmZ1bmN0aW9uIFBhZ2luYXRvcihuYW1lLCBwYWdpbmF0b3IpIHsKICBwcm9wZXJ0eSh0aGlzLCAnaW5wdXRUb2tlbicsIHBhZ2luYXRvci5pbnB1dF90b2tlbik7CiAgcHJvcGVydHkodGhpcywgJ2xpbWl0S2V5JywgcGFnaW5hdG9yLmxpbWl0X2tleSk7CiAgcHJvcGVydHkodGhpcywgJ21vcmVSZXN1bHRzJywgcGFnaW5hdG9yLm1vcmVfcmVzdWx0cyk7CiAgcHJvcGVydHkodGhpcywgJ291dHB1dFRva2VuJywgcGFnaW5hdG9yLm91dHB1dF90b2tlbik7CiAgcHJvcGVydHkodGhpcywgJ3Jlc3VsdEtleScsIHBhZ2luYXRvci5yZXN1bHRfa2V5KTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBQYWdpbmF0b3I7Cgp9LHsiLi4vdXRpbCI6NzF9XSw0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgcHJvcGVydHkgPSB1dGlsLnByb3BlcnR5OwoKZnVuY3Rpb24gUmVzb3VyY2VXYWl0ZXIobmFtZSwgd2FpdGVyLCBvcHRpb25zKSB7CiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgcHJvcGVydHkodGhpcywgJ25hbWUnLCBuYW1lKTsKICBwcm9wZXJ0eSh0aGlzLCAnYXBpJywgb3B0aW9ucy5hcGksIGZhbHNlKTsKCiAgaWYgKHdhaXRlci5vcGVyYXRpb24pIHsKICAgIHByb3BlcnR5KHRoaXMsICdvcGVyYXRpb24nLCB1dGlsLnN0cmluZy5sb3dlckZpcnN0KHdhaXRlci5vcGVyYXRpb24pKTsKICB9CgogIHZhciBzZWxmID0gdGhpczsKICB2YXIga2V5cyA9IFsKICAgICd0eXBlJywKICAgICdkZXNjcmlwdGlvbicsCiAgICAnZGVsYXknLAogICAgJ21heEF0dGVtcHRzJywKICAgICdhY2NlcHRvcnMnCiAgXTsKCiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewogICAgdmFyIHZhbHVlID0gd2FpdGVyW2tleV07CiAgICBpZiAodmFsdWUpIHsKICAgICAgcHJvcGVydHkoc2VsZiwga2V5LCB2YWx1ZSk7CiAgICB9CiAgfSk7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gUmVzb3VyY2VXYWl0ZXI7Cgp9LHsiLi4vdXRpbCI6NzF9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi9jb2xsZWN0aW9uJyk7Cgp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTsKCmZ1bmN0aW9uIHByb3BlcnR5KG9iaiwgbmFtZSwgdmFsdWUpIHsKICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgdXRpbC5wcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KfQoKZnVuY3Rpb24gbWVtb2l6ZWRQcm9wZXJ0eShvYmosIG5hbWUpIHsKICBpZiAoIW9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbbmFtZV0pIHsKICAgIHV0aWwubWVtb2l6ZWRQcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KfQoKZnVuY3Rpb24gU2hhcGUoc2hhcGUsIG9wdGlvbnMsIG1lbWJlck5hbWUpIHsKICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgcHJvcGVydHkodGhpcywgJ3NoYXBlJywgc2hhcGUuc2hhcGUpOwogIHByb3BlcnR5KHRoaXMsICdhcGknLCBvcHRpb25zLmFwaSwgZmFsc2UpOwogIHByb3BlcnR5KHRoaXMsICd0eXBlJywgc2hhcGUudHlwZSk7CiAgcHJvcGVydHkodGhpcywgJ2VudW0nLCBzaGFwZS5lbnVtKTsKICBwcm9wZXJ0eSh0aGlzLCAnbWluJywgc2hhcGUubWluKTsKICBwcm9wZXJ0eSh0aGlzLCAnbWF4Jywgc2hhcGUubWF4KTsKICBwcm9wZXJ0eSh0aGlzLCAncGF0dGVybicsIHNoYXBlLnBhdHRlcm4pOwogIHByb3BlcnR5KHRoaXMsICdsb2NhdGlvbicsIHNoYXBlLmxvY2F0aW9uIHx8IHRoaXMubG9jYXRpb24gfHwgJ2JvZHknKTsKICBwcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHRoaXMubmFtZSB8fCBzaGFwZS54bWxOYW1lIHx8IHNoYXBlLnF1ZXJ5TmFtZSB8fAogICAgc2hhcGUubG9jYXRpb25OYW1lIHx8IG1lbWJlck5hbWUpOwogIHByb3BlcnR5KHRoaXMsICdpc1N0cmVhbWluZycsIHNoYXBlLnN0cmVhbWluZyB8fCB0aGlzLmlzU3RyZWFtaW5nIHx8IGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAncmVxdWlyZXNMZW5ndGgnLCBzaGFwZS5yZXF1aXJlc0xlbmd0aCwgZmFsc2UpOwogIHByb3BlcnR5KHRoaXMsICdpc0NvbXBvc2l0ZScsIHNoYXBlLmlzQ29tcG9zaXRlIHx8IGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNTaGFwZScsIHRydWUsIGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNRdWVyeU5hbWUnLCBCb29sZWFuKHNoYXBlLnF1ZXJ5TmFtZSksIGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNMb2NhdGlvbk5hbWUnLCBCb29sZWFuKHNoYXBlLmxvY2F0aW9uTmFtZSksIGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNJZGVtcG90ZW50Jywgc2hhcGUuaWRlbXBvdGVuY3lUb2tlbiA9PT0gdHJ1ZSk7CiAgcHJvcGVydHkodGhpcywgJ2lzSnNvblZhbHVlJywgc2hhcGUuanNvbnZhbHVlID09PSB0cnVlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNTZW5zaXRpdmUnLCBzaGFwZS5zZW5zaXRpdmUgPT09IHRydWUgfHwgc2hhcGUucHJvdG90eXBlICYmIHNoYXBlLnByb3RvdHlwZS5zZW5zaXRpdmUgPT09IHRydWUpOwogIHByb3BlcnR5KHRoaXMsICdpc0V2ZW50U3RyZWFtJywgQm9vbGVhbihzaGFwZS5ldmVudHN0cmVhbSksIGZhbHNlKTsKICBwcm9wZXJ0eSh0aGlzLCAnaXNFdmVudCcsIEJvb2xlYW4oc2hhcGUuZXZlbnQpLCBmYWxzZSk7CiAgcHJvcGVydHkodGhpcywgJ2lzRXZlbnRQYXlsb2FkJywgQm9vbGVhbihzaGFwZS5ldmVudHBheWxvYWQpLCBmYWxzZSk7CiAgcHJvcGVydHkodGhpcywgJ2lzRXZlbnRIZWFkZXInLCBCb29sZWFuKHNoYXBlLmV2ZW50aGVhZGVyKSwgZmFsc2UpOwogIHByb3BlcnR5KHRoaXMsICdpc1RpbWVzdGFtcEZvcm1hdFNldCcsIEJvb2xlYW4oc2hhcGUudGltZXN0YW1wRm9ybWF0KSB8fCBzaGFwZS5wcm90b3R5cGUgJiYgc2hhcGUucHJvdG90eXBlLmlzVGltZXN0YW1wRm9ybWF0U2V0ID09PSB0cnVlLCBmYWxzZSk7CiAgcHJvcGVydHkodGhpcywgJ2VuZHBvaW50RGlzY292ZXJ5SWQnLCBCb29sZWFuKHNoYXBlLmVuZHBvaW50ZGlzY292ZXJ5aWQpLCBmYWxzZSk7CiAgcHJvcGVydHkodGhpcywgJ2hvc3RMYWJlbCcsIEJvb2xlYW4oc2hhcGUuaG9zdExhYmVsKSwgZmFsc2UpOwoKICBpZiAob3B0aW9ucy5kb2N1bWVudGF0aW9uKSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAnZG9jdW1lbnRhdGlvbicsIHNoYXBlLmRvY3VtZW50YXRpb24pOwogICAgcHJvcGVydHkodGhpcywgJ2RvY3VtZW50YXRpb25VcmwnLCBzaGFwZS5kb2N1bWVudGF0aW9uVXJsKTsKICB9CgogIGlmIChzaGFwZS54bWxBdHRyaWJ1dGUpIHsKICAgIHByb3BlcnR5KHRoaXMsICdpc1htbEF0dHJpYnV0ZScsIHNoYXBlLnhtbEF0dHJpYnV0ZSB8fCBmYWxzZSk7CiAgfQoKICAvLyB0eXBlIGNvbnZlcnNpb24gYW5kIHBhcnNpbmcKICBwcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdFZhbHVlJywgbnVsbCk7CiAgdGhpcy50b1dpcmVGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiAnJzsKICAgIHJldHVybiB2YWx1ZTsKICB9OwogIHRoaXMudG9UeXBlID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9Owp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpTaGFwZS5ub3JtYWxpemVkVHlwZXMgPSB7CiAgY2hhcmFjdGVyOiAnc3RyaW5nJywKICBkb3VibGU6ICdmbG9hdCcsCiAgbG9uZzogJ2ludGVnZXInLAogIHNob3J0OiAnaW50ZWdlcicsCiAgYmlnaW50ZWdlcjogJ2ludGVnZXInLAogIGJpZ2RlY2ltYWw6ICdmbG9hdCcsCiAgYmxvYjogJ2JpbmFyeScKfTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovClNoYXBlLnR5cGVzID0gewogICdzdHJ1Y3R1cmUnOiBTdHJ1Y3R1cmVTaGFwZSwKICAnbGlzdCc6IExpc3RTaGFwZSwKICAnbWFwJzogTWFwU2hhcGUsCiAgJ2Jvb2xlYW4nOiBCb29sZWFuU2hhcGUsCiAgJ3RpbWVzdGFtcCc6IFRpbWVzdGFtcFNoYXBlLAogICdmbG9hdCc6IEZsb2F0U2hhcGUsCiAgJ2ludGVnZXInOiBJbnRlZ2VyU2hhcGUsCiAgJ3N0cmluZyc6IFN0cmluZ1NoYXBlLAogICdiYXNlNjQnOiBCYXNlNjRTaGFwZSwKICAnYmluYXJ5JzogQmluYXJ5U2hhcGUKfTsKClNoYXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKHNoYXBlLCBvcHRpb25zKSB7CiAgaWYgKHNoYXBlLnNoYXBlKSB7CiAgICB2YXIgcmVmU2hhcGUgPSBvcHRpb25zLmFwaS5zaGFwZXNbc2hhcGUuc2hhcGVdOwogICAgaWYgKCFyZWZTaGFwZSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIHNoYXBlIHJlZmVyZW5jZTogJyArIHNoYXBlLnNoYXBlKTsKICAgIH0KCiAgICByZXR1cm4gcmVmU2hhcGU7CiAgfSBlbHNlIHsKICAgIHJldHVybiBudWxsOwogIH0KfTsKClNoYXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShzaGFwZSwgb3B0aW9ucywgbWVtYmVyTmFtZSkgewogIGlmIChzaGFwZS5pc1NoYXBlKSByZXR1cm4gc2hhcGU7CgogIHZhciByZWZTaGFwZSA9IFNoYXBlLnJlc29sdmUoc2hhcGUsIG9wdGlvbnMpOwogIGlmIChyZWZTaGFwZSkgewogICAgdmFyIGZpbHRlcmVkS2V5cyA9IE9iamVjdC5rZXlzKHNoYXBlKTsKICAgIGlmICghb3B0aW9ucy5kb2N1bWVudGF0aW9uKSB7CiAgICAgIGZpbHRlcmVkS2V5cyA9IGZpbHRlcmVkS2V5cy5maWx0ZXIoZnVuY3Rpb24obmFtZSkgewogICAgICAgIHJldHVybiAhbmFtZS5tYXRjaCgvZG9jdW1lbnRhdGlvbi8pOwogICAgICB9KTsKICAgIH0KCiAgICAvLyBjcmVhdGUgYW4gaW5saW5lIHNoYXBlIHdpdGggZXh0cmEgbWVtYmVycwogICAgdmFyIElubGluZVNoYXBlID0gZnVuY3Rpb24oKSB7CiAgICAgIHJlZlNoYXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgc2hhcGUsIG9wdGlvbnMsIG1lbWJlck5hbWUpOwogICAgfTsKICAgIElubGluZVNoYXBlLnByb3RvdHlwZSA9IHJlZlNoYXBlOwogICAgcmV0dXJuIG5ldyBJbmxpbmVTaGFwZSgpOwogIH0gZWxzZSB7CiAgICAvLyBzZXQgdHlwZSBpZiBub3Qgc2V0CiAgICBpZiAoIXNoYXBlLnR5cGUpIHsKICAgICAgaWYgKHNoYXBlLm1lbWJlcnMpIHNoYXBlLnR5cGUgPSAnc3RydWN0dXJlJzsKICAgICAgZWxzZSBpZiAoc2hhcGUubWVtYmVyKSBzaGFwZS50eXBlID0gJ2xpc3QnOwogICAgICBlbHNlIGlmIChzaGFwZS5rZXkpIHNoYXBlLnR5cGUgPSAnbWFwJzsKICAgICAgZWxzZSBzaGFwZS50eXBlID0gJ3N0cmluZyc7CiAgICB9CgogICAgLy8gbm9ybWFsaXplIHR5cGVzCiAgICB2YXIgb3JpZ1R5cGUgPSBzaGFwZS50eXBlOwogICAgaWYgKFNoYXBlLm5vcm1hbGl6ZWRUeXBlc1tzaGFwZS50eXBlXSkgewogICAgICBzaGFwZS50eXBlID0gU2hhcGUubm9ybWFsaXplZFR5cGVzW3NoYXBlLnR5cGVdOwogICAgfQoKICAgIGlmIChTaGFwZS50eXBlc1tzaGFwZS50eXBlXSkgewogICAgICByZXR1cm4gbmV3IFNoYXBlLnR5cGVzW3NoYXBlLnR5cGVdKHNoYXBlLCBvcHRpb25zLCBtZW1iZXJOYW1lKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIHNoYXBlIHR5cGU6ICcgKyBvcmlnVHlwZSk7CiAgICB9CiAgfQp9OwoKZnVuY3Rpb24gQ29tcG9zaXRlU2hhcGUoc2hhcGUpIHsKICBTaGFwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIHByb3BlcnR5KHRoaXMsICdpc0NvbXBvc2l0ZScsIHRydWUpOwoKICBpZiAoc2hhcGUuZmxhdHRlbmVkKSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAnZmxhdHRlbmVkJywgc2hhcGUuZmxhdHRlbmVkIHx8IGZhbHNlKTsKICB9Cn0KCmZ1bmN0aW9uIFN0cnVjdHVyZVNoYXBlKHNoYXBlLCBvcHRpb25zKSB7CiAgdmFyIHNlbGYgPSB0aGlzOwogIHZhciByZXF1aXJlZE1hcCA9IG51bGwsIGZpcnN0SW5pdCA9ICF0aGlzLmlzU2hhcGU7CgogIENvbXBvc2l0ZVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogIGlmIChmaXJzdEluaXQpIHsKICAgIHByb3BlcnR5KHRoaXMsICdkZWZhdWx0VmFsdWUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9KTsKICAgIHByb3BlcnR5KHRoaXMsICdtZW1iZXJzJywge30pOwogICAgcHJvcGVydHkodGhpcywgJ21lbWJlck5hbWVzJywgW10pOwogICAgcHJvcGVydHkodGhpcywgJ3JlcXVpcmVkJywgW10pOwogICAgcHJvcGVydHkodGhpcywgJ2lzUmVxdWlyZWQnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9KTsKICB9CgogIGlmIChzaGFwZS5tZW1iZXJzKSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAnbWVtYmVycycsIG5ldyBDb2xsZWN0aW9uKHNoYXBlLm1lbWJlcnMsIG9wdGlvbnMsIGZ1bmN0aW9uKG5hbWUsIG1lbWJlcikgewogICAgICByZXR1cm4gU2hhcGUuY3JlYXRlKG1lbWJlciwgb3B0aW9ucywgbmFtZSk7CiAgICB9KSk7CiAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdtZW1iZXJOYW1lcycsIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gc2hhcGUueG1sT3JkZXIgfHwgT2JqZWN0LmtleXMoc2hhcGUubWVtYmVycyk7CiAgICB9KTsKCiAgICBpZiAoc2hhcGUuZXZlbnQpIHsKICAgICAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnZXZlbnRQYXlsb2FkTWVtYmVyTmFtZScsIGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBtZW1iZXJzID0gc2VsZi5tZW1iZXJzOwogICAgICAgIHZhciBtZW1iZXJOYW1lcyA9IHNlbGYubWVtYmVyTmFtZXM7CiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIG1lbWJlcnMgdG8gZmluZCBvbmVzIHRoYXQgYXJlIGV2ZW50IHBheWxvYWRzCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlMZW4gPSBtZW1iZXJOYW1lcy5sZW5ndGg7IGkgPCBpTGVuOyBpKyspIHsKICAgICAgICAgIGlmIChtZW1iZXJzW21lbWJlck5hbWVzW2ldXS5pc0V2ZW50UGF5bG9hZCkgewogICAgICAgICAgICByZXR1cm4gbWVtYmVyTmFtZXNbaV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ2V2ZW50SGVhZGVyTWVtYmVyTmFtZXMnLCBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbWVtYmVycyA9IHNlbGYubWVtYmVyczsKICAgICAgICB2YXIgbWVtYmVyTmFtZXMgPSBzZWxmLm1lbWJlck5hbWVzOwogICAgICAgIHZhciBldmVudEhlYWRlck1lbWJlck5hbWVzID0gW107CiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIG1lbWJlcnMgdG8gZmluZCBvbmVzIHRoYXQgYXJlIGV2ZW50IGhlYWRlcnMKICAgICAgICBmb3IgKHZhciBpID0gMCwgaUxlbiA9IG1lbWJlck5hbWVzLmxlbmd0aDsgaSA8IGlMZW47IGkrKykgewogICAgICAgICAgaWYgKG1lbWJlcnNbbWVtYmVyTmFtZXNbaV1dLmlzRXZlbnRIZWFkZXIpIHsKICAgICAgICAgICAgZXZlbnRIZWFkZXJNZW1iZXJOYW1lcy5wdXNoKG1lbWJlck5hbWVzW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIGV2ZW50SGVhZGVyTWVtYmVyTmFtZXM7CiAgICAgIH0pOwogICAgfQogIH0KCiAgaWYgKHNoYXBlLnJlcXVpcmVkKSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAncmVxdWlyZWQnLCBzaGFwZS5yZXF1aXJlZCk7CiAgICBwcm9wZXJ0eSh0aGlzLCAnaXNSZXF1aXJlZCcsIGZ1bmN0aW9uKG5hbWUpIHsKICAgICAgaWYgKCFyZXF1aXJlZE1hcCkgewogICAgICAgIHJlcXVpcmVkTWFwID0ge307CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZS5yZXF1aXJlZC5sZW5ndGg7IGkrKykgewogICAgICAgICAgcmVxdWlyZWRNYXBbc2hhcGUucmVxdWlyZWRbaV1dID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiByZXF1aXJlZE1hcFtuYW1lXTsKICAgIH0sIGZhbHNlLCB0cnVlKTsKICB9CgogIHByb3BlcnR5KHRoaXMsICdyZXN1bHRXcmFwcGVyJywgc2hhcGUucmVzdWx0V3JhcHBlciB8fCBudWxsKTsKCiAgaWYgKHNoYXBlLnBheWxvYWQpIHsKICAgIHByb3BlcnR5KHRoaXMsICdwYXlsb2FkJywgc2hhcGUucGF5bG9hZCk7CiAgfQoKICBpZiAodHlwZW9mIHNoYXBlLnhtbE5hbWVzcGFjZSA9PT0gJ3N0cmluZycpIHsKICAgIHByb3BlcnR5KHRoaXMsICd4bWxOYW1lc3BhY2VVcmknLCBzaGFwZS54bWxOYW1lc3BhY2UpOwogIH0gZWxzZSBpZiAodHlwZW9mIHNoYXBlLnhtbE5hbWVzcGFjZSA9PT0gJ29iamVjdCcpIHsKICAgIHByb3BlcnR5KHRoaXMsICd4bWxOYW1lc3BhY2VQcmVmaXgnLCBzaGFwZS54bWxOYW1lc3BhY2UucHJlZml4KTsKICAgIHByb3BlcnR5KHRoaXMsICd4bWxOYW1lc3BhY2VVcmknLCBzaGFwZS54bWxOYW1lc3BhY2UudXJpKTsKICB9Cn0KCmZ1bmN0aW9uIExpc3RTaGFwZShzaGFwZSwgb3B0aW9ucykgewogIHZhciBzZWxmID0gdGhpcywgZmlyc3RJbml0ID0gIXRoaXMuaXNTaGFwZTsKICBDb21wb3NpdGVTaGFwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICBpZiAoZmlyc3RJbml0KSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAnZGVmYXVsdFZhbHVlJywgZnVuY3Rpb24oKSB7IHJldHVybiBbXTsgfSk7CiAgfQoKICBpZiAoc2hhcGUubWVtYmVyKSB7CiAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICdtZW1iZXInLCBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIFNoYXBlLmNyZWF0ZShzaGFwZS5tZW1iZXIsIG9wdGlvbnMpOwogICAgfSk7CiAgfQoKICBpZiAodGhpcy5mbGF0dGVuZWQpIHsKICAgIHZhciBvbGROYW1lID0gdGhpcy5uYW1lOwogICAgbWVtb2l6ZWRQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gc2VsZi5tZW1iZXIubmFtZSB8fCBvbGROYW1lOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBNYXBTaGFwZShzaGFwZSwgb3B0aW9ucykgewogIHZhciBmaXJzdEluaXQgPSAhdGhpcy5pc1NoYXBlOwogIENvbXBvc2l0ZVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogIGlmIChmaXJzdEluaXQpIHsKICAgIHByb3BlcnR5KHRoaXMsICdkZWZhdWx0VmFsdWUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIHt9OyB9KTsKICAgIHByb3BlcnR5KHRoaXMsICdrZXknLCBTaGFwZS5jcmVhdGUoe3R5cGU6ICdzdHJpbmcnfSwgb3B0aW9ucykpOwogICAgcHJvcGVydHkodGhpcywgJ3ZhbHVlJywgU2hhcGUuY3JlYXRlKHt0eXBlOiAnc3RyaW5nJ30sIG9wdGlvbnMpKTsKICB9CgogIGlmIChzaGFwZS5rZXkpIHsKICAgIG1lbW9pemVkUHJvcGVydHkodGhpcywgJ2tleScsIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gU2hhcGUuY3JlYXRlKHNoYXBlLmtleSwgb3B0aW9ucyk7CiAgICB9KTsKICB9CiAgaWYgKHNoYXBlLnZhbHVlKSB7CiAgICBtZW1vaXplZFByb3BlcnR5KHRoaXMsICd2YWx1ZScsIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gU2hhcGUuY3JlYXRlKHNoYXBlLnZhbHVlLCBvcHRpb25zKTsKICAgIH0pOwogIH0KfQoKZnVuY3Rpb24gVGltZXN0YW1wU2hhcGUoc2hhcGUpIHsKICB2YXIgc2VsZiA9IHRoaXM7CiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgaWYgKHNoYXBlLnRpbWVzdGFtcEZvcm1hdCkgewogICAgcHJvcGVydHkodGhpcywgJ3RpbWVzdGFtcEZvcm1hdCcsIHNoYXBlLnRpbWVzdGFtcEZvcm1hdCk7CiAgfSBlbHNlIGlmIChzZWxmLmlzVGltZXN0YW1wRm9ybWF0U2V0ICYmIHRoaXMudGltZXN0YW1wRm9ybWF0KSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgdGhpcy50aW1lc3RhbXBGb3JtYXQpOwogIH0gZWxzZSBpZiAodGhpcy5sb2NhdGlvbiA9PT0gJ2hlYWRlcicpIHsKICAgIHByb3BlcnR5KHRoaXMsICd0aW1lc3RhbXBGb3JtYXQnLCAncmZjODIyJyk7CiAgfSBlbHNlIGlmICh0aGlzLmxvY2F0aW9uID09PSAncXVlcnlzdHJpbmcnKSB7CiAgICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgJ2lzbzg2MDEnKTsKICB9IGVsc2UgaWYgKHRoaXMuYXBpKSB7CiAgICBzd2l0Y2ggKHRoaXMuYXBpLnByb3RvY29sKSB7CiAgICAgIGNhc2UgJ2pzb24nOgogICAgICBjYXNlICdyZXN0LWpzb24nOgogICAgICAgIHByb3BlcnR5KHRoaXMsICd0aW1lc3RhbXBGb3JtYXQnLCAndW5peFRpbWVzdGFtcCcpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICdyZXN0LXhtbCc6CiAgICAgIGNhc2UgJ3F1ZXJ5JzoKICAgICAgY2FzZSAnZWMyJzoKICAgICAgICBwcm9wZXJ0eSh0aGlzLCAndGltZXN0YW1wRm9ybWF0JywgJ2lzbzg2MDEnKTsKICAgICAgICBicmVhazsKICAgIH0KICB9CgogIHRoaXMudG9UeXBlID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDsKICAgIGlmICh0eXBlb2YgdmFsdWUudG9VVENTdHJpbmcgPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTsKICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPwogICAgICAgICAgIHV0aWwuZGF0ZS5wYXJzZVRpbWVzdGFtcCh2YWx1ZSkgOiBudWxsOwogIH07CgogIHRoaXMudG9XaXJlRm9ybWF0ID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIHJldHVybiB1dGlsLmRhdGUuZm9ybWF0KHZhbHVlLCBzZWxmLnRpbWVzdGFtcEZvcm1hdCk7CiAgfTsKfQoKZnVuY3Rpb24gU3RyaW5nU2hhcGUoKSB7CiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgdmFyIG51bGxMZXNzUHJvdG9jb2xzID0gWydyZXN0LXhtbCcsICdxdWVyeScsICdlYzInXTsKICB0aGlzLnRvVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICB2YWx1ZSA9IHRoaXMuYXBpICYmIG51bGxMZXNzUHJvdG9jb2xzLmluZGV4T2YodGhpcy5hcGkucHJvdG9jb2wpID4gLTEgPwogICAgICB2YWx1ZSB8fCAnJyA6IHZhbHVlOwogICAgaWYgKHRoaXMuaXNKc29uVmFsdWUpIHsKICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpOwogICAgfQoKICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9TdHJpbmcgPT09ICdmdW5jdGlvbicgPwogICAgICB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7CiAgfTsKCiAgdGhpcy50b1dpcmVGb3JtYXQgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgcmV0dXJuIHRoaXMuaXNKc29uVmFsdWUgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZTsKICB9Owp9CgpmdW5jdGlvbiBGbG9hdFNoYXBlKCkgewogIFNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgogIHRoaXMudG9UeXBlID0gZnVuY3Rpb24odmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gbnVsbDsKICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTsKICB9OwogIHRoaXMudG9XaXJlRm9ybWF0ID0gdGhpcy50b1R5cGU7Cn0KCmZ1bmN0aW9uIEludGVnZXJTaGFwZSgpIHsKICBTaGFwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICB0aGlzLnRvVHlwZSA9IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7CiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTsKICB9OwogIHRoaXMudG9XaXJlRm9ybWF0ID0gdGhpcy50b1R5cGU7Cn0KCmZ1bmN0aW9uIEJpbmFyeVNoYXBlKCkgewogIFNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgdGhpcy50b1R5cGUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgdmFyIGJ1ZiA9IHV0aWwuYmFzZTY0LmRlY29kZSh2YWx1ZSk7CiAgICBpZiAodGhpcy5pc1NlbnNpdGl2ZSAmJiB1dGlsLmlzTm9kZSgpICYmIHR5cGVvZiB1dGlsLkJ1ZmZlci5hbGxvYyA9PT0gJ2Z1bmN0aW9uJykgewogIC8qIE5vZGUuanMgY2FuIGNyZWF0ZSBhIEJ1ZmZlciB0aGF0IGlzIG5vdCBpc29sYXRlZC4KICAgKiBpLmUuIGJ1Zi5ieXRlTGVuZ3RoICE9PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgKICAgKiBUaGlzIG1lYW5zIHRoYXQgdGhlIHNlbnNpdGl2ZSBkYXRhIGlzIGFjY2Vzc2libGUgdG8gYW55b25lIHdpdGggYWNjZXNzIHRvIGJ1Zi5idWZmZXIuCiAgICogSWYgdGhpcyBpcyB0aGUgbm9kZSBzaGFyZWQgQnVmZmVyLCB0aGVuIG90aGVyIGNvZGUgd2l0aGluIHRoaXMgcHJvY2VzcyBfY291bGRfIGZpbmQgdGhpcyBzZWNyZXQuCiAgICogQ29weSBzZW5zaXRpdmUgZGF0YSB0byBhbiBpc29sYXRlZCBCdWZmZXIgYW5kIHplcm8gdGhlIHNlbnNpdGl2ZSBkYXRhLgogICAqIFdoaWxlIHRoaXMgaXMgc2FmZSB0byBkbyBoZXJlLCBjb3B5aW5nIHRoaXMgY29kZSBzb21ld2hlcmUgZWxzZSBtYXkgcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuCiAgICovCiAgICAgIHZhciBzZWN1cmVCdWYgPSB1dGlsLkJ1ZmZlci5hbGxvYyhidWYubGVuZ3RoLCBidWYpOwogICAgICBidWYuZmlsbCgwKTsKICAgICAgYnVmID0gc2VjdXJlQnVmOwogICAgfQogICAgcmV0dXJuIGJ1ZjsKICB9OwogIHRoaXMudG9XaXJlRm9ybWF0ID0gdXRpbC5iYXNlNjQuZW5jb2RlOwp9CgpmdW5jdGlvbiBCYXNlNjRTaGFwZSgpIHsKICBCaW5hcnlTaGFwZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBCb29sZWFuU2hhcGUoKSB7CiAgU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCiAgdGhpcy50b1R5cGUgPSBmdW5jdGlvbih2YWx1ZSkgewogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWU7CiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7CiAgICByZXR1cm4gdmFsdWUgPT09ICd0cnVlJzsKICB9Owp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpTaGFwZS5zaGFwZXMgPSB7CiAgU3RydWN0dXJlU2hhcGU6IFN0cnVjdHVyZVNoYXBlLAogIExpc3RTaGFwZTogTGlzdFNoYXBlLAogIE1hcFNoYXBlOiBNYXBTaGFwZSwKICBTdHJpbmdTaGFwZTogU3RyaW5nU2hhcGUsCiAgQm9vbGVhblNoYXBlOiBCb29sZWFuU2hhcGUsCiAgQmFzZTY0U2hhcGU6IEJhc2U2NFNoYXBlCn07CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IFNoYXBlOwoKfSx7Ii4uL3V0aWwiOjcxLCIuL2NvbGxlY3Rpb24iOjM5fV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuUGFyYW1WYWxpZGF0b3IgPSBBV1MudXRpbC5pbmhlcml0KHsKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgdmFsaWRhdG9yIG9iamVjdC4KICAgKgogICAqIEBwYXJhbSB2YWxpZGF0aW9uIFtCb29sZWFufG1hcF0gd2hldGhlciBpbnB1dCBwYXJhbWV0ZXJzIHNob3VsZCBiZQogICAqICAgICB2YWxpZGF0ZWQgYWdhaW5zdCB0aGUgb3BlcmF0aW9uIGRlc2NyaXB0aW9uIGJlZm9yZSBzZW5kaW5nIHRoZQogICAqICAgICByZXF1ZXN0LiBQYXNzIGEgbWFwIHRvIGVuYWJsZSBhbnkgb2YgdGhlIGZvbGxvd2luZyBzcGVjaWZpYwogICAqICAgICB2YWxpZGF0aW9uIGZlYXR1cmVzOgogICAqCiAgICogICAgICogKiptaW4qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtaW4KICAgKiAgICAgICBjb25zdHJhaW50LiBUaGlzIGlzIGVuYWJsZWQgYnkgZGVmYXVsdCB3aGVuIHBhcmFtVmFsaWRhdGlvbiBpcyBzZXQKICAgKiAgICAgICB0byBgdHJ1ZWAuCiAgICogICAgICogKiptYXgqKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHZhbHVlIG1lZXRzIHRoZSBtYXgKICAgKiAgICAgICBjb25zdHJhaW50LgogICAqICAgICAqICoqcGF0dGVybioqIFtCb29sZWFuXSAmbWRhc2g7IFZhbGlkYXRlcyB0aGF0IGEgc3RyaW5nIHZhbHVlIG1hdGNoZXMgYQogICAqICAgICAgIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICAgKiAgICAgKiAqKmVudW0qKiBbQm9vbGVhbl0gJm1kYXNoOyBWYWxpZGF0ZXMgdGhhdCBhIHN0cmluZyB2YWx1ZSBtYXRjaGVzIG9uZQogICAqICAgICAgIG9mIHRoZSBhbGxvd2FibGUgZW51bSB2YWx1ZXMuCiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFBhcmFtVmFsaWRhdG9yKHZhbGlkYXRpb24pIHsKICAgIGlmICh2YWxpZGF0aW9uID09PSB0cnVlIHx8IHZhbGlkYXRpb24gPT09IHVuZGVmaW5lZCkgewogICAgICB2YWxpZGF0aW9uID0geydtaW4nOiB0cnVlfTsKICAgIH0KICAgIHRoaXMudmFsaWRhdGlvbiA9IHZhbGlkYXRpb247CiAgfSwKCiAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKHNoYXBlLCBwYXJhbXMsIGNvbnRleHQpIHsKICAgIHRoaXMuZXJyb3JzID0gW107CiAgICB0aGlzLnZhbGlkYXRlTWVtYmVyKHNoYXBlLCBwYXJhbXMgfHwge30sIGNvbnRleHQgfHwgJ3BhcmFtcycpOwoKICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAxKSB7CiAgICAgIHZhciBtc2cgPSB0aGlzLmVycm9ycy5qb2luKCdcbiogJyk7CiAgICAgIG1zZyA9ICdUaGVyZSB3ZXJlICcgKyB0aGlzLmVycm9ycy5sZW5ndGggKwogICAgICAgICcgdmFsaWRhdGlvbiBlcnJvcnM6XG4qICcgKyBtc2c7CiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcihtc2cpLAogICAgICAgIHtjb2RlOiAnTXVsdGlwbGVWYWxpZGF0aW9uRXJyb3JzJywgZXJyb3JzOiB0aGlzLmVycm9yc30pOwogICAgfSBlbHNlIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPT09IDEpIHsKICAgICAgdGhyb3cgdGhpcy5lcnJvcnNbMF07CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LAoKICBmYWlsOiBmdW5jdGlvbiBmYWlsKGNvZGUsIG1lc3NhZ2UpIHsKICAgIHRoaXMuZXJyb3JzLnB1c2goQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKG1lc3NhZ2UpLCB7Y29kZTogY29kZX0pKTsKICB9LAoKICB2YWxpZGF0ZVN0cnVjdHVyZTogZnVuY3Rpb24gdmFsaWRhdGVTdHJ1Y3R1cmUoc2hhcGUsIHBhcmFtcywgY29udGV4dCkgewogICAgdGhpcy52YWxpZGF0ZVR5cGUocGFyYW1zLCBjb250ZXh0LCBbJ29iamVjdCddLCAnc3RydWN0dXJlJyk7CgogICAgdmFyIHBhcmFtTmFtZTsKICAgIGZvciAodmFyIGkgPSAwOyBzaGFwZS5yZXF1aXJlZCAmJiBpIDwgc2hhcGUucmVxdWlyZWQubGVuZ3RoOyBpKyspIHsKICAgICAgcGFyYW1OYW1lID0gc2hhcGUucmVxdWlyZWRbaV07CiAgICAgIHZhciB2YWx1ZSA9IHBhcmFtc1twYXJhbU5hbWVdOwogICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgewogICAgICAgIHRoaXMuZmFpbCgnTWlzc2luZ1JlcXVpcmVkUGFyYW1ldGVyJywKICAgICAgICAgICdNaXNzaW5nIHJlcXVpcmVkIGtleSBcJycgKyBwYXJhbU5hbWUgKyAnXCcgaW4gJyArIGNvbnRleHQpOwogICAgICB9CiAgICB9CgogICAgLy8gdmFsaWRhdGUgaGFzaCBtZW1iZXJzCiAgICBmb3IgKHBhcmFtTmFtZSBpbiBwYXJhbXMpIHsKICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCBwYXJhbU5hbWUpKSBjb250aW51ZTsKCiAgICAgIHZhciBwYXJhbVZhbHVlID0gcGFyYW1zW3BhcmFtTmFtZV0sCiAgICAgICAgICBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbcGFyYW1OYW1lXTsKCiAgICAgIGlmIChtZW1iZXJTaGFwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdmFyIG1lbWJlckNvbnRleHQgPSBbY29udGV4dCwgcGFyYW1OYW1lXS5qb2luKCcuJyk7CiAgICAgICAgdGhpcy52YWxpZGF0ZU1lbWJlcihtZW1iZXJTaGFwZSwgcGFyYW1WYWx1ZSwgbWVtYmVyQ29udGV4dCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5mYWlsKCdVbmV4cGVjdGVkUGFyYW1ldGVyJywKICAgICAgICAgICdVbmV4cGVjdGVkIGtleSBcJycgKyBwYXJhbU5hbWUgKyAnXCcgZm91bmQgaW4gJyArIGNvbnRleHQpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfSwKCiAgdmFsaWRhdGVNZW1iZXI6IGZ1bmN0aW9uIHZhbGlkYXRlTWVtYmVyKHNoYXBlLCBwYXJhbSwgY29udGV4dCkgewogICAgc3dpdGNoIChzaGFwZS50eXBlKSB7CiAgICAgIGNhc2UgJ3N0cnVjdHVyZSc6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTdHJ1Y3R1cmUoc2hhcGUsIHBhcmFtLCBjb250ZXh0KTsKICAgICAgY2FzZSAnbGlzdCc6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVMaXN0KHNoYXBlLCBwYXJhbSwgY29udGV4dCk7CiAgICAgIGNhc2UgJ21hcCc6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVNYXAoc2hhcGUsIHBhcmFtLCBjb250ZXh0KTsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNjYWxhcihzaGFwZSwgcGFyYW0sIGNvbnRleHQpOwogICAgfQogIH0sCgogIHZhbGlkYXRlTGlzdDogZnVuY3Rpb24gdmFsaWRhdGVMaXN0KHNoYXBlLCBwYXJhbXMsIGNvbnRleHQpIHsKICAgIGlmICh0aGlzLnZhbGlkYXRlVHlwZShwYXJhbXMsIGNvbnRleHQsIFtBcnJheV0pKSB7CiAgICAgIHRoaXMudmFsaWRhdGVSYW5nZShzaGFwZSwgcGFyYW1zLmxlbmd0aCwgY29udGV4dCwgJ2xpc3QgbWVtYmVyIGNvdW50Jyk7CiAgICAgIC8vIHZhbGlkYXRlIGFycmF5IG1lbWJlcnMKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLnZhbGlkYXRlTWVtYmVyKHNoYXBlLm1lbWJlciwgcGFyYW1zW2ldLCBjb250ZXh0ICsgJ1snICsgaSArICddJyk7CiAgICAgIH0KICAgIH0KICB9LAoKICB2YWxpZGF0ZU1hcDogZnVuY3Rpb24gdmFsaWRhdGVNYXAoc2hhcGUsIHBhcmFtcywgY29udGV4dCkgewogICAgaWYgKHRoaXMudmFsaWRhdGVUeXBlKHBhcmFtcywgY29udGV4dCwgWydvYmplY3QnXSwgJ21hcCcpKSB7CiAgICAgIC8vIEJ1aWxkIHVwIGEgY291bnQgb2YgbWFwIG1lbWJlcnMgdG8gdmFsaWRhdGUgcmFuZ2UgdHJhaXRzLgogICAgICB2YXIgbWFwQ291bnQgPSAwOwogICAgICBmb3IgKHZhciBwYXJhbSBpbiBwYXJhbXMpIHsKICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIHBhcmFtKSkgY29udGludWU7CiAgICAgICAgLy8gVmFsaWRhdGUgYW55IG1hcCBrZXkgdHJhaXQgY29uc3RyYWludHMKICAgICAgICB0aGlzLnZhbGlkYXRlTWVtYmVyKHNoYXBlLmtleSwgcGFyYW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0ICsgJ1trZXk9XCcnICsgcGFyYW0gKyAnXCddJyk7CiAgICAgICAgdGhpcy52YWxpZGF0ZU1lbWJlcihzaGFwZS52YWx1ZSwgcGFyYW1zW3BhcmFtXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQgKyAnW1wnJyArIHBhcmFtICsgJ1wnXScpOwogICAgICAgIG1hcENvdW50Kys7CiAgICAgIH0KICAgICAgdGhpcy52YWxpZGF0ZVJhbmdlKHNoYXBlLCBtYXBDb3VudCwgY29udGV4dCwgJ21hcCBtZW1iZXIgY291bnQnKTsKICAgIH0KICB9LAoKICB2YWxpZGF0ZVNjYWxhcjogZnVuY3Rpb24gdmFsaWRhdGVTY2FsYXIoc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7CiAgICBzd2l0Y2ggKHNoYXBlLnR5cGUpIHsKICAgICAgY2FzZSBudWxsOgogICAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgY2FzZSAnc3RyaW5nJzoKICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZyhzaGFwZSwgdmFsdWUsIGNvbnRleHQpOwogICAgICBjYXNlICdiYXNlNjQnOgogICAgICBjYXNlICdiaW5hcnknOgogICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRlUGF5bG9hZCh2YWx1ZSwgY29udGV4dCk7CiAgICAgIGNhc2UgJ2ludGVnZXInOgogICAgICBjYXNlICdmbG9hdCc6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVOdW1iZXIoc2hhcGUsIHZhbHVlLCBjb250ZXh0KTsKICAgICAgY2FzZSAnYm9vbGVhbic6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCBbJ2Jvb2xlYW4nXSk7CiAgICAgIGNhc2UgJ3RpbWVzdGFtcCc6CiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCBbRGF0ZSwKICAgICAgICAgIC9eXGR7NH0tXGR7Mn0tXGR7Mn1UXGR7Mn06XGR7Mn06XGR7Mn0oXC5cZCspP1okLywgJ251bWJlciddLAogICAgICAgICAgJ0RhdGUgb2JqZWN0LCBJU08tODYwMSBzdHJpbmcsIG9yIGEgVU5JWCB0aW1lc3RhbXAnKTsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gdGhpcy5mYWlsKCdVbmtvd25UeXBlJywgJ1VuaGFuZGxlZCB0eXBlICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGUudHlwZSArICcgZm9yICcgKyBjb250ZXh0KTsKICAgIH0KICB9LAoKICB2YWxpZGF0ZVN0cmluZzogZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmcoc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7CiAgICB2YXIgdmFsaWRUeXBlcyA9IFsnc3RyaW5nJ107CiAgICBpZiAoc2hhcGUuaXNKc29uVmFsdWUpIHsKICAgICAgdmFsaWRUeXBlcyA9IHZhbGlkVHlwZXMuY29uY2F0KFsnbnVtYmVyJywgJ29iamVjdCcsICdib29sZWFuJ10pOwogICAgfQogICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHRoaXMudmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCB2YWxpZFR5cGVzKSkgewogICAgICB0aGlzLnZhbGlkYXRlRW51bShzaGFwZSwgdmFsdWUsIGNvbnRleHQpOwogICAgICB0aGlzLnZhbGlkYXRlUmFuZ2Uoc2hhcGUsIHZhbHVlLmxlbmd0aCwgY29udGV4dCwgJ3N0cmluZyBsZW5ndGgnKTsKICAgICAgdGhpcy52YWxpZGF0ZVBhdHRlcm4oc2hhcGUsIHZhbHVlLCBjb250ZXh0KTsKICAgICAgdGhpcy52YWxpZGF0ZVVyaShzaGFwZSwgdmFsdWUsIGNvbnRleHQpOwogICAgfQogIH0sCgogIHZhbGlkYXRlVXJpOiBmdW5jdGlvbiB2YWxpZGF0ZVVyaShzaGFwZSwgdmFsdWUsIGNvbnRleHQpIHsKICAgIGlmIChzaGFwZVsnbG9jYXRpb24nXSA9PT0gJ3VyaScpIHsKICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHRoaXMuZmFpbCgnVXJpUGFyYW1ldGVyRXJyb3InLCAnRXhwZWN0ZWQgdXJpIHBhcmFtZXRlciB0byBoYXZlIGxlbmd0aCA+PSAxLCcKICAgICAgICAgICsgJyBidXQgZm91bmQgIicgKyB2YWx1ZSArJyIgZm9yICcgKyBjb250ZXh0KTsKICAgICAgfQogICAgfQogIH0sCgogIHZhbGlkYXRlUGF0dGVybjogZnVuY3Rpb24gdmFsaWRhdGVQYXR0ZXJuKHNoYXBlLCB2YWx1ZSwgY29udGV4dCkgewogICAgaWYgKHRoaXMudmFsaWRhdGlvblsncGF0dGVybiddICYmIHNoYXBlWydwYXR0ZXJuJ10gIT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoIShuZXcgUmVnRXhwKHNoYXBlWydwYXR0ZXJuJ10pKS50ZXN0KHZhbHVlKSkgewogICAgICAgIHRoaXMuZmFpbCgnUGF0dGVybk1hdGNoRXJyb3InLCAnUHJvdmlkZWQgdmFsdWUgIicgKyB2YWx1ZSArICciICcKICAgICAgICAgICsgJ2RvZXMgbm90IG1hdGNoIHJlZ2V4IHBhdHRlcm4gLycgKyBzaGFwZVsncGF0dGVybiddICsgJy8gZm9yICcKICAgICAgICAgICsgY29udGV4dCk7CiAgICAgIH0KICAgIH0KICB9LAoKICB2YWxpZGF0ZVJhbmdlOiBmdW5jdGlvbiB2YWxpZGF0ZVJhbmdlKHNoYXBlLCB2YWx1ZSwgY29udGV4dCwgZGVzY3JpcHRvcikgewogICAgaWYgKHRoaXMudmFsaWRhdGlvblsnbWluJ10pIHsKICAgICAgaWYgKHNoYXBlWydtaW4nXSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlIDwgc2hhcGVbJ21pbiddKSB7CiAgICAgICAgdGhpcy5mYWlsKCdNaW5SYW5nZUVycm9yJywgJ0V4cGVjdGVkICcgKyBkZXNjcmlwdG9yICsgJyA+PSAnCiAgICAgICAgICArIHNoYXBlWydtaW4nXSArICcsIGJ1dCBmb3VuZCAnICsgdmFsdWUgKyAnIGZvciAnICsgY29udGV4dCk7CiAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzLnZhbGlkYXRpb25bJ21heCddKSB7CiAgICAgIGlmIChzaGFwZVsnbWF4J10gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA+IHNoYXBlWydtYXgnXSkgewogICAgICAgIHRoaXMuZmFpbCgnTWF4UmFuZ2VFcnJvcicsICdFeHBlY3RlZCAnICsgZGVzY3JpcHRvciArICcgPD0gJwogICAgICAgICAgKyBzaGFwZVsnbWF4J10gKyAnLCBidXQgZm91bmQgJyArIHZhbHVlICsgJyBmb3IgJyArIGNvbnRleHQpOwogICAgICB9CiAgICB9CiAgfSwKCiAgdmFsaWRhdGVFbnVtOiBmdW5jdGlvbiB2YWxpZGF0ZVJhbmdlKHNoYXBlLCB2YWx1ZSwgY29udGV4dCkgewogICAgaWYgKHRoaXMudmFsaWRhdGlvblsnZW51bSddICYmIHNoYXBlWydlbnVtJ10gIT09IHVuZGVmaW5lZCkgewogICAgICAvLyBGYWlsIGlmIHRoZSBzdHJpbmcgdmFsdWUgaXMgbm90IHByZXNlbnQgaW4gdGhlIGVudW0gbGlzdAogICAgICBpZiAoc2hhcGVbJ2VudW0nXS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHsKICAgICAgICB0aGlzLmZhaWwoJ0VudW1FcnJvcicsICdGb3VuZCBzdHJpbmcgdmFsdWUgb2YgJyArIHZhbHVlICsgJywgYnV0ICcKICAgICAgICAgICsgJ2V4cGVjdGVkICcgKyBzaGFwZVsnZW51bSddLmpvaW4oJ3wnKSArICcgZm9yICcgKyBjb250ZXh0KTsKICAgICAgfQogICAgfQogIH0sCgogIHZhbGlkYXRlVHlwZTogZnVuY3Rpb24gdmFsaWRhdGVUeXBlKHZhbHVlLCBjb250ZXh0LCBhY2NlcHRlZFR5cGVzLCB0eXBlKSB7CiAgICAvLyBXZSB3aWxsIG5vdCBsb2cgYW4gZXJyb3IgZm9yIG51bGwgb3IgdW5kZWZpbmVkLCBidXQgd2Ugd2lsbCByZXR1cm4KICAgIC8vIGZhbHNlIHNvIHRoYXQgY2FsbGVycyBrbm93IHRoYXQgdGhlIGV4cGVjdGVkIHR5cGUgd2FzIG5vdCBzdHJpY3RseSBtZXQuCiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlOwoKICAgIHZhciBmb3VuZEludmFsaWRUeXBlID0gZmFsc2U7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjY2VwdGVkVHlwZXMubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHR5cGVvZiBhY2NlcHRlZFR5cGVzW2ldID09PSAnc3RyaW5nJykgewogICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IGFjY2VwdGVkVHlwZXNbaV0pIHJldHVybiB0cnVlOwogICAgICB9IGVsc2UgaWYgKGFjY2VwdGVkVHlwZXNbaV0gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgICBpZiAoKHZhbHVlIHx8ICcnKS50b1N0cmluZygpLm1hdGNoKGFjY2VwdGVkVHlwZXNbaV0pKSByZXR1cm4gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBhY2NlcHRlZFR5cGVzW2ldKSByZXR1cm4gdHJ1ZTsKICAgICAgICBpZiAoQVdTLnV0aWwuaXNUeXBlKHZhbHVlLCBhY2NlcHRlZFR5cGVzW2ldKSkgcmV0dXJuIHRydWU7CiAgICAgICAgaWYgKCF0eXBlICYmICFmb3VuZEludmFsaWRUeXBlKSBhY2NlcHRlZFR5cGVzID0gYWNjZXB0ZWRUeXBlcy5zbGljZSgpOwogICAgICAgIGFjY2VwdGVkVHlwZXNbaV0gPSBBV1MudXRpbC50eXBlTmFtZShhY2NlcHRlZFR5cGVzW2ldKTsKICAgICAgfQogICAgICBmb3VuZEludmFsaWRUeXBlID0gdHJ1ZTsKICAgIH0KCiAgICB2YXIgYWNjZXB0ZWRUeXBlID0gdHlwZTsKICAgIGlmICghYWNjZXB0ZWRUeXBlKSB7CiAgICAgIGFjY2VwdGVkVHlwZSA9IGFjY2VwdGVkVHlwZXMuam9pbignLCAnKS5yZXBsYWNlKC8sKFteLF0rKSQvLCAnLCBvciQxJyk7CiAgICB9CgogICAgdmFyIHZvd2VsID0gYWNjZXB0ZWRUeXBlLm1hdGNoKC9eW2FlaW91XS9pKSA/ICduJyA6ICcnOwogICAgdGhpcy5mYWlsKCdJbnZhbGlkUGFyYW1ldGVyVHlwZScsICdFeHBlY3RlZCAnICsgY29udGV4dCArICcgdG8gYmUgYScgKwogICAgICAgICAgICAgIHZvd2VsICsgJyAnICsgYWNjZXB0ZWRUeXBlKTsKICAgIHJldHVybiBmYWxzZTsKICB9LAoKICB2YWxpZGF0ZU51bWJlcjogZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIoc2hhcGUsIHZhbHVlLCBjb250ZXh0KSB7CiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuOwogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgdmFyIGNhc3RlZFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7CiAgICAgIGlmIChjYXN0ZWRWYWx1ZS50b1N0cmluZygpID09PSB2YWx1ZSkgdmFsdWUgPSBjYXN0ZWRWYWx1ZTsKICAgIH0KICAgIGlmICh0aGlzLnZhbGlkYXRlVHlwZSh2YWx1ZSwgY29udGV4dCwgWydudW1iZXInXSkpIHsKICAgICAgdGhpcy52YWxpZGF0ZVJhbmdlKHNoYXBlLCB2YWx1ZSwgY29udGV4dCwgJ251bWVyaWMgdmFsdWUnKTsKICAgIH0KICB9LAoKICB2YWxpZGF0ZVBheWxvYWQ6IGZ1bmN0aW9uIHZhbGlkYXRlUGF5bG9hZCh2YWx1ZSwgY29udGV4dCkgewogICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm47CiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmJ5dGVMZW5ndGggPT09ICdudW1iZXInKSByZXR1cm47IC8vIHR5cGVkIGFycmF5cwogICAgaWYgKEFXUy51dGlsLmlzTm9kZSgpKSB7IC8vIHNwZWNpYWwgY2hlY2sgZm9yIGJ1ZmZlci9zdHJlYW0gaW4gTm9kZS5qcwogICAgICB2YXIgU3RyZWFtID0gQVdTLnV0aWwuc3RyZWFtLlN0cmVhbTsKICAgICAgaWYgKEFXUy51dGlsLkJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJlYW0pIHJldHVybjsKICAgIH0gZWxzZSB7CiAgICAgIGlmICh0eXBlb2YgQmxvYiAhPT0gdm9pZCAwICYmIHZhbHVlIGluc3RhbmNlb2YgQmxvYikgcmV0dXJuOwogICAgfQoKICAgIHZhciB0eXBlcyA9IFsnQnVmZmVyJywgJ1N0cmVhbScsICdGaWxlJywgJ0Jsb2InLCAnQXJyYXlCdWZmZXInLCAnRGF0YVZpZXcnXTsKICAgIGlmICh2YWx1ZSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKEFXUy51dGlsLmlzVHlwZSh2YWx1ZSwgdHlwZXNbaV0pKSByZXR1cm47CiAgICAgICAgaWYgKEFXUy51dGlsLnR5cGVOYW1lKHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gdHlwZXNbaV0pIHJldHVybjsKICAgICAgfQogICAgfQoKICAgIHRoaXMuZmFpbCgnSW52YWxpZFBhcmFtZXRlclR5cGUnLCAnRXhwZWN0ZWQgJyArIGNvbnRleHQgKyAnIHRvIGJlIGEgJyArCiAgICAgICdzdHJpbmcsIEJ1ZmZlciwgU3RyZWFtLCBCbG9iLCBvciB0eXBlZCBhcnJheSBvYmplY3QnKTsKICB9Cn0pOwoKfSx7Ii4vY29yZSI6MTh9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB1dGlsID0gIHJlcXVpcmUoJy4uL3V0aWwnKTsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKCi8qKgogKiBQcmVwZW5kIHByZWZpeCBkZWZpbmVkIGJ5IEFQSSBtb2RlbCB0byBlbmRwb2ludCB0aGF0J3MgYWxyZWFkeQogKiBjb25zdHJ1Y3RlZC4gVGhpcyBmZWF0dXJlIGRvZXMgbm90IGFwcGx5IHRvIG9wZXJhdGlvbnMgdXNpbmcKICogZW5kcG9pbnQgZGlzY292ZXJ5IGFuZCBjYW4gYmUgZGlzYWJsZWQuCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gcG9wdWxhdGVIb3N0UHJlZml4KHJlcXVlc3QpICB7CiAgdmFyIGVuYWJsZWQgPSByZXF1ZXN0LnNlcnZpY2UuY29uZmlnLmhvc3RQcmVmaXhFbmFibGVkOwogIGlmICghZW5hYmxlZCkgcmV0dXJuIHJlcXVlc3Q7CiAgdmFyIG9wZXJhdGlvbk1vZGVsID0gcmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcXVlc3Qub3BlcmF0aW9uXTsKICAvL2Rvbid0IG1hcnNoYWwgaG9zdCBwcmVmaXggd2hlbiBvcGVyYXRpb24gaGFzIGVuZHBvaW50IGRpc2NvdmVyeSB0cmFpdHMKICBpZiAoaGFzRW5kcG9pbnREaXNjb3ZlcihyZXF1ZXN0KSkgcmV0dXJuIHJlcXVlc3Q7CiAgaWYgKG9wZXJhdGlvbk1vZGVsLmVuZHBvaW50ICYmIG9wZXJhdGlvbk1vZGVsLmVuZHBvaW50Lmhvc3RQcmVmaXgpIHsKICAgIHZhciBob3N0UHJlZml4Tm90YXRpb24gPSBvcGVyYXRpb25Nb2RlbC5lbmRwb2ludC5ob3N0UHJlZml4OwogICAgdmFyIGhvc3RQcmVmaXggPSBleHBhbmRIb3N0UHJlZml4KGhvc3RQcmVmaXhOb3RhdGlvbiwgcmVxdWVzdC5wYXJhbXMsIG9wZXJhdGlvbk1vZGVsLmlucHV0KTsKICAgIHByZXBlbmRFbmRwb2ludFByZWZpeChyZXF1ZXN0Lmh0dHBSZXF1ZXN0LmVuZHBvaW50LCBob3N0UHJlZml4KTsKICAgIHZhbGlkYXRlSG9zdG5hbWUocmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludC5ob3N0bmFtZSk7CiAgfQogIHJldHVybiByZXF1ZXN0Owp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBoYXNFbmRwb2ludERpc2NvdmVyKHJlcXVlc3QpIHsKICB2YXIgYXBpID0gcmVxdWVzdC5zZXJ2aWNlLmFwaTsKICB2YXIgb3BlcmF0aW9uTW9kZWwgPSBhcGkub3BlcmF0aW9uc1tyZXF1ZXN0Lm9wZXJhdGlvbl07CiAgdmFyIGlzRW5kcG9pbnRPcGVyYXRpb24gPSBhcGkuZW5kcG9pbnRPcGVyYXRpb24gJiYgKGFwaS5lbmRwb2ludE9wZXJhdGlvbiA9PT0gdXRpbC5zdHJpbmcubG93ZXJGaXJzdChvcGVyYXRpb25Nb2RlbC5uYW1lKSk7CiAgcmV0dXJuIChvcGVyYXRpb25Nb2RlbC5lbmRwb2ludERpc2NvdmVyeVJlcXVpcmVkICE9PSAnTlVMTCcgfHwgaXNFbmRwb2ludE9wZXJhdGlvbiA9PT0gdHJ1ZSk7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIGV4cGFuZEhvc3RQcmVmaXgoaG9zdFByZWZpeE5vdGF0aW9uLCBwYXJhbXMsIHNoYXBlKSB7CiAgdXRpbC5lYWNoKHNoYXBlLm1lbWJlcnMsIGZ1bmN0aW9uKG5hbWUsIG1lbWJlcikgewogICAgaWYgKG1lbWJlci5ob3N0TGFiZWwgPT09IHRydWUpIHsKICAgICAgaWYgKHR5cGVvZiBwYXJhbXNbbmFtZV0gIT09ICdzdHJpbmcnIHx8IHBhcmFtc1tuYW1lXSA9PT0gJycpIHsKICAgICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgICAgICBtZXNzYWdlOiAnUGFyYW1ldGVyICcgKyBuYW1lICsgJyBzaG91bGQgYmUgYSBub24tZW1wdHkgc3RyaW5nLicsCiAgICAgICAgICBjb2RlOiAnSW52YWxpZFBhcmFtZXRlcicKICAgICAgICB9KTsKICAgICAgfQogICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCdcXHsnICsgbmFtZSArICdcXH0nLCAnZycpOwogICAgICBob3N0UHJlZml4Tm90YXRpb24gPSBob3N0UHJlZml4Tm90YXRpb24ucmVwbGFjZShyZWdleCwgcGFyYW1zW25hbWVdKTsKICAgIH0KICB9KTsKICByZXR1cm4gaG9zdFByZWZpeE5vdGF0aW9uOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBwcmVwZW5kRW5kcG9pbnRQcmVmaXgoZW5kcG9pbnQsIHByZWZpeCkgewogIGlmIChlbmRwb2ludC5ob3N0KSB7CiAgICBlbmRwb2ludC5ob3N0ID0gcHJlZml4ICsgZW5kcG9pbnQuaG9zdDsKICB9CiAgaWYgKGVuZHBvaW50Lmhvc3RuYW1lKSB7CiAgICBlbmRwb2ludC5ob3N0bmFtZSA9IHByZWZpeCArIGVuZHBvaW50Lmhvc3RuYW1lOwogIH0KfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gdmFsaWRhdGVIb3N0bmFtZShob3N0bmFtZSkgewogIHZhciBsYWJlbHMgPSBob3N0bmFtZS5zcGxpdCgnLicpOwogIC8vUmVmZXJlbmNlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMTEyMyNzZWN0aW9uLTIKICB2YXIgaG9zdFBhdHRlcm4gPSAvXlthLXpBLVowLTldezF9JHxeW2EtekEtWjAtOV1bYS16QS1aMC05XC1dKlthLXpBLVowLTldJC87CiAgdXRpbC5hcnJheUVhY2gobGFiZWxzLCBmdW5jdGlvbihsYWJlbCkgewogICAgaWYgKCFsYWJlbC5sZW5ndGggfHwgbGFiZWwubGVuZ3RoIDwgMSB8fCBsYWJlbC5sZW5ndGggPiA2MykgewogICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgICAgY29kZTogJ1ZhbGlkYXRpb25FcnJvcicsCiAgICAgICAgbWVzc2FnZTogJ0hvc3RuYW1lIGxhYmVsIGxlbmd0aCBzaG91bGQgYmUgYmV0d2VlbiAxIHRvIDYzIGNoYXJhY3RlcnMsIGluY2x1c2l2ZS4nCiAgICAgIH0pOwogICAgfQogICAgaWYgKCFob3N0UGF0dGVybi50ZXN0KGxhYmVsKSkgewogICAgICB0aHJvdyBBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoKSwKICAgICAgICB7Y29kZTogJ1ZhbGlkYXRpb25FcnJvcicsIG1lc3NhZ2U6IGxhYmVsICsgJyBpcyBub3QgaG9zdG5hbWUgY29tcGF0aWJsZS4nfSk7CiAgICB9CiAgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gewogIHBvcHVsYXRlSG9zdFByZWZpeDogcG9wdWxhdGVIb3N0UHJlZml4Cn07Cgp9LHsiLi4vY29yZSI6MTgsIi4uL3V0aWwiOjcxfV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTsKdmFyIEpzb25CdWlsZGVyID0gcmVxdWlyZSgnLi4vanNvbi9idWlsZGVyJyk7CnZhciBKc29uUGFyc2VyID0gcmVxdWlyZSgnLi4vanNvbi9wYXJzZXInKTsKdmFyIHBvcHVsYXRlSG9zdFByZWZpeCA9IHJlcXVpcmUoJy4vaGVscGVycycpLnBvcHVsYXRlSG9zdFByZWZpeDsKCmZ1bmN0aW9uIGJ1aWxkUmVxdWVzdChyZXEpIHsKICB2YXIgaHR0cFJlcXVlc3QgPSByZXEuaHR0cFJlcXVlc3Q7CiAgdmFyIGFwaSA9IHJlcS5zZXJ2aWNlLmFwaTsKICB2YXIgdGFyZ2V0ID0gYXBpLnRhcmdldFByZWZpeCArICcuJyArIGFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLm5hbWU7CiAgdmFyIHZlcnNpb24gPSBhcGkuanNvblZlcnNpb24gfHwgJzEuMCc7CiAgdmFyIGlucHV0ID0gYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0uaW5wdXQ7CiAgdmFyIGJ1aWxkZXIgPSBuZXcgSnNvbkJ1aWxkZXIoKTsKCiAgaWYgKHZlcnNpb24gPT09IDEpIHZlcnNpb24gPSAnMS4wJzsKICBodHRwUmVxdWVzdC5ib2R5ID0gYnVpbGRlci5idWlsZChyZXEucGFyYW1zIHx8IHt9LCBpbnB1dCk7CiAgaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC1hbXotanNvbi0nICsgdmVyc2lvbjsKICBodHRwUmVxdWVzdC5oZWFkZXJzWydYLUFtei1UYXJnZXQnXSA9IHRhcmdldDsKCiAgcG9wdWxhdGVIb3N0UHJlZml4KHJlcSk7Cn0KCmZ1bmN0aW9uIGV4dHJhY3RFcnJvcihyZXNwKSB7CiAgdmFyIGVycm9yID0ge307CiAgdmFyIGh0dHBSZXNwb25zZSA9IHJlc3AuaHR0cFJlc3BvbnNlOwoKICBlcnJvci5jb2RlID0gaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ3gtYW16bi1lcnJvcnR5cGUnXSB8fCAnVW5rbm93bkVycm9yJzsKICBpZiAodHlwZW9mIGVycm9yLmNvZGUgPT09ICdzdHJpbmcnKSB7CiAgICBlcnJvci5jb2RlID0gZXJyb3IuY29kZS5zcGxpdCgnOicpWzBdOwogIH0KCiAgaWYgKGh0dHBSZXNwb25zZS5ib2R5Lmxlbmd0aCA+IDApIHsKICAgIHRyeSB7CiAgICAgIHZhciBlID0gSlNPTi5wYXJzZShodHRwUmVzcG9uc2UuYm9keS50b1N0cmluZygpKTsKICAgICAgaWYgKGUuX190eXBlIHx8IGUuY29kZSkgewogICAgICAgIGVycm9yLmNvZGUgPSAoZS5fX3R5cGUgfHwgZS5jb2RlKS5zcGxpdCgnIycpLnBvcCgpOwogICAgICB9CiAgICAgIGlmIChlcnJvci5jb2RlID09PSAnUmVxdWVzdEVudGl0eVRvb0xhcmdlJykgewogICAgICAgIGVycm9yLm1lc3NhZ2UgPSAnUmVxdWVzdCBib2R5IG11c3QgYmUgbGVzcyB0aGFuIDEgTUInOwogICAgICB9IGVsc2UgewogICAgICAgIGVycm9yLm1lc3NhZ2UgPSAoZS5tZXNzYWdlIHx8IGUuTWVzc2FnZSB8fCBudWxsKTsKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICBlcnJvci5zdGF0dXNDb2RlID0gaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGU7CiAgICAgIGVycm9yLm1lc3NhZ2UgPSBodHRwUmVzcG9uc2Uuc3RhdHVzTWVzc2FnZTsKICAgIH0KICB9IGVsc2UgewogICAgZXJyb3Iuc3RhdHVzQ29kZSA9IGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlOwogICAgZXJyb3IubWVzc2FnZSA9IGh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLnRvU3RyaW5nKCk7CiAgfQoKICByZXNwLmVycm9yID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwgZXJyb3IpOwp9CgpmdW5jdGlvbiBleHRyYWN0RGF0YShyZXNwKSB7CiAgdmFyIGJvZHkgPSByZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCkgfHwgJ3t9JzsKICBpZiAocmVzcC5yZXF1ZXN0LnNlcnZpY2UuY29uZmlnLmNvbnZlcnRSZXNwb25zZVR5cGVzID09PSBmYWxzZSkgewogICAgcmVzcC5kYXRhID0gSlNPTi5wYXJzZShib2R5KTsKICB9IGVsc2UgewogICAgdmFyIG9wZXJhdGlvbiA9IHJlc3AucmVxdWVzdC5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3Jlc3AucmVxdWVzdC5vcGVyYXRpb25dOwogICAgdmFyIHNoYXBlID0gb3BlcmF0aW9uLm91dHB1dCB8fCB7fTsKICAgIHZhciBwYXJzZXIgPSBuZXcgSnNvblBhcnNlcigpOwogICAgcmVzcC5kYXRhID0gcGFyc2VyLnBhcnNlKGJvZHksIHNoYXBlKTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogIGJ1aWxkUmVxdWVzdDogYnVpbGRSZXF1ZXN0LAogIGV4dHJhY3RFcnJvcjogZXh0cmFjdEVycm9yLAogIGV4dHJhY3REYXRhOiBleHRyYWN0RGF0YQp9OwoKfSx7Ii4uL2pzb24vYnVpbGRlciI6MzYsIi4uL2pzb24vcGFyc2VyIjozNywiLi4vdXRpbCI6NzEsIi4vaGVscGVycyI6NDV9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgUXVlcnlQYXJhbVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuLi9xdWVyeS9xdWVyeV9wYXJhbV9zZXJpYWxpemVyJyk7CnZhciBTaGFwZSA9IHJlcXVpcmUoJy4uL21vZGVsL3NoYXBlJyk7CnZhciBwb3B1bGF0ZUhvc3RQcmVmaXggPSByZXF1aXJlKCcuL2hlbHBlcnMnKS5wb3B1bGF0ZUhvc3RQcmVmaXg7CgpmdW5jdGlvbiBidWlsZFJlcXVlc3QocmVxKSB7CiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dOwogIHZhciBodHRwUmVxdWVzdCA9IHJlcS5odHRwUmVxdWVzdDsKICBodHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9CiAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04JzsKICBodHRwUmVxdWVzdC5wYXJhbXMgPSB7CiAgICBWZXJzaW9uOiByZXEuc2VydmljZS5hcGkuYXBpVmVyc2lvbiwKICAgIEFjdGlvbjogb3BlcmF0aW9uLm5hbWUKICB9OwoKICAvLyBjb252ZXJ0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMgaW50byBhIGxpc3Qgb2YgcXVlcnkgcGFyYW1zLAogIC8vIGUuZy4gRGVlcGx5Lk5lc3RlZFBhcmFtLjAuTmFtZT12YWx1ZQogIHZhciBidWlsZGVyID0gbmV3IFF1ZXJ5UGFyYW1TZXJpYWxpemVyKCk7CiAgYnVpbGRlci5zZXJpYWxpemUocmVxLnBhcmFtcywgb3BlcmF0aW9uLmlucHV0LCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkgewogICAgaHR0cFJlcXVlc3QucGFyYW1zW25hbWVdID0gdmFsdWU7CiAgfSk7CiAgaHR0cFJlcXVlc3QuYm9keSA9IHV0aWwucXVlcnlQYXJhbXNUb1N0cmluZyhodHRwUmVxdWVzdC5wYXJhbXMpOwoKICBwb3B1bGF0ZUhvc3RQcmVmaXgocmVxKTsKfQoKZnVuY3Rpb24gZXh0cmFjdEVycm9yKHJlc3ApIHsKICB2YXIgZGF0YSwgYm9keSA9IHJlc3AuaHR0cFJlc3BvbnNlLmJvZHkudG9TdHJpbmcoKTsKICBpZiAoYm9keS5tYXRjaCgnPFVua25vd25PcGVyYXRpb25FeGNlcHRpb24nKSkgewogICAgZGF0YSA9IHsKICAgICAgQ29kZTogJ1Vua25vd25PcGVyYXRpb24nLAogICAgICBNZXNzYWdlOiAnVW5rbm93biBvcGVyYXRpb24gJyArIHJlc3AucmVxdWVzdC5vcGVyYXRpb24KICAgIH07CiAgfSBlbHNlIHsKICAgIHRyeSB7CiAgICAgIGRhdGEgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKS5wYXJzZShib2R5KTsKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgZGF0YSA9IHsKICAgICAgICBDb2RlOiByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLAogICAgICAgIE1lc3NhZ2U6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c01lc3NhZ2UKICAgICAgfTsKICAgIH0KICB9CgogIGlmIChkYXRhLnJlcXVlc3RJZCAmJiAhcmVzcC5yZXF1ZXN0SWQpIHJlc3AucmVxdWVzdElkID0gZGF0YS5yZXF1ZXN0SWQ7CiAgaWYgKGRhdGEuRXJyb3JzKSBkYXRhID0gZGF0YS5FcnJvcnM7CiAgaWYgKGRhdGEuRXJyb3IpIGRhdGEgPSBkYXRhLkVycm9yOwogIGlmIChkYXRhLkNvZGUpIHsKICAgIHJlc3AuZXJyb3IgPSB1dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgIGNvZGU6IGRhdGEuQ29kZSwKICAgICAgbWVzc2FnZTogZGF0YS5NZXNzYWdlCiAgICB9KTsKICB9IGVsc2UgewogICAgcmVzcC5lcnJvciA9IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHsKICAgICAgY29kZTogcmVzcC5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSwKICAgICAgbWVzc2FnZTogbnVsbAogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBleHRyYWN0RGF0YShyZXNwKSB7CiAgdmFyIHJlcSA9IHJlc3AucmVxdWVzdDsKICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl07CiAgdmFyIHNoYXBlID0gb3BlcmF0aW9uLm91dHB1dCB8fCB7fTsKICB2YXIgb3JpZ1J1bGVzID0gc2hhcGU7CgogIGlmIChvcmlnUnVsZXMucmVzdWx0V3JhcHBlcikgewogICAgdmFyIHRtcCA9IFNoYXBlLmNyZWF0ZSh7dHlwZTogJ3N0cnVjdHVyZSd9KTsKICAgIHRtcC5tZW1iZXJzW29yaWdSdWxlcy5yZXN1bHRXcmFwcGVyXSA9IHNoYXBlOwogICAgdG1wLm1lbWJlck5hbWVzID0gW29yaWdSdWxlcy5yZXN1bHRXcmFwcGVyXTsKICAgIHV0aWwucHJvcGVydHkoc2hhcGUsICduYW1lJywgc2hhcGUucmVzdWx0V3JhcHBlcik7CiAgICBzaGFwZSA9IHRtcDsKICB9CgogIHZhciBwYXJzZXIgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKTsKCiAgLy8gVE9ETzogUmVmYWN0b3IgWE1MIFBhcnNlciB0byBwYXJzZSBSZXF1ZXN0SWQgZnJvbSByZXNwb25zZS4KICBpZiAoc2hhcGUgJiYgc2hhcGUubWVtYmVycyAmJiAhc2hhcGUubWVtYmVycy5fWEFNWlJlcXVlc3RJZCkgewogICAgdmFyIHJlcXVlc3RJZFNoYXBlID0gU2hhcGUuY3JlYXRlKAogICAgICB7IHR5cGU6ICdzdHJpbmcnIH0sCiAgICAgIHsgYXBpOiB7IHByb3RvY29sOiAncXVlcnknIH0gfSwKICAgICAgJ3JlcXVlc3RJZCcKICAgICk7CiAgICBzaGFwZS5tZW1iZXJzLl9YQU1aUmVxdWVzdElkID0gcmVxdWVzdElkU2hhcGU7CiAgfQoKICB2YXIgZGF0YSA9IHBhcnNlci5wYXJzZShyZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCksIHNoYXBlKTsKICByZXNwLnJlcXVlc3RJZCA9IGRhdGEuX1hBTVpSZXF1ZXN0SWQgfHwgZGF0YS5yZXF1ZXN0SWQ7CgogIGlmIChkYXRhLl9YQU1aUmVxdWVzdElkKSBkZWxldGUgZGF0YS5fWEFNWlJlcXVlc3RJZDsKCiAgaWYgKG9yaWdSdWxlcy5yZXN1bHRXcmFwcGVyKSB7CiAgICBpZiAoZGF0YVtvcmlnUnVsZXMucmVzdWx0V3JhcHBlcl0pIHsKICAgICAgdXRpbC51cGRhdGUoZGF0YSwgZGF0YVtvcmlnUnVsZXMucmVzdWx0V3JhcHBlcl0pOwogICAgICBkZWxldGUgZGF0YVtvcmlnUnVsZXMucmVzdWx0V3JhcHBlcl07CiAgICB9CiAgfQoKICByZXNwLmRhdGEgPSBkYXRhOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IHsKICBidWlsZFJlcXVlc3Q6IGJ1aWxkUmVxdWVzdCwKICBleHRyYWN0RXJyb3I6IGV4dHJhY3RFcnJvciwKICBleHRyYWN0RGF0YTogZXh0cmFjdERhdGEKfTsKCn0seyIuLi9jb3JlIjoxOCwiLi4vbW9kZWwvc2hhcGUiOjQzLCIuLi9xdWVyeS9xdWVyeV9wYXJhbV9zZXJpYWxpemVyIjo1MSwiLi4vdXRpbCI6NzEsIi4vaGVscGVycyI6NDV9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgcG9wdWxhdGVIb3N0UHJlZml4ID0gcmVxdWlyZSgnLi9oZWxwZXJzJykucG9wdWxhdGVIb3N0UHJlZml4OwoKZnVuY3Rpb24gcG9wdWxhdGVNZXRob2QocmVxKSB7CiAgcmVxLmh0dHBSZXF1ZXN0Lm1ldGhvZCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmh0dHBNZXRob2Q7Cn0KCmZ1bmN0aW9uIGdlbmVyYXRlVVJJKGVuZHBvaW50UGF0aCwgb3BlcmF0aW9uUGF0aCwgaW5wdXQsIHBhcmFtcykgewogIHZhciB1cmkgPSBbZW5kcG9pbnRQYXRoLCBvcGVyYXRpb25QYXRoXS5qb2luKCcvJyk7CiAgdXJpID0gdXJpLnJlcGxhY2UoL1wvKy9nLCAnLycpOwoKICB2YXIgcXVlcnlTdHJpbmcgPSB7fSwgcXVlcnlTdHJpbmdTZXQgPSBmYWxzZTsKICB1dGlsLmVhY2goaW5wdXQubWVtYmVycywgZnVuY3Rpb24gKG5hbWUsIG1lbWJlcikgewogICAgdmFyIHBhcmFtVmFsdWUgPSBwYXJhbXNbbmFtZV07CiAgICBpZiAocGFyYW1WYWx1ZSA9PT0gbnVsbCB8fCBwYXJhbVZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICd1cmknKSB7CiAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoJ1xceycgKyBtZW1iZXIubmFtZSArICcoXFwrKT9cXH0nKTsKICAgICAgdXJpID0gdXJpLnJlcGxhY2UocmVnZXgsIGZ1bmN0aW9uKF8sIHBsdXMpIHsKICAgICAgICB2YXIgZm4gPSBwbHVzID8gdXRpbC51cmlFc2NhcGVQYXRoIDogdXRpbC51cmlFc2NhcGU7CiAgICAgICAgcmV0dXJuIGZuKFN0cmluZyhwYXJhbVZhbHVlKSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdxdWVyeXN0cmluZycpIHsKICAgICAgcXVlcnlTdHJpbmdTZXQgPSB0cnVlOwoKICAgICAgaWYgKG1lbWJlci50eXBlID09PSAnbGlzdCcpIHsKICAgICAgICBxdWVyeVN0cmluZ1ttZW1iZXIubmFtZV0gPSBwYXJhbVZhbHVlLm1hcChmdW5jdGlvbih2YWwpIHsKICAgICAgICAgIHJldHVybiB1dGlsLnVyaUVzY2FwZShtZW1iZXIubWVtYmVyLnRvV2lyZUZvcm1hdCh2YWwpLnRvU3RyaW5nKCkpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKG1lbWJlci50eXBlID09PSAnbWFwJykgewogICAgICAgIHV0aWwuZWFjaChwYXJhbVZhbHVlLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgcXVlcnlTdHJpbmdba2V5XSA9IHZhbHVlLm1hcChmdW5jdGlvbih2YWwpIHsKICAgICAgICAgICAgICByZXR1cm4gdXRpbC51cmlFc2NhcGUoU3RyaW5nKHZhbCkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nW2tleV0gPSB1dGlsLnVyaUVzY2FwZShTdHJpbmcodmFsdWUpKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBxdWVyeVN0cmluZ1ttZW1iZXIubmFtZV0gPSB1dGlsLnVyaUVzY2FwZShtZW1iZXIudG9XaXJlRm9ybWF0KHBhcmFtVmFsdWUpLnRvU3RyaW5nKCkpOwogICAgICB9CiAgICB9CiAgfSk7CgogIGlmIChxdWVyeVN0cmluZ1NldCkgewogICAgdXJpICs9ICh1cmkuaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPycpOwogICAgdmFyIHBhcnRzID0gW107CiAgICB1dGlsLmFycmF5RWFjaChPYmplY3Qua2V5cyhxdWVyeVN0cmluZykuc29ydCgpLCBmdW5jdGlvbihrZXkpIHsKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHF1ZXJ5U3RyaW5nW2tleV0pKSB7CiAgICAgICAgcXVlcnlTdHJpbmdba2V5XSA9IFtxdWVyeVN0cmluZ1trZXldXTsKICAgICAgfQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXJ5U3RyaW5nW2tleV0ubGVuZ3RoOyBpKyspIHsKICAgICAgICBwYXJ0cy5wdXNoKHV0aWwudXJpRXNjYXBlKFN0cmluZyhrZXkpKSArICc9JyArIHF1ZXJ5U3RyaW5nW2tleV1baV0pOwogICAgICB9CiAgICB9KTsKICAgIHVyaSArPSBwYXJ0cy5qb2luKCcmJyk7CiAgfQoKICByZXR1cm4gdXJpOwp9CgpmdW5jdGlvbiBwb3B1bGF0ZVVSSShyZXEpIHsKICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl07CiAgdmFyIGlucHV0ID0gb3BlcmF0aW9uLmlucHV0OwoKICB2YXIgdXJpID0gZ2VuZXJhdGVVUkkocmVxLmh0dHBSZXF1ZXN0LmVuZHBvaW50LnBhdGgsIG9wZXJhdGlvbi5odHRwUGF0aCwgaW5wdXQsIHJlcS5wYXJhbXMpOwogIHJlcS5odHRwUmVxdWVzdC5wYXRoID0gdXJpOwp9CgpmdW5jdGlvbiBwb3B1bGF0ZUhlYWRlcnMocmVxKSB7CiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dOwogIHV0aWwuZWFjaChvcGVyYXRpb24uaW5wdXQubWVtYmVycywgZnVuY3Rpb24gKG5hbWUsIG1lbWJlcikgewogICAgdmFyIHZhbHVlID0gcmVxLnBhcmFtc1tuYW1lXTsKICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47CgogICAgaWYgKG1lbWJlci5sb2NhdGlvbiA9PT0gJ2hlYWRlcnMnICYmIG1lbWJlci50eXBlID09PSAnbWFwJykgewogICAgICB1dGlsLmVhY2godmFsdWUsIGZ1bmN0aW9uKGtleSwgbWVtYmVyVmFsdWUpIHsKICAgICAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1ttZW1iZXIubmFtZSArIGtleV0gPSBtZW1iZXJWYWx1ZTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKG1lbWJlci5sb2NhdGlvbiA9PT0gJ2hlYWRlcicpIHsKICAgICAgdmFsdWUgPSBtZW1iZXIudG9XaXJlRm9ybWF0KHZhbHVlKS50b1N0cmluZygpOwogICAgICBpZiAobWVtYmVyLmlzSnNvblZhbHVlKSB7CiAgICAgICAgdmFsdWUgPSB1dGlsLmJhc2U2NC5lbmNvZGUodmFsdWUpOwogICAgICB9CiAgICAgIHJlcS5odHRwUmVxdWVzdC5oZWFkZXJzW21lbWJlci5uYW1lXSA9IHZhbHVlOwogICAgfQogIH0pOwp9CgpmdW5jdGlvbiBidWlsZFJlcXVlc3QocmVxKSB7CiAgcG9wdWxhdGVNZXRob2QocmVxKTsKICBwb3B1bGF0ZVVSSShyZXEpOwogIHBvcHVsYXRlSGVhZGVycyhyZXEpOwogIHBvcHVsYXRlSG9zdFByZWZpeChyZXEpOwp9CgpmdW5jdGlvbiBleHRyYWN0RXJyb3IoKSB7Cn0KCmZ1bmN0aW9uIGV4dHJhY3REYXRhKHJlc3ApIHsKICB2YXIgcmVxID0gcmVzcC5yZXF1ZXN0OwogIHZhciBkYXRhID0ge307CiAgdmFyIHIgPSByZXNwLmh0dHBSZXNwb25zZTsKICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl07CiAgdmFyIG91dHB1dCA9IG9wZXJhdGlvbi5vdXRwdXQ7CgogIC8vIG5vcm1hbGl6ZSBoZWFkZXJzIG5hbWVzIHRvIGxvd2VyLWNhc2VkIGtleXMgZm9yIG1hdGNoaW5nCiAgdmFyIGhlYWRlcnMgPSB7fTsKICB1dGlsLmVhY2goci5oZWFkZXJzLCBmdW5jdGlvbiAoaywgdikgewogICAgaGVhZGVyc1trLnRvTG93ZXJDYXNlKCldID0gdjsKICB9KTsKCiAgdXRpbC5lYWNoKG91dHB1dC5tZW1iZXJzLCBmdW5jdGlvbihuYW1lLCBtZW1iZXIpIHsKICAgIHZhciBoZWFkZXIgPSAobWVtYmVyLm5hbWUgfHwgbmFtZSkudG9Mb3dlckNhc2UoKTsKICAgIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdoZWFkZXJzJyAmJiBtZW1iZXIudHlwZSA9PT0gJ21hcCcpIHsKICAgICAgZGF0YVtuYW1lXSA9IHt9OwogICAgICB2YXIgbG9jYXRpb24gPSBtZW1iZXIuaXNMb2NhdGlvbk5hbWUgPyBtZW1iZXIubmFtZSA6ICcnOwogICAgICB2YXIgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nICsgbG9jYXRpb24gKyAnKC4rKScsICdpJyk7CiAgICAgIHV0aWwuZWFjaChyLmhlYWRlcnMsIGZ1bmN0aW9uIChrLCB2KSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGsubWF0Y2gocGF0dGVybik7CiAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgewogICAgICAgICAgZGF0YVtuYW1lXVtyZXN1bHRbMV1dID0gdjsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChtZW1iZXIubG9jYXRpb24gPT09ICdoZWFkZXInKSB7CiAgICAgIGlmIChoZWFkZXJzW2hlYWRlcl0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHZhciB2YWx1ZSA9IG1lbWJlci5pc0pzb25WYWx1ZSA/CiAgICAgICAgICB1dGlsLmJhc2U2NC5kZWNvZGUoaGVhZGVyc1toZWFkZXJdKSA6CiAgICAgICAgICBoZWFkZXJzW2hlYWRlcl07CiAgICAgICAgZGF0YVtuYW1lXSA9IG1lbWJlci50b1R5cGUodmFsdWUpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKG1lbWJlci5sb2NhdGlvbiA9PT0gJ3N0YXR1c0NvZGUnKSB7CiAgICAgIGRhdGFbbmFtZV0gPSBwYXJzZUludChyLnN0YXR1c0NvZGUsIDEwKTsKICAgIH0KICB9KTsKCiAgcmVzcC5kYXRhID0gZGF0YTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSB7CiAgYnVpbGRSZXF1ZXN0OiBidWlsZFJlcXVlc3QsCiAgZXh0cmFjdEVycm9yOiBleHRyYWN0RXJyb3IsCiAgZXh0cmFjdERhdGE6IGV4dHJhY3REYXRhLAogIGdlbmVyYXRlVVJJOiBnZW5lcmF0ZVVSSQp9OwoKfSx7Ii4uL3V0aWwiOjcxLCIuL2hlbHBlcnMiOjQ1fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTsKdmFyIFJlc3QgPSByZXF1aXJlKCcuL3Jlc3QnKTsKdmFyIEpzb24gPSByZXF1aXJlKCcuL2pzb24nKTsKdmFyIEpzb25CdWlsZGVyID0gcmVxdWlyZSgnLi4vanNvbi9idWlsZGVyJyk7CnZhciBKc29uUGFyc2VyID0gcmVxdWlyZSgnLi4vanNvbi9wYXJzZXInKTsKCmZ1bmN0aW9uIHBvcHVsYXRlQm9keShyZXEpIHsKICB2YXIgYnVpbGRlciA9IG5ldyBKc29uQnVpbGRlcigpOwogIHZhciBpbnB1dCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmlucHV0OwoKICBpZiAoaW5wdXQucGF5bG9hZCkgewogICAgdmFyIHBhcmFtcyA9IHt9OwogICAgdmFyIHBheWxvYWRTaGFwZSA9IGlucHV0Lm1lbWJlcnNbaW5wdXQucGF5bG9hZF07CiAgICBwYXJhbXMgPSByZXEucGFyYW1zW2lucHV0LnBheWxvYWRdOwogICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkKSByZXR1cm47CgogICAgaWYgKHBheWxvYWRTaGFwZS50eXBlID09PSAnc3RydWN0dXJlJykgewogICAgICByZXEuaHR0cFJlcXVlc3QuYm9keSA9IGJ1aWxkZXIuYnVpbGQocGFyYW1zLCBwYXlsb2FkU2hhcGUpOwogICAgICBhcHBseUNvbnRlbnRUeXBlSGVhZGVyKHJlcSk7CiAgICB9IGVsc2UgeyAvLyBub24tSlNPTiBwYXlsb2FkCiAgICAgIHJlcS5odHRwUmVxdWVzdC5ib2R5ID0gcGFyYW1zOwogICAgICBpZiAocGF5bG9hZFNoYXBlLnR5cGUgPT09ICdiaW5hcnknIHx8IHBheWxvYWRTaGFwZS5pc1N0cmVhbWluZykgewogICAgICAgIGFwcGx5Q29udGVudFR5cGVIZWFkZXIocmVxLCB0cnVlKTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICB2YXIgYm9keSA9IGJ1aWxkZXIuYnVpbGQocmVxLnBhcmFtcywgaW5wdXQpOwogICAgaWYgKGJvZHkgIT09ICd7fScgfHwgcmVxLmh0dHBSZXF1ZXN0Lm1ldGhvZCAhPT0gJ0dFVCcpIHsgLy9kb24ndCBzZW5kIGVtcHR5IGJvZHkgZm9yIEdFVCBtZXRob2QKICAgICAgcmVxLmh0dHBSZXF1ZXN0LmJvZHkgPSBib2R5OwogICAgfQogICAgYXBwbHlDb250ZW50VHlwZUhlYWRlcihyZXEpOwogIH0KfQoKZnVuY3Rpb24gYXBwbHlDb250ZW50VHlwZUhlYWRlcihyZXEsIGlzQmluYXJ5KSB7CiAgdmFyIG9wZXJhdGlvbiA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dOwogIHZhciBpbnB1dCA9IG9wZXJhdGlvbi5pbnB1dDsKCiAgaWYgKCFyZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ10pIHsKICAgIHZhciB0eXBlID0gaXNCaW5hcnkgPyAnYmluYXJ5L29jdGV0LXN0cmVhbScgOiAnYXBwbGljYXRpb24vanNvbic7CiAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB0eXBlOwogIH0KfQoKZnVuY3Rpb24gYnVpbGRSZXF1ZXN0KHJlcSkgewogIFJlc3QuYnVpbGRSZXF1ZXN0KHJlcSk7CgogIC8vIG5ldmVyIHNlbmQgYm9keSBwYXlsb2FkIG9uIEhFQUQvREVMRVRFCiAgaWYgKFsnSEVBRCcsICdERUxFVEUnXS5pbmRleE9mKHJlcS5odHRwUmVxdWVzdC5tZXRob2QpIDwgMCkgewogICAgcG9wdWxhdGVCb2R5KHJlcSk7CiAgfQp9CgpmdW5jdGlvbiBleHRyYWN0RXJyb3IocmVzcCkgewogIEpzb24uZXh0cmFjdEVycm9yKHJlc3ApOwp9CgpmdW5jdGlvbiBleHRyYWN0RGF0YShyZXNwKSB7CiAgUmVzdC5leHRyYWN0RGF0YShyZXNwKTsKCiAgdmFyIHJlcSA9IHJlc3AucmVxdWVzdDsKICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl07CiAgdmFyIHJ1bGVzID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxLm9wZXJhdGlvbl0ub3V0cHV0IHx8IHt9OwogIHZhciBwYXJzZXI7CiAgdmFyIGhhc0V2ZW50T3V0cHV0ID0gb3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0OwoKICBpZiAocnVsZXMucGF5bG9hZCkgewogICAgdmFyIHBheWxvYWRNZW1iZXIgPSBydWxlcy5tZW1iZXJzW3J1bGVzLnBheWxvYWRdOwogICAgdmFyIGJvZHkgPSByZXNwLmh0dHBSZXNwb25zZS5ib2R5OwogICAgaWYgKHBheWxvYWRNZW1iZXIuaXNFdmVudFN0cmVhbSkgewogICAgICBwYXJzZXIgPSBuZXcgSnNvblBhcnNlcigpOwogICAgICByZXNwLmRhdGFbcGF5bG9hZF0gPSB1dGlsLmNyZWF0ZUV2ZW50U3RyZWFtKAogICAgICAgIEFXUy5IdHRwQ2xpZW50LnN0cmVhbXNBcGlWZXJzaW9uID09PSAyID8gcmVzcC5odHRwUmVzcG9uc2Uuc3RyZWFtIDogYm9keSwKICAgICAgICBwYXJzZXIsCiAgICAgICAgcGF5bG9hZE1lbWJlcgogICAgICApOwogICAgfSBlbHNlIGlmIChwYXlsb2FkTWVtYmVyLnR5cGUgPT09ICdzdHJ1Y3R1cmUnIHx8IHBheWxvYWRNZW1iZXIudHlwZSA9PT0gJ2xpc3QnKSB7CiAgICAgIHZhciBwYXJzZXIgPSBuZXcgSnNvblBhcnNlcigpOwogICAgICByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0gPSBwYXJzZXIucGFyc2UoYm9keSwgcGF5bG9hZE1lbWJlcik7CiAgICB9IGVsc2UgaWYgKHBheWxvYWRNZW1iZXIudHlwZSA9PT0gJ2JpbmFyeScgfHwgcGF5bG9hZE1lbWJlci5pc1N0cmVhbWluZykgewogICAgICByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0gPSBib2R5OwogICAgfSBlbHNlIHsKICAgICAgcmVzcC5kYXRhW3J1bGVzLnBheWxvYWRdID0gcGF5bG9hZE1lbWJlci50b1R5cGUoYm9keSk7CiAgICB9CiAgfSBlbHNlIHsKICAgIHZhciBkYXRhID0gcmVzcC5kYXRhOwogICAgSnNvbi5leHRyYWN0RGF0YShyZXNwKTsKICAgIHJlc3AuZGF0YSA9IHV0aWwubWVyZ2UoZGF0YSwgcmVzcC5kYXRhKTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogIGJ1aWxkUmVxdWVzdDogYnVpbGRSZXF1ZXN0LAogIGV4dHJhY3RFcnJvcjogZXh0cmFjdEVycm9yLAogIGV4dHJhY3REYXRhOiBleHRyYWN0RGF0YQp9OwoKfSx7Ii4uL2pzb24vYnVpbGRlciI6MzYsIi4uL2pzb24vcGFyc2VyIjozNywiLi4vdXRpbCI6NzEsIi4vanNvbiI6NDYsIi4vcmVzdCI6NDh9XSw1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgUmVzdCA9IHJlcXVpcmUoJy4vcmVzdCcpOwoKZnVuY3Rpb24gcG9wdWxhdGVCb2R5KHJlcSkgewogIHZhciBpbnB1dCA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zW3JlcS5vcGVyYXRpb25dLmlucHV0OwogIHZhciBidWlsZGVyID0gbmV3IEFXUy5YTUwuQnVpbGRlcigpOwogIHZhciBwYXJhbXMgPSByZXEucGFyYW1zOwoKICB2YXIgcGF5bG9hZCA9IGlucHV0LnBheWxvYWQ7CiAgaWYgKHBheWxvYWQpIHsKICAgIHZhciBwYXlsb2FkTWVtYmVyID0gaW5wdXQubWVtYmVyc1twYXlsb2FkXTsKICAgIHBhcmFtcyA9IHBhcmFtc1twYXlsb2FkXTsKICAgIGlmIChwYXJhbXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuOwoKICAgIGlmIChwYXlsb2FkTWVtYmVyLnR5cGUgPT09ICdzdHJ1Y3R1cmUnKSB7CiAgICAgIHZhciByb290RWxlbWVudCA9IHBheWxvYWRNZW1iZXIubmFtZTsKICAgICAgcmVxLmh0dHBSZXF1ZXN0LmJvZHkgPSBidWlsZGVyLnRvWE1MKHBhcmFtcywgcGF5bG9hZE1lbWJlciwgcm9vdEVsZW1lbnQsIHRydWUpOwogICAgfSBlbHNlIHsgLy8gbm9uLXhtbCBwYXlsb2FkCiAgICAgIHJlcS5odHRwUmVxdWVzdC5ib2R5ID0gcGFyYW1zOwogICAgfQogIH0gZWxzZSB7CiAgICByZXEuaHR0cFJlcXVlc3QuYm9keSA9IGJ1aWxkZXIudG9YTUwocGFyYW1zLCBpbnB1dCwgaW5wdXQubmFtZSB8fAogICAgICBpbnB1dC5zaGFwZSB8fCB1dGlsLnN0cmluZy51cHBlckZpcnN0KHJlcS5vcGVyYXRpb24pICsgJ1JlcXVlc3QnKTsKICB9Cn0KCmZ1bmN0aW9uIGJ1aWxkUmVxdWVzdChyZXEpIHsKICBSZXN0LmJ1aWxkUmVxdWVzdChyZXEpOwoKICAvLyBuZXZlciBzZW5kIGJvZHkgcGF5bG9hZCBvbiBHRVQvSEVBRAogIGlmIChbJ0dFVCcsICdIRUFEJ10uaW5kZXhPZihyZXEuaHR0cFJlcXVlc3QubWV0aG9kKSA8IDApIHsKICAgIHBvcHVsYXRlQm9keShyZXEpOwogIH0KfQoKZnVuY3Rpb24gZXh0cmFjdEVycm9yKHJlc3ApIHsKICBSZXN0LmV4dHJhY3RFcnJvcihyZXNwKTsKCiAgdmFyIGRhdGE7CiAgdHJ5IHsKICAgIGRhdGEgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKS5wYXJzZShyZXNwLmh0dHBSZXNwb25zZS5ib2R5LnRvU3RyaW5nKCkpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGRhdGEgPSB7CiAgICAgIENvZGU6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUsCiAgICAgIE1lc3NhZ2U6IHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c01lc3NhZ2UKICAgIH07CiAgfQoKICBpZiAoZGF0YS5FcnJvcnMpIGRhdGEgPSBkYXRhLkVycm9yczsKICBpZiAoZGF0YS5FcnJvcikgZGF0YSA9IGRhdGEuRXJyb3I7CiAgaWYgKGRhdGEuQ29kZSkgewogICAgcmVzcC5lcnJvciA9IHV0aWwuZXJyb3IobmV3IEVycm9yKCksIHsKICAgICAgY29kZTogZGF0YS5Db2RlLAogICAgICBtZXNzYWdlOiBkYXRhLk1lc3NhZ2UKICAgIH0pOwogIH0gZWxzZSB7CiAgICByZXNwLmVycm9yID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwgewogICAgICBjb2RlOiByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlLAogICAgICBtZXNzYWdlOiBudWxsCiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGV4dHJhY3REYXRhKHJlc3ApIHsKICBSZXN0LmV4dHJhY3REYXRhKHJlc3ApOwoKICB2YXIgcGFyc2VyOwogIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7CiAgdmFyIGJvZHkgPSByZXNwLmh0dHBSZXNwb25zZS5ib2R5OwogIHZhciBvcGVyYXRpb24gPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXEub3BlcmF0aW9uXTsKICB2YXIgb3V0cHV0ID0gb3BlcmF0aW9uLm91dHB1dDsKCiAgdmFyIGhhc0V2ZW50T3V0cHV0ID0gb3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0OwoKICB2YXIgcGF5bG9hZCA9IG91dHB1dC5wYXlsb2FkOwogIGlmIChwYXlsb2FkKSB7CiAgICB2YXIgcGF5bG9hZE1lbWJlciA9IG91dHB1dC5tZW1iZXJzW3BheWxvYWRdOwogICAgaWYgKHBheWxvYWRNZW1iZXIuaXNFdmVudFN0cmVhbSkgewogICAgICBwYXJzZXIgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKTsKICAgICAgcmVzcC5kYXRhW3BheWxvYWRdID0gdXRpbC5jcmVhdGVFdmVudFN0cmVhbSgKICAgICAgICBBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMiA/IHJlc3AuaHR0cFJlc3BvbnNlLnN0cmVhbSA6IHJlc3AuaHR0cFJlc3BvbnNlLmJvZHksCiAgICAgICAgcGFyc2VyLAogICAgICAgIHBheWxvYWRNZW1iZXIKICAgICAgKTsKICAgIH0gZWxzZSBpZiAocGF5bG9hZE1lbWJlci50eXBlID09PSAnc3RydWN0dXJlJykgewogICAgICBwYXJzZXIgPSBuZXcgQVdTLlhNTC5QYXJzZXIoKTsKICAgICAgcmVzcC5kYXRhW3BheWxvYWRdID0gcGFyc2VyLnBhcnNlKGJvZHkudG9TdHJpbmcoKSwgcGF5bG9hZE1lbWJlcik7CiAgICB9IGVsc2UgaWYgKHBheWxvYWRNZW1iZXIudHlwZSA9PT0gJ2JpbmFyeScgfHwgcGF5bG9hZE1lbWJlci5pc1N0cmVhbWluZykgewogICAgICByZXNwLmRhdGFbcGF5bG9hZF0gPSBib2R5OwogICAgfSBlbHNlIHsKICAgICAgcmVzcC5kYXRhW3BheWxvYWRdID0gcGF5bG9hZE1lbWJlci50b1R5cGUoYm9keSk7CiAgICB9CiAgfSBlbHNlIGlmIChib2R5Lmxlbmd0aCA+IDApIHsKICAgIHBhcnNlciA9IG5ldyBBV1MuWE1MLlBhcnNlcigpOwogICAgdmFyIGRhdGEgPSBwYXJzZXIucGFyc2UoYm9keS50b1N0cmluZygpLCBvdXRwdXQpOwogICAgdXRpbC51cGRhdGUocmVzcC5kYXRhLCBkYXRhKTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogIGJ1aWxkUmVxdWVzdDogYnVpbGRSZXF1ZXN0LAogIGV4dHJhY3RFcnJvcjogZXh0cmFjdEVycm9yLAogIGV4dHJhY3REYXRhOiBleHRyYWN0RGF0YQp9OwoKfSx7Ii4uL2NvcmUiOjE4LCIuLi91dGlsIjo3MSwiLi9yZXN0Ijo0OH1dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7CgpmdW5jdGlvbiBRdWVyeVBhcmFtU2VyaWFsaXplcigpIHsKfQoKUXVlcnlQYXJhbVNlcmlhbGl6ZXIucHJvdG90eXBlLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHBhcmFtcywgc2hhcGUsIGZuKSB7CiAgc2VyaWFsaXplU3RydWN0dXJlKCcnLCBwYXJhbXMsIHNoYXBlLCBmbik7Cn07CgpmdW5jdGlvbiB1Y2ZpcnN0KHNoYXBlKSB7CiAgaWYgKHNoYXBlLmlzUXVlcnlOYW1lIHx8IHNoYXBlLmFwaS5wcm90b2NvbCAhPT0gJ2VjMicpIHsKICAgIHJldHVybiBzaGFwZS5uYW1lOwogIH0gZWxzZSB7CiAgICByZXR1cm4gc2hhcGUubmFtZVswXS50b1VwcGVyQ2FzZSgpICsgc2hhcGUubmFtZS5zdWJzdHIoMSk7CiAgfQp9CgpmdW5jdGlvbiBzZXJpYWxpemVTdHJ1Y3R1cmUocHJlZml4LCBzdHJ1Y3QsIHJ1bGVzLCBmbikgewogIHV0aWwuZWFjaChydWxlcy5tZW1iZXJzLCBmdW5jdGlvbihuYW1lLCBtZW1iZXIpIHsKICAgIHZhciB2YWx1ZSA9IHN0cnVjdFtuYW1lXTsKICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47CgogICAgdmFyIG1lbWJlck5hbWUgPSB1Y2ZpcnN0KG1lbWJlcik7CiAgICBtZW1iZXJOYW1lID0gcHJlZml4ID8gcHJlZml4ICsgJy4nICsgbWVtYmVyTmFtZSA6IG1lbWJlck5hbWU7CiAgICBzZXJpYWxpemVNZW1iZXIobWVtYmVyTmFtZSwgdmFsdWUsIG1lbWJlciwgZm4pOwogIH0pOwp9CgpmdW5jdGlvbiBzZXJpYWxpemVNYXAobmFtZSwgbWFwLCBydWxlcywgZm4pIHsKICB2YXIgaSA9IDE7CiAgdXRpbC5lYWNoKG1hcCwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgIHZhciBwcmVmaXggPSBydWxlcy5mbGF0dGVuZWQgPyAnLicgOiAnLmVudHJ5Lic7CiAgICB2YXIgcG9zaXRpb24gPSBwcmVmaXggKyAoaSsrKSArICcuJzsKICAgIHZhciBrZXlOYW1lID0gcG9zaXRpb24gKyAocnVsZXMua2V5Lm5hbWUgfHwgJ2tleScpOwogICAgdmFyIHZhbHVlTmFtZSA9IHBvc2l0aW9uICsgKHJ1bGVzLnZhbHVlLm5hbWUgfHwgJ3ZhbHVlJyk7CiAgICBzZXJpYWxpemVNZW1iZXIobmFtZSArIGtleU5hbWUsIGtleSwgcnVsZXMua2V5LCBmbik7CiAgICBzZXJpYWxpemVNZW1iZXIobmFtZSArIHZhbHVlTmFtZSwgdmFsdWUsIHJ1bGVzLnZhbHVlLCBmbik7CiAgfSk7Cn0KCmZ1bmN0aW9uIHNlcmlhbGl6ZUxpc3QobmFtZSwgbGlzdCwgcnVsZXMsIGZuKSB7CiAgdmFyIG1lbWJlclJ1bGVzID0gcnVsZXMubWVtYmVyIHx8IHt9OwoKICBpZiAobGlzdC5sZW5ndGggPT09IDApIHsKICAgIGZuLmNhbGwodGhpcywgbmFtZSwgbnVsbCk7CiAgICByZXR1cm47CiAgfQoKICB1dGlsLmFycmF5RWFjaChsaXN0LCBmdW5jdGlvbiAodiwgbikgewogICAgdmFyIHN1ZmZpeCA9ICcuJyArIChuICsgMSk7CiAgICBpZiAocnVsZXMuYXBpLnByb3RvY29sID09PSAnZWMyJykgewogICAgICAvLyBEbyBub3RoaW5nIGZvciBFQzIKICAgICAgc3VmZml4ID0gc3VmZml4ICsgJyc7IC8vIG1ha2UgbGludGVyIGhhcHB5CiAgICB9IGVsc2UgaWYgKHJ1bGVzLmZsYXR0ZW5lZCkgewogICAgICBpZiAobWVtYmVyUnVsZXMubmFtZSkgewogICAgICAgIHZhciBwYXJ0cyA9IG5hbWUuc3BsaXQoJy4nKTsKICAgICAgICBwYXJ0cy5wb3AoKTsKICAgICAgICBwYXJ0cy5wdXNoKHVjZmlyc3QobWVtYmVyUnVsZXMpKTsKICAgICAgICBuYW1lID0gcGFydHMuam9pbignLicpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBzdWZmaXggPSAnLicgKyAobWVtYmVyUnVsZXMubmFtZSA/IG1lbWJlclJ1bGVzLm5hbWUgOiAnbWVtYmVyJykgKyBzdWZmaXg7CiAgICB9CiAgICBzZXJpYWxpemVNZW1iZXIobmFtZSArIHN1ZmZpeCwgdiwgbWVtYmVyUnVsZXMsIGZuKTsKICB9KTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplTWVtYmVyKG5hbWUsIHZhbHVlLCBydWxlcywgZm4pIHsKICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuOwogIGlmIChydWxlcy50eXBlID09PSAnc3RydWN0dXJlJykgewogICAgc2VyaWFsaXplU3RydWN0dXJlKG5hbWUsIHZhbHVlLCBydWxlcywgZm4pOwogIH0gZWxzZSBpZiAocnVsZXMudHlwZSA9PT0gJ2xpc3QnKSB7CiAgICBzZXJpYWxpemVMaXN0KG5hbWUsIHZhbHVlLCBydWxlcywgZm4pOwogIH0gZWxzZSBpZiAocnVsZXMudHlwZSA9PT0gJ21hcCcpIHsKICAgIHNlcmlhbGl6ZU1hcChuYW1lLCB2YWx1ZSwgcnVsZXMsIGZuKTsKICB9IGVsc2UgewogICAgZm4obmFtZSwgcnVsZXMudG9XaXJlRm9ybWF0KHZhbHVlKS50b1N0cmluZygpKTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gUXVlcnlQYXJhbVNlcmlhbGl6ZXI7Cgp9LHsiLi4vdXRpbCI6NzF9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gewogIC8vcHJvdmlkZSByZWFsdGltZSBjbG9jayBmb3IgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQKICBub3c6IGZ1bmN0aW9uIG5vdygpIHsKICAgIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOwogICAgfQogICAgcmV0dXJuIERhdGUubm93KCk7CiAgfQp9OwoKfSx7fV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpOwp2YXIgcmVnaW9uQ29uZmlnID0gcmVxdWlyZSgnLi9yZWdpb25fY29uZmlnX2RhdGEuanNvbicpOwoKZnVuY3Rpb24gZ2VuZXJhdGVSZWdpb25QcmVmaXgocmVnaW9uKSB7CiAgaWYgKCFyZWdpb24pIHJldHVybiBudWxsOwoKICB2YXIgcGFydHMgPSByZWdpb24uc3BsaXQoJy0nKTsKICBpZiAocGFydHMubGVuZ3RoIDwgMykgcmV0dXJuIG51bGw7CiAgcmV0dXJuIHBhcnRzLnNsaWNlKDAsIHBhcnRzLmxlbmd0aCAtIDIpLmpvaW4oJy0nKSArICctKic7Cn0KCmZ1bmN0aW9uIGRlcml2ZWRLZXlzKHNlcnZpY2UpIHsKICB2YXIgcmVnaW9uID0gc2VydmljZS5jb25maWcucmVnaW9uOwogIHZhciByZWdpb25QcmVmaXggPSBnZW5lcmF0ZVJlZ2lvblByZWZpeChyZWdpb24pOwogIHZhciBlbmRwb2ludFByZWZpeCA9IHNlcnZpY2UuYXBpLmVuZHBvaW50UHJlZml4OwoKICByZXR1cm4gWwogICAgW3JlZ2lvbiwgZW5kcG9pbnRQcmVmaXhdLAogICAgW3JlZ2lvblByZWZpeCwgZW5kcG9pbnRQcmVmaXhdLAogICAgW3JlZ2lvbiwgJyonXSwKICAgIFtyZWdpb25QcmVmaXgsICcqJ10sCiAgICBbJyonLCBlbmRwb2ludFByZWZpeF0sCiAgICBbJyonLCAnKiddCiAgXS5tYXAoZnVuY3Rpb24oaXRlbSkgewogICAgcmV0dXJuIGl0ZW1bMF0gJiYgaXRlbVsxXSA/IGl0ZW0uam9pbignLycpIDogbnVsbDsKICB9KTsKfQoKZnVuY3Rpb24gYXBwbHlDb25maWcoc2VydmljZSwgY29uZmlnKSB7CiAgdXRpbC5lYWNoKGNvbmZpZywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogICAgaWYgKGtleSA9PT0gJ2dsb2JhbEVuZHBvaW50JykgcmV0dXJuOwogICAgaWYgKHNlcnZpY2UuY29uZmlnW2tleV0gPT09IHVuZGVmaW5lZCB8fCBzZXJ2aWNlLmNvbmZpZ1trZXldID09PSBudWxsKSB7CiAgICAgIHNlcnZpY2UuY29uZmlnW2tleV0gPSB2YWx1ZTsKICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gY29uZmlndXJlRW5kcG9pbnQoc2VydmljZSkgewogIHZhciBrZXlzID0gZGVyaXZlZEtleXMoc2VydmljZSk7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIga2V5ID0ga2V5c1tpXTsKICAgIGlmICgha2V5KSBjb250aW51ZTsKCiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlZ2lvbkNvbmZpZy5ydWxlcywga2V5KSkgewogICAgICB2YXIgY29uZmlnID0gcmVnaW9uQ29uZmlnLnJ1bGVzW2tleV07CiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykgewogICAgICAgIGNvbmZpZyA9IHJlZ2lvbkNvbmZpZy5wYXR0ZXJuc1tjb25maWddOwogICAgICB9CgogICAgICAvLyBzZXQgZHVhbHN0YWNrIGVuZHBvaW50CiAgICAgIGlmIChzZXJ2aWNlLmNvbmZpZy51c2VEdWFsc3RhY2sgJiYgdXRpbC5pc0R1YWxzdGFja0F2YWlsYWJsZShzZXJ2aWNlKSkgewogICAgICAgIGNvbmZpZyA9IHV0aWwuY29weShjb25maWcpOwogICAgICAgIGNvbmZpZy5lbmRwb2ludCA9ICd7c2VydmljZX0uZHVhbHN0YWNrLntyZWdpb259LmFtYXpvbmF3cy5jb20nOwogICAgICB9CgogICAgICAvLyBzZXQgZ2xvYmFsIGVuZHBvaW50CiAgICAgIHNlcnZpY2UuaXNHbG9iYWxFbmRwb2ludCA9ICEhY29uZmlnLmdsb2JhbEVuZHBvaW50OwoKICAgICAgLy8gc2lnbmF0dXJlIHZlcnNpb24KICAgICAgaWYgKCFjb25maWcuc2lnbmF0dXJlVmVyc2lvbikgY29uZmlnLnNpZ25hdHVyZVZlcnNpb24gPSAndjQnOwoKICAgICAgLy8gbWVyZ2UgY29uZmlnCiAgICAgIGFwcGx5Q29uZmlnKHNlcnZpY2UsIGNvbmZpZyk7CiAgICAgIHJldHVybjsKICAgIH0KICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gY29uZmlndXJlRW5kcG9pbnQ7Cgp9LHsiLi9yZWdpb25fY29uZmlnX2RhdGEuanNvbiI6NTQsIi4vdXRpbCI6NzF9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAicnVsZXMiOiB7CiAgICAiKi8qIjogewogICAgICAiZW5kcG9pbnQiOiAie3NlcnZpY2V9LntyZWdpb259LmFtYXpvbmF3cy5jb20iCiAgICB9LAogICAgImNuLSovKiI6IHsKICAgICAgImVuZHBvaW50IjogIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tLmNuIgogICAgfSwKICAgICIqL2J1ZGdldHMiOiAiZ2xvYmFsU1NMIiwKICAgICIqL2Nsb3VkZnJvbnQiOiAiZ2xvYmFsU1NMIiwKICAgICIqL2lhbSI6ICJnbG9iYWxTU0wiLAogICAgIiovc3RzIjogImdsb2JhbFNTTCIsCiAgICAiKi9pbXBvcnRleHBvcnQiOiB7CiAgICAgICJlbmRwb2ludCI6ICJ7c2VydmljZX0uYW1hem9uYXdzLmNvbSIsCiAgICAgICJzaWduYXR1cmVWZXJzaW9uIjogInYyIiwKICAgICAgImdsb2JhbEVuZHBvaW50IjogdHJ1ZQogICAgfSwKICAgICIqL3JvdXRlNTMiOiB7CiAgICAgICJlbmRwb2ludCI6ICJodHRwczovL3tzZXJ2aWNlfS5hbWF6b25hd3MuY29tIiwKICAgICAgInNpZ25hdHVyZVZlcnNpb24iOiAidjNodHRwcyIsCiAgICAgICJnbG9iYWxFbmRwb2ludCI6IHRydWUKICAgIH0sCiAgICAiKi93YWYiOiAiZ2xvYmFsU1NMIiwKICAgICJ1cy1nb3YtKi9pYW0iOiAiZ2xvYmFsR292Q2xvdWQiLAogICAgInVzLWdvdi0qL3N0cyI6IHsKICAgICAgImVuZHBvaW50IjogIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tIgogICAgfSwKICAgICJ1cy1nb3Ytd2VzdC0xL3MzIjogInMzc2lnbmF0dXJlIiwKICAgICJ1cy13ZXN0LTEvczMiOiAiczNzaWduYXR1cmUiLAogICAgInVzLXdlc3QtMi9zMyI6ICJzM3NpZ25hdHVyZSIsCiAgICAiZXUtd2VzdC0xL3MzIjogInMzc2lnbmF0dXJlIiwKICAgICJhcC1zb3V0aGVhc3QtMS9zMyI6ICJzM3NpZ25hdHVyZSIsCiAgICAiYXAtc291dGhlYXN0LTIvczMiOiAiczNzaWduYXR1cmUiLAogICAgImFwLW5vcnRoZWFzdC0xL3MzIjogInMzc2lnbmF0dXJlIiwKICAgICJzYS1lYXN0LTEvczMiOiAiczNzaWduYXR1cmUiLAogICAgInVzLWVhc3QtMS9zMyI6IHsKICAgICAgImVuZHBvaW50IjogIntzZXJ2aWNlfS5hbWF6b25hd3MuY29tIiwKICAgICAgInNpZ25hdHVyZVZlcnNpb24iOiAiczMiCiAgICB9LAogICAgInVzLWVhc3QtMS9zZGIiOiB7CiAgICAgICJlbmRwb2ludCI6ICJ7c2VydmljZX0uYW1hem9uYXdzLmNvbSIsCiAgICAgICJzaWduYXR1cmVWZXJzaW9uIjogInYyIgogICAgfSwKICAgICIqL3NkYiI6IHsKICAgICAgImVuZHBvaW50IjogIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tIiwKICAgICAgInNpZ25hdHVyZVZlcnNpb24iOiAidjIiCiAgICB9CiAgfSwKCiAgInBhdHRlcm5zIjogewogICAgImdsb2JhbFNTTCI6IHsKICAgICAgImVuZHBvaW50IjogImh0dHBzOi8ve3NlcnZpY2V9LmFtYXpvbmF3cy5jb20iLAogICAgICAiZ2xvYmFsRW5kcG9pbnQiOiB0cnVlCiAgICB9LAogICAgImdsb2JhbEdvdkNsb3VkIjogewogICAgICAiZW5kcG9pbnQiOiAie3NlcnZpY2V9LnVzLWdvdi5hbWF6b25hd3MuY29tIgogICAgfSwKICAgICJzM3NpZ25hdHVyZSI6IHsKICAgICAgImVuZHBvaW50IjogIntzZXJ2aWNlfS57cmVnaW9ufS5hbWF6b25hd3MuY29tIiwKICAgICAgInNpZ25hdHVyZVZlcnNpb24iOiAiczMiCiAgICB9CiAgfQp9Cgp9LHt9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7KGZ1bmN0aW9uICgpewp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CnZhciBBY2NlcHRvclN0YXRlTWFjaGluZSA9IHJlcXVpcmUoJy4vc3RhdGVfbWFjaGluZScpOwp2YXIgaW5oZXJpdCA9IEFXUy51dGlsLmluaGVyaXQ7CnZhciBkb21haW4gPSBBV1MudXRpbC5kb21haW47CnZhciBqbWVzcGF0aCA9IHJlcXVpcmUoJ2ptZXNwYXRoJyk7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwp2YXIgaGFyZEVycm9yU3RhdGVzID0ge3N1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMX07CgpmdW5jdGlvbiBpc1Rlcm1pbmFsU3RhdGUobWFjaGluZSkgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaGFyZEVycm9yU3RhdGVzLCBtYWNoaW5lLl9hc20uY3VycmVudFN0YXRlKTsKfQoKdmFyIGZzbSA9IG5ldyBBY2NlcHRvclN0YXRlTWFjaGluZSgpOwpmc20uc2V0dXBTdGF0ZXMgPSBmdW5jdGlvbigpIHsKICB2YXIgdHJhbnNpdGlvbiA9IGZ1bmN0aW9uKF8sIGRvbmUpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYuX2hhbHRIYW5kbGVyc09uRXJyb3IgPSBmYWxzZTsKCiAgICBzZWxmLmVtaXQoc2VsZi5fYXNtLmN1cnJlbnRTdGF0ZSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICBpZiAoaXNUZXJtaW5hbFN0YXRlKHNlbGYpKSB7CiAgICAgICAgICBpZiAoZG9tYWluICYmIHNlbGYuZG9tYWluIGluc3RhbmNlb2YgZG9tYWluLkRvbWFpbikgewogICAgICAgICAgICBlcnIuZG9tYWluRW1pdHRlciA9IHNlbGY7CiAgICAgICAgICAgIGVyci5kb21haW4gPSBzZWxmLmRvbWFpbjsKICAgICAgICAgICAgZXJyLmRvbWFpblRocm93biA9IGZhbHNlOwogICAgICAgICAgICBzZWxmLmRvbWFpbi5lbWl0KCdlcnJvcicsIGVycik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGYucmVzcG9uc2UuZXJyb3IgPSBlcnI7CiAgICAgICAgICBkb25lKGVycik7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGRvbmUoc2VsZi5yZXNwb25zZS5lcnJvcik7CiAgICAgIH0KICAgIH0pOwoKICB9OwoKICB0aGlzLmFkZFN0YXRlKCd2YWxpZGF0ZScsICdidWlsZCcsICdlcnJvcicsIHRyYW5zaXRpb24pOwogIHRoaXMuYWRkU3RhdGUoJ2J1aWxkJywgJ2FmdGVyQnVpbGQnLCAncmVzdGFydCcsIHRyYW5zaXRpb24pOwogIHRoaXMuYWRkU3RhdGUoJ2FmdGVyQnVpbGQnLCAnc2lnbicsICdyZXN0YXJ0JywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgnc2lnbicsICdzZW5kJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgncmV0cnknLCAnYWZ0ZXJSZXRyeScsICdhZnRlclJldHJ5JywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgnYWZ0ZXJSZXRyeScsICdzaWduJywgJ2Vycm9yJywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgnc2VuZCcsICd2YWxpZGF0ZVJlc3BvbnNlJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgndmFsaWRhdGVSZXNwb25zZScsICdleHRyYWN0RGF0YScsICdleHRyYWN0RXJyb3InLCB0cmFuc2l0aW9uKTsKICB0aGlzLmFkZFN0YXRlKCdleHRyYWN0RXJyb3InLCAnZXh0cmFjdERhdGEnLCAncmV0cnknLCB0cmFuc2l0aW9uKTsKICB0aGlzLmFkZFN0YXRlKCdleHRyYWN0RGF0YScsICdzdWNjZXNzJywgJ3JldHJ5JywgdHJhbnNpdGlvbik7CiAgdGhpcy5hZGRTdGF0ZSgncmVzdGFydCcsICdidWlsZCcsICdlcnJvcicsIHRyYW5zaXRpb24pOwogIHRoaXMuYWRkU3RhdGUoJ3N1Y2Nlc3MnLCAnY29tcGxldGUnLCAnY29tcGxldGUnLCB0cmFuc2l0aW9uKTsKICB0aGlzLmFkZFN0YXRlKCdlcnJvcicsICdjb21wbGV0ZScsICdjb21wbGV0ZScsIHRyYW5zaXRpb24pOwogIHRoaXMuYWRkU3RhdGUoJ2NvbXBsZXRlJywgbnVsbCwgbnVsbCwgdHJhbnNpdGlvbik7Cn07CmZzbS5zZXR1cFN0YXRlcygpOwoKLyoqCiAqICMjIEFzeW5jaHJvbm91cyBSZXF1ZXN0cwogKgogKiBBbGwgcmVxdWVzdHMgbWFkZSB0aHJvdWdoIHRoZSBTREsgYXJlIGFzeW5jaHJvbm91cyBhbmQgdXNlIGEKICogY2FsbGJhY2sgaW50ZXJmYWNlLiBFYWNoIHNlcnZpY2UgbWV0aG9kIHRoYXQga2lja3Mgb2ZmIGEgcmVxdWVzdAogKiByZXR1cm5zIGFuIGBBV1MuUmVxdWVzdGAgb2JqZWN0IHRoYXQgeW91IGNhbiB1c2UgdG8gcmVnaXN0ZXIKICogY2FsbGJhY2tzLgogKgogKiBGb3IgZXhhbXBsZSwgdGhlIGZvbGxvd2luZyBzZXJ2aWNlIG1ldGhvZCByZXR1cm5zIHRoZSByZXF1ZXN0CiAqIG9iamVjdCBhcyAicmVxdWVzdCIsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHJlZ2lzdGVyIGNhbGxiYWNrczoKICoKICogYGBgamF2YXNjcmlwdAogKiAvLyByZXF1ZXN0IGlzIGFuIEFXUy5SZXF1ZXN0IG9iamVjdAogKiB2YXIgcmVxdWVzdCA9IGVjMi5kZXNjcmliZUluc3RhbmNlcygpOwogKgogKiAvLyByZWdpc3RlciBjYWxsYmFja3Mgb24gcmVxdWVzdCB0byByZXRyaWV2ZSByZXNwb25zZSBkYXRhCiAqIHJlcXVlc3Qub24oJ3N1Y2Nlc3MnLCBmdW5jdGlvbihyZXNwb25zZSkgewogKiAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogKiB9KTsKICogYGBgCiAqCiAqIFdoZW4gYSByZXF1ZXN0IGlzIHJlYWR5IHRvIGJlIHNlbnQsIHRoZSB7c2VuZH0gbWV0aG9kIHNob3VsZAogKiBiZSBjYWxsZWQ6CiAqCiAqIGBgYGphdmFzY3JpcHQKICogcmVxdWVzdC5zZW5kKCk7CiAqIGBgYAogKgogKiBTaW5jZSByZWdpc3RlcmVkIGNhbGxiYWNrcyBtYXkgb3IgbWF5IG5vdCBiZSBpZGVtcG90ZW50LCByZXF1ZXN0cyBzaG91bGQgb25seQogKiBiZSBzZW50IG9uY2UuIFRvIHBlcmZvcm0gdGhlIHNhbWUgb3BlcmF0aW9uIG11bHRpcGxlIHRpbWVzLCB5b3Ugd2lsbCBuZWVkIHRvCiAqIGNyZWF0ZSBtdWx0aXBsZSByZXF1ZXN0IG9iamVjdHMsIGVhY2ggd2l0aCBpdHMgb3duIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLgogKgogKiAjIyBSZW1vdmluZyBEZWZhdWx0IExpc3RlbmVycyBmb3IgRXZlbnRzCiAqCiAqIFJlcXVlc3Qgb2JqZWN0cyBhcmUgYnVpbHQgd2l0aCBkZWZhdWx0IGxpc3RlbmVycyBmb3IgdGhlIHZhcmlvdXMgZXZlbnRzLAogKiBkZXBlbmRpbmcgb24gdGhlIHNlcnZpY2UgdHlwZS4gSW4gc29tZSBjYXNlcywgeW91IG1heSB3YW50IHRvIHJlbW92ZQogKiBzb21lIGJ1aWx0LWluIGxpc3RlbmVycyB0byBjdXN0b21pemUgYmVoYXZpb3VyLiBEb2luZyB0aGlzIHJlcXVpcmVzCiAqIGFjY2VzcyB0byB0aGUgYnVpbHQtaW4gbGlzdGVuZXIgZnVuY3Rpb25zLCB3aGljaCBhcmUgZXhwb3NlZCB0aHJvdWdoCiAqIHRoZSB7QVdTLkV2ZW50TGlzdGVuZXJzLkNvcmV9IG5hbWVzcGFjZS4gRm9yIGluc3RhbmNlLCB5b3UgbWF5CiAqIHdhbnQgdG8gY3VzdG9taXplIHRoZSBIVFRQIGhhbmRsZXIgdXNlZCB3aGVuIHNlbmRpbmcgYSByZXF1ZXN0LiBJbiB0aGlzCiAqIGNhc2UsIHlvdSBjYW4gcmVtb3ZlIHRoZSBidWlsdC1pbiBsaXN0ZW5lciBhc3NvY2lhdGVkIHdpdGggdGhlICdzZW5kJwogKiBldmVudCwgdGhlIHtBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5TRU5EfSBsaXN0ZW5lciBhbmQgYWRkIHlvdXIgb3duLgogKgogKiAjIyBNdWx0aXBsZSBDYWxsYmFja3MgYW5kIENoYWluaW5nCiAqCiAqIFlvdSBjYW4gcmVnaXN0ZXIgbXVsdGlwbGUgY2FsbGJhY2tzIG9uIGFueSByZXF1ZXN0IG9iamVjdC4gVGhlCiAqIGNhbGxiYWNrcyBjYW4gYmUgcmVnaXN0ZXJlZCBmb3IgZGlmZmVyZW50IGV2ZW50cywgb3IgYWxsIGZvciB0aGUKICogc2FtZSBldmVudC4gSW4gYWRkaXRpb24sIHlvdSBjYW4gY2hhaW4gY2FsbGJhY2sgcmVnaXN0cmF0aW9uLCBmb3IKICogZXhhbXBsZToKICoKICogYGBgamF2YXNjcmlwdAogKiByZXF1ZXN0LgogKiAgIG9uKCdzdWNjZXNzJywgZnVuY3Rpb24ocmVzcG9uc2UpIHsKICogICAgIGNvbnNvbGUubG9nKCJTdWNjZXNzISIpOwogKiAgIH0pLgogKiAgIG9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycm9yLCByZXNwb25zZSkgewogKiAgICAgY29uc29sZS5sb2coIkVycm9yISIpOwogKiAgIH0pLgogKiAgIG9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAqICAgICBjb25zb2xlLmxvZygiQWx3YXlzISIpOwogKiAgIH0pLgogKiAgIHNlbmQoKTsKICogYGBgCiAqCiAqIFRoZSBhYm92ZSBleGFtcGxlIHdpbGwgcHJpbnQgZWl0aGVyICJTdWNjZXNzISBBbHdheXMhIiwgb3IgIkVycm9yISBBbHdheXMhIiwKICogZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc3VjY2VlZGVkIG9yIG5vdC4KICoKICogQCFhdHRyaWJ1dGUgaHR0cFJlcXVlc3QKICogICBAcmVhZG9ubHkKICogICBAIWdyb3VwIEhUVFAgUHJvcGVydGllcwogKiAgIEByZXR1cm4gW0FXUy5IdHRwUmVxdWVzdF0gdGhlIHJhdyBIVFRQIHJlcXVlc3Qgb2JqZWN0CiAqICAgICBjb250YWluaW5nIHJlcXVlc3QgaGVhZGVycyBhbmQgYm9keSBpbmZvcm1hdGlvbgogKiAgICAgc2VudCBieSB0aGUgc2VydmljZS4KICoKICogQCFhdHRyaWJ1dGUgc3RhcnRUaW1lCiAqICAgQHJlYWRvbmx5CiAqICAgQCFncm91cCBPcGVyYXRpb24gUHJvcGVydGllcwogKiAgIEByZXR1cm4gW0RhdGVdIHRoZSB0aW1lIHRoYXQgdGhlIHJlcXVlc3Qgc3RhcnRlZAogKgogKiBAIWdyb3VwIFJlcXVlc3QgQnVpbGRpbmcgRXZlbnRzCiAqCiAqIEAhZXZlbnQgdmFsaWRhdGUocmVxdWVzdCkKICogICBUcmlnZ2VyZWQgd2hlbiBhIHJlcXVlc3QgaXMgYmVpbmcgdmFsaWRhdGVkLiBMaXN0ZW5lcnMKICogICBzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIHJlcXVlc3Qgc2hvdWxkIG5vdCBiZSBzZW50LgogKiAgIEBwYXJhbSByZXF1ZXN0IFtSZXF1ZXN0XSB0aGUgcmVxdWVzdCBvYmplY3QgYmVpbmcgc2VudAogKiAgIEBzZWUgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuVkFMSURBVEVfQ1JFREVOVElBTFMKICogICBAc2VlIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlZBTElEQVRFX1JFR0lPTgogKiAgIEBleGFtcGxlIEVuc3VyaW5nIHRoYXQgYSBjZXJ0YWluIHBhcmFtZXRlciBpcyBzZXQgYmVmb3JlIHNlbmRpbmcgYSByZXF1ZXN0CiAqICAgICB2YXIgcmVxID0gczMucHV0T2JqZWN0KHBhcmFtcyk7CiAqICAgICByZXEub24oJ3ZhbGlkYXRlJywgZnVuY3Rpb24oKSB7CiAqICAgICAgIGlmICghcmVxLnBhcmFtcy5Cb2R5Lm1hdGNoKC9eSGVsbG9ccy8pKSB7CiAqICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCb2R5IG11c3Qgc3RhcnQgd2l0aCAiSGVsbG8gIicpOwogKiAgICAgICB9CiAqICAgICB9KTsKICogICAgIHJlcS5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgeyAuLi4gfSk7CiAqCiAqIEAhZXZlbnQgYnVpbGQocmVxdWVzdCkKICogICBUcmlnZ2VyZWQgd2hlbiB0aGUgcmVxdWVzdCBwYXlsb2FkIGlzIGJlaW5nIGJ1aWx0LiBMaXN0ZW5lcnMKICogICBzaG91bGQgZmlsbCB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIHRvIHNlbmQgdGhlIHJlcXVlc3QKICogICBvdmVyIEhUVFAuCiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+dmFsaWRhdGUpCiAqICAgQGV4YW1wbGUgQWRkIGEgY3VzdG9tIEhUVFAgaGVhZGVyIHRvIGEgcmVxdWVzdAogKiAgICAgdmFyIHJlcSA9IHMzLnB1dE9iamVjdChwYXJhbXMpOwogKiAgICAgcmVxLm9uKCdidWlsZCcsIGZ1bmN0aW9uKCkgewogKiAgICAgICByZXEuaHR0cFJlcXVlc3QuaGVhZGVyc1snQ3VzdG9tLUhlYWRlciddID0gJ3ZhbHVlJzsKICogICAgIH0pOwogKiAgICAgcmVxLnNlbmQoZnVuY3Rpb24oZXJyLCBkYXRhKSB7IC4uLiB9KTsKICoKICogQCFldmVudCBzaWduKHJlcXVlc3QpCiAqICAgVHJpZ2dlcmVkIHdoZW4gdGhlIHJlcXVlc3QgaXMgYmVpbmcgc2lnbmVkLiBMaXN0ZW5lcnMgc2hvdWxkCiAqICAgYWRkIHRoZSBjb3JyZWN0IGF1dGhlbnRpY2F0aW9uIGhlYWRlcnMgYW5kL29yIGFkanVzdCB0aGUgYm9keSwKICogICBkZXBlbmRpbmcgb24gdGhlIGF1dGhlbnRpY2F0aW9uIG1lY2hhbmlzbSBiZWluZyB1c2VkLgogKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnZhbGlkYXRlKQogKgogKiBAIWdyb3VwIFJlcXVlc3QgU2VuZGluZyBFdmVudHMKICoKICogQCFldmVudCBzZW5kKHJlc3BvbnNlKQogKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSByZXF1ZXN0IGlzIHJlYWR5IHRvIGJlIHNlbnQuIExpc3RlbmVycwogKiAgIHNob3VsZCBjYWxsIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciB0byBpbml0aWF0ZQogKiAgIHRoZSBzZW5kaW5nIG9mIHRoZSByZXF1ZXN0LgogKiAgIEBwYXJhbSByZXNwb25zZSBbUmVzcG9uc2VdIHRoZSByZXNwb25zZSBvYmplY3QKICogICBAY29udGV4dCBbUmVxdWVzdF0gdGhlIHJlcXVlc3Qgb2JqZWN0IHRoYXQgd2FzIHNlbnQKICogICBAc2VlIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlNFTkQKICoKICogQCFldmVudCByZXRyeShyZXNwb25zZSkKICogICBUcmlnZ2VyZWQgd2hlbiBhIHJlcXVlc3QgZmFpbGVkIGFuZCBtaWdodCBuZWVkIHRvIGJlIHJldHJpZWQgb3IgcmVkaXJlY3RlZC4KICogICBJZiB0aGUgcmVzcG9uc2UgaXMgcmV0cnlhYmxlLCB0aGUgbGlzdGVuZXIgc2hvdWxkIHNldCB0aGUKICogICBgcmVzcG9uc2UuZXJyb3IucmV0cnlhYmxlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAsIGFuZCBvcHRpb25hbGx5IHNldAogKiAgIGByZXNwb25zZS5lcnJvci5yZXRyeURlbGF5YCB0byB0aGUgbWlsbGlzZWNvbmQgZGVsYXkgZm9yIHRoZSBuZXh0IGF0dGVtcHQuCiAqICAgSW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdCwgYHJlc3BvbnNlLmVycm9yLnJlZGlyZWN0YCBzaG91bGQgYmUgc2V0IHRvCiAqICAgYHRydWVgIHdpdGggYHJldHJ5RGVsYXlgIHNldCB0byBhbiBvcHRpb25hbCBkZWxheSBvbiB0aGUgbmV4dCByZXF1ZXN0LgogKgogKiAgIElmIGEgbGlzdGVuZXIgZGVjaWRlcyB0aGF0IGEgcmVxdWVzdCBzaG91bGQgbm90IGJlIHJldHJpZWQsCiAqICAgaXQgc2hvdWxkIHNldCBib3RoIGByZXRyeWFibGVgIGFuZCBgcmVkaXJlY3RgIHRvIGZhbHNlLgogKgogKiAgIE5vdGUgdGhhdCBhIHJldHJ5YWJsZSBlcnJvciB3aWxsIGJlIHJldHJpZWQgYXQgbW9zdAogKiAgIHtBV1MuQ29uZmlnLm1heFJldHJpZXN9IHRpbWVzIChiYXNlZCBvbiB0aGUgc2VydmljZSBvYmplY3QncyBjb25maWcpLgogKiAgIFNpbWlsYXJseSwgYSByZXF1ZXN0IHRoYXQgaXMgcmVkaXJlY3RlZCB3aWxsIG9ubHkgcmVkaXJlY3QgYXQgbW9zdAogKiAgIHtBV1MuQ29uZmlnLm1heFJlZGlyZWN0c30gdGltZXMuCiAqCiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqICAgQGV4YW1wbGUgQWRkaW5nIGEgY3VzdG9tIHJldHJ5IGZvciBhIDQwNCByZXNwb25zZQogKiAgICAgcmVxdWVzdC5vbigncmV0cnknLCBmdW5jdGlvbihyZXNwb25zZSkgewogKiAgICAgICAvLyB0aGlzIHJlc291cmNlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlLCB3YWl0IDEwIHNlY29uZHMgdG8gZ2V0IGl0IGFnYWluCiAqICAgICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDA0ICYmIHJlc3BvbnNlLmVycm9yKSB7CiAqICAgICAgICAgcmVzcG9uc2UuZXJyb3IucmV0cnlhYmxlID0gdHJ1ZTsgICAvLyByZXRyeSB0aGlzIGVycm9yCiAqICAgICAgICAgcmVzcG9uc2UuZXJyb3IucmV0cnlEZWxheSA9IDEwMDAwOyAvLyB3YWl0IDEwIHNlY29uZHMKICogICAgICAgfQogKiAgICAgfSk7CiAqCiAqIEAhZ3JvdXAgRGF0YSBQYXJzaW5nIEV2ZW50cwogKgogKiBAIWV2ZW50IGV4dHJhY3RFcnJvcihyZXNwb25zZSkKICogICBUcmlnZ2VyZWQgb24gYWxsIG5vbi0yeHggcmVxdWVzdHMgc28gdGhhdCBsaXN0ZW5lcnMgY2FuIGV4dHJhY3QKICogICBlcnJvciBkZXRhaWxzIGZyb20gdGhlIHJlc3BvbnNlIGJvZHkuIExpc3RlbmVycyB0byB0aGlzIGV2ZW50CiAqICAgc2hvdWxkIHNldCB0aGUgYHJlc3BvbnNlLmVycm9yYCBwcm9wZXJ0eS4KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICoKICogQCFldmVudCBleHRyYWN0RGF0YShyZXNwb25zZSkKICogICBUcmlnZ2VyZWQgaW4gc3VjY2Vzc2Z1bCByZXF1ZXN0cyB0byBhbGxvdyBsaXN0ZW5lcnMgdG8KICogICBkZS1zZXJpYWxpemUgdGhlIHJlc3BvbnNlIGJvZHkgaW50byBgcmVzcG9uc2UuZGF0YWAuCiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqCiAqIEAhZ3JvdXAgQ29tcGxldGlvbiBFdmVudHMKICoKICogQCFldmVudCBzdWNjZXNzKHJlc3BvbnNlKQogKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkuCiAqICAgYHJlc3BvbnNlLmRhdGFgIHdpbGwgY29udGFpbiB0aGUgcmVzcG9uc2UgZGF0YSBhbmQKICogICBgcmVzcG9uc2UuZXJyb3JgIHdpbGwgYmUgbnVsbC4KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICoKICogQCFldmVudCBlcnJvcihlcnJvciwgcmVzcG9uc2UpCiAqICAgVHJpZ2dlcmVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGF0IGFueSBwb2ludCBkdXJpbmcgdGhlCiAqICAgcmVxdWVzdC4gYHJlc3BvbnNlLmVycm9yYCB3aWxsIGNvbnRhaW4gZGV0YWlscyBhYm91dCB0aGUgZXJyb3IKICogICB0aGF0IG9jY3VycmVkLiBgcmVzcG9uc2UuZGF0YWAgd2lsbCBiZSBudWxsLgogKiAgIEBwYXJhbSBlcnJvciBbRXJyb3JdIHRoZSBlcnJvciBvYmplY3QgY29udGFpbmluZyBkZXRhaWxzIGFib3V0CiAqICAgICB0aGUgZXJyb3IgdGhhdCBvY2N1cnJlZC4KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICoKICogQCFldmVudCBjb21wbGV0ZShyZXNwb25zZSkKICogICBUcmlnZ2VyZWQgd2hlbmV2ZXIgYSByZXF1ZXN0IGN5Y2xlIGNvbXBsZXRlcy4gYHJlc3BvbnNlLmVycm9yYAogKiAgIHNob3VsZCBiZSBjaGVja2VkLCBzaW5jZSB0aGUgcmVxdWVzdCBtYXkgaGF2ZSBmYWlsZWQuCiAqICAgQHBhcmFtIChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICogICBAY29udGV4dCAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqCiAqIEAhZ3JvdXAgSFRUUCBFdmVudHMKICoKICogQCFldmVudCBodHRwSGVhZGVycyhzdGF0dXNDb2RlLCBoZWFkZXJzLCByZXNwb25zZSwgc3RhdHVzTWVzc2FnZSkKICogICBUcmlnZ2VyZWQgd2hlbiBoZWFkZXJzIGFyZSBzZW50IGJ5IHRoZSByZW1vdGUgc2VydmVyCiAqICAgQHBhcmFtIHN0YXR1c0NvZGUgW0ludGVnZXJdIHRoZSBIVFRQIHJlc3BvbnNlIGNvZGUKICogICBAcGFyYW0gaGVhZGVycyBbbWFwPFN0cmluZyxTdHJpbmc+XSB0aGUgcmVzcG9uc2UgaGVhZGVycwogKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqICAgQHBhcmFtIHN0YXR1c01lc3NhZ2UgW1N0cmluZ10gQSBzdGF0dXMgbWVzc2FnZSBjb3JyZXNwb25kaW5nIHRvIHRoZSBIVFRQCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgY29kZQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICoKICogQCFldmVudCBodHRwRGF0YShjaHVuaywgcmVzcG9uc2UpCiAqICAgVHJpZ2dlcmVkIHdoZW4gZGF0YSBpcyBzZW50IGJ5IHRoZSByZW1vdGUgc2VydmVyCiAqICAgQHBhcmFtIGNodW5rIFtCdWZmZXJdIHRoZSBidWZmZXIgZGF0YSBjb250YWluaW5nIHRoZSBuZXh0IGRhdGEgY2h1bmsKICogICAgIGZyb20gdGhlIHNlcnZlcgogKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqICAgQGNvbnRleHQgKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBzZWUgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuSFRUUF9EQVRBCiAqCiAqIEAhZXZlbnQgaHR0cFVwbG9hZFByb2dyZXNzKHByb2dyZXNzLCByZXNwb25zZSkKICogICBUcmlnZ2VyZWQgd2hlbiB0aGUgSFRUUCByZXF1ZXN0IGhhcyB1cGxvYWRlZCBtb3JlIGRhdGEKICogICBAcGFyYW0gcHJvZ3Jlc3MgW21hcF0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBsb2FkZWRgIGFuZCBgdG90YWxgIGJ5dGVzCiAqICAgICBvZiB0aGUgcmVxdWVzdC4KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICogICBAbm90ZSBUaGlzIGV2ZW50IHdpbGwgbm90IGJlIGVtaXR0ZWQgaW4gTm9kZS5qcyAwLjgueC4KICoKICogQCFldmVudCBodHRwRG93bmxvYWRQcm9ncmVzcyhwcm9ncmVzcywgcmVzcG9uc2UpCiAqICAgVHJpZ2dlcmVkIHdoZW4gdGhlIEhUVFAgcmVxdWVzdCBoYXMgZG93bmxvYWRlZCBtb3JlIGRhdGEKICogICBAcGFyYW0gcHJvZ3Jlc3MgW21hcF0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBsb2FkZWRgIGFuZCBgdG90YWxgIGJ5dGVzCiAqICAgICBvZiB0aGUgcmVxdWVzdC4KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICogICBAbm90ZSBUaGlzIGV2ZW50IHdpbGwgbm90IGJlIGVtaXR0ZWQgaW4gTm9kZS5qcyAwLjgueC4KICoKICogQCFldmVudCBodHRwRXJyb3IoZXJyb3IsIHJlc3BvbnNlKQogKiAgIFRyaWdnZXJlZCB3aGVuIHRoZSBIVFRQIHJlcXVlc3QgZmFpbGVkCiAqICAgQHBhcmFtIGVycm9yIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCB0aGF0IHdhcyB0aHJvd24KICogICBAcGFyYW0gKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKiAgIEBjb250ZXh0IChzZWUgQVdTLlJlcXVlc3R+c2VuZCkKICoKICogQCFldmVudCBodHRwRG9uZShyZXNwb25zZSkKICogICBUcmlnZ2VyZWQgd2hlbiB0aGUgc2VydmVyIGlzIGZpbmlzaGVkIHNlbmRpbmcgZGF0YQogKiAgIEBwYXJhbSAoc2VlIEFXUy5SZXF1ZXN0fnNlbmQpCiAqICAgQGNvbnRleHQgKHNlZSBBV1MuUmVxdWVzdH5zZW5kKQogKgogKiBAc2VlIEFXUy5SZXNwb25zZQogKi8KQVdTLlJlcXVlc3QgPSBpbmhlcml0KHsKCiAgLyoqCiAgICogQ3JlYXRlcyBhIHJlcXVlc3QgZm9yIGFuIG9wZXJhdGlvbiBvbiBhIGdpdmVuIHNlcnZpY2Ugd2l0aAogICAqIGEgc2V0IG9mIGlucHV0IHBhcmFtZXRlcnMuCiAgICoKICAgKiBAcGFyYW0gc2VydmljZSBbQVdTLlNlcnZpY2VdIHRoZSBzZXJ2aWNlIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbiBvbgogICAqIEBwYXJhbSBvcGVyYXRpb24gW1N0cmluZ10gdGhlIG9wZXJhdGlvbiB0byBwZXJmb3JtIG9uIHRoZSBzZXJ2aWNlCiAgICogQHBhcmFtIHBhcmFtcyBbT2JqZWN0XSBwYXJhbWV0ZXJzIHRvIHNlbmQgdG8gdGhlIG9wZXJhdGlvbi4KICAgKiAgIFNlZSB0aGUgb3BlcmF0aW9uJ3MgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGZvcm1hdCBvZiB0aGUKICAgKiAgIHBhcmFtZXRlcnMuCiAgICovCiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFJlcXVlc3Qoc2VydmljZSwgb3BlcmF0aW9uLCBwYXJhbXMpIHsKICAgIHZhciBlbmRwb2ludCA9IHNlcnZpY2UuZW5kcG9pbnQ7CiAgICB2YXIgcmVnaW9uID0gc2VydmljZS5jb25maWcucmVnaW9uOwogICAgdmFyIGN1c3RvbVVzZXJBZ2VudCA9IHNlcnZpY2UuY29uZmlnLmN1c3RvbVVzZXJBZ2VudDsKCiAgICAvLyBnbG9iYWwgZW5kcG9pbnRzIHNpZ24gYXMgdXMtZWFzdC0xCiAgICBpZiAoc2VydmljZS5pc0dsb2JhbEVuZHBvaW50KSByZWdpb24gPSAndXMtZWFzdC0xJzsKCiAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbiAmJiBkb21haW4uYWN0aXZlOwogICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTsKICAgIHRoaXMub3BlcmF0aW9uID0gb3BlcmF0aW9uOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXMgfHwge307CiAgICB0aGlzLmh0dHBSZXF1ZXN0ID0gbmV3IEFXUy5IdHRwUmVxdWVzdChlbmRwb2ludCwgcmVnaW9uKTsKICAgIHRoaXMuaHR0cFJlcXVlc3QuYXBwZW5kVG9Vc2VyQWdlbnQoY3VzdG9tVXNlckFnZW50KTsKICAgIHRoaXMuc3RhcnRUaW1lID0gc2VydmljZS5nZXRTa2V3Q29ycmVjdGVkRGF0ZSgpOwoKICAgIHRoaXMucmVzcG9uc2UgPSBuZXcgQVdTLlJlc3BvbnNlKHRoaXMpOwogICAgdGhpcy5fYXNtID0gbmV3IEFjY2VwdG9yU3RhdGVNYWNoaW5lKGZzbS5zdGF0ZXMsICd2YWxpZGF0ZScpOwogICAgdGhpcy5faGFsdEhhbmRsZXJzT25FcnJvciA9IGZhbHNlOwoKICAgIEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IuY2FsbCh0aGlzKTsKICAgIHRoaXMuZW1pdCA9IHRoaXMuZW1pdEV2ZW50OwogIH0sCgogIC8qKgogICAqIEAhZ3JvdXAgU2VuZGluZyBhIFJlcXVlc3QKICAgKi8KCiAgLyoqCiAgICogQG92ZXJsb2FkIHNlbmQoY2FsbGJhY2sgPSBudWxsKQogICAqICAgU2VuZHMgdGhlIHJlcXVlc3Qgb2JqZWN0LgogICAqCiAgICogICBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhKQogICAqICAgICBJZiBhIGNhbGxiYWNrIGlzIHN1cHBsaWVkLCBpdCBpcyBjYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJldHVybmVkCiAgICogICAgIGZyb20gdGhlIHNlcnZpY2UuCiAgICogICAgIEBjb250ZXh0IFtBV1MuUmVxdWVzdF0gdGhlIHJlcXVlc3Qgb2JqZWN0IGJlaW5nIHNlbnQuCiAgICogICAgIEBwYXJhbSBlcnIgW0Vycm9yXSB0aGUgZXJyb3Igb2JqZWN0IHJldHVybmVkIGZyb20gdGhlIHJlcXVlc3QuCiAgICogICAgICAgU2V0IHRvIGBudWxsYCBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLgogICAqICAgICBAcGFyYW0gZGF0YSBbT2JqZWN0XSB0aGUgZGUtc2VyaWFsaXplZCBkYXRhIHJldHVybmVkIGZyb20KICAgKiAgICAgICB0aGUgcmVxdWVzdC4gU2V0IHRvIGBudWxsYCBpZiBhIHJlcXVlc3QgZXJyb3Igb2NjdXJzLgogICAqICAgQGV4YW1wbGUgU2VuZGluZyBhIHJlcXVlc3Qgd2l0aCBhIGNhbGxiYWNrCiAgICogICAgIHJlcXVlc3QgPSBzMy5wdXRPYmplY3Qoe0J1Y2tldDogJ2J1Y2tldCcsIEtleTogJ2tleSd9KTsKICAgKiAgICAgcmVxdWVzdC5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgeyBjb25zb2xlLmxvZyhlcnIsIGRhdGEpOyB9KTsKICAgKiAgIEBleGFtcGxlIFNlbmRpbmcgYSByZXF1ZXN0IHdpdGggbm8gY2FsbGJhY2sgKHVzaW5nIGV2ZW50IGhhbmRsZXJzKQogICAqICAgICByZXF1ZXN0ID0gczMucHV0T2JqZWN0KHtCdWNrZXQ6ICdidWNrZXQnLCBLZXk6ICdrZXknfSk7CiAgICogICAgIHJlcXVlc3Qub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24ocmVzcG9uc2UpIHsgLi4uIH0pOyAvLyByZWdpc3RlciBhIGNhbGxiYWNrCiAgICogICAgIHJlcXVlc3Quc2VuZCgpOwogICAqLwogIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoY2FsbGJhY2spIHsKICAgIGlmIChjYWxsYmFjaykgewogICAgICAvLyBhcHBlbmQgdG8gdXNlciBhZ2VudAogICAgICB0aGlzLmh0dHBSZXF1ZXN0LmFwcGVuZFRvVXNlckFnZW50KCdjYWxsYmFjaycpOwogICAgICB0aGlzLm9uKCdjb21wbGV0ZScsIGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgY2FsbGJhY2suY2FsbChyZXNwLCByZXNwLmVycm9yLCByZXNwLmRhdGEpOwogICAgICB9KTsKICAgIH0KICAgIHRoaXMucnVuVG8oKTsKCiAgICByZXR1cm4gdGhpcy5yZXNwb25zZTsKICB9LAoKICAvKioKICAgKiBAIW1ldGhvZCAgcHJvbWlzZSgpCiAgICogICBTZW5kcyB0aGUgcmVxdWVzdCBhbmQgcmV0dXJucyBhICd0aGVuYWJsZScgcHJvbWlzZS4KICAgKgogICAqICAgVHdvIGNhbGxiYWNrcyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIGB0aGVuYCBtZXRob2Qgb24gdGhlIHJldHVybmVkIHByb21pc2UuCiAgICogICBUaGUgZmlyc3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkLCBhbmQgdGhlIHNlY29uZAogICAqICAgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgaWYgdGhlIHByb21pc2UgaXMgcmVqZWN0ZWQuCiAgICogICBAY2FsbGJhY2sgZnVsZmlsbGVkQ2FsbGJhY2sgZnVuY3Rpb24oZGF0YSkKICAgKiAgICAgQ2FsbGVkIGlmIHRoZSBwcm9taXNlIGlzIGZ1bGZpbGxlZC4KICAgKiAgICAgQHBhcmFtIGRhdGEgW09iamVjdF0gdGhlIGRlLXNlcmlhbGl6ZWQgZGF0YSByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LgogICAqICAgQGNhbGxiYWNrIHJlamVjdGVkQ2FsbGJhY2sgZnVuY3Rpb24oZXJyb3IpCiAgICogICAgIENhbGxlZCBpZiB0aGUgcHJvbWlzZSBpcyByZWplY3RlZC4KICAgKiAgICAgQHBhcmFtIGVycm9yIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LgogICAqICAgQHJldHVybiBbUHJvbWlzZV0gQSBwcm9taXNlIHRoYXQgcmVwcmVzZW50cyB0aGUgc3RhdGUgb2YgdGhlIHJlcXVlc3QuCiAgICogICBAZXhhbXBsZSBTZW5kaW5nIGEgcmVxdWVzdCB1c2luZyBwcm9taXNlcy4KICAgKiAgICAgdmFyIHJlcXVlc3QgPSBzMy5wdXRPYmplY3Qoe0J1Y2tldDogJ2J1Y2tldCcsIEtleTogJ2tleSd9KTsKICAgKiAgICAgdmFyIHJlc3VsdCA9IHJlcXVlc3QucHJvbWlzZSgpOwogICAqICAgICByZXN1bHQudGhlbihmdW5jdGlvbihkYXRhKSB7IC4uLiB9LCBmdW5jdGlvbihlcnJvcikgeyAuLi4gfSk7CiAgICovCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGJ1aWxkOiBmdW5jdGlvbiBidWlsZChjYWxsYmFjaykgewogICAgcmV0dXJuIHRoaXMucnVuVG8oJ3NlbmQnLCBjYWxsYmFjayk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgcnVuVG86IGZ1bmN0aW9uIHJ1blRvKHN0YXRlLCBkb25lKSB7CiAgICB0aGlzLl9hc20ucnVuVG8oc3RhdGUsIGRvbmUsIHRoaXMpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQWJvcnRzIGEgcmVxdWVzdCwgZW1pdHRpbmcgdGhlIGVycm9yIGFuZCBjb21wbGV0ZSBldmVudHMuCiAgICoKICAgKiBAIW1hY3JvIG5vYnJvd3NlcgogICAqIEBleGFtcGxlIEFib3J0aW5nIGEgcmVxdWVzdCBhZnRlciBzZW5kaW5nCiAgICogICB2YXIgcGFyYW1zID0gewogICAqICAgICBCdWNrZXQ6ICdidWNrZXQnLCBLZXk6ICdrZXknLAogICAqICAgICBCb2R5OiBCdWZmZXIuYWxsb2MoMTAyNCAqIDEwMjQgKiA1KSAvLyA1TUIgcGF5bG9hZAogICAqICAgfTsKICAgKiAgIHZhciByZXF1ZXN0ID0gczMucHV0T2JqZWN0KHBhcmFtcyk7CiAgICogICByZXF1ZXN0LnNlbmQoZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAqICAgICBpZiAoZXJyKSBjb25zb2xlLmxvZygiRXJyb3I6IiwgZXJyLmNvZGUsIGVyci5tZXNzYWdlKTsKICAgKiAgICAgZWxzZSBjb25zb2xlLmxvZyhkYXRhKTsKICAgKiAgIH0pOwogICAqCiAgICogICAvLyBhYm9ydCByZXF1ZXN0IGluIDEgc2Vjb25kCiAgICogICBzZXRUaW1lb3V0KHJlcXVlc3QuYWJvcnQuYmluZChyZXF1ZXN0KSwgMTAwMCk7CiAgICoKICAgKiAgIC8vIHByaW50cyAiRXJyb3I6IFJlcXVlc3RBYm9ydGVkRXJyb3IgUmVxdWVzdCBhYm9ydGVkIGJ5IHVzZXIiCiAgICogQHJldHVybiBbQVdTLlJlcXVlc3RdIHRoZSBzYW1lIHJlcXVlc3Qgb2JqZWN0LCBmb3IgY2hhaW5pbmcuCiAgICogQHNpbmNlIHYxLjQuMAogICAqLwogIGFib3J0OiBmdW5jdGlvbiBhYm9ydCgpIHsKICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCd2YWxpZGF0ZVJlc3BvbnNlJyk7CiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygnZXh0cmFjdEVycm9yJyk7CiAgICB0aGlzLm9uKCd2YWxpZGF0ZVJlc3BvbnNlJywgZnVuY3Rpb24gYWRkQWJvcnRlZEVycm9yKHJlc3ApIHsKICAgICAgcmVzcC5lcnJvciA9IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcignUmVxdWVzdCBhYm9ydGVkIGJ5IHVzZXInKSwgewogICAgICAgICBjb2RlOiAnUmVxdWVzdEFib3J0ZWRFcnJvcicsIHJldHJ5YWJsZTogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBpZiAodGhpcy5odHRwUmVxdWVzdC5zdHJlYW0gJiYgIXRoaXMuaHR0cFJlcXVlc3Quc3RyZWFtLmRpZENhbGxiYWNrKSB7IC8vIGFib3J0IEhUVFAgc3RyZWFtCiAgICAgIHRoaXMuaHR0cFJlcXVlc3Quc3RyZWFtLmFib3J0KCk7CiAgICAgIGlmICh0aGlzLmh0dHBSZXF1ZXN0Ll9hYm9ydENhbGxiYWNrKSB7CiAgICAgICAgIHRoaXMuaHR0cFJlcXVlc3QuX2Fib3J0Q2FsbGJhY2soKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygnc2VuZCcpOyAvLyBoYXZlbid0IHNlbnQgeWV0LCBzbyBsZXQncyBub3QKICAgICAgfQogICAgfQoKICAgIHJldHVybiB0aGlzOwogIH0sCgogIC8qKgogICAqIEl0ZXJhdGVzIG92ZXIgZWFjaCBwYWdlIG9mIHJlc3VsdHMgZ2l2ZW4gYSBwYWdlYWJsZSByZXF1ZXN0LCBjYWxsaW5nCiAgICogdGhlIHByb3ZpZGVkIGNhbGxiYWNrIHdpdGggZWFjaCBwYWdlIG9mIGRhdGEuIEFmdGVyIGFsbCBwYWdlcyBoYXZlIGJlZW4KICAgKiByZXRyaWV2ZWQsIHRoZSBjYWxsYmFjayBpcyBjYWxsZWQgd2l0aCBgbnVsbGAgZGF0YS4KICAgKgogICAqIEBub3RlIFRoaXMgb3BlcmF0aW9uIGNhbiBnZW5lcmF0ZSBtdWx0aXBsZSByZXF1ZXN0cyB0byBhIHNlcnZpY2UuCiAgICogQGV4YW1wbGUgSXRlcmF0aW5nIG92ZXIgbXVsdGlwbGUgcGFnZXMgb2Ygb2JqZWN0cyBpbiBhbiBTMyBidWNrZXQKICAgKiAgIHZhciBwYWdlcyA9IDE7CiAgICogICBzMy5saXN0T2JqZWN0cygpLmVhY2hQYWdlKGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAqICAgICBpZiAoZXJyKSByZXR1cm47CiAgICogICAgIGNvbnNvbGUubG9nKCJQYWdlIiwgcGFnZXMrKyk7CiAgICogICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAqICAgfSk7CiAgICogQGV4YW1wbGUgSXRlcmF0aW5nIG92ZXIgbXVsdGlwbGUgcGFnZXMgd2l0aCBhbiBhc3luY2hyb25vdXMgY2FsbGJhY2sKICAgKiAgIHMzLmxpc3RPYmplY3RzKHBhcmFtcykuZWFjaFBhZ2UoZnVuY3Rpb24oZXJyLCBkYXRhLCBkb25lKSB7CiAgICogICAgIGRvU29tZXRoaW5nQXN5bmNBbmRPckV4cGVuc2l2ZShmdW5jdGlvbigpIHsKICAgKiAgICAgICAvLyBUaGUgbmV4dCBwYWdlIG9mIHJlc3VsdHMgaXNuJ3QgZmV0Y2hlZCB1bnRpbCBkb25lIGlzIGNhbGxlZAogICAqICAgICAgIGRvbmUoKTsKICAgKiAgICAgfSk7CiAgICogICB9KTsKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhLCBbZG9uZUNhbGxiYWNrXSkKICAgKiAgIENhbGxlZCB3aXRoIGVhY2ggcGFnZSBvZiByZXN1bHRpbmcgZGF0YSBmcm9tIHRoZSByZXF1ZXN0LiBJZiB0aGUKICAgKiAgIG9wdGlvbmFsIGBkb25lQ2FsbGJhY2tgIGlzIHByb3ZpZGVkIGluIHRoZSBmdW5jdGlvbiwgaXQgbXVzdCBiZSBjYWxsZWQKICAgKiAgIHdoZW4gdGhlIGNhbGxiYWNrIGlzIGNvbXBsZXRlLgogICAqCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gYW4gZXJyb3Igb2JqZWN0LCBpZiBhbiBlcnJvciBvY2N1cnJlZC4KICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIGEgc2luZ2xlIHBhZ2Ugb2YgcmVzcG9uc2UgZGF0YS4gSWYgdGhlcmUgaXMgbm8KICAgKiAgICAgbW9yZSBkYXRhLCB0aGlzIG9iamVjdCB3aWxsIGJlIGBudWxsYC4KICAgKiAgIEBwYXJhbSBkb25lQ2FsbGJhY2sgW0Z1bmN0aW9uXSBhbiBvcHRpb25hbCBkb25lIGNhbGxiYWNrLiBJZiB0aGlzCiAgICogICAgIGFyZ3VtZW50IGlzIGRlZmluZWQgaW4gdGhlIGZ1bmN0aW9uIGRlY2xhcmF0aW9uLCBpdCBzaG91bGQgYmUgY2FsbGVkCiAgICogICAgIHdoZW4gdGhlIG5leHQgcGFnZSBpcyByZWFkeSB0byBiZSByZXRyaWV2ZWQuIFRoaXMgaXMgdXNlZnVsIGZvcgogICAqICAgICBjb250cm9sbGluZyBzZXJpYWwgcGFnaW5hdGlvbiBhY3Jvc3MgYXN5bmNocm9ub3VzIG9wZXJhdGlvbnMuCiAgICogICBAcmV0dXJuIFtCb29sZWFuXSBpZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLCBwYWdpbmF0aW9uIHdpbGwKICAgKiAgICAgc3RvcC4KICAgKgogICAqIEBzZWUgQVdTLlJlcXVlc3QuZWFjaEl0ZW0KICAgKiBAc2VlIEFXUy5SZXNwb25zZS5uZXh0UGFnZQogICAqIEBzaW5jZSB2MS40LjAKICAgKi8KICBlYWNoUGFnZTogZnVuY3Rpb24gZWFjaFBhZ2UoY2FsbGJhY2spIHsKICAgIC8vIE1ha2UgYWxsIGNhbGxiYWNrcyBhc3luYy1pc2gKICAgIGNhbGxiYWNrID0gQVdTLnV0aWwuZm4ubWFrZUFzeW5jKGNhbGxiYWNrLCAzKTsKCiAgICBmdW5jdGlvbiB3cmFwcGVkQ2FsbGJhY2socmVzcG9uc2UpIHsKICAgICAgY2FsbGJhY2suY2FsbChyZXNwb25zZSwgcmVzcG9uc2UuZXJyb3IsIHJlc3BvbnNlLmRhdGEsIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkgcmV0dXJuOwoKICAgICAgICBpZiAocmVzcG9uc2UuaGFzTmV4dFBhZ2UoKSkgewogICAgICAgICAgcmVzcG9uc2UubmV4dFBhZ2UoKS5vbignY29tcGxldGUnLCB3cmFwcGVkQ2FsbGJhY2spLnNlbmQoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2FsbGJhY2suY2FsbChyZXNwb25zZSwgbnVsbCwgbnVsbCwgQVdTLnV0aWwuZm4ubm9vcCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICB0aGlzLm9uKCdjb21wbGV0ZScsIHdyYXBwZWRDYWxsYmFjaykuc2VuZCgpOwogIH0sCgogIC8qKgogICAqIEVudW1lcmF0ZXMgb3ZlciBpbmRpdmlkdWFsIGl0ZW1zIG9mIGEgcmVxdWVzdCwgcGFnaW5nIHRoZSByZXNwb25zZXMgaWYKICAgKiBuZWNlc3NhcnkuCiAgICoKICAgKiBAYXBpIGV4cGVyaW1lbnRhbAogICAqIEBzaW5jZSB2MS40LjAKICAgKi8KICBlYWNoSXRlbTogZnVuY3Rpb24gZWFjaEl0ZW0oY2FsbGJhY2spIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGZ1bmN0aW9uIHdyYXBwZWRDYWxsYmFjayhlcnIsIGRhdGEpIHsKICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7CiAgICAgIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7CgogICAgICB2YXIgY29uZmlnID0gc2VsZi5zZXJ2aWNlLnBhZ2luYXRpb25Db25maWcoc2VsZi5vcGVyYXRpb24pOwogICAgICB2YXIgcmVzdWx0S2V5ID0gY29uZmlnLnJlc3VsdEtleTsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0S2V5KSkgcmVzdWx0S2V5ID0gcmVzdWx0S2V5WzBdOwogICAgICB2YXIgaXRlbXMgPSBqbWVzcGF0aC5zZWFyY2goZGF0YSwgcmVzdWx0S2V5KTsKICAgICAgdmFyIGNvbnRpbnVlSXRlcmF0aW9uID0gdHJ1ZTsKICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgY29udGludWVJdGVyYXRpb24gPSBjYWxsYmFjayhudWxsLCBpdGVtKTsKICAgICAgICBpZiAoY29udGludWVJdGVyYXRpb24gPT09IGZhbHNlKSB7CiAgICAgICAgICByZXR1cm4gQVdTLnV0aWwuYWJvcnQ7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGNvbnRpbnVlSXRlcmF0aW9uOwogICAgfQoKICAgIHRoaXMuZWFjaFBhZ2Uod3JhcHBlZENhbGxiYWNrKTsKICB9LAoKICAvKioKICAgKiBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIHRoZSBvcGVyYXRpb24gY2FuIHJldHVybiBtdWx0aXBsZSBwYWdlcyBvZgogICAqICAgcmVzcG9uc2UgZGF0YS4KICAgKiBAc2VlIEFXUy5SZXNwb25zZS5lYWNoUGFnZQogICAqIEBzaW5jZSB2MS40LjAKICAgKi8KICBpc1BhZ2VhYmxlOiBmdW5jdGlvbiBpc1BhZ2VhYmxlKCkgewogICAgcmV0dXJuIHRoaXMuc2VydmljZS5wYWdpbmF0aW9uQ29uZmlnKHRoaXMub3BlcmF0aW9uKSA/IHRydWUgOiBmYWxzZTsKICB9LAoKICAvKioKICAgKiBTZW5kcyB0aGUgcmVxdWVzdCBhbmQgY29udmVydHMgdGhlIHJlcXVlc3Qgb2JqZWN0IGludG8gYSByZWFkYWJsZSBzdHJlYW0KICAgKiB0aGF0IGNhbiBiZSByZWFkIGZyb20gb3IgcGlwZWQgaW50byBhIHdyaXRhYmxlIHN0cmVhbS4KICAgKgogICAqIEBub3RlIFRoZSBkYXRhIHJlYWQgZnJvbSBhIHJlYWRhYmxlIHN0cmVhbSBjb250YWlucyBvbmx5CiAgICogICB0aGUgcmF3IEhUVFAgYm9keSBjb250ZW50cy4KICAgKiBAZXhhbXBsZSBNYW51YWxseSByZWFkaW5nIGZyb20gYSBzdHJlYW0KICAgKiAgIHJlcXVlc3QuY3JlYXRlUmVhZFN0cmVhbSgpLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkgewogICAqICAgICBjb25zb2xlLmxvZygiR290IGRhdGE6IiwgZGF0YS50b1N0cmluZygpKTsKICAgKiAgIH0pOwogICAqIEBleGFtcGxlIFBpcGluZyBhIHJlcXVlc3QgYm9keSBpbnRvIGEgZmlsZQogICAqICAgdmFyIG91dCA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKCcvcGF0aC90by9vdXRmaWxlLmpwZycpOwogICAqICAgczMuc2VydmljZS5nZXRPYmplY3QocGFyYW1zKS5jcmVhdGVSZWFkU3RyZWFtKCkucGlwZShvdXQpOwogICAqIEByZXR1cm4gW1N0cmVhbV0gdGhlIHJlYWRhYmxlIHN0cmVhbSBvYmplY3QgdGhhdCBjYW4gYmUgcGlwZWQKICAgKiAgIG9yIHJlYWQgZnJvbSAoYnkgcmVnaXN0ZXJpbmcgJ2RhdGEnIGV2ZW50IGxpc3RlbmVycykuCiAgICogQCFtYWNybyBub2Jyb3dzZXIKICAgKi8KICBjcmVhdGVSZWFkU3RyZWFtOiBmdW5jdGlvbiBjcmVhdGVSZWFkU3RyZWFtKCkgewogICAgdmFyIHN0cmVhbXMgPSBBV1MudXRpbC5zdHJlYW07CiAgICB2YXIgcmVxID0gdGhpczsKICAgIHZhciBzdHJlYW0gPSBudWxsOwoKICAgIGlmIChBV1MuSHR0cENsaWVudC5zdHJlYW1zQXBpVmVyc2lvbiA9PT0gMikgewogICAgICBzdHJlYW0gPSBuZXcgc3RyZWFtcy5QYXNzVGhyb3VnaCgpOwogICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkgeyByZXEuc2VuZCgpOyB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHN0cmVhbSA9IG5ldyBzdHJlYW1zLlN0cmVhbSgpOwogICAgICBzdHJlYW0ucmVhZGFibGUgPSB0cnVlOwoKICAgICAgc3RyZWFtLnNlbnQgPSBmYWxzZTsKICAgICAgc3RyZWFtLm9uKCduZXdMaXN0ZW5lcicsIGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgaWYgKCFzdHJlYW0uc2VudCAmJiBldmVudCA9PT0gJ2RhdGEnKSB7CiAgICAgICAgICBzdHJlYW0uc2VudCA9IHRydWU7CiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkgeyByZXEuc2VuZCgpOyB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIHRoaXMub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7CiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7CiAgICB9KTsKCiAgICB0aGlzLm9uKCdodHRwSGVhZGVycycsIGZ1bmN0aW9uIHN0cmVhbUhlYWRlcnMoc3RhdHVzQ29kZSwgaGVhZGVycywgcmVzcCkgewogICAgICBpZiAoc3RhdHVzQ29kZSA8IDMwMCkgewogICAgICAgIHJlcS5yZW1vdmVMaXN0ZW5lcignaHR0cERhdGEnLCBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5IVFRQX0RBVEEpOwogICAgICAgIHJlcS5yZW1vdmVMaXN0ZW5lcignaHR0cEVycm9yJywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuSFRUUF9FUlJPUik7CiAgICAgICAgcmVxLm9uKCdodHRwRXJyb3InLCBmdW5jdGlvbiBzdHJlYW1IdHRwRXJyb3IoZXJyb3IpIHsKICAgICAgICAgIHJlc3AuZXJyb3IgPSBlcnJvcjsKICAgICAgICAgIHJlc3AuZXJyb3IucmV0cnlhYmxlID0gZmFsc2U7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBzaG91bGRDaGVja0NvbnRlbnRMZW5ndGggPSBmYWxzZTsKICAgICAgICB2YXIgZXhwZWN0ZWRMZW47CiAgICAgICAgaWYgKHJlcS5odHRwUmVxdWVzdC5tZXRob2QgIT09ICdIRUFEJykgewogICAgICAgICAgZXhwZWN0ZWRMZW4gPSBwYXJzZUludChoZWFkZXJzWydjb250ZW50LWxlbmd0aCddLCAxMCk7CiAgICAgICAgfQogICAgICAgIGlmIChleHBlY3RlZExlbiAhPT0gdW5kZWZpbmVkICYmICFpc05hTihleHBlY3RlZExlbikgJiYgZXhwZWN0ZWRMZW4gPj0gMCkgewogICAgICAgICAgc2hvdWxkQ2hlY2tDb250ZW50TGVuZ3RoID0gdHJ1ZTsKICAgICAgICAgIHZhciByZWNlaXZlZExlbiA9IDA7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hlY2tDb250ZW50TGVuZ3RoQW5kRW1pdCA9IGZ1bmN0aW9uIGNoZWNrQ29udGVudExlbmd0aEFuZEVtaXQoKSB7CiAgICAgICAgICBpZiAoc2hvdWxkQ2hlY2tDb250ZW50TGVuZ3RoICYmIHJlY2VpdmVkTGVuICE9PSBleHBlY3RlZExlbikgewogICAgICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBBV1MudXRpbC5lcnJvcigKICAgICAgICAgICAgICBuZXcgRXJyb3IoJ1N0cmVhbSBjb250ZW50IGxlbmd0aCBtaXNtYXRjaC4gUmVjZWl2ZWQgJyArCiAgICAgICAgICAgICAgICByZWNlaXZlZExlbiArICcgb2YgJyArIGV4cGVjdGVkTGVuICsgJyBieXRlcy4nKSwKICAgICAgICAgICAgICB7IGNvZGU6ICdTdHJlYW1Db250ZW50TGVuZ3RoTWlzbWF0Y2gnIH0KICAgICAgICAgICAgKSk7CiAgICAgICAgICB9IGVsc2UgaWYgKEFXUy5IdHRwQ2xpZW50LnN0cmVhbXNBcGlWZXJzaW9uID09PSAyKSB7CiAgICAgICAgICAgIHN0cmVhbS5lbmQoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTsKICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICB2YXIgaHR0cFN0cmVhbSA9IHJlc3AuaHR0cFJlc3BvbnNlLmNyZWF0ZVVuYnVmZmVyZWRTdHJlYW0oKTsKCiAgICAgICAgaWYgKEFXUy5IdHRwQ2xpZW50LnN0cmVhbXNBcGlWZXJzaW9uID09PSAyKSB7CiAgICAgICAgICBpZiAoc2hvdWxkQ2hlY2tDb250ZW50TGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBsZW5ndGhBY2N1bXVsYXRvciA9IG5ldyBzdHJlYW1zLlBhc3NUaHJvdWdoKCk7CiAgICAgICAgICAgIGxlbmd0aEFjY3VtdWxhdG9yLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rKSB7CiAgICAgICAgICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcmVjZWl2ZWRMZW4gKz0gY2h1bmsubGVuZ3RoOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gc3RyZWFtcy5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3dyaXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBsZW5ndGhBY2N1bXVsYXRvci5vbignZW5kJywgY2hlY2tDb250ZW50TGVuZ3RoQW5kRW1pdCk7CiAgICAgICAgICAgIHN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICBzaG91bGRDaGVja0NvbnRlbnRMZW5ndGggPSBmYWxzZTsKICAgICAgICAgICAgICBodHRwU3RyZWFtLnVucGlwZShsZW5ndGhBY2N1bXVsYXRvcik7CiAgICAgICAgICAgICAgbGVuZ3RoQWNjdW11bGF0b3IuZW1pdCgnZW5kJyk7CiAgICAgICAgICAgICAgbGVuZ3RoQWNjdW11bGF0b3IuZW5kKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBodHRwU3RyZWFtLnBpcGUobGVuZ3RoQWNjdW11bGF0b3IpLnBpcGUoc3RyZWFtLCB7IGVuZDogZmFsc2UgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBodHRwU3RyZWFtLnBpcGUoc3RyZWFtKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewoKICAgICAgICAgIGlmIChzaG91bGRDaGVja0NvbnRlbnRMZW5ndGgpIHsKICAgICAgICAgICAgaHR0cFN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uKGFyZykgewogICAgICAgICAgICAgIGlmIChhcmcgJiYgYXJnLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcmVjZWl2ZWRMZW4gKz0gYXJnLmxlbmd0aDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIGh0dHBTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihhcmcpIHsKICAgICAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBhcmcpOwogICAgICAgICAgfSk7CiAgICAgICAgICBodHRwU3RyZWFtLm9uKCdlbmQnLCBjaGVja0NvbnRlbnRMZW5ndGhBbmRFbWl0KTsKICAgICAgICB9CgogICAgICAgIGh0dHBTdHJlYW0ub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICBzaG91bGRDaGVja0NvbnRlbnRMZW5ndGggPSBmYWxzZTsKICAgICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBzdHJlYW07CiAgfSwKCiAgLyoqCiAgICogQHBhcmFtIFtBcnJheSxSZXNwb25zZV0gYXJncyBUaGlzIHNob3VsZCBiZSB0aGUgcmVzcG9uc2Ugb2JqZWN0LAogICAqICAgb3IgYW4gYXJyYXkgb2YgYXJncyB0byBzZW5kIHRvIHRoZSBldmVudC4KICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBlbWl0RXZlbnQ6IGZ1bmN0aW9uIGVtaXQoZXZlbnROYW1lLCBhcmdzLCBkb25lKSB7CiAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdmdW5jdGlvbicpIHsgZG9uZSA9IGFyZ3M7IGFyZ3MgPSBudWxsOyB9CiAgICBpZiAoIWRvbmUpIGRvbmUgPSBmdW5jdGlvbigpIHsgfTsKICAgIGlmICghYXJncykgYXJncyA9IHRoaXMuZXZlbnRQYXJhbWV0ZXJzKGV2ZW50TmFtZSwgdGhpcy5yZXNwb25zZSk7CgogICAgdmFyIG9yaWdFbWl0ID0gQVdTLlNlcXVlbnRpYWxFeGVjdXRvci5wcm90b3R5cGUuZW1pdDsKICAgIG9yaWdFbWl0LmNhbGwodGhpcywgZXZlbnROYW1lLCBhcmdzLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgIGlmIChlcnIpIHRoaXMucmVzcG9uc2UuZXJyb3IgPSBlcnI7CiAgICAgIGRvbmUuY2FsbCh0aGlzLCBlcnIpOwogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZXZlbnRQYXJhbWV0ZXJzOiBmdW5jdGlvbiBldmVudFBhcmFtZXRlcnMoZXZlbnROYW1lKSB7CiAgICBzd2l0Y2ggKGV2ZW50TmFtZSkgewogICAgICBjYXNlICdyZXN0YXJ0JzoKICAgICAgY2FzZSAndmFsaWRhdGUnOgogICAgICBjYXNlICdzaWduJzoKICAgICAgY2FzZSAnYnVpbGQnOgogICAgICBjYXNlICdhZnRlclZhbGlkYXRlJzoKICAgICAgY2FzZSAnYWZ0ZXJCdWlsZCc6CiAgICAgICAgcmV0dXJuIFt0aGlzXTsKICAgICAgY2FzZSAnZXJyb3InOgogICAgICAgIHJldHVybiBbdGhpcy5yZXNwb25zZS5lcnJvciwgdGhpcy5yZXNwb25zZV07CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIFt0aGlzLnJlc3BvbnNlXTsKICAgIH0KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBwcmVzaWduOiBmdW5jdGlvbiBwcmVzaWduKGV4cGlyZXMsIGNhbGxiYWNrKSB7CiAgICBpZiAoIWNhbGxiYWNrICYmIHR5cGVvZiBleHBpcmVzID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGNhbGxiYWNrID0gZXhwaXJlczsKICAgICAgZXhwaXJlcyA9IG51bGw7CiAgICB9CiAgICByZXR1cm4gbmV3IEFXUy5TaWduZXJzLlByZXNpZ24oKS5zaWduKHRoaXMudG9HZXQoKSwgZXhwaXJlcywgY2FsbGJhY2spOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGlzUHJlc2lnbmVkOiBmdW5jdGlvbiBpc1ByZXNpZ25lZCgpIHsKICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5odHRwUmVxdWVzdC5oZWFkZXJzLCAncHJlc2lnbmVkLWV4cGlyZXMnKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB0b1VuYXV0aGVudGljYXRlZDogZnVuY3Rpb24gdG9VbmF1dGhlbnRpY2F0ZWQoKSB7CiAgICB0aGlzLl91bkF1dGhlbnRpY2F0ZWQgPSB0cnVlOwogICAgdGhpcy5yZW1vdmVMaXN0ZW5lcigndmFsaWRhdGUnLCBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9DUkVERU5USUFMUyk7CiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdzaWduJywgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuU0lHTik7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB0b0dldDogZnVuY3Rpb24gdG9HZXQoKSB7CiAgICBpZiAodGhpcy5zZXJ2aWNlLmFwaS5wcm90b2NvbCA9PT0gJ3F1ZXJ5JyB8fAogICAgICAgIHRoaXMuc2VydmljZS5hcGkucHJvdG9jb2wgPT09ICdlYzInKSB7CiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2J1aWxkJywgdGhpcy5idWlsZEFzR2V0KTsKICAgICAgdGhpcy5hZGRMaXN0ZW5lcignYnVpbGQnLCB0aGlzLmJ1aWxkQXNHZXQpOwogICAgfQogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYnVpbGRBc0dldDogZnVuY3Rpb24gYnVpbGRBc0dldChyZXF1ZXN0KSB7CiAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0Lm1ldGhvZCA9ICdHRVQnOwogICAgcmVxdWVzdC5odHRwUmVxdWVzdC5wYXRoID0gcmVxdWVzdC5zZXJ2aWNlLmVuZHBvaW50LnBhdGggKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz8nICsgcmVxdWVzdC5odHRwUmVxdWVzdC5ib2R5OwogICAgcmVxdWVzdC5odHRwUmVxdWVzdC5ib2R5ID0gJyc7CgogICAgLy8gZG9uJ3QgbmVlZCB0aGVzZSBoZWFkZXJzIG9uIGEgR0VUIHJlcXVlc3QKICAgIGRlbGV0ZSByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ0NvbnRlbnQtTGVuZ3RoJ107CiAgICBkZWxldGUgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBoYWx0SGFuZGxlcnNPbkVycm9yOiBmdW5jdGlvbiBoYWx0SGFuZGxlcnNPbkVycm9yKCkgewogICAgdGhpcy5faGFsdEhhbmRsZXJzT25FcnJvciA9IHRydWU7CiAgfQp9KTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5SZXF1ZXN0LmFkZFByb21pc2VzVG9DbGFzcyA9IGZ1bmN0aW9uIGFkZFByb21pc2VzVG9DbGFzcyhQcm9taXNlRGVwZW5kZW5jeSkgewogIHRoaXMucHJvdG90eXBlLnByb21pc2UgPSBmdW5jdGlvbiBwcm9taXNlKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgLy8gYXBwZW5kIHRvIHVzZXIgYWdlbnQKICAgIHRoaXMuaHR0cFJlcXVlc3QuYXBwZW5kVG9Vc2VyQWdlbnQoJ3Byb21pc2UnKTsKICAgIHJldHVybiBuZXcgUHJvbWlzZURlcGVuZGVuY3koZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHNlbGYub24oJ2NvbXBsZXRlJywgZnVuY3Rpb24ocmVzcCkgewogICAgICAgIGlmIChyZXNwLmVycm9yKSB7CiAgICAgICAgICByZWplY3QocmVzcC5lcnJvcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGRlZmluZSAkcmVzcG9uc2UgcHJvcGVydHkgc28gdGhhdCBpdCBpcyBub3QgZW51bWJlcmFibGUKICAgICAgICAgIC8vIHRoaXMgcHJldmVudHMgY2lyY3VsYXIgcmVmZXJlbmNlIGVycm9ycyB3aGVuIHN0cmluZ2lmeWluZyB0aGUgSlNPTiBvYmplY3QKICAgICAgICAgIHJlc29sdmUoT2JqZWN0LmRlZmluZVByb3BlcnR5KAogICAgICAgICAgICByZXNwLmRhdGEgfHwge30sCiAgICAgICAgICAgICckcmVzcG9uc2UnLAogICAgICAgICAgICB7dmFsdWU6IHJlc3B9CiAgICAgICAgICApKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBzZWxmLnJ1blRvKCk7CiAgICB9KTsKICB9Owp9OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KQVdTLlJlcXVlc3QuZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MgPSBmdW5jdGlvbiBkZWxldGVQcm9taXNlc0Zyb21DbGFzcygpIHsKICBkZWxldGUgdGhpcy5wcm90b3R5cGUucHJvbWlzZTsKfTsKCkFXUy51dGlsLmFkZFByb21pc2VzKEFXUy5SZXF1ZXN0KTsKCkFXUy51dGlsLm1peGluKEFXUy5SZXF1ZXN0LCBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yKTsKCn0pLmNhbGwodGhpcyl9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKfSx7Ii4vY29yZSI6MTgsIi4vc3RhdGVfbWFjaGluZSI6NzAsIl9wcm9jZXNzIjo4Niwiam1lc3BhdGgiOjg1fV0sNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogQ29weXJpZ2h0IDIwMTItMjAxMyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKS4gWW91CiAqIG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YKICogdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdAogKgogKiAgICAgaHR0cDovL2F3cy5hbWF6b24uY29tL2FwYWNoZTIuMC8KICoKICogb3IgaW4gdGhlICJsaWNlbnNlIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcwogKiBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgogKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMKICogbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDsKdmFyIGptZXNwYXRoID0gcmVxdWlyZSgnam1lc3BhdGgnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIENIRUNLX0FDQ0VQVE9SUyhyZXNwKSB7CiAgdmFyIHdhaXRlciA9IHJlc3AucmVxdWVzdC5fd2FpdGVyOwogIHZhciBhY2NlcHRvcnMgPSB3YWl0ZXIuY29uZmlnLmFjY2VwdG9yczsKICB2YXIgYWNjZXB0b3JNYXRjaGVkID0gZmFsc2U7CiAgdmFyIHN0YXRlID0gJ3JldHJ5JzsKCiAgYWNjZXB0b3JzLmZvckVhY2goZnVuY3Rpb24oYWNjZXB0b3IpIHsKICAgIGlmICghYWNjZXB0b3JNYXRjaGVkKSB7CiAgICAgIHZhciBtYXRjaGVyID0gd2FpdGVyLm1hdGNoZXJzW2FjY2VwdG9yLm1hdGNoZXJdOwogICAgICBpZiAobWF0Y2hlciAmJiBtYXRjaGVyKHJlc3AsIGFjY2VwdG9yLmV4cGVjdGVkLCBhY2NlcHRvci5hcmd1bWVudCkpIHsKICAgICAgICBhY2NlcHRvck1hdGNoZWQgPSB0cnVlOwogICAgICAgIHN0YXRlID0gYWNjZXB0b3Iuc3RhdGU7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgaWYgKCFhY2NlcHRvck1hdGNoZWQgJiYgcmVzcC5lcnJvcikgc3RhdGUgPSAnZmFpbHVyZSc7CgogIGlmIChzdGF0ZSA9PT0gJ3N1Y2Nlc3MnKSB7CiAgICB3YWl0ZXIuc2V0U3VjY2VzcyhyZXNwKTsKICB9IGVsc2UgewogICAgd2FpdGVyLnNldEVycm9yKHJlc3AsIHN0YXRlID09PSAncmV0cnknKTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5SZXNvdXJjZVdhaXRlciA9IGluaGVyaXQoewogIC8qKgogICAqIFdhaXRzIGZvciBhIGdpdmVuIHN0YXRlIG9uIGEgc2VydmljZSBvYmplY3QKICAgKiBAcGFyYW0gc2VydmljZSBbU2VydmljZV0gdGhlIHNlcnZpY2Ugb2JqZWN0IHRvIHdhaXQgb24KICAgKiBAcGFyYW0gc3RhdGUgW1N0cmluZ10gdGhlIHN0YXRlIChkZWZpbmVkIGluIHdhaXRlciBjb25maWd1cmF0aW9uKSB0byB3YWl0CiAgICogICBmb3IuCiAgICogQGV4YW1wbGUgQ3JlYXRlIGEgd2FpdGVyIGZvciBydW5uaW5nIEVDMiBpbnN0YW5jZXMKICAgKiAgIHZhciBlYzIgPSBuZXcgQVdTLkVDMjsKICAgKiAgIHZhciB3YWl0ZXIgPSBuZXcgQVdTLlJlc291cmNlV2FpdGVyKGVjMiwgJ2luc3RhbmNlUnVubmluZycpOwogICAqLwogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBjb25zdHJ1Y3RvcihzZXJ2aWNlLCBzdGF0ZSkgewogICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTsKICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTsKICAgIHRoaXMubG9hZFdhaXRlckNvbmZpZyh0aGlzLnN0YXRlKTsKICB9LAoKICBzZXJ2aWNlOiBudWxsLAoKICBzdGF0ZTogbnVsbCwKCiAgY29uZmlnOiBudWxsLAoKICBtYXRjaGVyczogewogICAgcGF0aDogZnVuY3Rpb24ocmVzcCwgZXhwZWN0ZWQsIGFyZ3VtZW50KSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IGptZXNwYXRoLnNlYXJjaChyZXNwLmRhdGEsIGFyZ3VtZW50KTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICByZXR1cm4gam1lc3BhdGguc3RyaWN0RGVlcEVxdWFsKHJlc3VsdCxleHBlY3RlZCk7CiAgICB9LAoKICAgIHBhdGhBbGw6IGZ1bmN0aW9uKHJlc3AsIGV4cGVjdGVkLCBhcmd1bWVudCkgewogICAgICB0cnkgewogICAgICAgIHZhciByZXN1bHRzID0gam1lc3BhdGguc2VhcmNoKHJlc3AuZGF0YSwgYXJndW1lbnQpOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXN1bHRzKSkgcmVzdWx0cyA9IFtyZXN1bHRzXTsKICAgICAgdmFyIG51bVJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDsKICAgICAgaWYgKCFudW1SZXN1bHRzKSByZXR1cm4gZmFsc2U7CiAgICAgIGZvciAodmFyIGluZCA9IDAgOyBpbmQgPCBudW1SZXN1bHRzOyBpbmQrKykgewogICAgICAgIGlmICgham1lc3BhdGguc3RyaWN0RGVlcEVxdWFsKHJlc3VsdHNbaW5kXSwgZXhwZWN0ZWQpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKCiAgICBwYXRoQW55OiBmdW5jdGlvbihyZXNwLCBleHBlY3RlZCwgYXJndW1lbnQpIHsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgcmVzdWx0cyA9IGptZXNwYXRoLnNlYXJjaChyZXNwLmRhdGEsIGFyZ3VtZW50KTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVzdWx0cykpIHJlc3VsdHMgPSBbcmVzdWx0c107CiAgICAgIHZhciBudW1SZXN1bHRzID0gcmVzdWx0cy5sZW5ndGg7CiAgICAgIGZvciAodmFyIGluZCA9IDAgOyBpbmQgPCBudW1SZXN1bHRzOyBpbmQrKykgewogICAgICAgIGlmIChqbWVzcGF0aC5zdHJpY3REZWVwRXF1YWwocmVzdWx0c1tpbmRdLCBleHBlY3RlZCkpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAoKICAgIHN0YXR1czogZnVuY3Rpb24ocmVzcCwgZXhwZWN0ZWQpIHsKICAgICAgdmFyIHN0YXR1c0NvZGUgPSByZXNwLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlOwogICAgICByZXR1cm4gKHR5cGVvZiBzdGF0dXNDb2RlID09PSAnbnVtYmVyJykgJiYgKHN0YXR1c0NvZGUgPT09IGV4cGVjdGVkKTsKICAgIH0sCgogICAgZXJyb3I6IGZ1bmN0aW9uKHJlc3AsIGV4cGVjdGVkKSB7CiAgICAgIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIHJlc3AuZXJyb3IpIHsKICAgICAgICByZXR1cm4gZXhwZWN0ZWQgPT09IHJlc3AuZXJyb3IuY29kZTsKICAgICAgfQogICAgICAvLyBpZiBleHBlY3RlZCBpcyBub3Qgc3RyaW5nLCBjYW4gYmUgYm9vbGVhbiBpbmRpY2F0aW5nIHByZXNlbmNlIG9mIGVycm9yCiAgICAgIHJldHVybiBleHBlY3RlZCA9PT0gISFyZXNwLmVycm9yOwogICAgfQogIH0sCgogIGxpc3RlbmVyczogbmV3IEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IoKS5hZGROYW1lZExpc3RlbmVycyhmdW5jdGlvbihhZGQpIHsKICAgIGFkZCgnUkVUUllfQ0hFQ0snLCAncmV0cnknLCBmdW5jdGlvbihyZXNwKSB7CiAgICAgIHZhciB3YWl0ZXIgPSByZXNwLnJlcXVlc3QuX3dhaXRlcjsKICAgICAgaWYgKHJlc3AuZXJyb3IgJiYgcmVzcC5lcnJvci5jb2RlID09PSAnUmVzb3VyY2VOb3RSZWFkeScpIHsKICAgICAgICByZXNwLmVycm9yLnJldHJ5RGVsYXkgPSAod2FpdGVyLmNvbmZpZy5kZWxheSB8fCAwKSAqIDEwMDA7CiAgICAgIH0KICAgIH0pOwoKICAgIGFkZCgnQ0hFQ0tfT1VUUFVUJywgJ2V4dHJhY3REYXRhJywgQ0hFQ0tfQUNDRVBUT1JTKTsKCiAgICBhZGQoJ0NIRUNLX0VSUk9SJywgJ2V4dHJhY3RFcnJvcicsIENIRUNLX0FDQ0VQVE9SUyk7CiAgfSksCgogIC8qKgogICAqIEByZXR1cm4gW0FXUy5SZXF1ZXN0XQogICAqLwogIHdhaXQ6IGZ1bmN0aW9uIHdhaXQocGFyYW1zLCBjYWxsYmFjaykgewogICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7IHBhcmFtcyA9IHVuZGVmaW5lZDsKICAgIH0KCiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy4kd2FpdGVyKSB7CiAgICAgIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkocGFyYW1zKTsKICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuJHdhaXRlci5kZWxheSA9PT0gJ251bWJlcicpIHsKICAgICAgICB0aGlzLmNvbmZpZy5kZWxheSA9IHBhcmFtcy4kd2FpdGVyLmRlbGF5OwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgcGFyYW1zLiR3YWl0ZXIubWF4QXR0ZW1wdHMgPT09ICdudW1iZXInKSB7CiAgICAgICAgdGhpcy5jb25maWcubWF4QXR0ZW1wdHMgPSBwYXJhbXMuJHdhaXRlci5tYXhBdHRlbXB0czsKICAgICAgfQogICAgICBkZWxldGUgcGFyYW1zLiR3YWl0ZXI7CiAgICB9CgogICAgdmFyIHJlcXVlc3QgPSB0aGlzLnNlcnZpY2UubWFrZVJlcXVlc3QodGhpcy5jb25maWcub3BlcmF0aW9uLCBwYXJhbXMpOwogICAgcmVxdWVzdC5fd2FpdGVyID0gdGhpczsKICAgIHJlcXVlc3QucmVzcG9uc2UubWF4UmV0cmllcyA9IHRoaXMuY29uZmlnLm1heEF0dGVtcHRzOwogICAgcmVxdWVzdC5hZGRMaXN0ZW5lcnModGhpcy5saXN0ZW5lcnMpOwoKICAgIGlmIChjYWxsYmFjaykgcmVxdWVzdC5zZW5kKGNhbGxiYWNrKTsKICAgIHJldHVybiByZXF1ZXN0OwogIH0sCgogIHNldFN1Y2Nlc3M6IGZ1bmN0aW9uIHNldFN1Y2Nlc3MocmVzcCkgewogICAgcmVzcC5lcnJvciA9IG51bGw7CiAgICByZXNwLmRhdGEgPSByZXNwLmRhdGEgfHwge307CiAgICByZXNwLnJlcXVlc3QucmVtb3ZlQWxsTGlzdGVuZXJzKCdleHRyYWN0RGF0YScpOwogIH0sCgogIHNldEVycm9yOiBmdW5jdGlvbiBzZXRFcnJvcihyZXNwLCByZXRyeWFibGUpIHsKICAgIHJlc3AuZGF0YSA9IG51bGw7CiAgICByZXNwLmVycm9yID0gQVdTLnV0aWwuZXJyb3IocmVzcC5lcnJvciB8fCBuZXcgRXJyb3IoKSwgewogICAgICBjb2RlOiAnUmVzb3VyY2VOb3RSZWFkeScsCiAgICAgIG1lc3NhZ2U6ICdSZXNvdXJjZSBpcyBub3QgaW4gdGhlIHN0YXRlICcgKyB0aGlzLnN0YXRlLAogICAgICByZXRyeWFibGU6IHJldHJ5YWJsZQogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogTG9hZHMgd2FpdGVyIGNvbmZpZ3VyYXRpb24gZnJvbSBBUEkgY29uZmlndXJhdGlvbgogICAqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZFdhaXRlckNvbmZpZzogZnVuY3Rpb24gbG9hZFdhaXRlckNvbmZpZyhzdGF0ZSkgewogICAgaWYgKCF0aGlzLnNlcnZpY2UuYXBpLndhaXRlcnNbc3RhdGVdKSB7CiAgICAgIHRocm93IG5ldyBBV1MudXRpbC5lcnJvcihuZXcgRXJyb3IoKSwgewogICAgICAgIGNvZGU6ICdTdGF0ZU5vdEZvdW5kRXJyb3InLAogICAgICAgIG1lc3NhZ2U6ICdTdGF0ZSAnICsgc3RhdGUgKyAnIG5vdCBmb3VuZC4nCiAgICAgIH0pOwogICAgfQoKICAgIHRoaXMuY29uZmlnID0gQVdTLnV0aWwuY29weSh0aGlzLnNlcnZpY2UuYXBpLndhaXRlcnNbc3RhdGVdKTsKICB9Cn0pOwoKfSx7Ii4vY29yZSI6MTgsImptZXNwYXRoIjo4NX1dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpOwp2YXIgaW5oZXJpdCA9IEFXUy51dGlsLmluaGVyaXQ7CnZhciBqbWVzcGF0aCA9IHJlcXVpcmUoJ2ptZXNwYXRoJyk7CgovKioKICogVGhpcyBjbGFzcyBlbmNhcHN1bGF0ZXMgdGhlIHJlc3BvbnNlIGluZm9ybWF0aW9uCiAqIGZyb20gYSBzZXJ2aWNlIHJlcXVlc3Qgb3BlcmF0aW9uIHNlbnQgdGhyb3VnaCB7QVdTLlJlcXVlc3R9LgogKiBUaGUgcmVzcG9uc2Ugb2JqZWN0IGhhcyB0d28gbWFpbiBwcm9wZXJ0aWVzIGZvciBnZXR0aW5nIGluZm9ybWF0aW9uCiAqIGJhY2sgZnJvbSBhIHJlcXVlc3Q6CiAqCiAqICMjIFRoZSBgZGF0YWAgcHJvcGVydHkKICoKICogVGhlIGByZXNwb25zZS5kYXRhYCBwcm9wZXJ0eSBjb250YWlucyB0aGUgc2VyaWFsaXplZCBvYmplY3QgZGF0YQogKiByZXRyaWV2ZWQgZnJvbSB0aGUgc2VydmljZSByZXF1ZXN0LiBGb3IgaW5zdGFuY2UsIGZvciBhbgogKiBBbWF6b24gRHluYW1vREIgYGxpc3RUYWJsZXNgIG1ldGhvZCBjYWxsLCB0aGUgcmVzcG9uc2UgZGF0YSBtaWdodAogKiBsb29rIGxpa2U6CiAqCiAqIGBgYAogKiA+IHJlc3AuZGF0YQogKiB7IFRhYmxlTmFtZXM6CiAqICAgIFsgJ3RhYmxlMScsICd0YWJsZTInLCAuLi4gXSB9CiAqIGBgYAogKgogKiBUaGUgYGRhdGFgIHByb3BlcnR5IGNhbiBiZSBudWxsIGlmIGFuIGVycm9yIG9jY3VycyAoc2VlIGJlbG93KS4KICoKICogIyMgVGhlIGBlcnJvcmAgcHJvcGVydHkKICoKICogSW4gdGhlIGV2ZW50IG9mIGEgc2VydmljZSBlcnJvciAob3IgdHJhbnNmZXIgZXJyb3IpLCB0aGUKICogYHJlc3BvbnNlLmVycm9yYCBwcm9wZXJ0eSB3aWxsIGJlIGZpbGxlZCB3aXRoIHRoZSBnaXZlbgogKiBlcnJvciBkYXRhIGluIHRoZSBmb3JtOgogKgogKiBgYGAKICogeyBjb2RlOiAnU0hPUlRfVU5JUVVFX0VSUk9SX0NPREUnLAogKiAgIG1lc3NhZ2U6ICdTb21lIGh1bWFuIHJlYWRhYmxlIGVycm9yIG1lc3NhZ2UnIH0KICogYGBgCiAqCiAqIEluIHRoZSBjYXNlIG9mIGFuIGVycm9yLCB0aGUgYGRhdGFgIHByb3BlcnR5IHdpbGwgYmUgYG51bGxgLgogKiBOb3RlIHRoYXQgaWYgeW91IGhhbmRsZSBldmVudHMgdGhhdCBjYW4gYmUgaW4gYSBmYWlsdXJlIHN0YXRlLAogKiB5b3Ugc2hvdWxkIGFsd2F5cyBjaGVjayB3aGV0aGVyIGByZXNwb25zZS5lcnJvcmAgaXMgc2V0CiAqIGJlZm9yZSBhdHRlbXB0aW5nIHRvIGFjY2VzcyB0aGUgYHJlc3BvbnNlLmRhdGFgIHByb3BlcnR5LgogKgogKiBAIWF0dHJpYnV0ZSBkYXRhCiAqICAgQHJlYWRvbmx5CiAqICAgQCFncm91cCBEYXRhIFByb3BlcnRpZXMKICogICBAbm90ZSBJbnNpZGUgb2YgYSB7QVdTLlJlcXVlc3R+aHR0cERhdGF9IGV2ZW50LCB0aGlzCiAqICAgICBwcm9wZXJ0eSBjb250YWlucyBhIHNpbmdsZSByYXcgcGFja2V0IGluc3RlYWQgb2YgdGhlCiAqICAgICBmdWxsIGRlLXNlcmlhbGl6ZWQgc2VydmljZSByZXNwb25zZS4KICogICBAcmV0dXJuIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIHJlc3BvbnNlIGRhdGEKICogICAgIGZyb20gdGhlIHNlcnZpY2UuCiAqCiAqIEAhYXR0cmlidXRlIGVycm9yCiAqICAgQW4gc3RydWN0dXJlIGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgYSBzZXJ2aWNlCiAqICAgb3IgbmV0d29ya2luZyBlcnJvci4KICogICBAcmVhZG9ubHkKICogICBAIWdyb3VwIERhdGEgUHJvcGVydGllcwogKiAgIEBub3RlIFRoaXMgYXR0cmlidXRlIGlzIG9ubHkgZmlsbGVkIGlmIGEgc2VydmljZSBvcgogKiAgICAgbmV0d29ya2luZyBlcnJvciBvY2N1cnMuCiAqICAgQHJldHVybiBbRXJyb3JdCiAqICAgICAqIGNvZGUgW1N0cmluZ10gYSB1bmlxdWUgc2hvcnQgY29kZSByZXByZXNlbnRpbmcgdGhlCiAqICAgICAgIGVycm9yIHRoYXQgd2FzIGVtaXR0ZWQuCiAqICAgICAqIG1lc3NhZ2UgW1N0cmluZ10gYSBsb25nZXIgaHVtYW4gcmVhZGFibGUgZXJyb3IgbWVzc2FnZQogKiAgICAgKiByZXRyeWFibGUgW0Jvb2xlYW5dIHdoZXRoZXIgdGhlIGVycm9yIG1lc3NhZ2UgaXMKICogICAgICAgcmV0cnlhYmxlLgogKiAgICAgKiBzdGF0dXNDb2RlIFtOdW1lcmljXSBpbiB0aGUgY2FzZSBvZiBhIHJlcXVlc3QgdGhhdCByZWFjaGVkIHRoZSBzZXJ2aWNlLAogKiAgICAgICB0aGlzIHZhbHVlIGNvbnRhaW5zIHRoZSByZXNwb25zZSBzdGF0dXMgY29kZS4KICogICAgICogdGltZSBbRGF0ZV0gdGhlIGRhdGUgdGltZSBvYmplY3Qgd2hlbiB0aGUgZXJyb3Igb2NjdXJyZWQuCiAqICAgICAqIGhvc3RuYW1lIFtTdHJpbmddIHNldCB3aGVuIGEgbmV0d29ya2luZyBlcnJvciBvY2N1cnMgdG8gZWFzaWx5CiAqICAgICAgIGlkZW50aWZ5IHRoZSBlbmRwb2ludCBvZiB0aGUgcmVxdWVzdC4KICogICAgICogcmVnaW9uIFtTdHJpbmddIHNldCB3aGVuIGEgbmV0d29ya2luZyBlcnJvciBvY2N1cnMgdG8gZWFzaWx5CiAqICAgICAgIGlkZW50aWZ5IHRoZSByZWdpb24gb2YgdGhlIHJlcXVlc3QuCiAqCiAqIEAhYXR0cmlidXRlIHJlcXVlc3RJZAogKiAgIEByZWFkb25seQogKiAgIEAhZ3JvdXAgRGF0YSBQcm9wZXJ0aWVzCiAqICAgQHJldHVybiBbU3RyaW5nXSB0aGUgdW5pcXVlIHJlcXVlc3QgSUQgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXNwb25zZS4KICogICAgIExvZyB0aGlzIHZhbHVlIHdoZW4gZGVidWdnaW5nIHJlcXVlc3RzIGZvciBBV1Mgc3VwcG9ydC4KICoKICogQCFhdHRyaWJ1dGUgcmV0cnlDb3VudAogKiAgIEByZWFkb25seQogKiAgIEAhZ3JvdXAgT3BlcmF0aW9uIFByb3BlcnRpZXMKICogICBAcmV0dXJuIFtJbnRlZ2VyXSB0aGUgbnVtYmVyIG9mIHJldHJpZXMgdGhhdCB3ZXJlCiAqICAgICBhdHRlbXB0ZWQgYmVmb3JlIHRoZSByZXF1ZXN0IHdhcyBjb21wbGV0ZWQuCiAqCiAqIEAhYXR0cmlidXRlIHJlZGlyZWN0Q291bnQKICogICBAcmVhZG9ubHkKICogICBAIWdyb3VwIE9wZXJhdGlvbiBQcm9wZXJ0aWVzCiAqICAgQHJldHVybiBbSW50ZWdlcl0gdGhlIG51bWJlciBvZiByZWRpcmVjdHMgdGhhdCB3ZXJlCiAqICAgICBmb2xsb3dlZCBiZWZvcmUgdGhlIHJlcXVlc3Qgd2FzIGNvbXBsZXRlZC4KICoKICogQCFhdHRyaWJ1dGUgaHR0cFJlc3BvbnNlCiAqICAgQHJlYWRvbmx5CiAqICAgQCFncm91cCBIVFRQIFByb3BlcnRpZXMKICogICBAcmV0dXJuIFtBV1MuSHR0cFJlc3BvbnNlXSB0aGUgcmF3IEhUVFAgcmVzcG9uc2Ugb2JqZWN0CiAqICAgICBjb250YWluaW5nIHRoZSByZXNwb25zZSBoZWFkZXJzIGFuZCBib2R5IGluZm9ybWF0aW9uCiAqICAgICBmcm9tIHRoZSBzZXJ2ZXIuCiAqCiAqIEBzZWUgQVdTLlJlcXVlc3QKICovCkFXUy5SZXNwb25zZSA9IGluaGVyaXQoewoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gUmVzcG9uc2UocmVxdWVzdCkgewogICAgdGhpcy5yZXF1ZXN0ID0gcmVxdWVzdDsKICAgIHRoaXMuZGF0YSA9IG51bGw7CiAgICB0aGlzLmVycm9yID0gbnVsbDsKICAgIHRoaXMucmV0cnlDb3VudCA9IDA7CiAgICB0aGlzLnJlZGlyZWN0Q291bnQgPSAwOwogICAgdGhpcy5odHRwUmVzcG9uc2UgPSBuZXcgQVdTLkh0dHBSZXNwb25zZSgpOwogICAgaWYgKHJlcXVlc3QpIHsKICAgICAgdGhpcy5tYXhSZXRyaWVzID0gcmVxdWVzdC5zZXJ2aWNlLm51bVJldHJpZXMoKTsKICAgICAgdGhpcy5tYXhSZWRpcmVjdHMgPSByZXF1ZXN0LnNlcnZpY2UuY29uZmlnLm1heFJlZGlyZWN0czsKICAgIH0KICB9LAoKICAvKioKICAgKiBDcmVhdGVzIGEgbmV3IHJlcXVlc3QgZm9yIHRoZSBuZXh0IHBhZ2Ugb2YgcmVzcG9uc2UgZGF0YSwgY2FsbGluZyB0aGUKICAgKiBjYWxsYmFjayB3aXRoIHRoZSBwYWdlIGRhdGEgaWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZC4KICAgKgogICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIsIGRhdGEpCiAgICogICBDYWxsZWQgd2hlbiBhIHBhZ2Ugb2YgZGF0YSBpcyByZXR1cm5lZCBmcm9tIHRoZSBuZXh0IHJlcXVlc3QuCiAgICoKICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSBhbiBlcnJvciBvYmplY3QsIGlmIGFuIGVycm9yIG9jY3VycmVkIGluIHRoZSByZXF1ZXN0CiAgICogICBAcGFyYW0gZGF0YSBbT2JqZWN0XSB0aGUgbmV4dCBwYWdlIG9mIGRhdGEsIG9yIG51bGwsIGlmIHRoZXJlIGFyZSBubwogICAqICAgICBtb3JlIHBhZ2VzIGxlZnQuCiAgICogQHJldHVybiBbQVdTLlJlcXVlc3RdIHRoZSByZXF1ZXN0IG9iamVjdCBmb3IgdGhlIG5leHQgcGFnZSBvZiBkYXRhCiAgICogQHJldHVybiBbbnVsbF0gaWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQgYW5kIHRoZXJlIGFyZSBubyBwYWdlcyBsZWZ0CiAgICogICB0byByZXRyaWV2ZS4KICAgKiBAc2luY2UgdjEuNC4wCiAgICovCiAgbmV4dFBhZ2U6IGZ1bmN0aW9uIG5leHRQYWdlKGNhbGxiYWNrKSB7CiAgICB2YXIgY29uZmlnOwogICAgdmFyIHNlcnZpY2UgPSB0aGlzLnJlcXVlc3Quc2VydmljZTsKICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLnJlcXVlc3Qub3BlcmF0aW9uOwogICAgdHJ5IHsKICAgICAgY29uZmlnID0gc2VydmljZS5wYWdpbmF0aW9uQ29uZmlnKG9wZXJhdGlvbiwgdHJ1ZSk7CiAgICB9IGNhdGNoIChlKSB7IHRoaXMuZXJyb3IgPSBlOyB9CgogICAgaWYgKCF0aGlzLmhhc05leHRQYWdlKCkpIHsKICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayh0aGlzLmVycm9yLCBudWxsKTsKICAgICAgZWxzZSBpZiAodGhpcy5lcnJvcikgdGhyb3cgdGhpcy5lcnJvcjsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIHBhcmFtcyA9IEFXUy51dGlsLmNvcHkodGhpcy5yZXF1ZXN0LnBhcmFtcyk7CiAgICBpZiAoIXRoaXMubmV4dFBhZ2VUb2tlbnMpIHsKICAgICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2sobnVsbCwgbnVsbCkgOiBudWxsOwogICAgfSBlbHNlIHsKICAgICAgdmFyIGlucHV0VG9rZW5zID0gY29uZmlnLmlucHV0VG9rZW47CiAgICAgIGlmICh0eXBlb2YgaW5wdXRUb2tlbnMgPT09ICdzdHJpbmcnKSBpbnB1dFRva2VucyA9IFtpbnB1dFRva2Vuc107CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRUb2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBwYXJhbXNbaW5wdXRUb2tlbnNbaV1dID0gdGhpcy5uZXh0UGFnZVRva2Vuc1tpXTsKICAgICAgfQogICAgICByZXR1cm4gc2VydmljZS5tYWtlUmVxdWVzdCh0aGlzLnJlcXVlc3Qub3BlcmF0aW9uLCBwYXJhbXMsIGNhbGxiYWNrKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBAcmV0dXJuIFtCb29sZWFuXSB3aGV0aGVyIG1vcmUgcGFnZXMgb2YgZGF0YSBjYW4gYmUgcmV0dXJuZWQgYnkgZnVydGhlcgogICAqICAgcmVxdWVzdHMKICAgKiBAc2luY2UgdjEuNC4wCiAgICovCiAgaGFzTmV4dFBhZ2U6IGZ1bmN0aW9uIGhhc05leHRQYWdlKCkgewogICAgdGhpcy5jYWNoZU5leHRQYWdlVG9rZW5zKCk7CiAgICBpZiAodGhpcy5uZXh0UGFnZVRva2VucykgcmV0dXJuIHRydWU7CiAgICBpZiAodGhpcy5uZXh0UGFnZVRva2VucyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkOwogICAgZWxzZSByZXR1cm4gZmFsc2U7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY2FjaGVOZXh0UGFnZVRva2VuczogZnVuY3Rpb24gY2FjaGVOZXh0UGFnZVRva2VucygpIHsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ25leHRQYWdlVG9rZW5zJykpIHJldHVybiB0aGlzLm5leHRQYWdlVG9rZW5zOwogICAgdGhpcy5uZXh0UGFnZVRva2VucyA9IHVuZGVmaW5lZDsKCiAgICB2YXIgY29uZmlnID0gdGhpcy5yZXF1ZXN0LnNlcnZpY2UucGFnaW5hdGlvbkNvbmZpZyh0aGlzLnJlcXVlc3Qub3BlcmF0aW9uKTsKICAgIGlmICghY29uZmlnKSByZXR1cm4gdGhpcy5uZXh0UGFnZVRva2VuczsKCiAgICB0aGlzLm5leHRQYWdlVG9rZW5zID0gbnVsbDsKICAgIGlmIChjb25maWcubW9yZVJlc3VsdHMpIHsKICAgICAgaWYgKCFqbWVzcGF0aC5zZWFyY2godGhpcy5kYXRhLCBjb25maWcubW9yZVJlc3VsdHMpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubmV4dFBhZ2VUb2tlbnM7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgZXhwcnMgPSBjb25maWcub3V0cHV0VG9rZW47CiAgICBpZiAodHlwZW9mIGV4cHJzID09PSAnc3RyaW5nJykgZXhwcnMgPSBbZXhwcnNdOwogICAgQVdTLnV0aWwuYXJyYXlFYWNoLmNhbGwodGhpcywgZXhwcnMsIGZ1bmN0aW9uIChleHByKSB7CiAgICAgIHZhciBvdXRwdXQgPSBqbWVzcGF0aC5zZWFyY2godGhpcy5kYXRhLCBleHByKTsKICAgICAgaWYgKG91dHB1dCkgewogICAgICAgIHRoaXMubmV4dFBhZ2VUb2tlbnMgPSB0aGlzLm5leHRQYWdlVG9rZW5zIHx8IFtdOwogICAgICAgIHRoaXMubmV4dFBhZ2VUb2tlbnMucHVzaChvdXRwdXQpOwogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gdGhpcy5uZXh0UGFnZVRva2VuczsKICB9Cgp9KTsKCn0seyIuL2NvcmUiOjE4LCJqbWVzcGF0aCI6ODV9XSw1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuL2NvcmUnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICogQCFtZXRob2Qgb24oZXZlbnROYW1lLCBjYWxsYmFjaykKICogICBSZWdpc3RlcnMgYW4gZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2sgZm9yIHRoZSBldmVudCBnaXZlbiBieSBgZXZlbnROYW1lYC4KICogICBQYXJhbWV0ZXJzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gZGVwZW5kIG9uIHRoZSBpbmRpdmlkdWFsIGV2ZW50CiAqICAgYmVpbmcgdHJpZ2dlcmVkLiBTZWUgdGhlIGV2ZW50IGRvY3VtZW50YXRpb24gZm9yIHRob3NlIHBhcmFtZXRlcnMuCiAqCiAqICAgQHBhcmFtIGV2ZW50TmFtZSBbU3RyaW5nXSB0aGUgZXZlbnQgbmFtZSB0byByZWdpc3RlciB0aGUgbGlzdGVuZXIgZm9yCiAqICAgQHBhcmFtIGNhbGxiYWNrIFtGdW5jdGlvbl0gdGhlIGxpc3RlbmVyIGNhbGxiYWNrIGZ1bmN0aW9uCiAqICAgQHBhcmFtIHRvSGVhZCBbQm9vbGVhbl0gYXR0YWNoIHRoZSBsaXN0ZW5lciBjYWxsYmFjayB0byB0aGUgaGVhZCBvZiBjYWxsYmFjayBhcnJheSBpZiBzZXQgdG8gdHJ1ZS4KICogICAgIERlZmF1bHQgdG8gYmUgZmFsc2UuCiAqICAgQHJldHVybiBbQVdTLlNlcXVlbnRpYWxFeGVjdXRvcl0gdGhlIHNhbWUgb2JqZWN0IGZvciBjaGFpbmluZwogKi8KQVdTLlNlcXVlbnRpYWxFeGVjdXRvciA9IEFXUy51dGlsLmluaGVyaXQoewoKICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gU2VxdWVudGlhbEV4ZWN1dG9yKCkgewogICAgdGhpcy5fZXZlbnRzID0ge307CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbGlzdGVuZXJzOiBmdW5jdGlvbiBsaXN0ZW5lcnMoZXZlbnROYW1lKSB7CiAgICByZXR1cm4gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV0gPyB0aGlzLl9ldmVudHNbZXZlbnROYW1lXS5zbGljZSgwKSA6IFtdOwogIH0sCgogIG9uOiBmdW5jdGlvbiBvbihldmVudE5hbWUsIGxpc3RlbmVyLCB0b0hlYWQpIHsKICAgIGlmICh0aGlzLl9ldmVudHNbZXZlbnROYW1lXSkgewogICAgICB0b0hlYWQgPwogICAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdLnVuc2hpZnQobGlzdGVuZXIpIDoKICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXS5wdXNoKGxpc3RlbmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gW2xpc3RlbmVyXTsKICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0sCgogIG9uQXN5bmM6IGZ1bmN0aW9uIG9uQXN5bmMoZXZlbnROYW1lLCBsaXN0ZW5lciwgdG9IZWFkKSB7CiAgICBsaXN0ZW5lci5faXNBc3luYyA9IHRydWU7CiAgICByZXR1cm4gdGhpcy5vbihldmVudE5hbWUsIGxpc3RlbmVyLCB0b0hlYWQpOwogIH0sCgogIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihldmVudE5hbWUsIGxpc3RlbmVyKSB7CiAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV07CiAgICBpZiAobGlzdGVuZXJzKSB7CiAgICAgIHZhciBsZW5ndGggPSBsaXN0ZW5lcnMubGVuZ3RoOwogICAgICB2YXIgcG9zaXRpb24gPSAtMTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7CiAgICAgICAgICBwb3NpdGlvbiA9IGk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7CiAgICAgICAgbGlzdGVuZXJzLnNwbGljZShwb3NpdGlvbiwgMSk7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0sCgogIHJlbW92ZUFsbExpc3RlbmVyczogZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSkgewogICAgaWYgKGV2ZW50TmFtZSkgewogICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW2V2ZW50TmFtZV07CiAgICB9IGVsc2UgewogICAgICB0aGlzLl9ldmVudHMgPSB7fTsKICAgIH0KICAgIHJldHVybiB0aGlzOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGVtaXQ6IGZ1bmN0aW9uIGVtaXQoZXZlbnROYW1lLCBldmVudEFyZ3MsIGRvbmVDYWxsYmFjaykgewogICAgaWYgKCFkb25lQ2FsbGJhY2spIGRvbmVDYWxsYmFjayA9IGZ1bmN0aW9uKCkgeyB9OwogICAgdmFyIGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzKGV2ZW50TmFtZSk7CiAgICB2YXIgY291bnQgPSBsaXN0ZW5lcnMubGVuZ3RoOwogICAgdGhpcy5jYWxsTGlzdGVuZXJzKGxpc3RlbmVycywgZXZlbnRBcmdzLCBkb25lQ2FsbGJhY2spOwogICAgcmV0dXJuIGNvdW50ID4gMDsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjYWxsTGlzdGVuZXJzOiBmdW5jdGlvbiBjYWxsTGlzdGVuZXJzKGxpc3RlbmVycywgYXJncywgZG9uZUNhbGxiYWNrLCBwcmV2RXJyb3IpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBlcnJvciA9IHByZXZFcnJvciB8fCBudWxsOwoKICAgIGZ1bmN0aW9uIGNhbGxOZXh0TGlzdGVuZXIoZXJyKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICBlcnJvciA9IEFXUy51dGlsLmVycm9yKGVycm9yIHx8IG5ldyBFcnJvcigpLCBlcnIpOwogICAgICAgIGlmIChzZWxmLl9oYWx0SGFuZGxlcnNPbkVycm9yKSB7CiAgICAgICAgICByZXR1cm4gZG9uZUNhbGxiYWNrLmNhbGwoc2VsZiwgZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgICBzZWxmLmNhbGxMaXN0ZW5lcnMobGlzdGVuZXJzLCBhcmdzLCBkb25lQ2FsbGJhY2ssIGVycm9yKTsKICAgIH0KCiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHsKICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzLnNoaWZ0KCk7CiAgICAgIGlmIChsaXN0ZW5lci5faXNBc3luYykgeyAvLyBhc3luY2hyb25vdXMgbGlzdGVuZXIKICAgICAgICBsaXN0ZW5lci5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChbY2FsbE5leHRMaXN0ZW5lcl0pKTsKICAgICAgICByZXR1cm47IC8vIHN0b3AgaGVyZSwgY2FsbE5leHRMaXN0ZW5lciB3aWxsIGNvbnRpbnVlCiAgICAgIH0gZWxzZSB7IC8vIHN5bmNocm9ub3VzIGxpc3RlbmVyCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3MpOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgZXJyb3IgPSBBV1MudXRpbC5lcnJvcihlcnJvciB8fCBuZXcgRXJyb3IoKSwgZXJyKTsKICAgICAgICB9CiAgICAgICAgaWYgKGVycm9yICYmIHNlbGYuX2hhbHRIYW5kbGVyc09uRXJyb3IpIHsKICAgICAgICAgIGRvbmVDYWxsYmFjay5jYWxsKHNlbGYsIGVycm9yKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGRvbmVDYWxsYmFjay5jYWxsKHNlbGYsIGVycm9yKTsKICB9LAoKICAvKioKICAgKiBBZGRzIG9yIGNvcGllcyBhIHNldCBvZiBsaXN0ZW5lcnMgZnJvbSBhbm90aGVyIGxpc3Qgb2YKICAgKiBsaXN0ZW5lcnMgb3IgU2VxdWVudGlhbEV4ZWN1dG9yIG9iamVjdC4KICAgKgogICAqIEBwYXJhbSBsaXN0ZW5lcnMgW21hcDxTdHJpbmcsQXJyYXk8RnVuY3Rpb24+PiwgQVdTLlNlcXVlbnRpYWxFeGVjdXRvcl0KICAgKiAgIGEgbGlzdCBvZiBldmVudHMgYW5kIGNhbGxiYWNrcywgb3IgYW4gZXZlbnQgZW1pdHRlciBvYmplY3QKICAgKiAgIGNvbnRhaW5pbmcgbGlzdGVuZXJzIHRvIGFkZCB0byB0aGlzIGVtaXR0ZXIgb2JqZWN0LgogICAqIEByZXR1cm4gW0FXUy5TZXF1ZW50aWFsRXhlY3V0b3JdIHRoZSBlbWl0dGVyIG9iamVjdCwgZm9yIGNoYWluaW5nLgogICAqIEBleGFtcGxlIEFkZGluZyBsaXN0ZW5lcnMgZnJvbSBhIG1hcCBvZiBsaXN0ZW5lcnMKICAgKiAgIGVtaXR0ZXIuYWRkTGlzdGVuZXJzKHsKICAgKiAgICAgZXZlbnQxOiBbZnVuY3Rpb24oKSB7IC4uLiB9LCBmdW5jdGlvbigpIHsgLi4uIH1dLAogICAqICAgICBldmVudDI6IFtmdW5jdGlvbigpIHsgLi4uIH1dCiAgICogICB9KTsKICAgKiAgIGVtaXR0ZXIuZW1pdCgnZXZlbnQxJyk7IC8vIGVtaXR0ZXIgaGFzIGV2ZW50MQogICAqICAgZW1pdHRlci5lbWl0KCdldmVudDInKTsgLy8gZW1pdHRlciBoYXMgZXZlbnQyCiAgICogQGV4YW1wbGUgQWRkaW5nIGxpc3RlbmVycyBmcm9tIGFub3RoZXIgZW1pdHRlciBvYmplY3QKICAgKiAgIHZhciBlbWl0dGVyMSA9IG5ldyBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yKCk7CiAgICogICBlbWl0dGVyMS5vbignZXZlbnQxJywgZnVuY3Rpb24oKSB7IC4uLiB9KTsKICAgKiAgIGVtaXR0ZXIxLm9uKCdldmVudDInLCBmdW5jdGlvbigpIHsgLi4uIH0pOwogICAqICAgdmFyIGVtaXR0ZXIyID0gbmV3IEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IoKTsKICAgKiAgIGVtaXR0ZXIyLmFkZExpc3RlbmVycyhlbWl0dGVyMSk7CiAgICogICBlbWl0dGVyMi5lbWl0KCdldmVudDEnKTsgLy8gZW1pdHRlcjIgaGFzIGV2ZW50MQogICAqICAgZW1pdHRlcjIuZW1pdCgnZXZlbnQyJyk7IC8vIGVtaXR0ZXIyIGhhcyBldmVudDIKICAgKi8KICBhZGRMaXN0ZW5lcnM6IGZ1bmN0aW9uIGFkZExpc3RlbmVycyhsaXN0ZW5lcnMpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICAvLyBleHRyYWN0IGxpc3RlbmVycyBpZiBwYXJhbWV0ZXIgaXMgYW4gU2VxdWVudGlhbEV4ZWN1dG9yIG9iamVjdAogICAgaWYgKGxpc3RlbmVycy5fZXZlbnRzKSBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuX2V2ZW50czsKCiAgICBBV1MudXRpbC5lYWNoKGxpc3RlbmVycywgZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrcykgewogICAgICBpZiAodHlwZW9mIGNhbGxiYWNrcyA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2tzID0gW2NhbGxiYWNrc107CiAgICAgIEFXUy51dGlsLmFycmF5RWFjaChjYWxsYmFja3MsIGZ1bmN0aW9uKGNhbGxiYWNrKSB7CiAgICAgICAgc2VsZi5vbihldmVudCwgY2FsbGJhY2spOwogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiBzZWxmOwogIH0sCgogIC8qKgogICAqIFJlZ2lzdGVycyBhbiBldmVudCB3aXRoIHtvbn0gYW5kIHNhdmVzIHRoZSBjYWxsYmFjayBoYW5kbGUgZnVuY3Rpb24KICAgKiBhcyBhIHByb3BlcnR5IG9uIHRoZSBlbWl0dGVyIG9iamVjdCB1c2luZyBhIGdpdmVuIGBuYW1lYC4KICAgKgogICAqIEBwYXJhbSBuYW1lIFtTdHJpbmddIHRoZSBwcm9wZXJ0eSBuYW1lIHRvIHNldCBvbiB0aGlzIG9iamVjdCBjb250YWluaW5nCiAgICogICB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaGFuZGxlIHNvIHRoYXQgdGhlIGxpc3RlbmVyIGNhbiBiZSByZW1vdmVkIGluCiAgICogICB0aGUgZnV0dXJlLgogICAqIEBwYXJhbSAoc2VlIG9uKQogICAqIEByZXR1cm4gKHNlZSBvbikKICAgKiBAZXhhbXBsZSBBZGRpbmcgYSBuYW1lZCBsaXN0ZW5lciBEQVRBX0NBTExCQUNLCiAgICogICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHsgZG9Tb21ldGhpbmcoKTsgfTsKICAgKiAgIGVtaXR0ZXIuYWRkTmFtZWRMaXN0ZW5lcignREFUQV9DQUxMQkFDSycsICdkYXRhJywgbGlzdGVuZXIpOwogICAqCiAgICogICAvLyB0aGUgZm9sbG93aW5nIHByaW50czogdHJ1ZQogICAqICAgY29uc29sZS5sb2coZW1pdHRlci5EQVRBX0NBTExCQUNLID09IGxpc3RlbmVyKTsKICAgKi8KICBhZGROYW1lZExpc3RlbmVyOiBmdW5jdGlvbiBhZGROYW1lZExpc3RlbmVyKG5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRvSGVhZCkgewogICAgdGhpc1tuYW1lXSA9IGNhbGxiYWNrOwogICAgdGhpcy5hZGRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCB0b0hlYWQpOwogICAgcmV0dXJuIHRoaXM7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYWRkTmFtZWRBc3luY0xpc3RlbmVyOiBmdW5jdGlvbiBhZGROYW1lZEFzeW5jTGlzdGVuZXIobmFtZSwgZXZlbnROYW1lLCBjYWxsYmFjaywgdG9IZWFkKSB7CiAgICBjYWxsYmFjay5faXNBc3luYyA9IHRydWU7CiAgICByZXR1cm4gdGhpcy5hZGROYW1lZExpc3RlbmVyKG5hbWUsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIHRvSGVhZCk7CiAgfSwKCiAgLyoqCiAgICogSGVscGVyIG1ldGhvZCB0byBhZGQgYSBzZXQgb2YgbmFtZWQgbGlzdGVuZXJzIHVzaW5nCiAgICoge2FkZE5hbWVkTGlzdGVuZXJ9LiBUaGUgY2FsbGJhY2sgY29udGFpbnMgYSBwYXJhbWV0ZXIKICAgKiB3aXRoIGEgaGFuZGxlIHRvIHRoZSBgYWRkTmFtZWRMaXN0ZW5lcmAgbWV0aG9kLgogICAqCiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGFkZCkKICAgKiAgIFRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgaW1tZWRpYXRlbHkgaW4gb3JkZXIgdG8gcHJvdmlkZQogICAqICAgdGhlIGBhZGRgIGZ1bmN0aW9uIHRvIHRoZSBibG9jay4gVGhpcyBzaW1wbGlmaWVzIHRoZSBhZGRpdGlvbiBvZgogICAqICAgYSBsYXJnZSBncm91cCBvZiBuYW1lZCBsaXN0ZW5lcnMuCiAgICogICBAcGFyYW0gYWRkIFtGdW5jdGlvbl0gdGhlIHthZGROYW1lZExpc3RlbmVyfSBmdW5jdGlvbiB0byBjYWxsCiAgICogICAgIHdoZW4gcmVnaXN0ZXJpbmcgbGlzdGVuZXJzLgogICAqIEBleGFtcGxlIEFkZGluZyBhIHNldCBvZiBuYW1lZCBsaXN0ZW5lcnMKICAgKiAgIGVtaXR0ZXIuYWRkTmFtZWRMaXN0ZW5lcnMoZnVuY3Rpb24oYWRkKSB7CiAgICogICAgIGFkZCgnREFUQV9DQUxMQkFDSycsICdkYXRhJywgZnVuY3Rpb24oKSB7IC4uLiB9KTsKICAgKiAgICAgYWRkKCdPVEhFUicsICdvdGhlckV2ZW50JywgZnVuY3Rpb24oKSB7IC4uLiB9KTsKICAgKiAgICAgYWRkKCdMQVNUJywgJ2xhc3RFdmVudCcsIGZ1bmN0aW9uKCkgeyAuLi4gfSk7CiAgICogICB9KTsKICAgKgogICAqICAgLy8gdGhlc2UgcHJvcGVydGllcyBhcmUgbm93IHNldDoKICAgKiAgIGVtaXR0ZXIuREFUQV9DQUxMQkFDSzsKICAgKiAgIGVtaXR0ZXIuT1RIRVI7CiAgICogICBlbWl0dGVyLkxBU1Q7CiAgICovCiAgYWRkTmFtZWRMaXN0ZW5lcnM6IGZ1bmN0aW9uIGFkZE5hbWVkTGlzdGVuZXJzKGNhbGxiYWNrKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBjYWxsYmFjaygKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5hZGROYW1lZExpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7CiAgICAgIH0sCiAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgIHNlbGYuYWRkTmFtZWRBc3luY0xpc3RlbmVyLmFwcGx5KHNlbGYsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICk7CiAgICByZXR1cm4gdGhpczsKICB9Cn0pOwoKLyoqCiAqIHtvbn0gaXMgdGhlIHByZWZlcmVkIG1ldGhvZC4KICogQGFwaSBwcml2YXRlCiAqLwpBV1MuU2VxdWVudGlhbEV4ZWN1dG9yLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IEFXUy5TZXF1ZW50aWFsRXhlY3V0b3IucHJvdG90eXBlLm9uOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yOwoKfSx7Ii4vY29yZSI6MTh9XSw1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7KGZ1bmN0aW9uICgpewp2YXIgQVdTID0gcmVxdWlyZSgnLi9jb3JlJyk7CnZhciBBcGkgPSByZXF1aXJlKCcuL21vZGVsL2FwaScpOwp2YXIgcmVnaW9uQ29uZmlnID0gcmVxdWlyZSgnLi9yZWdpb25fY29uZmlnJyk7Cgp2YXIgaW5oZXJpdCA9IEFXUy51dGlsLmluaGVyaXQ7CnZhciBjbGllbnRDb3VudCA9IDA7CgovKioKICogVGhlIHNlcnZpY2UgY2xhc3MgcmVwcmVzZW50aW5nIGFuIEFXUyBzZXJ2aWNlLgogKgogKiBAY2xhc3NfYWJzdHJhY3QgVGhpcyBjbGFzcyBpcyBhbiBhYnN0cmFjdCBjbGFzcy4KICoKICogQCFhdHRyaWJ1dGUgYXBpVmVyc2lvbnMKICogICBAcmV0dXJuIFtBcnJheTxTdHJpbmc+XSB0aGUgbGlzdCBvZiBBUEkgdmVyc2lvbnMgc3VwcG9ydGVkIGJ5IHRoaXMgc2VydmljZS4KICogICBAcmVhZG9ubHkKICovCkFXUy5TZXJ2aWNlID0gaW5oZXJpdCh7CiAgLyoqCiAgICogQ3JlYXRlIGEgbmV3IHNlcnZpY2Ugb2JqZWN0IHdpdGggYSBjb25maWd1cmF0aW9uIG9iamVjdAogICAqCiAgICogQHBhcmFtIGNvbmZpZyBbbWFwXSBhIG1hcCBvZiBjb25maWd1cmF0aW9uIG9wdGlvbnMKICAgKi8KICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24gU2VydmljZShjb25maWcpIHsKICAgIGlmICghdGhpcy5sb2FkU2VydmljZUNsYXNzKSB7CiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLAogICAgICAgICdTZXJ2aWNlIG11c3QgYmUgY29uc3RydWN0ZWQgd2l0aCBgbmV3XCcgb3BlcmF0b3InKTsKICAgIH0KICAgIHZhciBTZXJ2aWNlQ2xhc3MgPSB0aGlzLmxvYWRTZXJ2aWNlQ2xhc3MoY29uZmlnIHx8IHt9KTsKICAgIGlmIChTZXJ2aWNlQ2xhc3MpIHsKICAgICAgdmFyIG9yaWdpbmFsQ29uZmlnID0gQVdTLnV0aWwuY29weShjb25maWcpOwogICAgICB2YXIgc3ZjID0gbmV3IFNlcnZpY2VDbGFzcyhjb25maWcpOwogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ZjLCAnX29yaWdpbmFsQ29uZmlnJywgewogICAgICAgIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW5hbENvbmZpZzsgfSwKICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgfSk7CiAgICAgIHN2Yy5fY2xpZW50SWQgPSArK2NsaWVudENvdW50OwogICAgICByZXR1cm4gc3ZjOwogICAgfQogICAgdGhpcy5pbml0aWFsaXplKGNvbmZpZyk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZShjb25maWcpIHsKICAgIHZhciBzdmNDb25maWcgPSBBV1MuY29uZmlnW3RoaXMuc2VydmljZUlkZW50aWZpZXJdOwogICAgdGhpcy5jb25maWcgPSBuZXcgQVdTLkNvbmZpZyhBV1MuY29uZmlnKTsKICAgIGlmIChzdmNDb25maWcpIHRoaXMuY29uZmlnLnVwZGF0ZShzdmNDb25maWcsIHRydWUpOwogICAgaWYgKGNvbmZpZykgdGhpcy5jb25maWcudXBkYXRlKGNvbmZpZywgdHJ1ZSk7CgogICAgdGhpcy52YWxpZGF0ZVNlcnZpY2UoKTsKICAgIGlmICghdGhpcy5jb25maWcuZW5kcG9pbnQpIHJlZ2lvbkNvbmZpZyh0aGlzKTsKCiAgICB0aGlzLmNvbmZpZy5lbmRwb2ludCA9IHRoaXMuZW5kcG9pbnRGcm9tVGVtcGxhdGUodGhpcy5jb25maWcuZW5kcG9pbnQpOwogICAgdGhpcy5zZXRFbmRwb2ludCh0aGlzLmNvbmZpZy5lbmRwb2ludCk7CiAgICAvL2VuYWJsZSBhdHRhY2hpbmcgbGlzdGVuZXJzIHRvIHNlcnZpY2UgY2xpZW50CiAgICBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yLmNhbGwodGhpcyk7CiAgICBBV1MuU2VydmljZS5hZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyh0aGlzKTsKICAgIGlmICgodGhpcy5jb25maWcuY2xpZW50U2lkZU1vbml0b3JpbmcgfHwgQVdTLlNlcnZpY2UuX2NsaWVudFNpZGVNb25pdG9yaW5nKSAmJiB0aGlzLnB1Ymxpc2hlcikgewogICAgICB2YXIgcHVibGlzaGVyID0gdGhpcy5wdWJsaXNoZXI7CiAgICAgIHRoaXMuYWRkTmFtZWRMaXN0ZW5lcignUFVCTElTSF9BUElfQ0FMTCcsICdhcGlDYWxsJywgZnVuY3Rpb24gUFVCTElTSF9BUElfQ0FMTChldmVudCkgewogICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7cHVibGlzaGVyLmV2ZW50SGFuZGxlcihldmVudCk7fSk7CiAgICAgIH0pOwogICAgICB0aGlzLmFkZE5hbWVkTGlzdGVuZXIoJ1BVQkxJU0hfQVBJX0FUVEVNUFQnLCAnYXBpQ2FsbEF0dGVtcHQnLCBmdW5jdGlvbiBQVUJMSVNIX0FQSV9BVFRFTVBUKGV2ZW50KSB7CiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtwdWJsaXNoZXIuZXZlbnRIYW5kbGVyKGV2ZW50KTt9KTsKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgdmFsaWRhdGVTZXJ2aWNlOiBmdW5jdGlvbiB2YWxpZGF0ZVNlcnZpY2UoKSB7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbG9hZFNlcnZpY2VDbGFzczogZnVuY3Rpb24gbG9hZFNlcnZpY2VDbGFzcyhzZXJ2aWNlQ29uZmlnKSB7CiAgICB2YXIgY29uZmlnID0gc2VydmljZUNvbmZpZzsKICAgIGlmICghQVdTLnV0aWwuaXNFbXB0eSh0aGlzLmFwaSkpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9IGVsc2UgaWYgKGNvbmZpZy5hcGlDb25maWcpIHsKICAgICAgcmV0dXJuIEFXUy5TZXJ2aWNlLmRlZmluZVNlcnZpY2VBcGkodGhpcy5jb25zdHJ1Y3RvciwgY29uZmlnLmFwaUNvbmZpZyk7CiAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VzKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfSBlbHNlIHsKICAgICAgY29uZmlnID0gbmV3IEFXUy5Db25maWcoQVdTLmNvbmZpZyk7CiAgICAgIGNvbmZpZy51cGRhdGUoc2VydmljZUNvbmZpZywgdHJ1ZSk7CiAgICAgIHZhciB2ZXJzaW9uID0gY29uZmlnLmFwaVZlcnNpb25zW3RoaXMuY29uc3RydWN0b3Iuc2VydmljZUlkZW50aWZpZXJdOwogICAgICB2ZXJzaW9uID0gdmVyc2lvbiB8fCBjb25maWcuYXBpVmVyc2lvbjsKICAgICAgcmV0dXJuIHRoaXMuZ2V0TGF0ZXN0U2VydmljZUNsYXNzKHZlcnNpb24pOwogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGdldExhdGVzdFNlcnZpY2VDbGFzczogZnVuY3Rpb24gZ2V0TGF0ZXN0U2VydmljZUNsYXNzKHZlcnNpb24pIHsKICAgIHZlcnNpb24gPSB0aGlzLmdldExhdGVzdFNlcnZpY2VWZXJzaW9uKHZlcnNpb24pOwogICAgaWYgKHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXNbdmVyc2lvbl0gPT09IG51bGwpIHsKICAgICAgQVdTLlNlcnZpY2UuZGVmaW5lU2VydmljZUFwaSh0aGlzLmNvbnN0cnVjdG9yLCB2ZXJzaW9uKTsKICAgIH0KCiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlc1t2ZXJzaW9uXTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBnZXRMYXRlc3RTZXJ2aWNlVmVyc2lvbjogZnVuY3Rpb24gZ2V0TGF0ZXN0U2VydmljZVZlcnNpb24odmVyc2lvbikgewogICAgaWYgKCF0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VzIHx8IHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMubGVuZ3RoID09PSAwKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2VydmljZXMgZGVmaW5lZCBvbiAnICsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3Iuc2VydmljZUlkZW50aWZpZXIpOwogICAgfQoKICAgIGlmICghdmVyc2lvbikgewogICAgICB2ZXJzaW9uID0gJ2xhdGVzdCc7CiAgICB9IGVsc2UgaWYgKEFXUy51dGlsLmlzVHlwZSh2ZXJzaW9uLCBEYXRlKSkgewogICAgICB2ZXJzaW9uID0gQVdTLnV0aWwuZGF0ZS5pc284NjAxKHZlcnNpb24pLnNwbGl0KCdUJylbMF07CiAgICB9CgogICAgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eSh0aGlzLmNvbnN0cnVjdG9yLnNlcnZpY2VzLCB2ZXJzaW9uKSkgewogICAgICByZXR1cm4gdmVyc2lvbjsKICAgIH0KCiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuY29uc3RydWN0b3Iuc2VydmljZXMpLnNvcnQoKTsKICAgIHZhciBzZWxlY3RlZFZlcnNpb24gPSBudWxsOwogICAgZm9yICh2YXIgaSA9IGtleXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgLy8gdmVyc2lvbnMgdGhhdCBlbmQgaW4gIioiIGFyZSBub3QgYXZhaWxhYmxlIG9uIGRpc2sgYW5kIGNhbiBiZQogICAgICAvLyBza2lwcGVkLCBzbyBkbyBub3QgY2hvb3NlIHRoZXNlIGFzIHNlbGVjdGVkVmVyc2lvbnMKICAgICAgaWYgKGtleXNbaV1ba2V5c1tpXS5sZW5ndGggLSAxXSAhPT0gJyonKSB7CiAgICAgICAgc2VsZWN0ZWRWZXJzaW9uID0ga2V5c1tpXTsKICAgICAgfQogICAgICBpZiAoa2V5c1tpXS5zdWJzdHIoMCwgMTApIDw9IHZlcnNpb24pIHsKICAgICAgICByZXR1cm4gc2VsZWN0ZWRWZXJzaW9uOwogICAgICB9CiAgICB9CgogICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCAnICsgdGhpcy5jb25zdHJ1Y3Rvci5zZXJ2aWNlSWRlbnRpZmllciArCiAgICAgICAgICAgICAgICAgICAgJyBBUEkgdG8gc2F0aXNmeSB2ZXJzaW9uIGNvbnN0cmFpbnQgYCcgKyB2ZXJzaW9uICsgJ1wnJyk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXBpOiB7fSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZGVmYXVsdFJldHJ5Q291bnQ6IDMsCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGN1c3RvbWl6ZVJlcXVlc3RzOiBmdW5jdGlvbiBjdXN0b21pemVSZXF1ZXN0cyhjYWxsYmFjaykgewogICAgaWYgKCFjYWxsYmFjaykgewogICAgICB0aGlzLmN1c3RvbVJlcXVlc3RIYW5kbGVyID0gbnVsbDsKICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXIgPSBjYWxsYmFjazsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWxsYmFjayB0eXBlIFwnJyArIHR5cGVvZiBjYWxsYmFjayArICdcJyBwcm92aWRlZCBpbiBjdXN0b21pemVSZXF1ZXN0cycpOwogICAgfQogIH0sCgogIC8qKgogICAqIENhbGxzIGFuIG9wZXJhdGlvbiBvbiBhIHNlcnZpY2Ugd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgcGFyYW1ldGVycy4KICAgKgogICAqIEBwYXJhbSBvcGVyYXRpb24gW1N0cmluZ10gdGhlIG5hbWUgb2YgdGhlIG9wZXJhdGlvbiB0byBjYWxsIG9uIHRoZSBzZXJ2aWNlLgogICAqIEBwYXJhbSBwYXJhbXMgW21hcF0gYSBtYXAgb2YgaW5wdXQgb3B0aW9ucyBmb3IgdGhlIG9wZXJhdGlvbgogICAqIEBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbihlcnIsIGRhdGEpCiAgICogICBJZiBhIGNhbGxiYWNrIGlzIHN1cHBsaWVkLCBpdCBpcyBjYWxsZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHJldHVybmVkCiAgICogICBmcm9tIHRoZSBzZXJ2aWNlLgogICAqICAgQHBhcmFtIGVyciBbRXJyb3JdIHRoZSBlcnJvciBvYmplY3QgcmV0dXJuZWQgZnJvbSB0aGUgcmVxdWVzdC4KICAgKiAgICAgU2V0IHRvIGBudWxsYCBpZiB0aGUgcmVxdWVzdCBpcyBzdWNjZXNzZnVsLgogICAqICAgQHBhcmFtIGRhdGEgW09iamVjdF0gdGhlIGRlLXNlcmlhbGl6ZWQgZGF0YSByZXR1cm5lZCBmcm9tCiAgICogICAgIHRoZSByZXF1ZXN0LiBTZXQgdG8gYG51bGxgIGlmIGEgcmVxdWVzdCBlcnJvciBvY2N1cnMuCiAgICovCiAgbWFrZVJlcXVlc3Q6IGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KG9wZXJhdGlvbiwgcGFyYW1zLCBjYWxsYmFjaykgewogICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgY2FsbGJhY2sgPSBwYXJhbXM7CiAgICAgIHBhcmFtcyA9IG51bGw7CiAgICB9CgogICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9OwogICAgaWYgKHRoaXMuY29uZmlnLnBhcmFtcykgeyAvLyBjb3B5IG9ubHkgdG9wbGV2ZWwgYm91bmQgcGFyYW1zCiAgICAgIHZhciBydWxlcyA9IHRoaXMuYXBpLm9wZXJhdGlvbnNbb3BlcmF0aW9uXTsKICAgICAgaWYgKHJ1bGVzKSB7CiAgICAgICAgcGFyYW1zID0gQVdTLnV0aWwuY29weShwYXJhbXMpOwogICAgICAgIEFXUy51dGlsLmVhY2godGhpcy5jb25maWcucGFyYW1zLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICBpZiAocnVsZXMuaW5wdXQubWVtYmVyc1trZXldKSB7CiAgICAgICAgICAgIGlmIChwYXJhbXNba2V5XSA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtc1trZXldID09PSBudWxsKSB7CiAgICAgICAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgdmFyIHJlcXVlc3QgPSBuZXcgQVdTLlJlcXVlc3QodGhpcywgb3BlcmF0aW9uLCBwYXJhbXMpOwogICAgdGhpcy5hZGRBbGxSZXF1ZXN0TGlzdGVuZXJzKHJlcXVlc3QpOwogICAgdGhpcy5hdHRhY2hNb25pdG9yaW5nRW1pdHRlcihyZXF1ZXN0KTsKICAgIGlmIChjYWxsYmFjaykgcmVxdWVzdC5zZW5kKGNhbGxiYWNrKTsKICAgIHJldHVybiByZXF1ZXN0OwogIH0sCgogIC8qKgogICAqIENhbGxzIGFuIG9wZXJhdGlvbiBvbiBhIHNlcnZpY2Ugd2l0aCB0aGUgZ2l2ZW4gaW5wdXQgcGFyYW1ldGVycywgd2l0aG91dAogICAqIGFueSBhdXRoZW50aWNhdGlvbiBkYXRhLiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgZm9yICJwdWJsaWMiIEFQSSBvcGVyYXRpb25zLgogICAqCiAgICogQHBhcmFtIG9wZXJhdGlvbiBbU3RyaW5nXSB0aGUgbmFtZSBvZiB0aGUgb3BlcmF0aW9uIHRvIGNhbGwgb24gdGhlIHNlcnZpY2UuCiAgICogQHBhcmFtIHBhcmFtcyBbbWFwXSBhIG1hcCBvZiBpbnB1dCBvcHRpb25zIGZvciB0aGUgb3BlcmF0aW9uCiAgICogQGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uKGVyciwgZGF0YSkKICAgKiAgIElmIGEgY2FsbGJhY2sgaXMgc3VwcGxpZWQsIGl0IGlzIGNhbGxlZCB3aGVuIGEgcmVzcG9uc2UgaXMgcmV0dXJuZWQKICAgKiAgIGZyb20gdGhlIHNlcnZpY2UuCiAgICogICBAcGFyYW0gZXJyIFtFcnJvcl0gdGhlIGVycm9yIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSByZXF1ZXN0LgogICAqICAgICBTZXQgdG8gYG51bGxgIGlmIHRoZSByZXF1ZXN0IGlzIHN1Y2Nlc3NmdWwuCiAgICogICBAcGFyYW0gZGF0YSBbT2JqZWN0XSB0aGUgZGUtc2VyaWFsaXplZCBkYXRhIHJldHVybmVkIGZyb20KICAgKiAgICAgdGhlIHJlcXVlc3QuIFNldCB0byBgbnVsbGAgaWYgYSByZXF1ZXN0IGVycm9yIG9jY3Vycy4KICAgKi8KICBtYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdDogZnVuY3Rpb24gbWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3Qob3BlcmF0aW9uLCBwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBjYWxsYmFjayA9IHBhcmFtczsKICAgICAgcGFyYW1zID0ge307CiAgICB9CgogICAgdmFyIHJlcXVlc3QgPSB0aGlzLm1ha2VSZXF1ZXN0KG9wZXJhdGlvbiwgcGFyYW1zKS50b1VuYXV0aGVudGljYXRlZCgpOwogICAgcmV0dXJuIGNhbGxiYWNrID8gcmVxdWVzdC5zZW5kKGNhbGxiYWNrKSA6IHJlcXVlc3Q7CiAgfSwKCiAgLyoqCiAgICogV2FpdHMgZm9yIGEgZ2l2ZW4gc3RhdGUKICAgKgogICAqIEBwYXJhbSBzdGF0ZSBbU3RyaW5nXSB0aGUgc3RhdGUgb24gdGhlIHNlcnZpY2UgdG8gd2FpdCBmb3IKICAgKiBAcGFyYW0gcGFyYW1zIFttYXBdIGEgbWFwIG9mIHBhcmFtZXRlcnMgdG8gcGFzcyB3aXRoIGVhY2ggcmVxdWVzdAogICAqIEBvcHRpb24gcGFyYW1zICR3YWl0ZXIgW21hcF0gYSBtYXAgb2YgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgd2FpdGVyCiAgICogQG9wdGlvbiBwYXJhbXMgJHdhaXRlci5kZWxheSBbTnVtYmVyXSBUaGUgbnVtYmVyIG9mIHNlY29uZHMgdG8gd2FpdCBiZXR3ZWVuCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cwogICAqIEBvcHRpb24gcGFyYW1zICR3YWl0ZXIubWF4QXR0ZW1wdHMgW051bWJlcl0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlcXVlc3RzCiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzZW5kIHdoaWxlIHdhaXRpbmcKICAgKiBAY2FsbGJhY2sgY2FsbGJhY2sgZnVuY3Rpb24oZXJyLCBkYXRhKQogICAqICAgSWYgYSBjYWxsYmFjayBpcyBzdXBwbGllZCwgaXQgaXMgY2FsbGVkIHdoZW4gYSByZXNwb25zZSBpcyByZXR1cm5lZAogICAqICAgZnJvbSB0aGUgc2VydmljZS4KICAgKiAgIEBwYXJhbSBlcnIgW0Vycm9yXSB0aGUgZXJyb3Igb2JqZWN0IHJldHVybmVkIGZyb20gdGhlIHJlcXVlc3QuCiAgICogICAgIFNldCB0byBgbnVsbGAgaWYgdGhlIHJlcXVlc3QgaXMgc3VjY2Vzc2Z1bC4KICAgKiAgIEBwYXJhbSBkYXRhIFtPYmplY3RdIHRoZSBkZS1zZXJpYWxpemVkIGRhdGEgcmV0dXJuZWQgZnJvbQogICAqICAgICB0aGUgcmVxdWVzdC4gU2V0IHRvIGBudWxsYCBpZiBhIHJlcXVlc3QgZXJyb3Igb2NjdXJzLgogICAqLwogIHdhaXRGb3I6IGZ1bmN0aW9uIHdhaXRGb3Ioc3RhdGUsIHBhcmFtcywgY2FsbGJhY2spIHsKICAgIHZhciB3YWl0ZXIgPSBuZXcgQVdTLlJlc291cmNlV2FpdGVyKHRoaXMsIHN0YXRlKTsKICAgIHJldHVybiB3YWl0ZXIud2FpdChwYXJhbXMsIGNhbGxiYWNrKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBhZGRBbGxSZXF1ZXN0TGlzdGVuZXJzOiBmdW5jdGlvbiBhZGRBbGxSZXF1ZXN0TGlzdGVuZXJzKHJlcXVlc3QpIHsKICAgIHZhciBsaXN0ID0gW0FXUy5ldmVudHMsIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLCB0aGlzLnNlcnZpY2VJbnRlcmZhY2UoKSwKICAgICAgICAgICAgICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlUG9zdF07CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKGxpc3RbaV0pIHJlcXVlc3QuYWRkTGlzdGVuZXJzKGxpc3RbaV0pOwogICAgfQoKICAgIC8vIGRpc2FibGUgcGFyYW1ldGVyIHZhbGlkYXRpb24KICAgIGlmICghdGhpcy5jb25maWcucGFyYW1WYWxpZGF0aW9uKSB7CiAgICAgIHJlcXVlc3QucmVtb3ZlTGlzdGVuZXIoJ3ZhbGlkYXRlJywKICAgICAgICBBV1MuRXZlbnRMaXN0ZW5lcnMuQ29yZS5WQUxJREFURV9QQVJBTUVURVJTKTsKICAgIH0KCiAgICBpZiAodGhpcy5jb25maWcubG9nZ2VyKSB7IC8vIGFkZCBsb2dnaW5nIGV2ZW50cwogICAgICByZXF1ZXN0LmFkZExpc3RlbmVycyhBV1MuRXZlbnRMaXN0ZW5lcnMuTG9nZ2VyKTsKICAgIH0KCiAgICB0aGlzLnNldHVwUmVxdWVzdExpc3RlbmVycyhyZXF1ZXN0KTsKICAgIC8vIGNhbGwgcHJvdG90eXBlJ3MgY3VzdG9tUmVxdWVzdEhhbmRsZXIKICAgIGlmICh0eXBlb2YgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY3VzdG9tUmVxdWVzdEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuY3VzdG9tUmVxdWVzdEhhbmRsZXIocmVxdWVzdCk7CiAgICB9CiAgICAvLyBjYWxsIGluc3RhbmNlJ3MgY3VzdG9tUmVxdWVzdEhhbmRsZXIKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgJ2N1c3RvbVJlcXVlc3RIYW5kbGVyJykgJiYgdHlwZW9mIHRoaXMuY3VzdG9tUmVxdWVzdEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5jdXN0b21SZXF1ZXN0SGFuZGxlcihyZXF1ZXN0KTsKICAgIH0KICB9LAoKICAvKioKICAgKiBFdmVudCByZWNvcmRpbmcgbWV0cmljcyBmb3IgYSB3aG9sZSBBUEkgY2FsbC4KICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhIHN1YnNldCBvZiBhcGkgY2FsbCBtZXRyaWNzCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXBpQ2FsbEV2ZW50OiBmdW5jdGlvbiBhcGlDYWxsRXZlbnQocmVxdWVzdCkgewogICAgdmFyIGFwaSA9IHJlcXVlc3Quc2VydmljZS5hcGkub3BlcmF0aW9uc1tyZXF1ZXN0Lm9wZXJhdGlvbl07CiAgICB2YXIgbW9uaXRvcmluZ0V2ZW50ID0gewogICAgICBUeXBlOiAnQXBpQ2FsbCcsCiAgICAgIEFwaTogYXBpID8gYXBpLm5hbWUgOiByZXF1ZXN0Lm9wZXJhdGlvbiwKICAgICAgVmVyc2lvbjogMSwKICAgICAgU2VydmljZTogcmVxdWVzdC5zZXJ2aWNlLmFwaS5zZXJ2aWNlSWQgfHwgcmVxdWVzdC5zZXJ2aWNlLmFwaS5lbmRwb2ludFByZWZpeCwKICAgICAgUmVnaW9uOiByZXF1ZXN0Lmh0dHBSZXF1ZXN0LnJlZ2lvbiwKICAgICAgTWF4UmV0cmllc0V4Y2VlZGVkOiAwLAogICAgICBVc2VyQWdlbnQ6IHJlcXVlc3QuaHR0cFJlcXVlc3QuZ2V0VXNlckFnZW50KCksCiAgICB9OwogICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTsKICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSkgewogICAgICBtb25pdG9yaW5nRXZlbnQuRmluYWxIdHRwU3RhdHVzQ29kZSA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlOwogICAgfQogICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7CiAgICAgIHZhciBlcnJvciA9IHJlc3BvbnNlLmVycm9yOwogICAgICB2YXIgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLmh0dHBSZXNwb25zZS5zdGF0dXNDb2RlOwogICAgICBpZiAoc3RhdHVzQ29kZSA+IDI5OSkgewogICAgICAgIGlmIChlcnJvci5jb2RlKSBtb25pdG9yaW5nRXZlbnQuRmluYWxBd3NFeGNlcHRpb24gPSBlcnJvci5jb2RlOwogICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSBtb25pdG9yaW5nRXZlbnQuRmluYWxBd3NFeGNlcHRpb25NZXNzYWdlID0gZXJyb3IubWVzc2FnZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZXJyb3IuY29kZSB8fCBlcnJvci5uYW1lKSBtb25pdG9yaW5nRXZlbnQuRmluYWxTZGtFeGNlcHRpb24gPSBlcnJvci5jb2RlIHx8IGVycm9yLm5hbWU7CiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIG1vbml0b3JpbmdFdmVudC5GaW5hbFNka0V4Y2VwdGlvbk1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gbW9uaXRvcmluZ0V2ZW50OwogIH0sCgogIC8qKgogICAqIEV2ZW50IHJlY29yZGluZyBtZXRyaWNzIGZvciBhbiBBUEkgY2FsbCBhdHRlbXB0LgogICAqIEByZXR1cm5zIHtvYmplY3R9IGEgc3Vic2V0IG9mIGFwaSBjYWxsIGF0dGVtcHQgbWV0cmljcwogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGFwaUF0dGVtcHRFdmVudDogZnVuY3Rpb24gYXBpQXR0ZW1wdEV2ZW50KHJlcXVlc3QpIHsKICAgIHZhciBhcGkgPSByZXF1ZXN0LnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dOwogICAgdmFyIG1vbml0b3JpbmdFdmVudCA9IHsKICAgICAgVHlwZTogJ0FwaUNhbGxBdHRlbXB0JywKICAgICAgQXBpOiBhcGkgPyBhcGkubmFtZSA6IHJlcXVlc3Qub3BlcmF0aW9uLAogICAgICBWZXJzaW9uOiAxLAogICAgICBTZXJ2aWNlOiByZXF1ZXN0LnNlcnZpY2UuYXBpLnNlcnZpY2VJZCB8fCByZXF1ZXN0LnNlcnZpY2UuYXBpLmVuZHBvaW50UHJlZml4LAogICAgICBGcWRuOiByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmVuZHBvaW50Lmhvc3RuYW1lLAogICAgICBVc2VyQWdlbnQ6IHJlcXVlc3QuaHR0cFJlcXVlc3QuZ2V0VXNlckFnZW50KCksCiAgICB9OwogICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTsKICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSkgewogICAgICBtb25pdG9yaW5nRXZlbnQuSHR0cFN0YXR1c0NvZGUgPSByZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTsKICAgIH0KICAgIGlmICgKICAgICAgIXJlcXVlc3QuX3VuQXV0aGVudGljYXRlZCAmJgogICAgICByZXF1ZXN0LnNlcnZpY2UuY29uZmlnLmNyZWRlbnRpYWxzICYmCiAgICAgIHJlcXVlc3Quc2VydmljZS5jb25maWcuY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQKICAgICkgewogICAgICBtb25pdG9yaW5nRXZlbnQuQWNjZXNzS2V5ID0gcmVxdWVzdC5zZXJ2aWNlLmNvbmZpZy5jcmVkZW50aWFscy5hY2Nlc3NLZXlJZDsKICAgIH0KICAgIGlmICghcmVzcG9uc2UuaHR0cFJlc3BvbnNlLmhlYWRlcnMpIHJldHVybiBtb25pdG9yaW5nRXZlbnQ7CiAgICBpZiAocmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWyd4LWFtei1zZWN1cml0eS10b2tlbiddKSB7CiAgICAgIG1vbml0b3JpbmdFdmVudC5TZXNzaW9uVG9rZW4gPSByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ3gtYW16LXNlY3VyaXR5LXRva2VuJ107CiAgICB9CiAgICBpZiAocmVzcG9uc2UuaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ3gtYW16bi1yZXF1ZXN0aWQnXSkgewogICAgICBtb25pdG9yaW5nRXZlbnQuWEFtem5SZXF1ZXN0SWQgPSByZXNwb25zZS5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXpuLXJlcXVlc3RpZCddOwogICAgfQogICAgaWYgKHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtei1yZXF1ZXN0LWlkJ10pIHsKICAgICAgbW9uaXRvcmluZ0V2ZW50LlhBbXpSZXF1ZXN0SWQgPSByZXNwb25zZS5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXotcmVxdWVzdC1pZCddOwogICAgfQogICAgaWYgKHJlc3BvbnNlLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtei1pZC0yJ10pIHsKICAgICAgbW9uaXRvcmluZ0V2ZW50LlhBbXpJZDIgPSByZXNwb25zZS5odHRwUmVzcG9uc2UuaGVhZGVyc1sneC1hbXotaWQtMiddOwogICAgfQogICAgcmV0dXJuIG1vbml0b3JpbmdFdmVudDsKICB9LAoKICAvKioKICAgKiBBZGQgbWV0cmljcyBvZiBmYWlsZWQgcmVxdWVzdC4KICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBhdHRlbXB0RmFpbEV2ZW50OiBmdW5jdGlvbiBhdHRlbXB0RmFpbEV2ZW50KHJlcXVlc3QpIHsKICAgIHZhciBtb25pdG9yaW5nRXZlbnQgPSB0aGlzLmFwaUF0dGVtcHRFdmVudChyZXF1ZXN0KTsKICAgIHZhciByZXNwb25zZSA9IHJlcXVlc3QucmVzcG9uc2U7CiAgICB2YXIgZXJyb3IgPSByZXNwb25zZS5lcnJvcjsKICAgIGlmIChyZXNwb25zZS5odHRwUmVzcG9uc2Uuc3RhdHVzQ29kZSA+IDI5OSApIHsKICAgICAgaWYgKGVycm9yLmNvZGUpIG1vbml0b3JpbmdFdmVudC5Bd3NFeGNlcHRpb24gPSBlcnJvci5jb2RlOwogICAgICBpZiAoZXJyb3IubWVzc2FnZSkgbW9uaXRvcmluZ0V2ZW50LkF3c0V4Y2VwdGlvbk1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGVycm9yLmNvZGUgfHwgZXJyb3IubmFtZSkgbW9uaXRvcmluZ0V2ZW50LlNka0V4Y2VwdGlvbiA9IGVycm9yLmNvZGUgfHwgZXJyb3IubmFtZTsKICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIG1vbml0b3JpbmdFdmVudC5TZGtFeGNlcHRpb25NZXNzYWdlID0gZXJyb3IubWVzc2FnZTsKICAgIH0KICAgIHJldHVybiBtb25pdG9yaW5nRXZlbnQ7CiAgfSwKCiAgLyoqCiAgICogQXR0YWNoIGxpc3RlbmVycyB0byByZXF1ZXN0IG9iamVjdCB0byBmZXRjaCBtZXRyaWNzIG9mIGVhY2ggcmVxdWVzdAogICAqIGFuZCBlbWl0IGRhdGEgb2JqZWN0IHRocm91Z2ggXCdBcGlDYWxsXCcgYW5kIFwnQXBpQ2FsbEF0dGVtcHRcJyBldmVudHMuCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXR0YWNoTW9uaXRvcmluZ0VtaXR0ZXI6IGZ1bmN0aW9uIGF0dGFjaE1vbml0b3JpbmdFbWl0dGVyKHJlcXVlc3QpIHsKICAgIHZhciBhdHRlbXB0VGltZXN0YW1wOyAvL3RpbWVzdGFtcCBtYXJraW5nIHRoZSBiZWdpbm5pbmcgb2YgYSByZXF1ZXN0IGF0dGVtcHQKICAgIHZhciBhdHRlbXB0U3RhcnRSZWFsVGltZTsgLy9TdGFydCB0aW1lIG9mIHJlcXVlc3QgYXR0ZW1wdC4gVXNlZCB0byBjYWxjdWxhdGluZyBhdHRlbXB0TGF0ZW5jeQogICAgdmFyIGF0dGVtcHRMYXRlbmN5OyAvL2xhdGVuY3kgZnJvbSByZXF1ZXN0IHNlbnQgb3V0IHRvIGh0dHAgcmVzcG9uc2UgcmVhY2hpbmcgU0RLCiAgICB2YXIgY2FsbFN0YXJ0UmVhbFRpbWU7IC8vU3RhcnQgdGltZSBvZiBBUEkgY2FsbC4gVXNlZCB0byBjYWxjdWxhdGluZyBBUEkgY2FsbCBsYXRlbmN5CiAgICB2YXIgYXR0ZW1wdENvdW50ID0gMDsgLy9yZXF1ZXN0LnJldHJ5Q291bnQgaXMgbm90IHJlbGlhYmxlIGhlcmUKICAgIHZhciByZWdpb247IC8vcmVnaW9uIGNhY2hlIHJlZ2lvbiBmb3IgZWFjaCBhdHRlbXB0IHNpbmNlIGl0IGNhbiBiZSB1cGRhdGVkIGluIHBsYXNlIChlLmcuIHMzKQogICAgdmFyIGNhbGxUaW1lc3RhbXA7IC8vdGltZXN0YW1wIHdoZW4gdGhlIHJlcXVlc3QgaXMgY3JlYXRlZAogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIGFkZFRvSGVhZCA9IHRydWU7CgogICAgcmVxdWVzdC5vbigndmFsaWRhdGUnLCBmdW5jdGlvbiAoKSB7CiAgICAgIGNhbGxTdGFydFJlYWxUaW1lID0gQVdTLnV0aWwucmVhbENsb2NrLm5vdygpOwogICAgICBjYWxsVGltZXN0YW1wID0gRGF0ZS5ub3coKTsKICAgIH0sIGFkZFRvSGVhZCk7CiAgICByZXF1ZXN0Lm9uKCdzaWduJywgZnVuY3Rpb24gKCkgewogICAgICBhdHRlbXB0U3RhcnRSZWFsVGltZSA9IEFXUy51dGlsLnJlYWxDbG9jay5ub3coKTsKICAgICAgYXR0ZW1wdFRpbWVzdGFtcCA9IERhdGUubm93KCk7CiAgICAgIHJlZ2lvbiA9IHJlcXVlc3QuaHR0cFJlcXVlc3QucmVnaW9uOwogICAgICBhdHRlbXB0Q291bnQrKzsKICAgIH0sIGFkZFRvSGVhZCk7CiAgICByZXF1ZXN0Lm9uKCd2YWxpZGF0ZVJlc3BvbnNlJywgZnVuY3Rpb24oKSB7CiAgICAgIGF0dGVtcHRMYXRlbmN5ID0gTWF0aC5yb3VuZChBV1MudXRpbC5yZWFsQ2xvY2subm93KCkgLSBhdHRlbXB0U3RhcnRSZWFsVGltZSk7CiAgICB9KTsKICAgIHJlcXVlc3QuYWRkTmFtZWRMaXN0ZW5lcignQVBJX0NBTExfQVRURU1QVCcsICdzdWNjZXNzJywgZnVuY3Rpb24gQVBJX0NBTExfQVRURU1QVCgpIHsKICAgICAgdmFyIGFwaUF0dGVtcHRFdmVudCA9IHNlbGYuYXBpQXR0ZW1wdEV2ZW50KHJlcXVlc3QpOwogICAgICBhcGlBdHRlbXB0RXZlbnQuVGltZXN0YW1wID0gYXR0ZW1wdFRpbWVzdGFtcDsKICAgICAgYXBpQXR0ZW1wdEV2ZW50LkF0dGVtcHRMYXRlbmN5ID0gYXR0ZW1wdExhdGVuY3kgPj0gMCA/IGF0dGVtcHRMYXRlbmN5IDogMDsKICAgICAgYXBpQXR0ZW1wdEV2ZW50LlJlZ2lvbiA9IHJlZ2lvbjsKICAgICAgc2VsZi5lbWl0KCdhcGlDYWxsQXR0ZW1wdCcsIFthcGlBdHRlbXB0RXZlbnRdKTsKICAgIH0pOwogICAgcmVxdWVzdC5hZGROYW1lZExpc3RlbmVyKCdBUElfQ0FMTF9BVFRFTVBUX1JFVFJZJywgJ3JldHJ5JywgZnVuY3Rpb24gQVBJX0NBTExfQVRURU1QVF9SRVRSWSgpIHsKICAgICAgdmFyIGFwaUF0dGVtcHRFdmVudCA9IHNlbGYuYXR0ZW1wdEZhaWxFdmVudChyZXF1ZXN0KTsKICAgICAgYXBpQXR0ZW1wdEV2ZW50LlRpbWVzdGFtcCA9IGF0dGVtcHRUaW1lc3RhbXA7CiAgICAgIC8vYXR0ZW1wdExhdGVuY3kgbWF5IG5vdCBiZSBhdmFpbGFibGUgaWYgZmFpbCBiZWZvcmUgcmVzcG9uc2UKICAgICAgYXR0ZW1wdExhdGVuY3kgPSBhdHRlbXB0TGF0ZW5jeSB8fAogICAgICAgIE1hdGgucm91bmQoQVdTLnV0aWwucmVhbENsb2NrLm5vdygpIC0gYXR0ZW1wdFN0YXJ0UmVhbFRpbWUpOwogICAgICBhcGlBdHRlbXB0RXZlbnQuQXR0ZW1wdExhdGVuY3kgPSBhdHRlbXB0TGF0ZW5jeSA+PSAwID8gYXR0ZW1wdExhdGVuY3kgOiAwOwogICAgICBhcGlBdHRlbXB0RXZlbnQuUmVnaW9uID0gcmVnaW9uOwogICAgICBzZWxmLmVtaXQoJ2FwaUNhbGxBdHRlbXB0JywgW2FwaUF0dGVtcHRFdmVudF0pOwogICAgfSk7CiAgICByZXF1ZXN0LmFkZE5hbWVkTGlzdGVuZXIoJ0FQSV9DQUxMJywgJ2NvbXBsZXRlJywgZnVuY3Rpb24gQVBJX0NBTEwoKSB7CiAgICAgIHZhciBhcGlDYWxsRXZlbnQgPSBzZWxmLmFwaUNhbGxFdmVudChyZXF1ZXN0KTsKICAgICAgYXBpQ2FsbEV2ZW50LkF0dGVtcHRDb3VudCA9IGF0dGVtcHRDb3VudDsKICAgICAgaWYgKGFwaUNhbGxFdmVudC5BdHRlbXB0Q291bnQgPD0gMCkgcmV0dXJuOwogICAgICBhcGlDYWxsRXZlbnQuVGltZXN0YW1wID0gY2FsbFRpbWVzdGFtcDsKICAgICAgdmFyIGxhdGVuY3kgPSBNYXRoLnJvdW5kKEFXUy51dGlsLnJlYWxDbG9jay5ub3coKSAtIGNhbGxTdGFydFJlYWxUaW1lKTsKICAgICAgYXBpQ2FsbEV2ZW50LkxhdGVuY3kgPSBsYXRlbmN5ID49IDAgPyBsYXRlbmN5IDogMDsKICAgICAgdmFyIHJlc3BvbnNlID0gcmVxdWVzdC5yZXNwb25zZTsKICAgICAgaWYgKAogICAgICAgIHR5cGVvZiByZXNwb25zZS5yZXRyeUNvdW50ID09PSAnbnVtYmVyJyAmJgogICAgICAgIHR5cGVvZiByZXNwb25zZS5tYXhSZXRyaWVzID09PSAnbnVtYmVyJyAmJgogICAgICAgIChyZXNwb25zZS5yZXRyeUNvdW50ID49IHJlc3BvbnNlLm1heFJldHJpZXMpCiAgICAgICkgewogICAgICAgIGFwaUNhbGxFdmVudC5NYXhSZXRyaWVzRXhjZWVkZWQgPSAxOwogICAgICB9CiAgICAgIHNlbGYuZW1pdCgnYXBpQ2FsbCcsIFthcGlDYWxsRXZlbnRdKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHNldHVwIGFueSBjdXN0b20gcmVxdWVzdCBsaXN0ZW5lcnMgZm9yIGVhY2gKICAgKiBuZXcgcmVxdWVzdCB0byB0aGUgc2VydmljZS4KICAgKgogICAqIEBtZXRob2RfYWJzdHJhY3QgVGhpcyBpcyBhbiBhYnN0cmFjdCBtZXRob2QuCiAgICovCiAgc2V0dXBSZXF1ZXN0TGlzdGVuZXJzOiBmdW5jdGlvbiBzZXR1cFJlcXVlc3RMaXN0ZW5lcnMocmVxdWVzdCkgewogIH0sCgogIC8qKgogICAqIEdldHMgdGhlIHNpZ25lciBjbGFzcyBmb3IgYSBnaXZlbiByZXF1ZXN0CiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZ2V0U2lnbmVyQ2xhc3M6IGZ1bmN0aW9uIGdldFNpZ25lckNsYXNzKHJlcXVlc3QpIHsKICAgIHZhciB2ZXJzaW9uOwogICAgLy8gZ2V0IG9wZXJhdGlvbiBhdXRodHlwZSBpZiBwcmVzZW50CiAgICB2YXIgb3BlcmF0aW9uID0gbnVsbDsKICAgIHZhciBhdXRodHlwZSA9ICcnOwogICAgaWYgKHJlcXVlc3QpIHsKICAgICAgdmFyIG9wZXJhdGlvbnMgPSByZXF1ZXN0LnNlcnZpY2UuYXBpLm9wZXJhdGlvbnMgfHwge307CiAgICAgIG9wZXJhdGlvbiA9IG9wZXJhdGlvbnNbcmVxdWVzdC5vcGVyYXRpb25dIHx8IG51bGw7CiAgICAgIGF1dGh0eXBlID0gb3BlcmF0aW9uID8gb3BlcmF0aW9uLmF1dGh0eXBlIDogJyc7CiAgICB9CiAgICBpZiAodGhpcy5jb25maWcuc2lnbmF0dXJlVmVyc2lvbikgewogICAgICB2ZXJzaW9uID0gdGhpcy5jb25maWcuc2lnbmF0dXJlVmVyc2lvbjsKICAgIH0gZWxzZSBpZiAoYXV0aHR5cGUgPT09ICd2NCcgfHwgYXV0aHR5cGUgPT09ICd2NC11bnNpZ25lZC1ib2R5JykgewogICAgICB2ZXJzaW9uID0gJ3Y0JzsKICAgIH0gZWxzZSB7CiAgICAgIHZlcnNpb24gPSB0aGlzLmFwaS5zaWduYXR1cmVWZXJzaW9uOwogICAgfQogICAgcmV0dXJuIEFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIuZ2V0VmVyc2lvbih2ZXJzaW9uKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBzZXJ2aWNlSW50ZXJmYWNlOiBmdW5jdGlvbiBzZXJ2aWNlSW50ZXJmYWNlKCkgewogICAgc3dpdGNoICh0aGlzLmFwaS5wcm90b2NvbCkgewogICAgICBjYXNlICdlYzInOiByZXR1cm4gQVdTLkV2ZW50TGlzdGVuZXJzLlF1ZXJ5OwogICAgICBjYXNlICdxdWVyeSc6IHJldHVybiBBV1MuRXZlbnRMaXN0ZW5lcnMuUXVlcnk7CiAgICAgIGNhc2UgJ2pzb24nOiByZXR1cm4gQVdTLkV2ZW50TGlzdGVuZXJzLkpzb247CiAgICAgIGNhc2UgJ3Jlc3QtanNvbic6IHJldHVybiBBV1MuRXZlbnRMaXN0ZW5lcnMuUmVzdEpzb247CiAgICAgIGNhc2UgJ3Jlc3QteG1sJzogcmV0dXJuIEFXUy5FdmVudExpc3RlbmVycy5SZXN0WG1sOwogICAgfQogICAgaWYgKHRoaXMuYXBpLnByb3RvY29sKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXJ2aWNlIGBwcm90b2NvbFwnICcgKwogICAgICAgIHRoaXMuYXBpLnByb3RvY29sICsgJyBpbiBBUEkgY29uZmlnJyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgc3VjY2Vzc2Z1bFJlc3BvbnNlOiBmdW5jdGlvbiBzdWNjZXNzZnVsUmVzcG9uc2UocmVzcCkgewogICAgcmV0dXJuIHJlc3AuaHR0cFJlc3BvbnNlLnN0YXR1c0NvZGUgPCAzMDA7CiAgfSwKCiAgLyoqCiAgICogSG93IG1hbnkgdGltZXMgYSBmYWlsZWQgcmVxdWVzdCBzaG91bGQgYmUgcmV0cmllZCBiZWZvcmUgZ2l2aW5nIHVwLgogICAqIHRoZSBkZWZhdWx0UmV0cnlDb3VudCBjYW4gYmUgb3ZlcnJpZGVuIGJ5IHNlcnZpY2UgY2xhc3Nlcy4KICAgKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIG51bVJldHJpZXM6IGZ1bmN0aW9uIG51bVJldHJpZXMoKSB7CiAgICBpZiAodGhpcy5jb25maWcubWF4UmV0cmllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbmZpZy5tYXhSZXRyaWVzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFJldHJ5Q291bnQ7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgcmV0cnlEZWxheXM6IGZ1bmN0aW9uIHJldHJ5RGVsYXlzKHJldHJ5Q291bnQpIHsKICAgIHJldHVybiBBV1MudXRpbC5jYWxjdWxhdGVSZXRyeURlbGF5KHJldHJ5Q291bnQsIHRoaXMuY29uZmlnLnJldHJ5RGVsYXlPcHRpb25zKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICByZXRyeWFibGVFcnJvcjogZnVuY3Rpb24gcmV0cnlhYmxlRXJyb3IoZXJyb3IpIHsKICAgIGlmICh0aGlzLnRpbWVvdXRFcnJvcihlcnJvcikpIHJldHVybiB0cnVlOwogICAgaWYgKHRoaXMubmV0d29ya2luZ0Vycm9yKGVycm9yKSkgcmV0dXJuIHRydWU7CiAgICBpZiAodGhpcy5leHBpcmVkQ3JlZGVudGlhbHNFcnJvcihlcnJvcikpIHJldHVybiB0cnVlOwogICAgaWYgKHRoaXMudGhyb3R0bGVkRXJyb3IoZXJyb3IpKSByZXR1cm4gdHJ1ZTsKICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID49IDUwMCkgcmV0dXJuIHRydWU7CiAgICByZXR1cm4gZmFsc2U7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgbmV0d29ya2luZ0Vycm9yOiBmdW5jdGlvbiBuZXR3b3JraW5nRXJyb3IoZXJyb3IpIHsKICAgIHJldHVybiBlcnJvci5jb2RlID09PSAnTmV0d29ya2luZ0Vycm9yJzsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB0aW1lb3V0RXJyb3I6IGZ1bmN0aW9uIHRpbWVvdXRFcnJvcihlcnJvcikgewogICAgcmV0dXJuIGVycm9yLmNvZGUgPT09ICdUaW1lb3V0RXJyb3InOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGV4cGlyZWRDcmVkZW50aWFsc0Vycm9yOiBmdW5jdGlvbiBleHBpcmVkQ3JlZGVudGlhbHNFcnJvcihlcnJvcikgewogICAgLy8gVE9ETyA6IHRoaXMgb25seSBoYW5kbGVzICpvbmUqIG9mIHRoZSBleHBpcmVkIGNyZWRlbnRpYWwgY29kZXMKICAgIHJldHVybiAoZXJyb3IuY29kZSA9PT0gJ0V4cGlyZWRUb2tlbkV4Y2VwdGlvbicpOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGNsb2NrU2tld0Vycm9yOiBmdW5jdGlvbiBjbG9ja1NrZXdFcnJvcihlcnJvcikgewogICAgc3dpdGNoIChlcnJvci5jb2RlKSB7CiAgICAgIGNhc2UgJ1JlcXVlc3RUaW1lVG9vU2tld2VkJzoKICAgICAgY2FzZSAnUmVxdWVzdEV4cGlyZWQnOgogICAgICBjYXNlICdJbnZhbGlkU2lnbmF0dXJlRXhjZXB0aW9uJzoKICAgICAgY2FzZSAnU2lnbmF0dXJlRG9lc05vdE1hdGNoJzoKICAgICAgY2FzZSAnQXV0aEZhaWx1cmUnOgogICAgICBjYXNlICdSZXF1ZXN0SW5UaGVGdXR1cmUnOgogICAgICAgIHJldHVybiB0cnVlOwogICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZ2V0U2tld0NvcnJlY3RlZERhdGU6IGZ1bmN0aW9uIGdldFNrZXdDb3JyZWN0ZWREYXRlKCkgewogICAgcmV0dXJuIG5ldyBEYXRlKERhdGUubm93KCkgKyB0aGlzLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYXBwbHlDbG9ja09mZnNldDogZnVuY3Rpb24gYXBwbHlDbG9ja09mZnNldChuZXdTZXJ2ZXJUaW1lKSB7CiAgICBpZiAobmV3U2VydmVyVGltZSkgewogICAgICB0aGlzLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCA9IG5ld1NlcnZlclRpbWUgLSBEYXRlLm5vdygpOwogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGlzQ2xvY2tTa2V3ZWQ6IGZ1bmN0aW9uIGlzQ2xvY2tTa2V3ZWQobmV3U2VydmVyVGltZSkgewogICAgaWYgKG5ld1NlcnZlclRpbWUpIHsKICAgICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuZ2V0U2tld0NvcnJlY3RlZERhdGUoKS5nZXRUaW1lKCkgLSBuZXdTZXJ2ZXJUaW1lKSA+PSAzMDAwMDsKICAgIH0KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB0aHJvdHRsZWRFcnJvcjogZnVuY3Rpb24gdGhyb3R0bGVkRXJyb3IoZXJyb3IpIHsKICAgIC8vIHRoaXMgbG9naWMgdmFyaWVzIGJldHdlZW4gc2VydmljZXMKICAgIGlmIChlcnJvci5zdGF0dXNDb2RlID09PSA0MjkpIHJldHVybiB0cnVlOwogICAgc3dpdGNoIChlcnJvci5jb2RlKSB7CiAgICAgIGNhc2UgJ1Byb3Zpc2lvbmVkVGhyb3VnaHB1dEV4Y2VlZGVkRXhjZXB0aW9uJzoKICAgICAgY2FzZSAnVGhyb3R0bGluZyc6CiAgICAgIGNhc2UgJ1Rocm90dGxpbmdFeGNlcHRpb24nOgogICAgICBjYXNlICdSZXF1ZXN0TGltaXRFeGNlZWRlZCc6CiAgICAgIGNhc2UgJ1JlcXVlc3RUaHJvdHRsZWQnOgogICAgICBjYXNlICdSZXF1ZXN0VGhyb3R0bGVkRXhjZXB0aW9uJzoKICAgICAgY2FzZSAnVG9vTWFueVJlcXVlc3RzRXhjZXB0aW9uJzoKICAgICAgY2FzZSAnVHJhbnNhY3Rpb25JblByb2dyZXNzRXhjZXB0aW9uJzogLy9keW5hbW9kYgogICAgICAgIHJldHVybiB0cnVlOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBlbmRwb2ludEZyb21UZW1wbGF0ZTogZnVuY3Rpb24gZW5kcG9pbnRGcm9tVGVtcGxhdGUoZW5kcG9pbnQpIHsKICAgIGlmICh0eXBlb2YgZW5kcG9pbnQgIT09ICdzdHJpbmcnKSByZXR1cm4gZW5kcG9pbnQ7CgogICAgdmFyIGUgPSBlbmRwb2ludDsKICAgIGUgPSBlLnJlcGxhY2UoL1x7c2VydmljZVx9L2csIHRoaXMuYXBpLmVuZHBvaW50UHJlZml4KTsKICAgIGUgPSBlLnJlcGxhY2UoL1x7cmVnaW9uXH0vZywgdGhpcy5jb25maWcucmVnaW9uKTsKICAgIGUgPSBlLnJlcGxhY2UoL1x7c2NoZW1lXH0vZywgdGhpcy5jb25maWcuc3NsRW5hYmxlZCA/ICdodHRwcycgOiAnaHR0cCcpOwogICAgcmV0dXJuIGU7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgc2V0RW5kcG9pbnQ6IGZ1bmN0aW9uIHNldEVuZHBvaW50KGVuZHBvaW50KSB7CiAgICB0aGlzLmVuZHBvaW50ID0gbmV3IEFXUy5FbmRwb2ludChlbmRwb2ludCwgdGhpcy5jb25maWcpOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIHBhZ2luYXRpb25Db25maWc6IGZ1bmN0aW9uIHBhZ2luYXRpb25Db25maWcob3BlcmF0aW9uLCB0aHJvd0V4Y2VwdGlvbikgewogICAgdmFyIHBhZ2luYXRvciA9IHRoaXMuYXBpLm9wZXJhdGlvbnNbb3BlcmF0aW9uXS5wYWdpbmF0b3I7CiAgICBpZiAoIXBhZ2luYXRvcikgewogICAgICBpZiAodGhyb3dFeGNlcHRpb24pIHsKICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcigpOwogICAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKGUsICdObyBwYWdpbmF0aW9uIGNvbmZpZ3VyYXRpb24gZm9yICcgKyBvcGVyYXRpb24pOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHJldHVybiBwYWdpbmF0b3I7CiAgfQp9KTsKCkFXUy51dGlsLnVwZGF0ZShBV1MuU2VydmljZSwgewoKICAvKioKICAgKiBBZGRzIG9uZSBtZXRob2QgZm9yIGVhY2ggb3BlcmF0aW9uIGRlc2NyaWJlZCBpbiB0aGUgYXBpIGNvbmZpZ3VyYXRpb24KICAgKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGRlZmluZU1ldGhvZHM6IGZ1bmN0aW9uIGRlZmluZU1ldGhvZHMoc3ZjKSB7CiAgICBBV1MudXRpbC5lYWNoKHN2Yy5wcm90b3R5cGUuYXBpLm9wZXJhdGlvbnMsIGZ1bmN0aW9uIGl0ZXJhdG9yKG1ldGhvZCkgewogICAgICBpZiAoc3ZjLnByb3RvdHlwZVttZXRob2RdKSByZXR1cm47CiAgICAgIHZhciBvcGVyYXRpb24gPSBzdmMucHJvdG90eXBlLmFwaS5vcGVyYXRpb25zW21ldGhvZF07CiAgICAgIGlmIChvcGVyYXRpb24uYXV0aHR5cGUgPT09ICdub25lJykgewogICAgICAgIHN2Yy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdChtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spOwogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3ZjLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKICAgICAgICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFjayk7CiAgICAgICAgfTsKICAgICAgfQogICAgfSk7CiAgfSwKCiAgLyoqCiAgICogRGVmaW5lcyBhIG5ldyBTZXJ2aWNlIGNsYXNzIHVzaW5nIGEgc2VydmljZSBpZGVudGlmaWVyIGFuZCBsaXN0IG9mIHZlcnNpb25zCiAgICogaW5jbHVkaW5nIGFuIG9wdGlvbmFsIHNldCBvZiBmZWF0dXJlcyAoZnVuY3Rpb25zKSB0byBhcHBseSB0byB0aGUgY2xhc3MKICAgKiBwcm90b3R5cGUuCiAgICoKICAgKiBAcGFyYW0gc2VydmljZUlkZW50aWZpZXIgW1N0cmluZ10gdGhlIGlkZW50aWZpZXIgZm9yIHRoZSBzZXJ2aWNlCiAgICogQHBhcmFtIHZlcnNpb25zIFtBcnJheTxTdHJpbmc+XSBhIGxpc3Qgb2YgdmVyc2lvbnMgdGhhdCB3b3JrIHdpdGggdGhpcwogICAqICAgc2VydmljZQogICAqIEBwYXJhbSBmZWF0dXJlcyBbT2JqZWN0XSBhbiBvYmplY3QgdG8gYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUKICAgKiBAcmV0dXJuIFtDbGFzczxTZXJ2aWNlPl0gdGhlIHNlcnZpY2UgY2xhc3MgZGVmaW5lZCBieSB0aGlzIGZ1bmN0aW9uLgogICAqLwogIGRlZmluZVNlcnZpY2U6IGZ1bmN0aW9uIGRlZmluZVNlcnZpY2Uoc2VydmljZUlkZW50aWZpZXIsIHZlcnNpb25zLCBmZWF0dXJlcykgewogICAgQVdTLlNlcnZpY2UuX3NlcnZpY2VNYXBbc2VydmljZUlkZW50aWZpZXJdID0gdHJ1ZTsKICAgIGlmICghQXJyYXkuaXNBcnJheSh2ZXJzaW9ucykpIHsKICAgICAgZmVhdHVyZXMgPSB2ZXJzaW9uczsKICAgICAgdmVyc2lvbnMgPSBbXTsKICAgIH0KCiAgICB2YXIgc3ZjID0gaW5oZXJpdChBV1MuU2VydmljZSwgZmVhdHVyZXMgfHwge30pOwoKICAgIGlmICh0eXBlb2Ygc2VydmljZUlkZW50aWZpZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgIEFXUy5TZXJ2aWNlLmFkZFZlcnNpb25zKHN2YywgdmVyc2lvbnMpOwoKICAgICAgdmFyIGlkZW50aWZpZXIgPSBzdmMuc2VydmljZUlkZW50aWZpZXIgfHwgc2VydmljZUlkZW50aWZpZXI7CiAgICAgIHN2Yy5zZXJ2aWNlSWRlbnRpZmllciA9IGlkZW50aWZpZXI7CiAgICB9IGVsc2UgeyAvLyBkZWZpbmVTZXJ2aWNlIGNhbGxlZCB3aXRoIGFuIEFQSQogICAgICBzdmMucHJvdG90eXBlLmFwaSA9IHNlcnZpY2VJZGVudGlmaWVyOwogICAgICBBV1MuU2VydmljZS5kZWZpbmVNZXRob2RzKHN2Yyk7CiAgICB9CiAgICBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yLmNhbGwodGhpcy5wcm90b3R5cGUpOwogICAgLy91dGlsLmNsaWVudFNpZGVNb25pdG9yaW5nIGlzIG9ubHkgYXZhaWxhYmxlIGluIG5vZGUKICAgIGlmICghdGhpcy5wcm90b3R5cGUucHVibGlzaGVyICYmIEFXUy51dGlsLmNsaWVudFNpZGVNb25pdG9yaW5nKSB7CiAgICAgIHZhciBQdWJsaXNoZXIgPSBBV1MudXRpbC5jbGllbnRTaWRlTW9uaXRvcmluZy5QdWJsaXNoZXI7CiAgICAgIHZhciBjb25maWdQcm92aWRlciA9IEFXUy51dGlsLmNsaWVudFNpZGVNb25pdG9yaW5nLmNvbmZpZ1Byb3ZpZGVyOwogICAgICB2YXIgcHVibGlzaGVyQ29uZmlnID0gY29uZmlnUHJvdmlkZXIoKTsKICAgICAgdGhpcy5wcm90b3R5cGUucHVibGlzaGVyID0gbmV3IFB1Ymxpc2hlcihwdWJsaXNoZXJDb25maWcpOwogICAgICBpZiAocHVibGlzaGVyQ29uZmlnLmVuYWJsZWQpIHsKICAgICAgICAvL2lmIGNzbSBpcyBlbmFibGVkIGluIGVudmlyb25tZW50LCBTREsgc2hvdWxkIHNlbmQgYWxsIG1ldHJpY3MKICAgICAgICBBV1MuU2VydmljZS5fY2xpZW50U2lkZU1vbml0b3JpbmcgPSB0cnVlOwogICAgICB9CiAgICB9CiAgICBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yLmNhbGwoc3ZjLnByb3RvdHlwZSk7CiAgICBBV1MuU2VydmljZS5hZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyhzdmMucHJvdG90eXBlKTsKICAgIHJldHVybiBzdmM7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgYWRkVmVyc2lvbnM6IGZ1bmN0aW9uIGFkZFZlcnNpb25zKHN2YywgdmVyc2lvbnMpIHsKICAgIGlmICghQXJyYXkuaXNBcnJheSh2ZXJzaW9ucykpIHZlcnNpb25zID0gW3ZlcnNpb25zXTsKCiAgICBzdmMuc2VydmljZXMgPSBzdmMuc2VydmljZXMgfHwge307CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnNpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChzdmMuc2VydmljZXNbdmVyc2lvbnNbaV1dID09PSB1bmRlZmluZWQpIHsKICAgICAgICBzdmMuc2VydmljZXNbdmVyc2lvbnNbaV1dID0gbnVsbDsKICAgICAgfQogICAgfQoKICAgIHN2Yy5hcGlWZXJzaW9ucyA9IE9iamVjdC5rZXlzKHN2Yy5zZXJ2aWNlcykuc29ydCgpOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGRlZmluZVNlcnZpY2VBcGk6IGZ1bmN0aW9uIGRlZmluZVNlcnZpY2VBcGkoc3VwZXJjbGFzcywgdmVyc2lvbiwgYXBpQ29uZmlnKSB7CiAgICB2YXIgc3ZjID0gaW5oZXJpdChzdXBlcmNsYXNzLCB7CiAgICAgIHNlcnZpY2VJZGVudGlmaWVyOiBzdXBlcmNsYXNzLnNlcnZpY2VJZGVudGlmaWVyCiAgICB9KTsKCiAgICBmdW5jdGlvbiBzZXRBcGkoYXBpKSB7CiAgICAgIGlmIChhcGkuaXNBcGkpIHsKICAgICAgICBzdmMucHJvdG90eXBlLmFwaSA9IGFwaTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdmMucHJvdG90eXBlLmFwaSA9IG5ldyBBcGkoYXBpKTsKICAgICAgfQogICAgfQoKICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHsKICAgICAgaWYgKGFwaUNvbmZpZykgewogICAgICAgIHNldEFwaShhcGlDb25maWcpOwogICAgICB9IGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICBzZXRBcGkoQVdTLmFwaUxvYWRlcihzdXBlcmNsYXNzLnNlcnZpY2VJZGVudGlmaWVyLCB2ZXJzaW9uKSk7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICB0aHJvdyBBV1MudXRpbC5lcnJvcihlcnIsIHsKICAgICAgICAgICAgbWVzc2FnZTogJ0NvdWxkIG5vdCBmaW5kIEFQSSBjb25maWd1cmF0aW9uICcgKwogICAgICAgICAgICAgIHN1cGVyY2xhc3Muc2VydmljZUlkZW50aWZpZXIgKyAnLScgKyB2ZXJzaW9uCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc3VwZXJjbGFzcy5zZXJ2aWNlcywgdmVyc2lvbikpIHsKICAgICAgICBzdXBlcmNsYXNzLmFwaVZlcnNpb25zID0gc3VwZXJjbGFzcy5hcGlWZXJzaW9ucy5jb25jYXQodmVyc2lvbikuc29ydCgpOwogICAgICB9CiAgICAgIHN1cGVyY2xhc3Muc2VydmljZXNbdmVyc2lvbl0gPSBzdmM7CiAgICB9IGVsc2UgewogICAgICBzZXRBcGkodmVyc2lvbik7CiAgICB9CgogICAgQVdTLlNlcnZpY2UuZGVmaW5lTWV0aG9kcyhzdmMpOwogICAgcmV0dXJuIHN2YzsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBoYXNTZXJ2aWNlOiBmdW5jdGlvbihpZGVudGlmaWVyKSB7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEFXUy5TZXJ2aWNlLl9zZXJ2aWNlTWFwLCBpZGVudGlmaWVyKTsKICB9LAoKICAvKioKICAgKiBAcGFyYW0gYXR0YWNoT24gYXR0YWNoIGRlZmF1bHQgbW9uaXRvcmluZyBsaXN0ZW5lcnMgdG8gb2JqZWN0CiAgICoKICAgKiBFYWNoIG1vbml0b3JpbmcgZXZlbnQgc2hvdWxkIGJlIGVtaXR0ZWQgZnJvbSBzZXJ2aWNlIGNsaWVudCB0byBzZXJ2aWNlIGNvbnN0cnVjdG9yIHByb3RvdHlwZSBhbmQgdGhlbgogICAqIHRvIGdsb2JhbCBzZXJ2aWNlIHByb3RvdHlwZSBsaWtlIGJ1YmJsaW5nIHVwLiBUaGVzZSBkZWZhdWx0IG1vbml0b3JpbmcgZXZlbnRzIGxpc3RlbmVyIHdpbGwgdHJhbnNmZXIKICAgKiB0aGUgbW9uaXRvcmluZyBldmVudHMgdG8gdGhlIHVwcGVyIGxheWVyLgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGFkZERlZmF1bHRNb25pdG9yaW5nTGlzdGVuZXJzOiBmdW5jdGlvbiBhZGREZWZhdWx0TW9uaXRvcmluZ0xpc3RlbmVycyhhdHRhY2hPbikgewogICAgYXR0YWNoT24uYWRkTmFtZWRMaXN0ZW5lcignTU9OSVRPUl9FVkVOVFNfQlVCQkxFJywgJ2FwaUNhbGxBdHRlbXB0JywgZnVuY3Rpb24gRVZFTlRTX0JVQkJMRShldmVudCkgewogICAgICB2YXIgYmFzZUNsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGF0dGFjaE9uKTsKICAgICAgaWYgKGJhc2VDbGFzcy5fZXZlbnRzKSBiYXNlQ2xhc3MuZW1pdCgnYXBpQ2FsbEF0dGVtcHQnLCBbZXZlbnRdKTsKICAgIH0pOwogICAgYXR0YWNoT24uYWRkTmFtZWRMaXN0ZW5lcignQ0FMTF9FVkVOVFNfQlVCQkxFJywgJ2FwaUNhbGwnLCBmdW5jdGlvbiBDQUxMX0VWRU5UU19CVUJCTEUoZXZlbnQpIHsKICAgICAgdmFyIGJhc2VDbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhdHRhY2hPbik7CiAgICAgIGlmIChiYXNlQ2xhc3MuX2V2ZW50cykgYmFzZUNsYXNzLmVtaXQoJ2FwaUNhbGwnLCBbZXZlbnRdKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIF9zZXJ2aWNlTWFwOiB7fQp9KTsKCkFXUy51dGlsLm1peGluKEFXUy5TZXJ2aWNlLCBBV1MuU2VxdWVudGlhbEV4ZWN1dG9yKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gQVdTLlNlcnZpY2U7Cgp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCn0seyIuL2NvcmUiOjE4LCIuL21vZGVsL2FwaSI6MzgsIi4vcmVnaW9uX2NvbmZpZyI6NTMsIl9wcm9jZXNzIjo4Nn1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKCkFXUy51dGlsLnVwZGF0ZShBV1MuQ29nbml0b0lkZW50aXR5LnByb3RvdHlwZSwgewogIGdldE9wZW5JZFRva2VuOiBmdW5jdGlvbiBnZXRPcGVuSWRUb2tlbihwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCgnZ2V0T3BlbklkVG9rZW4nLCBwYXJhbXMsIGNhbGxiYWNrKTsKICB9LAoKICBnZXRJZDogZnVuY3Rpb24gZ2V0SWQocGFyYW1zLCBjYWxsYmFjaykgewogICAgcmV0dXJuIHRoaXMubWFrZVVuYXV0aGVudGljYXRlZFJlcXVlc3QoJ2dldElkJywgcGFyYW1zLCBjYWxsYmFjayk7CiAgfSwKCiAgZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eTogZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eShwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCgnZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eScsIHBhcmFtcywgY2FsbGJhY2spOwogIH0KfSk7Cgp9LHsiLi4vY29yZSI6MTh9XSw2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7KGZ1bmN0aW9uICgpewp2YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpOwp2YXIgcmVnaW9uQ29uZmlnID0gcmVxdWlyZSgnLi4vcmVnaW9uX2NvbmZpZycpOwp2YXIgRU5WX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRUQgPSAnQVdTX1NUU19SRUdJT05BTF9FTkRQT0lOVFMnOwp2YXIgQ09ORklHX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRUQgPSAnc3RzX3JlZ2lvbmFsX2VuZHBvaW50cyc7CgpBV1MudXRpbC51cGRhdGUoQVdTLlNUUy5wcm90b3R5cGUsIHsKICAvKioKICAgKiBAb3ZlcmxvYWQgY3JlZGVudGlhbHNGcm9tKGRhdGEsIGNyZWRlbnRpYWxzID0gbnVsbCkKICAgKiAgIENyZWF0ZXMgYSBjcmVkZW50aWFscyBvYmplY3QgZnJvbSBTVFMgcmVzcG9uc2UgZGF0YSBjb250YWluaW5nCiAgICogICBjcmVkZW50aWFscyBpbmZvcm1hdGlvbi4gVXNlZnVsIGZvciBxdWlja2x5IHNldHRpbmcgQVdTIGNyZWRlbnRpYWxzLgogICAqCiAgICogICBAbm90ZSBUaGlzIGlzIGEgbG93LWxldmVsIHV0aWxpdHkgZnVuY3Rpb24uIElmIHlvdSB3YW50IHRvIGxvYWQgdGVtcG9yYXJ5CiAgICogICAgIGNyZWRlbnRpYWxzIGludG8geW91ciBwcm9jZXNzIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIHRvIEFXUyByZXNvdXJjZXMsCiAgICogICAgIHlvdSBzaG91bGQgdXNlIHtBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHN9IGluc3RlYWQuCiAgICogICBAcGFyYW0gZGF0YSBbbWFwXSBkYXRhIHJldHJpZXZlZCBmcm9tIGEgY2FsbCB0byB7Z2V0RmVkZXJhdGVkVG9rZW59LAogICAqICAgICB7Z2V0U2Vzc2lvblRva2VufSwge2Fzc3VtZVJvbGV9LCBvciB7YXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eX0uCiAgICogICBAcGFyYW0gY3JlZGVudGlhbHMgW0FXUy5DcmVkZW50aWFsc10gYW4gb3B0aW9uYWwgY3JlZGVudGlhbHMgb2JqZWN0IHRvCiAgICogICAgIGZpbGwgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvYmplY3QuIFVzZWZ1bCB3aGVuIG1vZGlmeWluZyBhbgogICAqICAgICBleGlzdGluZyBjcmVkZW50aWFscyBvYmplY3QgZnJvbSBhIHJlZnJlc2ggY2FsbC4KICAgKiAgIEByZXR1cm4gW0FXUy5UZW1wb3JhcnlDcmVkZW50aWFsc10gdGhlIHNldCBvZiB0ZW1wb3JhcnkgY3JlZGVudGlhbHMKICAgKiAgICAgbG9hZGVkIGZyb20gYSByYXcgU1RTIG9wZXJhdGlvbiByZXNwb25zZS4KICAgKiAgIEBleGFtcGxlIFVzaW5nIGNyZWRlbnRpYWxzRnJvbSB0byBsb2FkIGdsb2JhbCBBV1MgY3JlZGVudGlhbHMKICAgKiAgICAgdmFyIHN0cyA9IG5ldyBBV1MuU1RTKCk7CiAgICogICAgIHN0cy5nZXRTZXNzaW9uVG9rZW4oZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAqICAgICAgIGlmIChlcnIpIGNvbnNvbGUubG9nKCJFcnJvciBnZXR0aW5nIGNyZWRlbnRpYWxzIik7CiAgICogICAgICAgZWxzZSB7CiAgICogICAgICAgICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gc3RzLmNyZWRlbnRpYWxzRnJvbShkYXRhKTsKICAgKiAgICAgICB9CiAgICogICAgIH0pOwogICAqICAgQHNlZSBBV1MuVGVtcG9yYXJ5Q3JlZGVudGlhbHMKICAgKi8KICBjcmVkZW50aWFsc0Zyb206IGZ1bmN0aW9uIGNyZWRlbnRpYWxzRnJvbShkYXRhLCBjcmVkZW50aWFscykgewogICAgaWYgKCFkYXRhKSByZXR1cm4gbnVsbDsKICAgIGlmICghY3JlZGVudGlhbHMpIGNyZWRlbnRpYWxzID0gbmV3IEFXUy5UZW1wb3JhcnlDcmVkZW50aWFscygpOwogICAgY3JlZGVudGlhbHMuZXhwaXJlZCA9IGZhbHNlOwogICAgY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQgPSBkYXRhLkNyZWRlbnRpYWxzLkFjY2Vzc0tleUlkOwogICAgY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5ID0gZGF0YS5DcmVkZW50aWFscy5TZWNyZXRBY2Nlc3NLZXk7CiAgICBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4gPSBkYXRhLkNyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbjsKICAgIGNyZWRlbnRpYWxzLmV4cGlyZVRpbWUgPSBkYXRhLkNyZWRlbnRpYWxzLkV4cGlyYXRpb247CiAgICByZXR1cm4gY3JlZGVudGlhbHM7CiAgfSwKCiAgYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eTogZnVuY3Rpb24gYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eShwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICByZXR1cm4gdGhpcy5tYWtlVW5hdXRoZW50aWNhdGVkUmVxdWVzdCgnYXNzdW1lUm9sZVdpdGhXZWJJZGVudGl0eScsIHBhcmFtcywgY2FsbGJhY2spOwogIH0sCgogIGFzc3VtZVJvbGVXaXRoU0FNTDogZnVuY3Rpb24gYXNzdW1lUm9sZVdpdGhTQU1MKHBhcmFtcywgY2FsbGJhY2spIHsKICAgIHJldHVybiB0aGlzLm1ha2VVbmF1dGhlbnRpY2F0ZWRSZXF1ZXN0KCdhc3N1bWVSb2xlV2l0aFNBTUwnLCBwYXJhbXMsIGNhbGxiYWNrKTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB2YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlKGNvbmZpZ1ZhbHVlLCBlcnJvck9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2YgY29uZmlnVmFsdWUgPT09ICdzdHJpbmcnICYmIFsnbGVnYWN5JywgJ3JlZ2lvbmFsJ10uaW5kZXhPZihjb25maWdWYWx1ZS50b0xvd2VyQ2FzZSgpKSA+PSAwKSB7CiAgICAgIHRoaXMuY29uZmlnLnN0c1JlZ2lvbmFsRW5kcG9pbnRzID0gY29uZmlnVmFsdWUudG9Mb3dlckNhc2UoKTsKICAgICAgcmV0dXJuOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksIGVycm9yT3B0aW9ucyk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgdmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWc6IGZ1bmN0aW9uIHZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnKCkgewogICAgLy92YWxpZGF0ZSBjb25maWcgdmFsdWUKICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZzsKICAgIGlmIChjb25maWcuc3RzUmVnaW9uYWxFbmRwb2ludHMpIHsKICAgICAgdGhpcy52YWxpZGF0ZVJlZ2lvbmFsRW5kcG9pbnRzRmxhZ1ZhbHVlKGNvbmZpZy5zdHNSZWdpb25hbEVuZHBvaW50cywgewogICAgICAgIGNvZGU6ICdJbnZhbGlkQ29uZmlndXJhdGlvbicsCiAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQgInN0c1JlZ2lvbmFsRW5kcG9pbnRzIiBjb25maWd1cmF0aW9uLiBFeHBlY3QgImxlZ2FjeSIgJyArCiAgICAgICAgJyBvciAicmVnaW9uYWwiLiBHb3QgIicgKyBjb25maWcuc3RzUmVnaW9uYWxFbmRwb2ludHMgKyAnIi4nCiAgICAgIH0pOwogICAgfQogICAgaWYgKCFBV1MudXRpbC5pc05vZGUoKSkgcmV0dXJuOwogICAgLy92YWxpZGF0ZSBlbnZpcm9ubWVudGFsIHZhcmlhYmxlCiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb2Nlc3MuZW52LCBFTlZfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRCkpIHsKICAgICAgdmFyIGVudkZsYWcgPSBwcm9jZXNzLmVudltFTlZfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRF07CiAgICAgIHRoaXMudmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWdWYWx1ZShlbnZGbGFnLCB7CiAgICAgICAgY29kZTogJ0ludmFsaWRFbnZpcm9ubWVudGFsVmFyaWFibGUnLAogICAgICAgIG1lc3NhZ2U6ICdpbnZhbGlkICcgKyBFTlZfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRCArICcgZW52aXJvbm1lbnRhbCB2YXJpYWJsZS4gRXhwZWN0ICJsZWdhY3kiICcgKwogICAgICAgICcgb3IgInJlZ2lvbmFsIi4gR290ICInICsgcHJvY2Vzcy5lbnZbRU5WX1JFR0lPTkFMX0VORFBPSU5UX0VOQUJMRURdICsgJyIuJwogICAgICB9KTsKICAgIH0KICAgIC8vdmFsaWRhdGUgc2hhcmVkIGNvbmZpZyBmaWxlCiAgICB2YXIgcHJvZmlsZSA9IHt9OwogICAgdHJ5IHsKICAgICAgdmFyIHByb2ZpbGVzID0gQVdTLnV0aWwuZ2V0UHJvZmlsZXNGcm9tU2hhcmVkQ29uZmlnKEFXUy51dGlsLmluaUxvYWRlcik7CiAgICAgIHByb2ZpbGUgPSBwcm9maWxlc1twcm9jZXNzLmVudi5BV1NfUFJPRklMRSB8fCBBV1MudXRpbC5kZWZhdWx0UHJvZmlsZV07CiAgICB9IGNhdGNoIChlKSB7fTsKICAgIGlmIChwcm9maWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwcm9maWxlLCBDT05GSUdfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRCkpIHsKICAgICAgdmFyIGZpbGVGbGFnID0gcHJvZmlsZVtDT05GSUdfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRF07CiAgICAgIHRoaXMudmFsaWRhdGVSZWdpb25hbEVuZHBvaW50c0ZsYWdWYWx1ZShmaWxlRmxhZywgewogICAgICAgIGNvZGU6ICdJbnZhbGlkQ29uZmlndXJhdGlvbicsCiAgICAgICAgbWVzc2FnZTogJ2ludmFsaWQgJytDT05GSUdfUkVHSU9OQUxfRU5EUE9JTlRfRU5BQkxFRCsnIHByb2ZpbGUgY29uZmlnLiBFeHBlY3QgImxlZ2FjeSIgJyArCiAgICAgICAgJyBvciAicmVnaW9uYWwiLiBHb3QgIicgKyBwcm9maWxlW0NPTkZJR19SRUdJT05BTF9FTkRQT0lOVF9FTkFCTEVEXSArICciLicKICAgICAgfSk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgb3B0SW5SZWdpb25hbEVuZHBvaW50OiBmdW5jdGlvbiBvcHRJblJlZ2lvbmFsRW5kcG9pbnQoKSB7CiAgICB0aGlzLnZhbGlkYXRlUmVnaW9uYWxFbmRwb2ludHNGbGFnKCk7CiAgICB2YXIgY29uZmlnID0gdGhpcy5jb25maWc7CiAgICBpZiAoY29uZmlnLnN0c1JlZ2lvbmFsRW5kcG9pbnRzID09PSAncmVnaW9uYWwnKSB7CiAgICAgIHJlZ2lvbkNvbmZpZyh0aGlzKTsKICAgICAgaWYgKCF0aGlzLmlzR2xvYmFsRW5kcG9pbnQpIHJldHVybjsKICAgICAgdGhpcy5pc0dsb2JhbEVuZHBvaW50ID0gZmFsc2U7CiAgICAgIC8vY2xpZW50IHdpbGwgdGhyb3cgaWYgcmVnaW9uIGlzIG5vdCBzdXBwbGllZDsgcmVxdWVzdCB3aWxsIGJlIHNpZ25lZCB3aXRoIHNwZWNpZmllZCByZWdpb24KICAgICAgaWYgKCFjb25maWcucmVnaW9uKSB7CiAgICAgICAgdGhyb3cgQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCksCiAgICAgICAgICB7Y29kZTogJ0NvbmZpZ0Vycm9yJywgbWVzc2FnZTogJ01pc3NpbmcgcmVnaW9uIGluIGNvbmZpZyd9KTsKICAgICAgfQogICAgICB2YXIgaW5zZXJ0UG9pbnQgPSBjb25maWcuZW5kcG9pbnQuaW5kZXhPZignLmFtYXpvbmF3cy5jb20nKTsKICAgICAgY29uZmlnLmVuZHBvaW50ID0gY29uZmlnLmVuZHBvaW50LnN1YnN0cmluZygwLCBpbnNlcnRQb2ludCkgKwogICAgICAgICcuJyArIGNvbmZpZy5yZWdpb24gKyBjb25maWcuZW5kcG9pbnQuc3Vic3RyaW5nKGluc2VydFBvaW50KTsKICAgIH0KICB9LAoKICB2YWxpZGF0ZVNlcnZpY2U6IGZ1bmN0aW9uIHZhbGlkYXRlU2VydmljZSgpIHsKICAgIHRoaXMub3B0SW5SZWdpb25hbEVuZHBvaW50KCk7CiAgfQoKfSk7Cgp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCn0seyIuLi9jb3JlIjoxOCwiLi4vcmVnaW9uX2NvbmZpZyI6NTMsIl9wcm9jZXNzIjo4Nn1dLDYyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKdmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KdmFyIGV4cGlyZXNIZWFkZXIgPSAncHJlc2lnbmVkLWV4cGlyZXMnOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KZnVuY3Rpb24gc2lnbmVkVXJsQnVpbGRlcihyZXF1ZXN0KSB7CiAgdmFyIGV4cGlyZXMgPSByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl07CiAgdmFyIHNpZ25lckNsYXNzID0gcmVxdWVzdC5zZXJ2aWNlLmdldFNpZ25lckNsYXNzKHJlcXVlc3QpOwoKICBkZWxldGUgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzWydVc2VyLUFnZW50J107CiAgZGVsZXRlIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1snWC1BbXotVXNlci1BZ2VudCddOwoKICBpZiAoc2lnbmVyQ2xhc3MgPT09IEFXUy5TaWduZXJzLlY0KSB7CiAgICBpZiAoZXhwaXJlcyA+IDYwNDgwMCkgeyAvLyBvbmUgd2VlayBleHBpcnkgaXMgaW52YWxpZAogICAgICB2YXIgbWVzc2FnZSA9ICdQcmVzaWduaW5nIGRvZXMgbm90IHN1cHBvcnQgZXhwaXJ5IHRpbWUgZ3JlYXRlciAnICsKICAgICAgICAgICAgICAgICAgICAndGhhbiBhIHdlZWsgd2l0aCBTaWdWNCBzaWduaW5nLic7CiAgICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgICAgY29kZTogJ0ludmFsaWRFeHBpcnlUaW1lJywgbWVzc2FnZTogbWVzc2FnZSwgcmV0cnlhYmxlOiBmYWxzZQogICAgICB9KTsKICAgIH0KICAgIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1tleHBpcmVzSGVhZGVyXSA9IGV4cGlyZXM7CiAgfSBlbHNlIGlmIChzaWduZXJDbGFzcyA9PT0gQVdTLlNpZ25lcnMuUzMpIHsKICAgIHZhciBub3cgPSByZXF1ZXN0LnNlcnZpY2UgPyByZXF1ZXN0LnNlcnZpY2UuZ2V0U2tld0NvcnJlY3RlZERhdGUoKSA6IEFXUy51dGlsLmRhdGUuZ2V0RGF0ZSgpOwogICAgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzW2V4cGlyZXNIZWFkZXJdID0gcGFyc2VJbnQoCiAgICAgIEFXUy51dGlsLmRhdGUudW5peFRpbWVzdGFtcChub3cpICsgZXhwaXJlcywgMTApLnRvU3RyaW5nKCk7CiAgfSBlbHNlIHsKICAgIHRocm93IEFXUy51dGlsLmVycm9yKG5ldyBFcnJvcigpLCB7CiAgICAgIG1lc3NhZ2U6ICdQcmVzaWduaW5nIG9ubHkgc3VwcG9ydHMgUzMgb3IgU2lnVjQgc2lnbmluZy4nLAogICAgICBjb2RlOiAnVW5zdXBwb3J0ZWRTaWduZXInLCByZXRyeWFibGU6IGZhbHNlCiAgICB9KTsKICB9Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIHNpZ25lZFVybFNpZ25lcihyZXF1ZXN0KSB7CiAgdmFyIGVuZHBvaW50ID0gcmVxdWVzdC5odHRwUmVxdWVzdC5lbmRwb2ludDsKICB2YXIgcGFyc2VkVXJsID0gQVdTLnV0aWwudXJsUGFyc2UocmVxdWVzdC5odHRwUmVxdWVzdC5wYXRoKTsKICB2YXIgcXVlcnlQYXJhbXMgPSB7fTsKCiAgaWYgKHBhcnNlZFVybC5zZWFyY2gpIHsKICAgIHF1ZXJ5UGFyYW1zID0gQVdTLnV0aWwucXVlcnlTdHJpbmdQYXJzZShwYXJzZWRVcmwuc2VhcmNoLnN1YnN0cigxKSk7CiAgfQoKICB2YXIgYXV0aCA9IHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddLnNwbGl0KCcgJyk7CiAgaWYgKGF1dGhbMF0gPT09ICdBV1MnKSB7CiAgICBhdXRoID0gYXV0aFsxXS5zcGxpdCgnOicpOwogICAgcXVlcnlQYXJhbXNbJ0FXU0FjY2Vzc0tleUlkJ10gPSBhdXRoWzBdOwogICAgcXVlcnlQYXJhbXNbJ1NpZ25hdHVyZSddID0gYXV0aFsxXTsKCiAgICBBV1MudXRpbC5lYWNoKHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVycywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGtleSA9PT0gZXhwaXJlc0hlYWRlcikga2V5ID0gJ0V4cGlyZXMnOwogICAgICBpZiAoa2V5LmluZGV4T2YoJ3gtYW16LW1ldGEtJykgPT09IDApIHsKICAgICAgICAvLyBEZWxldGUgZXhpc3RpbmcsIHBvdGVudGlhbGx5IG5vdCBub3JtYWxpemVkIGtleQogICAgICAgIGRlbGV0ZSBxdWVyeVBhcmFtc1trZXldOwogICAgICAgIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpOwogICAgICB9CiAgICAgIHF1ZXJ5UGFyYW1zW2tleV0gPSB2YWx1ZTsKICAgIH0pOwogICAgZGVsZXRlIHJlcXVlc3QuaHR0cFJlcXVlc3QuaGVhZGVyc1tleHBpcmVzSGVhZGVyXTsKICAgIGRlbGV0ZSBxdWVyeVBhcmFtc1snQXV0aG9yaXphdGlvbiddOwogICAgZGVsZXRlIHF1ZXJ5UGFyYW1zWydIb3N0J107CiAgfSBlbHNlIGlmIChhdXRoWzBdID09PSAnQVdTNC1ITUFDLVNIQTI1NicpIHsgLy8gU2lnVjQgc2lnbmluZwogICAgYXV0aC5zaGlmdCgpOwogICAgdmFyIHJlc3QgPSBhdXRoLmpvaW4oJyAnKTsKICAgIHZhciBzaWduYXR1cmUgPSByZXN0Lm1hdGNoKC9TaWduYXR1cmU9KC4qPykoPzosfFxzfFxyP1xufCQpLylbMV07CiAgICBxdWVyeVBhcmFtc1snWC1BbXotU2lnbmF0dXJlJ10gPSBzaWduYXR1cmU7CiAgICBkZWxldGUgcXVlcnlQYXJhbXNbJ0V4cGlyZXMnXTsKICB9CgogIC8vIGJ1aWxkIFVSTAogIGVuZHBvaW50LnBhdGhuYW1lID0gcGFyc2VkVXJsLnBhdGhuYW1lOwogIGVuZHBvaW50LnNlYXJjaCA9IEFXUy51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcocXVlcnlQYXJhbXMpOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwpBV1MuU2lnbmVycy5QcmVzaWduID0gaW5oZXJpdCh7CiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgc2lnbjogZnVuY3Rpb24gc2lnbihyZXF1ZXN0LCBleHBpcmVUaW1lLCBjYWxsYmFjaykgewogICAgcmVxdWVzdC5odHRwUmVxdWVzdC5oZWFkZXJzW2V4cGlyZXNIZWFkZXJdID0gZXhwaXJlVGltZSB8fCAzNjAwOwogICAgcmVxdWVzdC5vbignYnVpbGQnLCBzaWduZWRVcmxCdWlsZGVyKTsKICAgIHJlcXVlc3Qub24oJ3NpZ24nLCBzaWduZWRVcmxTaWduZXIpOwogICAgcmVxdWVzdC5yZW1vdmVMaXN0ZW5lcignYWZ0ZXJCdWlsZCcsCiAgICAgIEFXUy5FdmVudExpc3RlbmVycy5Db3JlLlNFVF9DT05URU5UX0xFTkdUSCk7CiAgICByZXF1ZXN0LnJlbW92ZUxpc3RlbmVyKCdhZnRlckJ1aWxkJywKICAgICAgQVdTLkV2ZW50TGlzdGVuZXJzLkNvcmUuQ09NUFVURV9TSEEyNTYpOwoKICAgIHJlcXVlc3QuZW1pdCgnYmVmb3JlUHJlc2lnbicsIFtyZXF1ZXN0XSk7CgogICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgIHJlcXVlc3QuYnVpbGQoZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKHRoaXMucmVzcG9uc2UuZXJyb3IpIGNhbGxiYWNrKHRoaXMucmVzcG9uc2UuZXJyb3IpOwogICAgICAgIGVsc2UgewogICAgICAgICAgY2FsbGJhY2sobnVsbCwgQVdTLnV0aWwudXJsRm9ybWF0KHJlcXVlc3QuaHR0cFJlcXVlc3QuZW5kcG9pbnQpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgcmVxdWVzdC5idWlsZCgpOwogICAgICBpZiAocmVxdWVzdC5yZXNwb25zZS5lcnJvcikgdGhyb3cgcmVxdWVzdC5yZXNwb25zZS5lcnJvcjsKICAgICAgcmV0dXJuIEFXUy51dGlsLnVybEZvcm1hdChyZXF1ZXN0Lmh0dHBSZXF1ZXN0LmVuZHBvaW50KTsKICAgIH0KICB9Cn0pOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBV1MuU2lnbmVycy5QcmVzaWduOwoKfSx7Ii4uL2NvcmUiOjE4fV0sNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgQVdTID0gcmVxdWlyZSgnLi4vY29yZScpOwoKdmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KQVdTLlNpZ25lcnMuUmVxdWVzdFNpZ25lciA9IGluaGVyaXQoewogIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiBSZXF1ZXN0U2lnbmVyKHJlcXVlc3QpIHsKICAgIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7CiAgfSwKCiAgc2V0U2VydmljZUNsaWVudElkOiBmdW5jdGlvbiBzZXRTZXJ2aWNlQ2xpZW50SWQoaWQpIHsKICAgIHRoaXMuc2VydmljZUNsaWVudElkID0gaWQ7CiAgfSwKCiAgZ2V0U2VydmljZUNsaWVudElkOiBmdW5jdGlvbiBnZXRTZXJ2aWNlQ2xpZW50SWQoKSB7CiAgICByZXR1cm4gdGhpcy5zZXJ2aWNlQ2xpZW50SWQ7CiAgfQp9KTsKCkFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uIGdldFZlcnNpb24odmVyc2lvbikgewogIHN3aXRjaCAodmVyc2lvbikgewogICAgY2FzZSAndjInOiByZXR1cm4gQVdTLlNpZ25lcnMuVjI7CiAgICBjYXNlICd2Myc6IHJldHVybiBBV1MuU2lnbmVycy5WMzsKICAgIGNhc2UgJ3MzdjQnOiByZXR1cm4gQVdTLlNpZ25lcnMuVjQ7CiAgICBjYXNlICd2NCc6IHJldHVybiBBV1MuU2lnbmVycy5WNDsKICAgIGNhc2UgJ3MzJzogcmV0dXJuIEFXUy5TaWduZXJzLlMzOwogICAgY2FzZSAndjNodHRwcyc6IHJldHVybiBBV1MuU2lnbmVycy5WM0h0dHBzOwogIH0KICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc2lnbmluZyB2ZXJzaW9uICcgKyB2ZXJzaW9uKTsKfTsKCnJlcXVpcmUoJy4vdjInKTsKcmVxdWlyZSgnLi92MycpOwpyZXF1aXJlKCcuL3YzaHR0cHMnKTsKcmVxdWlyZSgnLi92NCcpOwpyZXF1aXJlKCcuL3MzJyk7CnJlcXVpcmUoJy4vcHJlc2lnbicpOwoKfSx7Ii4uL2NvcmUiOjE4LCIuL3ByZXNpZ24iOjYyLCIuL3MzIjo2NCwiLi92MiI6NjUsIi4vdjMiOjY2LCIuL3YzaHR0cHMiOjY3LCIuL3Y0Ijo2OH1dLDY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKdmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KQVdTLlNpZ25lcnMuUzMgPSBpbmhlcml0KEFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIsIHsKICAvKioKICAgKiBXaGVuIGJ1aWxkaW5nIHRoZSBzdHJpbmdUb1NpZ24sIHRoZXNlIHN1YiByZXNvdXJjZSBwYXJhbXMgc2hvdWxkIGJlCiAgICogcGFydCBvZiB0aGUgY2Fub25pY2FsIHJlc291cmNlIHN0cmluZyB3aXRoIHRoZWlyIE5PTi1kZWNvZGVkIHZhbHVlcwogICAqLwogIHN1YlJlc291cmNlczogewogICAgJ2FjbCc6IDEsCiAgICAnYWNjZWxlcmF0ZSc6IDEsCiAgICAnYW5hbHl0aWNzJzogMSwKICAgICdjb3JzJzogMSwKICAgICdsaWZlY3ljbGUnOiAxLAogICAgJ2RlbGV0ZSc6IDEsCiAgICAnaW52ZW50b3J5JzogMSwKICAgICdsb2NhdGlvbic6IDEsCiAgICAnbG9nZ2luZyc6IDEsCiAgICAnbWV0cmljcyc6IDEsCiAgICAnbm90aWZpY2F0aW9uJzogMSwKICAgICdwYXJ0TnVtYmVyJzogMSwKICAgICdwb2xpY3knOiAxLAogICAgJ3JlcXVlc3RQYXltZW50JzogMSwKICAgICdyZXBsaWNhdGlvbic6IDEsCiAgICAncmVzdG9yZSc6IDEsCiAgICAndGFnZ2luZyc6IDEsCiAgICAndG9ycmVudCc6IDEsCiAgICAndXBsb2FkSWQnOiAxLAogICAgJ3VwbG9hZHMnOiAxLAogICAgJ3ZlcnNpb25JZCc6IDEsCiAgICAndmVyc2lvbmluZyc6IDEsCiAgICAndmVyc2lvbnMnOiAxLAogICAgJ3dlYnNpdGUnOiAxCiAgfSwKCiAgLy8gd2hlbiBidWlsZGluZyB0aGUgc3RyaW5nVG9TaWduLCB0aGVzZSBxdWVyeXN0cmluZyBwYXJhbXMgc2hvdWxkIGJlCiAgLy8gcGFydCBvZiB0aGUgY2Fub25pY2FsIHJlc291cmNlIHN0cmluZyB3aXRoIHRoZWlyIE5PTi1lbmNvZGVkIHZhbHVlcwogIHJlc3BvbnNlSGVhZGVyczogewogICAgJ3Jlc3BvbnNlLWNvbnRlbnQtdHlwZSc6IDEsCiAgICAncmVzcG9uc2UtY29udGVudC1sYW5ndWFnZSc6IDEsCiAgICAncmVzcG9uc2UtZXhwaXJlcyc6IDEsCiAgICAncmVzcG9uc2UtY2FjaGUtY29udHJvbCc6IDEsCiAgICAncmVzcG9uc2UtY29udGVudC1kaXNwb3NpdGlvbic6IDEsCiAgICAncmVzcG9uc2UtY29udGVudC1lbmNvZGluZyc6IDEKICB9LAoKICBhZGRBdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhZGRBdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRlKSB7CiAgICBpZiAoIXRoaXMucmVxdWVzdC5oZWFkZXJzWydwcmVzaWduZWQtZXhwaXJlcyddKSB7CiAgICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydYLUFtei1EYXRlJ10gPSBBV1MudXRpbC5kYXRlLnJmYzgyMihkYXRlKTsKICAgIH0KCiAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7CiAgICAgIC8vIHByZXNpZ25lZCBVUkxzIHJlcXVpcmUgdGhpcyBoZWFkZXIgdG8gYmUgbG93ZXJjYXNlZAogICAgICB0aGlzLnJlcXVlc3QuaGVhZGVyc1sneC1hbXotc2VjdXJpdHktdG9rZW4nXSA9IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbjsKICAgIH0KCiAgICB2YXIgc2lnbmF0dXJlID0gdGhpcy5zaWduKGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgdGhpcy5zdHJpbmdUb1NpZ24oKSk7CiAgICB2YXIgYXV0aCA9ICdBV1MgJyArIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJzonICsgc2lnbmF0dXJlOwoKICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBhdXRoOwogIH0sCgogIHN0cmluZ1RvU2lnbjogZnVuY3Rpb24gc3RyaW5nVG9TaWduKCkgewogICAgdmFyIHIgPSB0aGlzLnJlcXVlc3Q7CgogICAgdmFyIHBhcnRzID0gW107CiAgICBwYXJ0cy5wdXNoKHIubWV0aG9kKTsKICAgIHBhcnRzLnB1c2goci5oZWFkZXJzWydDb250ZW50LU1ENSddIHx8ICcnKTsKICAgIHBhcnRzLnB1c2goci5oZWFkZXJzWydDb250ZW50LVR5cGUnXSB8fCAnJyk7CgogICAgLy8gVGhpcyBpcyB0aGUgIkRhdGUiIGhlYWRlciwgYnV0IHdlIHVzZSBYLUFtei1EYXRlLgogICAgLy8gVGhlIFMzIHNpZ25pbmcgbWVjaGFuaXNtIHJlcXVpcmVzIHVzIHRvIHBhc3MgYW4gZW1wdHkKICAgIC8vIHN0cmluZyBmb3IgdGhpcyBEYXRlIGhlYWRlciByZWdhcmRsZXNzLgogICAgcGFydHMucHVzaChyLmhlYWRlcnNbJ3ByZXNpZ25lZC1leHBpcmVzJ10gfHwgJycpOwoKICAgIHZhciBoZWFkZXJzID0gdGhpcy5jYW5vbmljYWxpemVkQW16SGVhZGVycygpOwogICAgaWYgKGhlYWRlcnMpIHBhcnRzLnB1c2goaGVhZGVycyk7CiAgICBwYXJ0cy5wdXNoKHRoaXMuY2Fub25pY2FsaXplZFJlc291cmNlKCkpOwoKICAgIHJldHVybiBwYXJ0cy5qb2luKCdcbicpOwoKICB9LAoKICBjYW5vbmljYWxpemVkQW16SGVhZGVyczogZnVuY3Rpb24gY2Fub25pY2FsaXplZEFtekhlYWRlcnMoKSB7CgogICAgdmFyIGFtekhlYWRlcnMgPSBbXTsKCiAgICBBV1MudXRpbC5lYWNoKHRoaXMucmVxdWVzdC5oZWFkZXJzLCBmdW5jdGlvbiAobmFtZSkgewogICAgICBpZiAobmFtZS5tYXRjaCgvXngtYW16LS9pKSkKICAgICAgICBhbXpIZWFkZXJzLnB1c2gobmFtZSk7CiAgICB9KTsKCiAgICBhbXpIZWFkZXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA8IGIudG9Mb3dlckNhc2UoKSA/IC0xIDogMTsKICAgIH0pOwoKICAgIHZhciBwYXJ0cyA9IFtdOwogICAgQVdTLnV0aWwuYXJyYXlFYWNoLmNhbGwodGhpcywgYW16SGVhZGVycywgZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgcGFydHMucHVzaChuYW1lLnRvTG93ZXJDYXNlKCkgKyAnOicgKyBTdHJpbmcodGhpcy5yZXF1ZXN0LmhlYWRlcnNbbmFtZV0pKTsKICAgIH0pOwoKICAgIHJldHVybiBwYXJ0cy5qb2luKCdcbicpOwoKICB9LAoKICBjYW5vbmljYWxpemVkUmVzb3VyY2U6IGZ1bmN0aW9uIGNhbm9uaWNhbGl6ZWRSZXNvdXJjZSgpIHsKCiAgICB2YXIgciA9IHRoaXMucmVxdWVzdDsKCiAgICB2YXIgcGFydHMgPSByLnBhdGguc3BsaXQoJz8nKTsKICAgIHZhciBwYXRoID0gcGFydHNbMF07CiAgICB2YXIgcXVlcnlzdHJpbmcgPSBwYXJ0c1sxXTsKCiAgICB2YXIgcmVzb3VyY2UgPSAnJzsKCiAgICBpZiAoci52aXJ0dWFsSG9zdGVkQnVja2V0KQogICAgICByZXNvdXJjZSArPSAnLycgKyByLnZpcnR1YWxIb3N0ZWRCdWNrZXQ7CgogICAgcmVzb3VyY2UgKz0gcGF0aDsKCiAgICBpZiAocXVlcnlzdHJpbmcpIHsKCiAgICAgIC8vIGNvbGxlY3QgYSBsaXN0IG9mIHN1YiByZXNvdXJjZXMgYW5kIHF1ZXJ5IHBhcmFtcyB0aGF0IG5lZWQgdG8gYmUgc2lnbmVkCiAgICAgIHZhciByZXNvdXJjZXMgPSBbXTsKCiAgICAgIEFXUy51dGlsLmFycmF5RWFjaC5jYWxsKHRoaXMsIHF1ZXJ5c3RyaW5nLnNwbGl0KCcmJyksIGZ1bmN0aW9uIChwYXJhbSkgewogICAgICAgIHZhciBuYW1lID0gcGFyYW0uc3BsaXQoJz0nKVswXTsKICAgICAgICB2YXIgdmFsdWUgPSBwYXJhbS5zcGxpdCgnPScpWzFdOwogICAgICAgIGlmICh0aGlzLnN1YlJlc291cmNlc1tuYW1lXSB8fCB0aGlzLnJlc3BvbnNlSGVhZGVyc1tuYW1lXSkgewogICAgICAgICAgdmFyIHN1YnJlc291cmNlID0geyBuYW1lOiBuYW1lIH07CiAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBpZiAodGhpcy5zdWJSZXNvdXJjZXNbbmFtZV0pIHsKICAgICAgICAgICAgICBzdWJyZXNvdXJjZS52YWx1ZSA9IHZhbHVlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHN1YnJlc291cmNlLnZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmVzb3VyY2VzLnB1c2goc3VicmVzb3VyY2UpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICByZXNvdXJjZXMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5uYW1lIDwgYi5uYW1lID8gLTEgOiAxOyB9KTsKCiAgICAgIGlmIChyZXNvdXJjZXMubGVuZ3RoKSB7CgogICAgICAgIHF1ZXJ5c3RyaW5nID0gW107CiAgICAgICAgQVdTLnV0aWwuYXJyYXlFYWNoKHJlc291cmNlcywgZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgaWYgKHJlcy52YWx1ZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHF1ZXJ5c3RyaW5nLnB1c2gocmVzLm5hbWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcXVlcnlzdHJpbmcucHVzaChyZXMubmFtZSArICc9JyArIHJlcy52YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJlc291cmNlICs9ICc/JyArIHF1ZXJ5c3RyaW5nLmpvaW4oJyYnKTsKICAgICAgfQoKICAgIH0KCiAgICByZXR1cm4gcmVzb3VyY2U7CgogIH0sCgogIHNpZ246IGZ1bmN0aW9uIHNpZ24oc2VjcmV0LCBzdHJpbmcpIHsKICAgIHJldHVybiBBV1MudXRpbC5jcnlwdG8uaG1hYyhzZWNyZXQsIHN0cmluZywgJ2Jhc2U2NCcsICdzaGExJyk7CiAgfQp9KTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gQVdTLlNpZ25lcnMuUzM7Cgp9LHsiLi4vY29yZSI6MTh9XSw2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5TaWduZXJzLlYyID0gaW5oZXJpdChBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLCB7CiAgYWRkQXV0aG9yaXphdGlvbjogZnVuY3Rpb24gYWRkQXV0aG9yaXphdGlvbihjcmVkZW50aWFscywgZGF0ZSkgewoKICAgIGlmICghZGF0ZSkgZGF0ZSA9IEFXUy51dGlsLmRhdGUuZ2V0RGF0ZSgpOwoKICAgIHZhciByID0gdGhpcy5yZXF1ZXN0OwoKICAgIHIucGFyYW1zLlRpbWVzdGFtcCA9IEFXUy51dGlsLmRhdGUuaXNvODYwMShkYXRlKTsKICAgIHIucGFyYW1zLlNpZ25hdHVyZVZlcnNpb24gPSAnMic7CiAgICByLnBhcmFtcy5TaWduYXR1cmVNZXRob2QgPSAnSG1hY1NIQTI1Nic7CiAgICByLnBhcmFtcy5BV1NBY2Nlc3NLZXlJZCA9IGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkOwoKICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHsKICAgICAgci5wYXJhbXMuU2VjdXJpdHlUb2tlbiA9IGNyZWRlbnRpYWxzLnNlc3Npb25Ub2tlbjsKICAgIH0KCiAgICBkZWxldGUgci5wYXJhbXMuU2lnbmF0dXJlOyAvLyBkZWxldGUgb2xkIFNpZ25hdHVyZSBmb3IgcmUtc2lnbmluZwogICAgci5wYXJhbXMuU2lnbmF0dXJlID0gdGhpcy5zaWduYXR1cmUoY3JlZGVudGlhbHMpOwoKICAgIHIuYm9keSA9IEFXUy51dGlsLnF1ZXJ5UGFyYW1zVG9TdHJpbmcoci5wYXJhbXMpOwogICAgci5oZWFkZXJzWydDb250ZW50LUxlbmd0aCddID0gci5ib2R5Lmxlbmd0aDsKICB9LAoKICBzaWduYXR1cmU6IGZ1bmN0aW9uIHNpZ25hdHVyZShjcmVkZW50aWFscykgewogICAgcmV0dXJuIEFXUy51dGlsLmNyeXB0by5obWFjKGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgdGhpcy5zdHJpbmdUb1NpZ24oKSwgJ2Jhc2U2NCcpOwogIH0sCgogIHN0cmluZ1RvU2lnbjogZnVuY3Rpb24gc3RyaW5nVG9TaWduKCkgewogICAgdmFyIHBhcnRzID0gW107CiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5tZXRob2QpOwogICAgcGFydHMucHVzaCh0aGlzLnJlcXVlc3QuZW5kcG9pbnQuaG9zdC50b0xvd2VyQ2FzZSgpKTsKICAgIHBhcnRzLnB1c2godGhpcy5yZXF1ZXN0LnBhdGhuYW1lKCkpOwogICAgcGFydHMucHVzaChBV1MudXRpbC5xdWVyeVBhcmFtc1RvU3RyaW5nKHRoaXMucmVxdWVzdC5wYXJhbXMpKTsKICAgIHJldHVybiBwYXJ0cy5qb2luKCdcbicpOwogIH0KCn0pOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBV1MuU2lnbmVycy5WMjsKCn0seyIuLi9jb3JlIjoxOH1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKdmFyIGluaGVyaXQgPSBBV1MudXRpbC5pbmhlcml0OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KQVdTLlNpZ25lcnMuVjMgPSBpbmhlcml0KEFXUy5TaWduZXJzLlJlcXVlc3RTaWduZXIsIHsKICBhZGRBdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhZGRBdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRlKSB7CgogICAgdmFyIGRhdGV0aW1lID0gQVdTLnV0aWwuZGF0ZS5yZmM4MjIoZGF0ZSk7CgogICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LURhdGUnXSA9IGRhdGV0aW1lOwoKICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHsKICAgICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ3gtYW16LXNlY3VyaXR5LXRva2VuJ10gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47CiAgICB9CgogICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ1gtQW16bi1BdXRob3JpemF0aW9uJ10gPQogICAgICB0aGlzLmF1dGhvcml6YXRpb24oY3JlZGVudGlhbHMsIGRhdGV0aW1lKTsKCiAgfSwKCiAgYXV0aG9yaXphdGlvbjogZnVuY3Rpb24gYXV0aG9yaXphdGlvbihjcmVkZW50aWFscykgewogICAgcmV0dXJuICdBV1MzICcgKwogICAgICAnQVdTQWNjZXNzS2V5SWQ9JyArIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJywnICsKICAgICAgJ0FsZ29yaXRobT1IbWFjU0hBMjU2LCcgKwogICAgICAnU2lnbmVkSGVhZGVycz0nICsgdGhpcy5zaWduZWRIZWFkZXJzKCkgKyAnLCcgKwogICAgICAnU2lnbmF0dXJlPScgKyB0aGlzLnNpZ25hdHVyZShjcmVkZW50aWFscyk7CiAgfSwKCiAgc2lnbmVkSGVhZGVyczogZnVuY3Rpb24gc2lnbmVkSGVhZGVycygpIHsKICAgIHZhciBoZWFkZXJzID0gW107CiAgICBBV1MudXRpbC5hcnJheUVhY2godGhpcy5oZWFkZXJzVG9TaWduKCksIGZ1bmN0aW9uIGl0ZXJhdG9yKGgpIHsKICAgICAgaGVhZGVycy5wdXNoKGgudG9Mb3dlckNhc2UoKSk7CiAgICB9KTsKICAgIHJldHVybiBoZWFkZXJzLnNvcnQoKS5qb2luKCc7Jyk7CiAgfSwKCiAgY2Fub25pY2FsSGVhZGVyczogZnVuY3Rpb24gY2Fub25pY2FsSGVhZGVycygpIHsKICAgIHZhciBoZWFkZXJzID0gdGhpcy5yZXF1ZXN0LmhlYWRlcnM7CiAgICB2YXIgcGFydHMgPSBbXTsKICAgIEFXUy51dGlsLmFycmF5RWFjaCh0aGlzLmhlYWRlcnNUb1NpZ24oKSwgZnVuY3Rpb24gaXRlcmF0b3IoaCkgewogICAgICBwYXJ0cy5wdXNoKGgudG9Mb3dlckNhc2UoKS50cmltKCkgKyAnOicgKyBTdHJpbmcoaGVhZGVyc1toXSkudHJpbSgpKTsKICAgIH0pOwogICAgcmV0dXJuIHBhcnRzLnNvcnQoKS5qb2luKCdcbicpICsgJ1xuJzsKICB9LAoKICBoZWFkZXJzVG9TaWduOiBmdW5jdGlvbiBoZWFkZXJzVG9TaWduKCkgewogICAgdmFyIGhlYWRlcnMgPSBbXTsKICAgIEFXUy51dGlsLmVhY2godGhpcy5yZXF1ZXN0LmhlYWRlcnMsIGZ1bmN0aW9uIGl0ZXJhdG9yKGspIHsKICAgICAgaWYgKGsgPT09ICdIb3N0JyB8fCBrID09PSAnQ29udGVudC1FbmNvZGluZycgfHwgay5tYXRjaCgvXlgtQW16L2kpKSB7CiAgICAgICAgaGVhZGVycy5wdXNoKGspOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBoZWFkZXJzOwogIH0sCgogIHNpZ25hdHVyZTogZnVuY3Rpb24gc2lnbmF0dXJlKGNyZWRlbnRpYWxzKSB7CiAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLmhtYWMoY3JlZGVudGlhbHMuc2VjcmV0QWNjZXNzS2V5LCB0aGlzLnN0cmluZ1RvU2lnbigpLCAnYmFzZTY0Jyk7CiAgfSwKCiAgc3RyaW5nVG9TaWduOiBmdW5jdGlvbiBzdHJpbmdUb1NpZ24oKSB7CiAgICB2YXIgcGFydHMgPSBbXTsKICAgIHBhcnRzLnB1c2godGhpcy5yZXF1ZXN0Lm1ldGhvZCk7CiAgICBwYXJ0cy5wdXNoKCcvJyk7CiAgICBwYXJ0cy5wdXNoKCcnKTsKICAgIHBhcnRzLnB1c2godGhpcy5jYW5vbmljYWxIZWFkZXJzKCkpOwogICAgcGFydHMucHVzaCh0aGlzLnJlcXVlc3QuYm9keSk7CiAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLnNoYTI1NihwYXJ0cy5qb2luKCdcbicpKTsKICB9Cgp9KTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gQVdTLlNpZ25lcnMuVjM7Cgp9LHsiLi4vY29yZSI6MTh9XSw2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBBV1MgPSByZXF1aXJlKCcuLi9jb3JlJyk7CnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDsKCnJlcXVpcmUoJy4vdjMnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5TaWduZXJzLlYzSHR0cHMgPSBpbmhlcml0KEFXUy5TaWduZXJzLlYzLCB7CiAgYXV0aG9yaXphdGlvbjogZnVuY3Rpb24gYXV0aG9yaXphdGlvbihjcmVkZW50aWFscykgewogICAgcmV0dXJuICdBV1MzLUhUVFBTICcgKwogICAgICAnQVdTQWNjZXNzS2V5SWQ9JyArIGNyZWRlbnRpYWxzLmFjY2Vzc0tleUlkICsgJywnICsKICAgICAgJ0FsZ29yaXRobT1IbWFjU0hBMjU2LCcgKwogICAgICAnU2lnbmF0dXJlPScgKyB0aGlzLnNpZ25hdHVyZShjcmVkZW50aWFscyk7CiAgfSwKCiAgc3RyaW5nVG9TaWduOiBmdW5jdGlvbiBzdHJpbmdUb1NpZ24oKSB7CiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LURhdGUnXTsKICB9Cn0pOwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBV1MuU2lnbmVycy5WM0h0dHBzOwoKfSx7Ii4uL2NvcmUiOjE4LCIuL3YzIjo2Nn1dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKdmFyIHY0Q3JlZGVudGlhbHMgPSByZXF1aXJlKCcuL3Y0X2NyZWRlbnRpYWxzJyk7CnZhciBpbmhlcml0ID0gQVdTLnV0aWwuaW5oZXJpdDsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCnZhciBleHBpcmVzSGVhZGVyID0gJ3ByZXNpZ25lZC1leHBpcmVzJzsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCkFXUy5TaWduZXJzLlY0ID0gaW5oZXJpdChBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLCB7CiAgY29uc3RydWN0b3I6IGZ1bmN0aW9uIFY0KHJlcXVlc3QsIHNlcnZpY2VOYW1lLCBvcHRpb25zKSB7CiAgICBBV1MuU2lnbmVycy5SZXF1ZXN0U2lnbmVyLmNhbGwodGhpcywgcmVxdWVzdCk7CiAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7CiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKICAgIHRoaXMuc2lnbmF0dXJlQ2FjaGUgPSB0eXBlb2Ygb3B0aW9ucy5zaWduYXR1cmVDYWNoZSA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5zaWduYXR1cmVDYWNoZSA6IHRydWU7CiAgICB0aGlzLm9wZXJhdGlvbiA9IG9wdGlvbnMub3BlcmF0aW9uOwogICAgdGhpcy5zaWduYXR1cmVWZXJzaW9uID0gb3B0aW9ucy5zaWduYXR1cmVWZXJzaW9uOwogIH0sCgogIGFsZ29yaXRobTogJ0FXUzQtSE1BQy1TSEEyNTYnLAoKICBhZGRBdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhZGRBdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRlKSB7CiAgICB2YXIgZGF0ZXRpbWUgPSBBV1MudXRpbC5kYXRlLmlzbzg2MDEoZGF0ZSkucmVwbGFjZSgvWzpcLV18XC5cZHszfS9nLCAnJyk7CgogICAgaWYgKHRoaXMuaXNQcmVzaWduZWQoKSkgewogICAgICB0aGlzLnVwZGF0ZUZvclByZXNpZ25lZChjcmVkZW50aWFscywgZGF0ZXRpbWUpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5hZGRIZWFkZXJzKGNyZWRlbnRpYWxzLCBkYXRldGltZSk7CiAgICB9CgogICAgdGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9CiAgICAgIHRoaXMuYXV0aG9yaXphdGlvbihjcmVkZW50aWFscywgZGF0ZXRpbWUpOwogIH0sCgogIGFkZEhlYWRlcnM6IGZ1bmN0aW9uIGFkZEhlYWRlcnMoY3JlZGVudGlhbHMsIGRhdGV0aW1lKSB7CiAgICB0aGlzLnJlcXVlc3QuaGVhZGVyc1snWC1BbXotRGF0ZSddID0gZGF0ZXRpbWU7CiAgICBpZiAoY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuKSB7CiAgICAgIHRoaXMucmVxdWVzdC5oZWFkZXJzWyd4LWFtei1zZWN1cml0eS10b2tlbiddID0gY3JlZGVudGlhbHMuc2Vzc2lvblRva2VuOwogICAgfQogIH0sCgogIHVwZGF0ZUZvclByZXNpZ25lZDogZnVuY3Rpb24gdXBkYXRlRm9yUHJlc2lnbmVkKGNyZWRlbnRpYWxzLCBkYXRldGltZSkgewogICAgdmFyIGNyZWRTdHJpbmcgPSB0aGlzLmNyZWRlbnRpYWxTdHJpbmcoZGF0ZXRpbWUpOwogICAgdmFyIHFzID0gewogICAgICAnWC1BbXotRGF0ZSc6IGRhdGV0aW1lLAogICAgICAnWC1BbXotQWxnb3JpdGhtJzogdGhpcy5hbGdvcml0aG0sCiAgICAgICdYLUFtei1DcmVkZW50aWFsJzogY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQgKyAnLycgKyBjcmVkU3RyaW5nLAogICAgICAnWC1BbXotRXhwaXJlcyc6IHRoaXMucmVxdWVzdC5oZWFkZXJzW2V4cGlyZXNIZWFkZXJdLAogICAgICAnWC1BbXotU2lnbmVkSGVhZGVycyc6IHRoaXMuc2lnbmVkSGVhZGVycygpCiAgICB9OwoKICAgIGlmIChjcmVkZW50aWFscy5zZXNzaW9uVG9rZW4pIHsKICAgICAgcXNbJ1gtQW16LVNlY3VyaXR5LVRva2VuJ10gPSBjcmVkZW50aWFscy5zZXNzaW9uVG9rZW47CiAgICB9CgogICAgaWYgKHRoaXMucmVxdWVzdC5oZWFkZXJzWydDb250ZW50LVR5cGUnXSkgewogICAgICBxc1snQ29udGVudC1UeXBlJ10gPSB0aGlzLnJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1UeXBlJ107CiAgICB9CiAgICBpZiAodGhpcy5yZXF1ZXN0LmhlYWRlcnNbJ0NvbnRlbnQtTUQ1J10pIHsKICAgICAgcXNbJ0NvbnRlbnQtTUQ1J10gPSB0aGlzLnJlcXVlc3QuaGVhZGVyc1snQ29udGVudC1NRDUnXTsKICAgIH0KICAgIGlmICh0aGlzLnJlcXVlc3QuaGVhZGVyc1snQ2FjaGUtQ29udHJvbCddKSB7CiAgICAgIHFzWydDYWNoZS1Db250cm9sJ10gPSB0aGlzLnJlcXVlc3QuaGVhZGVyc1snQ2FjaGUtQ29udHJvbCddOwogICAgfQoKICAgIC8vIG5lZWQgdG8gcHVsbCBpbiBhbnkgb3RoZXIgWC1BbXotKiBoZWFkZXJzCiAgICBBV1MudXRpbC5lYWNoLmNhbGwodGhpcywgdGhpcy5yZXF1ZXN0LmhlYWRlcnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgaWYgKGtleSA9PT0gZXhwaXJlc0hlYWRlcikgcmV0dXJuOwogICAgICBpZiAodGhpcy5pc1NpZ25hYmxlSGVhZGVyKGtleSkpIHsKICAgICAgICB2YXIgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTsKICAgICAgICAvLyBNZXRhZGF0YSBzaG91bGQgYmUgbm9ybWFsaXplZAogICAgICAgIGlmIChsb3dlcktleS5pbmRleE9mKCd4LWFtei1tZXRhLScpID09PSAwKSB7CiAgICAgICAgICBxc1tsb3dlcktleV0gPSB2YWx1ZTsKICAgICAgICB9IGVsc2UgaWYgKGxvd2VyS2V5LmluZGV4T2YoJ3gtYW16LScpID09PSAwKSB7CiAgICAgICAgICBxc1trZXldID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCiAgICB2YXIgc2VwID0gdGhpcy5yZXF1ZXN0LnBhdGguaW5kZXhPZignPycpID49IDAgPyAnJicgOiAnPyc7CiAgICB0aGlzLnJlcXVlc3QucGF0aCArPSBzZXAgKyBBV1MudXRpbC5xdWVyeVBhcmFtc1RvU3RyaW5nKHFzKTsKICB9LAoKICBhdXRob3JpemF0aW9uOiBmdW5jdGlvbiBhdXRob3JpemF0aW9uKGNyZWRlbnRpYWxzLCBkYXRldGltZSkgewogICAgdmFyIHBhcnRzID0gW107CiAgICB2YXIgY3JlZFN0cmluZyA9IHRoaXMuY3JlZGVudGlhbFN0cmluZyhkYXRldGltZSk7CiAgICBwYXJ0cy5wdXNoKHRoaXMuYWxnb3JpdGhtICsgJyBDcmVkZW50aWFsPScgKwogICAgICBjcmVkZW50aWFscy5hY2Nlc3NLZXlJZCArICcvJyArIGNyZWRTdHJpbmcpOwogICAgcGFydHMucHVzaCgnU2lnbmVkSGVhZGVycz0nICsgdGhpcy5zaWduZWRIZWFkZXJzKCkpOwogICAgcGFydHMucHVzaCgnU2lnbmF0dXJlPScgKyB0aGlzLnNpZ25hdHVyZShjcmVkZW50aWFscywgZGF0ZXRpbWUpKTsKICAgIHJldHVybiBwYXJ0cy5qb2luKCcsICcpOwogIH0sCgogIHNpZ25hdHVyZTogZnVuY3Rpb24gc2lnbmF0dXJlKGNyZWRlbnRpYWxzLCBkYXRldGltZSkgewogICAgdmFyIHNpZ25pbmdLZXkgPSB2NENyZWRlbnRpYWxzLmdldFNpZ25pbmdLZXkoCiAgICAgIGNyZWRlbnRpYWxzLAogICAgICBkYXRldGltZS5zdWJzdHIoMCwgOCksCiAgICAgIHRoaXMucmVxdWVzdC5yZWdpb24sCiAgICAgIHRoaXMuc2VydmljZU5hbWUsCiAgICAgIHRoaXMuc2lnbmF0dXJlQ2FjaGUKICAgICk7CiAgICByZXR1cm4gQVdTLnV0aWwuY3J5cHRvLmhtYWMoc2lnbmluZ0tleSwgdGhpcy5zdHJpbmdUb1NpZ24oZGF0ZXRpbWUpLCAnaGV4Jyk7CiAgfSwKCiAgc3RyaW5nVG9TaWduOiBmdW5jdGlvbiBzdHJpbmdUb1NpZ24oZGF0ZXRpbWUpIHsKICAgIHZhciBwYXJ0cyA9IFtdOwogICAgcGFydHMucHVzaCgnQVdTNC1ITUFDLVNIQTI1NicpOwogICAgcGFydHMucHVzaChkYXRldGltZSk7CiAgICBwYXJ0cy5wdXNoKHRoaXMuY3JlZGVudGlhbFN0cmluZyhkYXRldGltZSkpOwogICAgcGFydHMucHVzaCh0aGlzLmhleEVuY29kZWRIYXNoKHRoaXMuY2Fub25pY2FsU3RyaW5nKCkpKTsKICAgIHJldHVybiBwYXJ0cy5qb2luKCdcbicpOwogIH0sCgogIGNhbm9uaWNhbFN0cmluZzogZnVuY3Rpb24gY2Fub25pY2FsU3RyaW5nKCkgewogICAgdmFyIHBhcnRzID0gW10sIHBhdGhuYW1lID0gdGhpcy5yZXF1ZXN0LnBhdGhuYW1lKCk7CiAgICBpZiAodGhpcy5zZXJ2aWNlTmFtZSAhPT0gJ3MzJyAmJiB0aGlzLnNpZ25hdHVyZVZlcnNpb24gIT09ICdzM3Y0JykgcGF0aG5hbWUgPSBBV1MudXRpbC51cmlFc2NhcGVQYXRoKHBhdGhuYW1lKTsKCiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5tZXRob2QpOwogICAgcGFydHMucHVzaChwYXRobmFtZSk7CiAgICBwYXJ0cy5wdXNoKHRoaXMucmVxdWVzdC5zZWFyY2goKSk7CiAgICBwYXJ0cy5wdXNoKHRoaXMuY2Fub25pY2FsSGVhZGVycygpICsgJ1xuJyk7CiAgICBwYXJ0cy5wdXNoKHRoaXMuc2lnbmVkSGVhZGVycygpKTsKICAgIHBhcnRzLnB1c2godGhpcy5oZXhFbmNvZGVkQm9keUhhc2goKSk7CiAgICByZXR1cm4gcGFydHMuam9pbignXG4nKTsKICB9LAoKICBjYW5vbmljYWxIZWFkZXJzOiBmdW5jdGlvbiBjYW5vbmljYWxIZWFkZXJzKCkgewogICAgdmFyIGhlYWRlcnMgPSBbXTsKICAgIEFXUy51dGlsLmVhY2guY2FsbCh0aGlzLCB0aGlzLnJlcXVlc3QuaGVhZGVycywgZnVuY3Rpb24gKGtleSwgaXRlbSkgewogICAgICBoZWFkZXJzLnB1c2goW2tleSwgaXRlbV0pOwogICAgfSk7CiAgICBoZWFkZXJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGFbMF0udG9Mb3dlckNhc2UoKSA8IGJbMF0udG9Mb3dlckNhc2UoKSA/IC0xIDogMTsKICAgIH0pOwogICAgdmFyIHBhcnRzID0gW107CiAgICBBV1MudXRpbC5hcnJheUVhY2guY2FsbCh0aGlzLCBoZWFkZXJzLCBmdW5jdGlvbiAoaXRlbSkgewogICAgICB2YXIga2V5ID0gaXRlbVswXS50b0xvd2VyQ2FzZSgpOwogICAgICBpZiAodGhpcy5pc1NpZ25hYmxlSGVhZGVyKGtleSkpIHsKICAgICAgICB2YXIgdmFsdWUgPSBpdGVtWzFdOwogICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdGhyb3cgQVdTLnV0aWwuZXJyb3IobmV3IEVycm9yKCdIZWFkZXIgJyArIGtleSArICcgY29udGFpbnMgaW52YWxpZCB2YWx1ZScpLCB7CiAgICAgICAgICAgIGNvZGU6ICdJbnZhbGlkSGVhZGVyJwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJzonICsKICAgICAgICAgIHRoaXMuY2Fub25pY2FsSGVhZGVyVmFsdWVzKHZhbHVlLnRvU3RyaW5nKCkpKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gcGFydHMuam9pbignXG4nKTsKICB9LAoKICBjYW5vbmljYWxIZWFkZXJWYWx1ZXM6IGZ1bmN0aW9uIGNhbm9uaWNhbEhlYWRlclZhbHVlcyh2YWx1ZXMpIHsKICAgIHJldHVybiB2YWx1ZXMucmVwbGFjZSgvXHMrL2csICcgJykucmVwbGFjZSgvXlxzK3xccyskL2csICcnKTsKICB9LAoKICBzaWduZWRIZWFkZXJzOiBmdW5jdGlvbiBzaWduZWRIZWFkZXJzKCkgewogICAgdmFyIGtleXMgPSBbXTsKICAgIEFXUy51dGlsLmVhY2guY2FsbCh0aGlzLCB0aGlzLnJlcXVlc3QuaGVhZGVycywgZnVuY3Rpb24gKGtleSkgewogICAgICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTsKICAgICAgaWYgKHRoaXMuaXNTaWduYWJsZUhlYWRlcihrZXkpKSBrZXlzLnB1c2goa2V5KTsKICAgIH0pOwogICAgcmV0dXJuIGtleXMuc29ydCgpLmpvaW4oJzsnKTsKICB9LAoKICBjcmVkZW50aWFsU3RyaW5nOiBmdW5jdGlvbiBjcmVkZW50aWFsU3RyaW5nKGRhdGV0aW1lKSB7CiAgICByZXR1cm4gdjRDcmVkZW50aWFscy5jcmVhdGVTY29wZSgKICAgICAgZGF0ZXRpbWUuc3Vic3RyKDAsIDgpLAogICAgICB0aGlzLnJlcXVlc3QucmVnaW9uLAogICAgICB0aGlzLnNlcnZpY2VOYW1lCiAgICApOwogIH0sCgogIGhleEVuY29kZWRIYXNoOiBmdW5jdGlvbiBoYXNoKHN0cmluZykgewogICAgcmV0dXJuIEFXUy51dGlsLmNyeXB0by5zaGEyNTYoc3RyaW5nLCAnaGV4Jyk7CiAgfSwKCiAgaGV4RW5jb2RlZEJvZHlIYXNoOiBmdW5jdGlvbiBoZXhFbmNvZGVkQm9keUhhc2goKSB7CiAgICB2YXIgcmVxdWVzdCA9IHRoaXMucmVxdWVzdDsKICAgIGlmICh0aGlzLmlzUHJlc2lnbmVkKCkgJiYgdGhpcy5zZXJ2aWNlTmFtZSA9PT0gJ3MzJyAmJiAhcmVxdWVzdC5ib2R5KSB7CiAgICAgIHJldHVybiAnVU5TSUdORUQtUEFZTE9BRCc7CiAgICB9IGVsc2UgaWYgKHJlcXVlc3QuaGVhZGVyc1snWC1BbXotQ29udGVudC1TaGEyNTYnXSkgewogICAgICByZXR1cm4gcmVxdWVzdC5oZWFkZXJzWydYLUFtei1Db250ZW50LVNoYTI1NiddOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHRoaXMuaGV4RW5jb2RlZEhhc2godGhpcy5yZXF1ZXN0LmJvZHkgfHwgJycpOwogICAgfQogIH0sCgogIHVuc2lnbmFibGVIZWFkZXJzOiBbCiAgICAnYXV0aG9yaXphdGlvbicsCiAgICAnY29udGVudC10eXBlJywKICAgICdjb250ZW50LWxlbmd0aCcsCiAgICAndXNlci1hZ2VudCcsCiAgICBleHBpcmVzSGVhZGVyLAogICAgJ2V4cGVjdCcsCiAgICAneC1hbXpuLXRyYWNlLWlkJwogIF0sCgogIGlzU2lnbmFibGVIZWFkZXI6IGZ1bmN0aW9uIGlzU2lnbmFibGVIZWFkZXIoa2V5KSB7CiAgICBpZiAoa2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigneC1hbXotJykgPT09IDApIHJldHVybiB0cnVlOwogICAgcmV0dXJuIHRoaXMudW5zaWduYWJsZUhlYWRlcnMuaW5kZXhPZihrZXkpIDwgMDsKICB9LAoKICBpc1ByZXNpZ25lZDogZnVuY3Rpb24gaXNQcmVzaWduZWQoKSB7CiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0LmhlYWRlcnNbZXhwaXJlc0hlYWRlcl0gPyB0cnVlIDogZmFsc2U7CiAgfQoKfSk7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IEFXUy5TaWduZXJzLlY0OwoKfSx7Ii4uL2NvcmUiOjE4LCIuL3Y0X2NyZWRlbnRpYWxzIjo2OX1dLDY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIEFXUyA9IHJlcXVpcmUoJy4uL2NvcmUnKTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCnZhciBjYWNoZWRTZWNyZXQgPSB7fTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCnZhciBjYWNoZVF1ZXVlID0gW107CgovKioKICogQGFwaSBwcml2YXRlCiAqLwp2YXIgbWF4Q2FjaGVFbnRyaWVzID0gNTA7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwp2YXIgdjRJZGVudGlmaWVyID0gJ2F3czRfcmVxdWVzdCc7CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IHsKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKgogICAqIEBwYXJhbSBkYXRlIFtTdHJpbmddCiAgICogQHBhcmFtIHJlZ2lvbiBbU3RyaW5nXQogICAqIEBwYXJhbSBzZXJ2aWNlTmFtZSBbU3RyaW5nXQogICAqIEByZXR1cm4gW1N0cmluZ10KICAgKi8KICBjcmVhdGVTY29wZTogZnVuY3Rpb24gY3JlYXRlU2NvcGUoZGF0ZSwgcmVnaW9uLCBzZXJ2aWNlTmFtZSkgewogICAgcmV0dXJuIFsKICAgICAgZGF0ZS5zdWJzdHIoMCwgOCksCiAgICAgIHJlZ2lvbiwKICAgICAgc2VydmljZU5hbWUsCiAgICAgIHY0SWRlbnRpZmllcgogICAgXS5qb2luKCcvJyk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICoKICAgKiBAcGFyYW0gY3JlZGVudGlhbHMgW0NyZWRlbnRpYWxzXQogICAqIEBwYXJhbSBkYXRlIFtTdHJpbmddCiAgICogQHBhcmFtIHJlZ2lvbiBbU3RyaW5nXQogICAqIEBwYXJhbSBzZXJ2aWNlIFtTdHJpbmddCiAgICogQHBhcmFtIHNob3VsZENhY2hlIFtCb29sZWFuXQogICAqIEByZXR1cm4gW1N0cmluZ10KICAgKi8KICBnZXRTaWduaW5nS2V5OiBmdW5jdGlvbiBnZXRTaWduaW5nS2V5KAogICAgY3JlZGVudGlhbHMsCiAgICBkYXRlLAogICAgcmVnaW9uLAogICAgc2VydmljZSwKICAgIHNob3VsZENhY2hlCiAgKSB7CiAgICB2YXIgY3JlZHNJZGVudGlmaWVyID0gQVdTLnV0aWwuY3J5cHRvCiAgICAgIC5obWFjKGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwgY3JlZGVudGlhbHMuYWNjZXNzS2V5SWQsICdiYXNlNjQnKTsKICAgIHZhciBjYWNoZUtleSA9IFtjcmVkc0lkZW50aWZpZXIsIGRhdGUsIHJlZ2lvbiwgc2VydmljZV0uam9pbignXycpOwogICAgc2hvdWxkQ2FjaGUgPSBzaG91bGRDYWNoZSAhPT0gZmFsc2U7CiAgICBpZiAoc2hvdWxkQ2FjaGUgJiYgKGNhY2hlS2V5IGluIGNhY2hlZFNlY3JldCkpIHsKICAgICAgcmV0dXJuIGNhY2hlZFNlY3JldFtjYWNoZUtleV07CiAgICB9CgogICAgdmFyIGtEYXRlID0gQVdTLnV0aWwuY3J5cHRvLmhtYWMoCiAgICAgICdBV1M0JyArIGNyZWRlbnRpYWxzLnNlY3JldEFjY2Vzc0tleSwKICAgICAgZGF0ZSwKICAgICAgJ2J1ZmZlcicKICAgICk7CiAgICB2YXIga1JlZ2lvbiA9IEFXUy51dGlsLmNyeXB0by5obWFjKGtEYXRlLCByZWdpb24sICdidWZmZXInKTsKICAgIHZhciBrU2VydmljZSA9IEFXUy51dGlsLmNyeXB0by5obWFjKGtSZWdpb24sIHNlcnZpY2UsICdidWZmZXInKTsKCiAgICB2YXIgc2lnbmluZ0tleSA9IEFXUy51dGlsLmNyeXB0by5obWFjKGtTZXJ2aWNlLCB2NElkZW50aWZpZXIsICdidWZmZXInKTsKICAgIGlmIChzaG91bGRDYWNoZSkgewogICAgICBjYWNoZWRTZWNyZXRbY2FjaGVLZXldID0gc2lnbmluZ0tleTsKICAgICAgY2FjaGVRdWV1ZS5wdXNoKGNhY2hlS2V5KTsKICAgICAgaWYgKGNhY2hlUXVldWUubGVuZ3RoID4gbWF4Q2FjaGVFbnRyaWVzKSB7CiAgICAgICAgLy8gcmVtb3ZlIHRoZSBvbGRlc3QgZW50cnkgKG5vdCB0aGUgbGVhc3QgcmVjZW50bHkgdXNlZCkKICAgICAgICBkZWxldGUgY2FjaGVkU2VjcmV0W2NhY2hlUXVldWUuc2hpZnQoKV07CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gc2lnbmluZ0tleTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKgogICAqIEVtcHRpZXMgdGhlIGRlcml2ZWQgc2lnbmluZyBrZXkgY2FjaGUuIE1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIHB1cnBvc2VzCiAgICogb25seS4KICAgKi8KICBlbXB0eUNhY2hlOiBmdW5jdGlvbiBlbXB0eUNhY2hlKCkgewogICAgY2FjaGVkU2VjcmV0ID0ge307CiAgICBjYWNoZVF1ZXVlID0gW107CiAgfQp9OwoKfSx7Ii4uL2NvcmUiOjE4fV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpmdW5jdGlvbiBBY2NlcHRvclN0YXRlTWFjaGluZShzdGF0ZXMsIHN0YXRlKSB7CiAgdGhpcy5jdXJyZW50U3RhdGUgPSBzdGF0ZSB8fCBudWxsOwogIHRoaXMuc3RhdGVzID0gc3RhdGVzIHx8IHt9Owp9CgpBY2NlcHRvclN0YXRlTWFjaGluZS5wcm90b3R5cGUucnVuVG8gPSBmdW5jdGlvbiBydW5UbyhmaW5hbFN0YXRlLCBkb25lLCBiaW5kT2JqZWN0LCBpbnB1dEVycm9yKSB7CiAgaWYgKHR5cGVvZiBmaW5hbFN0YXRlID09PSAnZnVuY3Rpb24nKSB7CiAgICBpbnB1dEVycm9yID0gYmluZE9iamVjdDsgYmluZE9iamVjdCA9IGRvbmU7CiAgICBkb25lID0gZmluYWxTdGF0ZTsgZmluYWxTdGF0ZSA9IG51bGw7CiAgfQoKICB2YXIgc2VsZiA9IHRoaXM7CiAgdmFyIHN0YXRlID0gc2VsZi5zdGF0ZXNbc2VsZi5jdXJyZW50U3RhdGVdOwogIHN0YXRlLmZuLmNhbGwoYmluZE9iamVjdCB8fCBzZWxmLCBpbnB1dEVycm9yLCBmdW5jdGlvbihlcnIpIHsKICAgIGlmIChlcnIpIHsKICAgICAgaWYgKHN0YXRlLmZhaWwpIHNlbGYuY3VycmVudFN0YXRlID0gc3RhdGUuZmFpbDsKICAgICAgZWxzZSByZXR1cm4gZG9uZSA/IGRvbmUuY2FsbChiaW5kT2JqZWN0LCBlcnIpIDogbnVsbDsKICAgIH0gZWxzZSB7CiAgICAgIGlmIChzdGF0ZS5hY2NlcHQpIHNlbGYuY3VycmVudFN0YXRlID0gc3RhdGUuYWNjZXB0OwogICAgICBlbHNlIHJldHVybiBkb25lID8gZG9uZS5jYWxsKGJpbmRPYmplY3QpIDogbnVsbDsKICAgIH0KICAgIGlmIChzZWxmLmN1cnJlbnRTdGF0ZSA9PT0gZmluYWxTdGF0ZSkgewogICAgICByZXR1cm4gZG9uZSA/IGRvbmUuY2FsbChiaW5kT2JqZWN0LCBlcnIpIDogbnVsbDsKICAgIH0KCiAgICBzZWxmLnJ1blRvKGZpbmFsU3RhdGUsIGRvbmUsIGJpbmRPYmplY3QsIGVycik7CiAgfSk7Cn07CgpBY2NlcHRvclN0YXRlTWFjaGluZS5wcm90b3R5cGUuYWRkU3RhdGUgPSBmdW5jdGlvbiBhZGRTdGF0ZShuYW1lLCBhY2NlcHRTdGF0ZSwgZmFpbFN0YXRlLCBmbikgewogIGlmICh0eXBlb2YgYWNjZXB0U3RhdGUgPT09ICdmdW5jdGlvbicpIHsKICAgIGZuID0gYWNjZXB0U3RhdGU7IGFjY2VwdFN0YXRlID0gbnVsbDsgZmFpbFN0YXRlID0gbnVsbDsKICB9IGVsc2UgaWYgKHR5cGVvZiBmYWlsU3RhdGUgPT09ICdmdW5jdGlvbicpIHsKICAgIGZuID0gZmFpbFN0YXRlOyBmYWlsU3RhdGUgPSBudWxsOwogIH0KCiAgaWYgKCF0aGlzLmN1cnJlbnRTdGF0ZSkgdGhpcy5jdXJyZW50U3RhdGUgPSBuYW1lOwogIHRoaXMuc3RhdGVzW25hbWVdID0geyBhY2NlcHQ6IGFjY2VwdFN0YXRlLCBmYWlsOiBmYWlsU3RhdGUsIGZuOiBmbiB9OwogIHJldHVybiB0aGlzOwp9OwoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBBY2NlcHRvclN0YXRlTWFjaGluZTsKCn0se31dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLHNldEltbWVkaWF0ZSl7KGZ1bmN0aW9uICgpewovKiBlc2xpbnQgZ3VhcmQtZm9yLWluOjAgKi8KdmFyIEFXUzsKCi8qKgogKiBBIHNldCBvZiB1dGlsaXR5IG1ldGhvZHMgZm9yIHVzZSB3aXRoIHRoZSBBV1MgU0RLLgogKgogKiBAIWF0dHJpYnV0ZSBhYm9ydAogKiAgIFJldHVybiB0aGlzIHZhbHVlIGZyb20gYW4gaXRlcmF0b3IgZnVuY3Rpb24ge2VhY2h9IG9yIHthcnJheUVhY2h9CiAqICAgdG8gYnJlYWsgb3V0IG9mIHRoZSBpdGVyYXRpb24uCiAqICAgQGV4YW1wbGUgQnJlYWtpbmcgb3V0IG9mIGFuIGl0ZXJhdG9yIGZ1bmN0aW9uCiAqICAgICBBV1MudXRpbC5lYWNoKHthOiAxLCBiOiAyLCBjOiAzfSwgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgewogKiAgICAgICBpZiAoa2V5ID09ICdiJykgcmV0dXJuIEFXUy51dGlsLmFib3J0OwogKiAgICAgfSk7CiAqICAgQHNlZSBlYWNoCiAqICAgQHNlZSBhcnJheUVhY2gKICogQGFwaSBwcml2YXRlCiAqLwp2YXIgdXRpbCA9IHsKICBlbnZpcm9ubWVudDogJ25vZGVqcycsCiAgZW5naW5lOiBmdW5jdGlvbiBlbmdpbmUoKSB7CiAgICBpZiAodXRpbC5pc0Jyb3dzZXIoKSAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJykgewogICAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBlbmdpbmUgPSBwcm9jZXNzLnBsYXRmb3JtICsgJy8nICsgcHJvY2Vzcy52ZXJzaW9uOwogICAgICBpZiAocHJvY2Vzcy5lbnYuQVdTX0VYRUNVVElPTl9FTlYpIHsKICAgICAgICBlbmdpbmUgKz0gJyBleGVjLWVudi8nICsgcHJvY2Vzcy5lbnYuQVdTX0VYRUNVVElPTl9FTlY7CiAgICAgIH0KICAgICAgcmV0dXJuIGVuZ2luZTsKICAgIH0KICB9LAoKICB1c2VyQWdlbnQ6IGZ1bmN0aW9uIHVzZXJBZ2VudCgpIHsKICAgIHZhciBuYW1lID0gdXRpbC5lbnZpcm9ubWVudDsKICAgIHZhciBhZ2VudCA9ICdhd3Mtc2RrLScgKyBuYW1lICsgJy8nICsgcmVxdWlyZSgnLi9jb3JlJykuVkVSU0lPTjsKICAgIGlmIChuYW1lID09PSAnbm9kZWpzJykgYWdlbnQgKz0gJyAnICsgdXRpbC5lbmdpbmUoKTsKICAgIHJldHVybiBhZ2VudDsKICB9LAoKICB1cmlFc2NhcGU6IGZ1bmN0aW9uIHVyaUVzY2FwZShzdHJpbmcpIHsKICAgIHZhciBvdXRwdXQgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nKTsKICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9bXkEtWmEtejAtOV8uflwtJV0rL2csIGVzY2FwZSk7CgogICAgLy8gQVdTIHBlcmNlbnQtZW5jb2RlcyBzb21lIGV4dHJhIG5vbi1zdGFuZGFyZCBjaGFyYWN0ZXJzIGluIGEgVVJJCiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvWypdL2csIGZ1bmN0aW9uKGNoKSB7CiAgICAgIHJldHVybiAnJScgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOwogICAgfSk7CgogICAgcmV0dXJuIG91dHB1dDsKICB9LAoKICB1cmlFc2NhcGVQYXRoOiBmdW5jdGlvbiB1cmlFc2NhcGVQYXRoKHN0cmluZykgewogICAgdmFyIHBhcnRzID0gW107CiAgICB1dGlsLmFycmF5RWFjaChzdHJpbmcuc3BsaXQoJy8nKSwgZnVuY3Rpb24gKHBhcnQpIHsKICAgICAgcGFydHMucHVzaCh1dGlsLnVyaUVzY2FwZShwYXJ0KSk7CiAgICB9KTsKICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgfSwKCiAgdXJsUGFyc2U6IGZ1bmN0aW9uIHVybFBhcnNlKHVybCkgewogICAgcmV0dXJuIHV0aWwudXJsLnBhcnNlKHVybCk7CiAgfSwKCiAgdXJsRm9ybWF0OiBmdW5jdGlvbiB1cmxGb3JtYXQodXJsKSB7CiAgICByZXR1cm4gdXRpbC51cmwuZm9ybWF0KHVybCk7CiAgfSwKCiAgcXVlcnlTdHJpbmdQYXJzZTogZnVuY3Rpb24gcXVlcnlTdHJpbmdQYXJzZShxcykgewogICAgcmV0dXJuIHV0aWwucXVlcnlzdHJpbmcucGFyc2UocXMpOwogIH0sCgogIHF1ZXJ5UGFyYW1zVG9TdHJpbmc6IGZ1bmN0aW9uIHF1ZXJ5UGFyYW1zVG9TdHJpbmcocGFyYW1zKSB7CiAgICB2YXIgaXRlbXMgPSBbXTsKICAgIHZhciBlc2NhcGUgPSB1dGlsLnVyaUVzY2FwZTsKICAgIHZhciBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KCk7CgogICAgdXRpbC5hcnJheUVhY2goc29ydGVkS2V5cywgZnVuY3Rpb24obmFtZSkgewogICAgICB2YXIgdmFsdWUgPSBwYXJhbXNbbmFtZV07CiAgICAgIHZhciBlbmFtZSA9IGVzY2FwZShuYW1lKTsKICAgICAgdmFyIHJlc3VsdCA9IGVuYW1lICsgJz0nOwogICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICB2YXIgdmFscyA9IFtdOwogICAgICAgIHV0aWwuYXJyYXlFYWNoKHZhbHVlLCBmdW5jdGlvbihpdGVtKSB7IHZhbHMucHVzaChlc2NhcGUoaXRlbSkpOyB9KTsKICAgICAgICByZXN1bHQgPSBlbmFtZSArICc9JyArIHZhbHMuc29ydCgpLmpvaW4oJyYnICsgZW5hbWUgKyAnPScpOwogICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHsKICAgICAgICByZXN1bHQgPSBlbmFtZSArICc9JyArIGVzY2FwZSh2YWx1ZSk7CiAgICAgIH0KICAgICAgaXRlbXMucHVzaChyZXN1bHQpOwogICAgfSk7CgogICAgcmV0dXJuIGl0ZW1zLmpvaW4oJyYnKTsKICB9LAoKICByZWFkRmlsZVN5bmM6IGZ1bmN0aW9uIHJlYWRGaWxlU3luYyhwYXRoKSB7CiAgICBpZiAodXRpbC5pc0Jyb3dzZXIoKSkgcmV0dXJuIG51bGw7CiAgICByZXR1cm4gcmVxdWlyZSgnZnMnKS5yZWFkRmlsZVN5bmMocGF0aCwgJ3V0Zi04Jyk7CiAgfSwKCiAgYmFzZTY0OiB7CiAgICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZTY0KHN0cmluZykgewogICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ251bWJlcicpIHsKICAgICAgICB0aHJvdyB1dGlsLmVycm9yKG5ldyBFcnJvcignQ2Fubm90IGJhc2U2NCBlbmNvZGUgbnVtYmVyICcgKyBzdHJpbmcpKTsKICAgICAgfQogICAgICBpZiAoc3RyaW5nID09PSBudWxsIHx8IHR5cGVvZiBzdHJpbmcgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgcmV0dXJuIHN0cmluZzsKICAgICAgfQogICAgICB2YXIgYnVmID0gdXRpbC5idWZmZXIudG9CdWZmZXIoc3RyaW5nKTsKICAgICAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7CiAgICB9LAoKICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlNjQoc3RyaW5nKSB7CiAgICAgIGlmICh0eXBlb2Ygc3RyaW5nID09PSAnbnVtYmVyJykgewogICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgYmFzZTY0IGRlY29kZSBudW1iZXIgJyArIHN0cmluZykpOwogICAgICB9CiAgICAgIGlmIChzdHJpbmcgPT09IG51bGwgfHwgdHlwZW9mIHN0cmluZyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICByZXR1cm4gc3RyaW5nOwogICAgICB9CiAgICAgIHJldHVybiB1dGlsLmJ1ZmZlci50b0J1ZmZlcihzdHJpbmcsICdiYXNlNjQnKTsKICAgIH0KCiAgfSwKCiAgYnVmZmVyOiB7CiAgICAvKioKICAgICAqIEJ1ZmZlciBjb25zdHJ1Y3RvciBmb3IgTm9kZSBidWZmZXIgYW5kIGJ1ZmZlciBwb2xseWZpbGwKICAgICAqLwogICAgdG9CdWZmZXI6IGZ1bmN0aW9uKGRhdGEsIGVuY29kaW5nKSB7CiAgICAgIHJldHVybiAodHlwZW9mIHV0aWwuQnVmZmVyLmZyb20gPT09ICdmdW5jdGlvbicgJiYgdXRpbC5CdWZmZXIuZnJvbSAhPT0gVWludDhBcnJheS5mcm9tKSA/CiAgICAgICAgdXRpbC5CdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZykgOiBuZXcgdXRpbC5CdWZmZXIoZGF0YSwgZW5jb2RpbmcpOwogICAgfSwKCiAgICBhbGxvYzogZnVuY3Rpb24oc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICAgICAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignc2l6ZSBwYXNzZWQgdG8gYWxsb2MgbXVzdCBiZSBhIG51bWJlci4nKTsKICAgICAgfQogICAgICBpZiAodHlwZW9mIHV0aWwuQnVmZmVyLmFsbG9jID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgcmV0dXJuIHV0aWwuQnVmZmVyLmFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgYnVmID0gbmV3IHV0aWwuQnVmZmVyKHNpemUpOwogICAgICAgIGlmIChmaWxsICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGJ1Zi5maWxsID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBidWYuZmlsbChmaWxsLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZW5jb2RpbmcpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYnVmOwogICAgICB9CiAgICB9LAoKICAgIHRvU3RyZWFtOiBmdW5jdGlvbiB0b1N0cmVhbShidWZmZXIpIHsKICAgICAgaWYgKCF1dGlsLkJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSBidWZmZXIgPSAgdXRpbC5idWZmZXIudG9CdWZmZXIoYnVmZmVyKTsKCiAgICAgIHZhciByZWFkYWJsZSA9IG5ldyAodXRpbC5zdHJlYW0uUmVhZGFibGUpKCk7CiAgICAgIHZhciBwb3MgPSAwOwogICAgICByZWFkYWJsZS5fcmVhZCA9IGZ1bmN0aW9uKHNpemUpIHsKICAgICAgICBpZiAocG9zID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybiByZWFkYWJsZS5wdXNoKG51bGwpOwoKICAgICAgICB2YXIgZW5kID0gcG9zICsgc2l6ZTsKICAgICAgICBpZiAoZW5kID4gYnVmZmVyLmxlbmd0aCkgZW5kID0gYnVmZmVyLmxlbmd0aDsKICAgICAgICByZWFkYWJsZS5wdXNoKGJ1ZmZlci5zbGljZShwb3MsIGVuZCkpOwogICAgICAgIHBvcyA9IGVuZDsKICAgICAgfTsKCiAgICAgIHJldHVybiByZWFkYWJsZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBDb25jYXRlbmF0ZXMgYSBsaXN0IG9mIEJ1ZmZlciBvYmplY3RzLgogICAgICovCiAgICBjb25jYXQ6IGZ1bmN0aW9uKGJ1ZmZlcnMpIHsKICAgICAgdmFyIGxlbmd0aCA9IDAsCiAgICAgICAgICBvZmZzZXQgPSAwLAogICAgICAgICAgYnVmZmVyID0gbnVsbCwgaTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBidWZmZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGVuZ3RoICs9IGJ1ZmZlcnNbaV0ubGVuZ3RoOwogICAgICB9CgogICAgICBidWZmZXIgPSB1dGlsLmJ1ZmZlci5hbGxvYyhsZW5ndGgpOwoKICAgICAgZm9yIChpID0gMDsgaSA8IGJ1ZmZlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBidWZmZXJzW2ldLmNvcHkoYnVmZmVyLCBvZmZzZXQpOwogICAgICAgIG9mZnNldCArPSBidWZmZXJzW2ldLmxlbmd0aDsKICAgICAgfQoKICAgICAgcmV0dXJuIGJ1ZmZlcjsKICAgIH0KICB9LAoKICBzdHJpbmc6IHsKICAgIGJ5dGVMZW5ndGg6IGZ1bmN0aW9uIGJ5dGVMZW5ndGgoc3RyaW5nKSB7CiAgICAgIGlmIChzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSB1bmRlZmluZWQpIHJldHVybiAwOwogICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHN0cmluZyA9IHV0aWwuYnVmZmVyLnRvQnVmZmVyKHN0cmluZyk7CgogICAgICBpZiAodHlwZW9mIHN0cmluZy5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJykgewogICAgICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aDsKICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyaW5nLmxlbmd0aCA9PT0gJ251bWJlcicpIHsKICAgICAgICByZXR1cm4gc3RyaW5nLmxlbmd0aDsKICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyaW5nLnNpemUgPT09ICdudW1iZXInKSB7CiAgICAgICAgcmV0dXJuIHN0cmluZy5zaXplOwogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHJpbmcucGF0aCA9PT0gJ3N0cmluZycpIHsKICAgICAgICByZXR1cm4gcmVxdWlyZSgnZnMnKS5sc3RhdFN5bmMoc3RyaW5nLnBhdGgpLnNpemU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ0Nhbm5vdCBkZXRlcm1pbmUgbGVuZ3RoIG9mICcgKyBzdHJpbmcpLAogICAgICAgICAgeyBvYmplY3Q6IHN0cmluZyB9KTsKICAgICAgfQogICAgfSwKCiAgICB1cHBlckZpcnN0OiBmdW5jdGlvbiB1cHBlckZpcnN0KHN0cmluZykgewogICAgICByZXR1cm4gc3RyaW5nWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyKDEpOwogICAgfSwKCiAgICBsb3dlckZpcnN0OiBmdW5jdGlvbiBsb3dlckZpcnN0KHN0cmluZykgewogICAgICByZXR1cm4gc3RyaW5nWzBdLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyKDEpOwogICAgfQogIH0sCgogIGluaTogewogICAgcGFyc2U6IGZ1bmN0aW9uIHN0cmluZyhpbmkpIHsKICAgICAgdmFyIGN1cnJlbnRTZWN0aW9uLCBtYXAgPSB7fTsKICAgICAgdXRpbC5hcnJheUVhY2goaW5pLnNwbGl0KC9ccj9cbi8pLCBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgbGluZSA9IGxpbmUuc3BsaXQoLyhefFxzKVs7I10vKVswXTsgLy8gcmVtb3ZlIGNvbW1lbnRzCiAgICAgICAgdmFyIHNlY3Rpb24gPSBsaW5lLm1hdGNoKC9eXHMqXFsoW15cW1xdXSspXF1ccyokLyk7CiAgICAgICAgaWYgKHNlY3Rpb24pIHsKICAgICAgICAgIGN1cnJlbnRTZWN0aW9uID0gc2VjdGlvblsxXTsKICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRTZWN0aW9uKSB7CiAgICAgICAgICB2YXIgaXRlbSA9IGxpbmUubWF0Y2goL15ccyooLis/KVxzKj1ccyooLis/KVxzKiQvKTsKICAgICAgICAgIGlmIChpdGVtKSB7CiAgICAgICAgICAgIG1hcFtjdXJyZW50U2VjdGlvbl0gPSBtYXBbY3VycmVudFNlY3Rpb25dIHx8IHt9OwogICAgICAgICAgICBtYXBbY3VycmVudFNlY3Rpb25dW2l0ZW1bMV1dID0gaXRlbVsyXTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIG1hcDsKICAgIH0KICB9LAoKICBmbjogewogICAgbm9vcDogZnVuY3Rpb24oKSB7fSwKICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZXJyKSB7IGlmIChlcnIpIHRocm93IGVycjsgfSwKCiAgICAvKioKICAgICAqIFR1cm4gYSBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIGFzICJhc3luYyIgZnVuY3Rpb24gYnkgbWFraW5nIGl0IGNhbGwKICAgICAqIGEgY2FsbGJhY2suIFRoZSB1bmRlcmx5aW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFsbCBidXQgdGhlIGxhc3QgYXJndW1lbnQsCiAgICAgKiB3aGljaCBpcyB0cmVhdGVkIGFzIHRoZSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIGlzIHBhc3NlZCBwYXNzZWQgYSBmaXJzdCBhcmd1bWVudAogICAgICogb2YgbnVsbCBvbiBzdWNjZXNzIHRvIG1pbWljayBzdGFuZGFyZCBub2RlIGNhbGxiYWNrcy4KICAgICAqLwogICAgbWFrZUFzeW5jOiBmdW5jdGlvbiBtYWtlQXN5bmMoZm4sIGV4cGVjdGVkQXJncykgewogICAgICBpZiAoZXhwZWN0ZWRBcmdzICYmIGV4cGVjdGVkQXJncyA8PSBmbi5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZm47CiAgICAgIH0KCiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTsKICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkobnVsbCwgYXJncyk7CiAgICAgICAgY2FsbGJhY2socmVzdWx0KTsKICAgICAgfTsKICAgIH0KICB9LAoKICAvKioKICAgKiBEYXRlIGFuZCB0aW1lIHV0aWxpdHkgZnVuY3Rpb25zLgogICAqLwogIGRhdGU6IHsKCiAgICAvKioKICAgICAqIEByZXR1cm4gW0RhdGVdIHRoZSBjdXJyZW50IEphdmFTY3JpcHQgZGF0ZSBvYmplY3QuIFNpbmNlIGFsbAogICAgICogICBBV1Mgc2VydmljZXMgcmVseSBvbiB0aGlzIGRhdGUgb2JqZWN0LCB5b3UgY2FuIG92ZXJyaWRlCiAgICAgKiAgIHRoaXMgZnVuY3Rpb24gdG8gcHJvdmlkZSBhIHNwZWNpYWwgdGltZSB2YWx1ZSB0byBBV1Mgc2VydmljZQogICAgICogICByZXF1ZXN0cy4KICAgICAqLwogICAgZ2V0RGF0ZTogZnVuY3Rpb24gZ2V0RGF0ZSgpIHsKICAgICAgaWYgKCFBV1MpIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpOwogICAgICBpZiAoQVdTLmNvbmZpZy5zeXN0ZW1DbG9ja09mZnNldCkgeyAvLyB1c2Ugb2Zmc2V0IHdoZW4gbm9uLXplcm8KICAgICAgICByZXR1cm4gbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyBBV1MuY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbmV3IERhdGUoKTsKICAgICAgfQogICAgfSwKCiAgICAvKioKICAgICAqIEByZXR1cm4gW1N0cmluZ10gdGhlIGRhdGUgaW4gSVNPLTg2MDEgZm9ybWF0CiAgICAgKi8KICAgIGlzbzg2MDE6IGZ1bmN0aW9uIGlzbzg2MDEoZGF0ZSkgewogICAgICBpZiAoZGF0ZSA9PT0gdW5kZWZpbmVkKSB7IGRhdGUgPSB1dGlsLmRhdGUuZ2V0RGF0ZSgpOyB9CiAgICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXC5cZHszfVokLywgJ1onKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBAcmV0dXJuIFtTdHJpbmddIHRoZSBkYXRlIGluIFJGQyA4MjIgZm9ybWF0CiAgICAgKi8KICAgIHJmYzgyMjogZnVuY3Rpb24gcmZjODIyKGRhdGUpIHsKICAgICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkgeyBkYXRlID0gdXRpbC5kYXRlLmdldERhdGUoKTsgfQogICAgICByZXR1cm4gZGF0ZS50b1VUQ1N0cmluZygpOwogICAgfSwKCiAgICAvKioKICAgICAqIEByZXR1cm4gW0ludGVnZXJdIHRoZSBVTklYIHRpbWVzdGFtcCB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgdGltZQogICAgICovCiAgICB1bml4VGltZXN0YW1wOiBmdW5jdGlvbiB1bml4VGltZXN0YW1wKGRhdGUpIHsKICAgICAgaWYgKGRhdGUgPT09IHVuZGVmaW5lZCkgeyBkYXRlID0gdXRpbC5kYXRlLmdldERhdGUoKTsgfQogICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLyAxMDAwOwogICAgfSwKCiAgICAvKioKICAgICAqIEBwYXJhbSBbU3RyaW5nLG51bWJlcixEYXRlXSBkYXRlCiAgICAgKiBAcmV0dXJuIFtEYXRlXQogICAgICovCiAgICBmcm9tOiBmdW5jdGlvbiBmb3JtYXQoZGF0ZSkgewogICAgICBpZiAodHlwZW9mIGRhdGUgPT09ICdudW1iZXInKSB7CiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUgKiAxMDAwKTsgLy8gdW5peCB0aW1lc3RhbXAKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZSk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBHaXZlbiBhIERhdGUgb3IgZGF0ZS1saWtlIHZhbHVlLCB0aGlzIGZ1bmN0aW9uIGZvcm1hdHMgdGhlCiAgICAgKiBkYXRlIGludG8gYSBzdHJpbmcgb2YgdGhlIHJlcXVlc3RlZCB2YWx1ZS4KICAgICAqIEBwYXJhbSBbU3RyaW5nLG51bWJlcixEYXRlXSBkYXRlCiAgICAgKiBAcGFyYW0gW1N0cmluZ10gZm9ybWF0dGVyIFZhbGlkIGZvcm1hdHMgYXJlOgogICAgICMgICAqICdpc284NjAxJwogICAgICMgICAqICdyZmM4MjInCiAgICAgIyAgICogJ3VuaXhUaW1lc3RhbXAnCiAgICAgKiBAcmV0dXJuIFtTdHJpbmddCiAgICAgKi8KICAgIGZvcm1hdDogZnVuY3Rpb24gZm9ybWF0KGRhdGUsIGZvcm1hdHRlcikgewogICAgICBpZiAoIWZvcm1hdHRlcikgZm9ybWF0dGVyID0gJ2lzbzg2MDEnOwogICAgICByZXR1cm4gdXRpbC5kYXRlW2Zvcm1hdHRlcl0odXRpbC5kYXRlLmZyb20oZGF0ZSkpOwogICAgfSwKCiAgICBwYXJzZVRpbWVzdGFtcDogZnVuY3Rpb24gcGFyc2VUaW1lc3RhbXAodmFsdWUpIHsKICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsgLy8gdW5peCB0aW1lc3RhbXAgKG51bWJlcikKICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUgKiAxMDAwKTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlxkKyQvKSkgeyAvLyB1bml4IHRpbWVzdGFtcAogICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApOwogICAgICB9IGVsc2UgaWYgKHZhbHVlLm1hdGNoKC9eXGR7NH0vKSkgeyAvLyBpc284NjAxCiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTsKICAgICAgfSBlbHNlIGlmICh2YWx1ZS5tYXRjaCgvXlx3ezN9LC8pKSB7IC8vIHJmYzgyMgogICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcigKICAgICAgICAgIG5ldyBFcnJvcigndW5oYW5kbGVkIHRpbWVzdGFtcCBmb3JtYXQ6ICcgKyB2YWx1ZSksCiAgICAgICAgICB7Y29kZTogJ1RpbWVzdGFtcFBhcnNlckVycm9yJ30pOwogICAgICB9CiAgICB9CgogIH0sCgogIGNyeXB0bzogewogICAgY3JjMzJUYWJsZTogWwogICAgIDB4MDAwMDAwMDAsIDB4NzcwNzMwOTYsIDB4RUUwRTYxMkMsIDB4OTkwOTUxQkEsIDB4MDc2REM0MTksCiAgICAgMHg3MDZBRjQ4RiwgMHhFOTYzQTUzNSwgMHg5RTY0OTVBMywgMHgwRURCODgzMiwgMHg3OURDQjhBNCwKICAgICAweEUwRDVFOTFFLCAweDk3RDJEOTg4LCAweDA5QjY0QzJCLCAweDdFQjE3Q0JELCAweEU3QjgyRDA3LAogICAgIDB4OTBCRjFEOTEsIDB4MURCNzEwNjQsIDB4NkFCMDIwRjIsIDB4RjNCOTcxNDgsIDB4ODRCRTQxREUsCiAgICAgMHgxQURBRDQ3RCwgMHg2RERERTRFQiwgMHhGNEQ0QjU1MSwgMHg4M0QzODVDNywgMHgxMzZDOTg1NiwKICAgICAweDY0NkJBOEMwLCAweEZENjJGOTdBLCAweDhBNjVDOUVDLCAweDE0MDE1QzRGLCAweDYzMDY2Q0Q5LAogICAgIDB4RkEwRjNENjMsIDB4OEQwODBERjUsIDB4M0I2RTIwQzgsIDB4NEM2OTEwNUUsIDB4RDU2MDQxRTQsCiAgICAgMHhBMjY3NzE3MiwgMHgzQzAzRTREMSwgMHg0QjA0RDQ0NywgMHhEMjBEODVGRCwgMHhBNTBBQjU2QiwKICAgICAweDM1QjVBOEZBLCAweDQyQjI5ODZDLCAweERCQkJDOUQ2LCAweEFDQkNGOTQwLCAweDMyRDg2Q0UzLAogICAgIDB4NDVERjVDNzUsIDB4RENENjBEQ0YsIDB4QUJEMTNENTksIDB4MjZEOTMwQUMsIDB4NTFERTAwM0EsCiAgICAgMHhDOEQ3NTE4MCwgMHhCRkQwNjExNiwgMHgyMUI0RjRCNSwgMHg1NkIzQzQyMywgMHhDRkJBOTU5OSwKICAgICAweEI4QkRBNTBGLCAweDI4MDJCODlFLCAweDVGMDU4ODA4LCAweEM2MENEOUIyLCAweEIxMEJFOTI0LAogICAgIDB4MkY2RjdDODcsIDB4NTg2ODRDMTEsIDB4QzE2MTFEQUIsIDB4QjY2NjJEM0QsIDB4NzZEQzQxOTAsCiAgICAgMHgwMURCNzEwNiwgMHg5OEQyMjBCQywgMHhFRkQ1MTAyQSwgMHg3MUIxODU4OSwgMHgwNkI2QjUxRiwKICAgICAweDlGQkZFNEE1LCAweEU4QjhENDMzLCAweDc4MDdDOUEyLCAweDBGMDBGOTM0LCAweDk2MDlBODhFLAogICAgIDB4RTEwRTk4MTgsIDB4N0Y2QTBEQkIsIDB4MDg2RDNEMkQsIDB4OTE2NDZDOTcsIDB4RTY2MzVDMDEsCiAgICAgMHg2QjZCNTFGNCwgMHgxQzZDNjE2MiwgMHg4NTY1MzBEOCwgMHhGMjYyMDA0RSwgMHg2QzA2OTVFRCwKICAgICAweDFCMDFBNTdCLCAweDgyMDhGNEMxLCAweEY1MEZDNDU3LCAweDY1QjBEOUM2LCAweDEyQjdFOTUwLAogICAgIDB4OEJCRUI4RUEsIDB4RkNCOTg4N0MsIDB4NjJERDFEREYsIDB4MTVEQTJENDksIDB4OENEMzdDRjMsCiAgICAgMHhGQkQ0NEM2NSwgMHg0REIyNjE1OCwgMHgzQUI1NTFDRSwgMHhBM0JDMDA3NCwgMHhENEJCMzBFMiwKICAgICAweDRBREZBNTQxLCAweDNERDg5NUQ3LCAweEE0RDFDNDZELCAweEQzRDZGNEZCLCAweDQzNjlFOTZBLAogICAgIDB4MzQ2RUQ5RkMsIDB4QUQ2Nzg4NDYsIDB4REE2MEI4RDAsIDB4NDQwNDJENzMsIDB4MzMwMzFERTUsCiAgICAgMHhBQTBBNEM1RiwgMHhERDBEN0NDOSwgMHg1MDA1NzEzQywgMHgyNzAyNDFBQSwgMHhCRTBCMTAxMCwKICAgICAweEM5MEMyMDg2LCAweDU3NjhCNTI1LCAweDIwNkY4NUIzLCAweEI5NjZENDA5LCAweENFNjFFNDlGLAogICAgIDB4NUVERUY5MEUsIDB4MjlEOUM5OTgsIDB4QjBEMDk4MjIsIDB4QzdEN0E4QjQsIDB4NTlCMzNEMTcsCiAgICAgMHgyRUI0MEQ4MSwgMHhCN0JENUMzQiwgMHhDMEJBNkNBRCwgMHhFREI4ODMyMCwgMHg5QUJGQjNCNiwKICAgICAweDAzQjZFMjBDLCAweDc0QjFEMjlBLCAweEVBRDU0NzM5LCAweDlERDI3N0FGLCAweDA0REIyNjE1LAogICAgIDB4NzNEQzE2ODMsIDB4RTM2MzBCMTIsIDB4OTQ2NDNCODQsIDB4MEQ2RDZBM0UsIDB4N0E2QTVBQTgsCiAgICAgMHhFNDBFQ0YwQiwgMHg5MzA5RkY5RCwgMHgwQTAwQUUyNywgMHg3RDA3OUVCMSwgMHhGMDBGOTM0NCwKICAgICAweDg3MDhBM0QyLCAweDFFMDFGMjY4LCAweDY5MDZDMkZFLCAweEY3NjI1NzVELCAweDgwNjU2N0NCLAogICAgIDB4MTk2QzM2NzEsIDB4NkU2QjA2RTcsIDB4RkVENDFCNzYsIDB4ODlEMzJCRTAsIDB4MTBEQTdBNUEsCiAgICAgMHg2N0RENEFDQywgMHhGOUI5REY2RiwgMHg4RUJFRUZGOSwgMHgxN0I3QkU0MywgMHg2MEIwOEVENSwKICAgICAweEQ2RDZBM0U4LCAweEExRDE5MzdFLCAweDM4RDhDMkM0LCAweDRGREZGMjUyLCAweEQxQkI2N0YxLAogICAgIDB4QTZCQzU3NjcsIDB4M0ZCNTA2REQsIDB4NDhCMjM2NEIsIDB4RDgwRDJCREEsIDB4QUYwQTFCNEMsCiAgICAgMHgzNjAzNEFGNiwgMHg0MTA0N0E2MCwgMHhERjYwRUZDMywgMHhBODY3REY1NSwgMHgzMTZFOEVFRiwKICAgICAweDQ2NjlCRTc5LCAweENCNjFCMzhDLCAweEJDNjY4MzFBLCAweDI1NkZEMkEwLCAweDUyNjhFMjM2LAogICAgIDB4Q0MwQzc3OTUsIDB4QkIwQjQ3MDMsIDB4MjIwMjE2QjksIDB4NTUwNTI2MkYsIDB4QzVCQTNCQkUsCiAgICAgMHhCMkJEMEIyOCwgMHgyQkI0NUE5MiwgMHg1Q0IzNkEwNCwgMHhDMkQ3RkZBNywgMHhCNUQwQ0YzMSwKICAgICAweDJDRDk5RThCLCAweDVCREVBRTFELCAweDlCNjRDMkIwLCAweEVDNjNGMjI2LCAweDc1NkFBMzlDLAogICAgIDB4MDI2RDkzMEEsIDB4OUMwOTA2QTksIDB4RUIwRTM2M0YsIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsCiAgICAgMHg5NUJGNEE4MiwgMHhFMkI4N0ExNCwgMHg3QkIxMkJBRSwgMHgwQ0I2MUIzOCwgMHg5MkQyOEU5QiwKICAgICAweEU1RDVCRTBELCAweDdDRENFRkI3LCAweDBCREJERjIxLCAweDg2RDNEMkQ0LCAweEYxRDRFMjQyLAogICAgIDB4NjhEREIzRjgsIDB4MUZEQTgzNkUsIDB4ODFCRTE2Q0QsIDB4RjZCOTI2NUIsIDB4NkZCMDc3RTEsCiAgICAgMHgxOEI3NDc3NywgMHg4ODA4NUFFNiwgMHhGRjBGNkE3MCwgMHg2NjA2M0JDQSwgMHgxMTAxMEI1QywKICAgICAweDhGNjU5RUZGLCAweEY4NjJBRTY5LCAweDYxNkJGRkQzLCAweDE2NkNDRjQ1LCAweEEwMEFFMjc4LAogICAgIDB4RDcwREQyRUUsIDB4NEUwNDgzNTQsIDB4MzkwM0IzQzIsIDB4QTc2NzI2NjEsIDB4RDA2MDE2RjcsCiAgICAgMHg0OTY5NDc0RCwgMHgzRTZFNzdEQiwgMHhBRUQxNkE0QSwgMHhEOUQ2NUFEQywgMHg0MERGMEI2NiwKICAgICAweDM3RDgzQkYwLCAweEE5QkNBRTUzLCAweERFQkI5RUM1LCAweDQ3QjJDRjdGLCAweDMwQjVGRkU5LAogICAgIDB4QkRCREYyMUMsIDB4Q0FCQUMyOEEsIDB4NTNCMzkzMzAsIDB4MjRCNEEzQTYsIDB4QkFEMDM2MDUsCiAgICAgMHhDREQ3MDY5MywgMHg1NERFNTcyOSwgMHgyM0Q5NjdCRiwgMHhCMzY2N0EyRSwgMHhDNDYxNEFCOCwKICAgICAweDVENjgxQjAyLCAweDJBNkYyQjk0LCAweEI0MEJCRTM3LCAweEMzMEM4RUExLCAweDVBMDVERjFCLAogICAgIDB4MkQwMkVGOERdLAoKICAgIGNyYzMyOiBmdW5jdGlvbiBjcmMzMihkYXRhKSB7CiAgICAgIHZhciB0YmwgPSB1dGlsLmNyeXB0by5jcmMzMlRhYmxlOwogICAgICB2YXIgY3JjID0gMCBeIC0xOwoKICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgewogICAgICAgIGRhdGEgPSB1dGlsLmJ1ZmZlci50b0J1ZmZlcihkYXRhKTsKICAgICAgfQoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGNvZGUgPSBkYXRhLnJlYWRVSW50OChpKTsKICAgICAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRibFsoY3JjIF4gY29kZSkgJiAweEZGXTsKICAgICAgfQogICAgICByZXR1cm4gKGNyYyBeIC0xKSA+Pj4gMDsKICAgIH0sCgogICAgaG1hYzogZnVuY3Rpb24gaG1hYyhrZXksIHN0cmluZywgZGlnZXN0LCBmbikgewogICAgICBpZiAoIWRpZ2VzdCkgZGlnZXN0ID0gJ2JpbmFyeSc7CiAgICAgIGlmIChkaWdlc3QgPT09ICdidWZmZXInKSB7IGRpZ2VzdCA9IHVuZGVmaW5lZDsgfQogICAgICBpZiAoIWZuKSBmbiA9ICdzaGEyNTYnOwogICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ3N0cmluZycpIHN0cmluZyA9IHV0aWwuYnVmZmVyLnRvQnVmZmVyKHN0cmluZyk7CiAgICAgIHJldHVybiB1dGlsLmNyeXB0by5saWIuY3JlYXRlSG1hYyhmbiwga2V5KS51cGRhdGUoc3RyaW5nKS5kaWdlc3QoZGlnZXN0KTsKICAgIH0sCgogICAgbWQ1OiBmdW5jdGlvbiBtZDUoZGF0YSwgZGlnZXN0LCBjYWxsYmFjaykgewogICAgICByZXR1cm4gdXRpbC5jcnlwdG8uaGFzaCgnbWQ1JywgZGF0YSwgZGlnZXN0LCBjYWxsYmFjayk7CiAgICB9LAoKICAgIHNoYTI1NjogZnVuY3Rpb24gc2hhMjU2KGRhdGEsIGRpZ2VzdCwgY2FsbGJhY2spIHsKICAgICAgcmV0dXJuIHV0aWwuY3J5cHRvLmhhc2goJ3NoYTI1NicsIGRhdGEsIGRpZ2VzdCwgY2FsbGJhY2spOwogICAgfSwKCiAgICBoYXNoOiBmdW5jdGlvbihhbGdvcml0aG0sIGRhdGEsIGRpZ2VzdCwgY2FsbGJhY2spIHsKICAgICAgdmFyIGhhc2ggPSB1dGlsLmNyeXB0by5jcmVhdGVIYXNoKGFsZ29yaXRobSk7CiAgICAgIGlmICghZGlnZXN0KSB7IGRpZ2VzdCA9ICdiaW5hcnknOyB9CiAgICAgIGlmIChkaWdlc3QgPT09ICdidWZmZXInKSB7IGRpZ2VzdCA9IHVuZGVmaW5lZDsgfQogICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gdXRpbC5idWZmZXIudG9CdWZmZXIoZGF0YSk7CiAgICAgIHZhciBzbGljZUZuID0gdXRpbC5hcnJheVNsaWNlRm4oZGF0YSk7CiAgICAgIHZhciBpc0J1ZmZlciA9IHV0aWwuQnVmZmVyLmlzQnVmZmVyKGRhdGEpOwogICAgICAvL0lkZW50aWZ5aW5nIG9iamVjdHMgd2l0aCBhbiBBcnJheUJ1ZmZlciBhcyBidWZmZXJzCiAgICAgIGlmICh1dGlsLmlzQnJvd3NlcigpICYmIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgZGF0YSAmJiBkYXRhLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSBpc0J1ZmZlciA9IHRydWU7CgogICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmCiAgICAgICAgICB0eXBlb2YgZGF0YS5vbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNCdWZmZXIpIHsKICAgICAgICBkYXRhLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHsgaGFzaC51cGRhdGUoY2h1bmspOyB9KTsKICAgICAgICBkYXRhLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGVycikgeyBjYWxsYmFjayhlcnIpOyB9KTsKICAgICAgICBkYXRhLm9uKCdlbmQnLCBmdW5jdGlvbigpIHsgY2FsbGJhY2sobnVsbCwgaGFzaC5kaWdlc3QoZGlnZXN0KSk7IH0pOwogICAgICB9IGVsc2UgaWYgKGNhbGxiYWNrICYmIHNsaWNlRm4gJiYgIWlzQnVmZmVyICYmCiAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGVSZWFkZXIgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgLy8gdGhpcyBtaWdodCBiZSBhIEZpbGUvQmxvYgogICAgICAgIHZhciBpbmRleCA9IDAsIHNpemUgPSAxMDI0ICogNTEyOwogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZWFkIGRhdGEuJykpOwogICAgICAgIH07CiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIGJ1ZiA9IG5ldyB1dGlsLkJ1ZmZlcihuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0KSk7CiAgICAgICAgICBoYXNoLnVwZGF0ZShidWYpOwogICAgICAgICAgaW5kZXggKz0gYnVmLmxlbmd0aDsKICAgICAgICAgIHJlYWRlci5fY29udGludWVSZWFkaW5nKCk7CiAgICAgICAgfTsKICAgICAgICByZWFkZXIuX2NvbnRpbnVlUmVhZGluZyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgaWYgKGluZGV4ID49IGRhdGEuc2l6ZSkgewogICAgICAgICAgICBjYWxsYmFjayhudWxsLCBoYXNoLmRpZ2VzdChkaWdlc3QpKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBiYWNrID0gaW5kZXggKyBzaXplOwogICAgICAgICAgaWYgKGJhY2sgPiBkYXRhLnNpemUpIGJhY2sgPSBkYXRhLnNpemU7CiAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoc2xpY2VGbi5jYWxsKGRhdGEsIGluZGV4LCBiYWNrKSk7CiAgICAgICAgfTsKCiAgICAgICAgcmVhZGVyLl9jb250aW51ZVJlYWRpbmcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodXRpbC5pc0Jyb3dzZXIoKSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIWlzQnVmZmVyKSB7CiAgICAgICAgICBkYXRhID0gbmV3IHV0aWwuQnVmZmVyKG5ldyBVaW50OEFycmF5KGRhdGEpKTsKICAgICAgICB9CiAgICAgICAgdmFyIG91dCA9IGhhc2gudXBkYXRlKGRhdGEpLmRpZ2VzdChkaWdlc3QpOwogICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgb3V0KTsKICAgICAgICByZXR1cm4gb3V0OwogICAgICB9CiAgICB9LAoKICAgIHRvSGV4OiBmdW5jdGlvbiB0b0hleChkYXRhKSB7CiAgICAgIHZhciBvdXQgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgb3V0LnB1c2goKCcwJyArIGRhdGEuY2hhckNvZGVBdChpKS50b1N0cmluZygxNikpLnN1YnN0cigtMiwgMikpOwogICAgICB9CiAgICAgIHJldHVybiBvdXQuam9pbignJyk7CiAgICB9LAoKICAgIGNyZWF0ZUhhc2g6IGZ1bmN0aW9uIGNyZWF0ZUhhc2goYWxnb3JpdGhtKSB7CiAgICAgIHJldHVybiB1dGlsLmNyeXB0by5saWIuY3JlYXRlSGFzaChhbGdvcml0aG0pOwogICAgfQoKICB9LAoKICAvKiogQCFpZ25vcmUgKi8KCiAgLyogQWJvcnQgY29uc3RhbnQgKi8KICBhYm9ydDoge30sCgogIGVhY2g6IGZ1bmN0aW9uIGVhY2gob2JqZWN0LCBpdGVyRnVuY3Rpb24pIHsKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHsKICAgICAgICB2YXIgcmV0ID0gaXRlckZ1bmN0aW9uLmNhbGwodGhpcywga2V5LCBvYmplY3Rba2V5XSk7CiAgICAgICAgaWYgKHJldCA9PT0gdXRpbC5hYm9ydCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9LAoKICBhcnJheUVhY2g6IGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlckZ1bmN0aW9uKSB7CiAgICBmb3IgKHZhciBpZHggaW4gYXJyYXkpIHsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaWR4KSkgewogICAgICAgIHZhciByZXQgPSBpdGVyRnVuY3Rpb24uY2FsbCh0aGlzLCBhcnJheVtpZHhdLCBwYXJzZUludChpZHgsIDEwKSk7CiAgICAgICAgaWYgKHJldCA9PT0gdXRpbC5hYm9ydCkgYnJlYWs7CiAgICAgIH0KICAgIH0KICB9LAoKICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmoxLCBvYmoyKSB7CiAgICB1dGlsLmVhY2gob2JqMiwgZnVuY3Rpb24gaXRlcmF0b3Ioa2V5LCBpdGVtKSB7CiAgICAgIG9iajFba2V5XSA9IGl0ZW07CiAgICB9KTsKICAgIHJldHVybiBvYmoxOwogIH0sCgogIG1lcmdlOiBmdW5jdGlvbiBtZXJnZShvYmoxLCBvYmoyKSB7CiAgICByZXR1cm4gdXRpbC51cGRhdGUodXRpbC5jb3B5KG9iajEpLCBvYmoyKTsKICB9LAoKICBjb3B5OiBmdW5jdGlvbiBjb3B5KG9iamVjdCkgewogICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG9iamVjdDsKICAgIHZhciBkdXBlID0ge307CiAgICAvLyBqc2hpbnQgZm9yaW46ZmFsc2UKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAgZHVwZVtrZXldID0gb2JqZWN0W2tleV07CiAgICB9CiAgICByZXR1cm4gZHVwZTsKICB9LAoKICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KG9iaikgewogICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9LAoKICBhcnJheVNsaWNlRm46IGZ1bmN0aW9uIGFycmF5U2xpY2VGbihvYmopIHsKICAgIHZhciBmbiA9IG9iai5zbGljZSB8fCBvYmoud2Via2l0U2xpY2UgfHwgb2JqLm1velNsaWNlOwogICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IGZuIDogbnVsbDsKICB9LAoKICBpc1R5cGU6IGZ1bmN0aW9uIGlzVHlwZShvYmosIHR5cGUpIHsKICAgIC8vIGhhbmRsZSBjcm9zcy0iZnJhbWUiIG9iamVjdHMKICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgdHlwZSA9IHV0aWwudHlwZU5hbWUodHlwZSk7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0ICcgKyB0eXBlICsgJ10nOwogIH0sCgogIHR5cGVOYW1lOiBmdW5jdGlvbiB0eXBlTmFtZSh0eXBlKSB7CiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHR5cGUsICduYW1lJykpIHJldHVybiB0eXBlLm5hbWU7CiAgICB2YXIgc3RyID0gdHlwZS50b1N0cmluZygpOwogICAgdmFyIG1hdGNoID0gc3RyLm1hdGNoKC9eXHMqZnVuY3Rpb24gKC4rKVwoLyk7CiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6IHN0cjsKICB9LAoKICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZXJyLCBvcHRpb25zKSB7CiAgICB2YXIgb3JpZ2luYWxFcnJvciA9IG51bGw7CiAgICBpZiAodHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJyAmJiBlcnIubWVzc2FnZSAhPT0gJycpIHsKICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCAob3B0aW9ucyAmJiBvcHRpb25zLm1lc3NhZ2UpKSB7CiAgICAgICAgb3JpZ2luYWxFcnJvciA9IHV0aWwuY29weShlcnIpOwogICAgICAgIG9yaWdpbmFsRXJyb3IubWVzc2FnZSA9IGVyci5tZXNzYWdlOwogICAgICB9CiAgICB9CiAgICBlcnIubWVzc2FnZSA9IGVyci5tZXNzYWdlIHx8IG51bGw7CgogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgewogICAgICBlcnIubWVzc2FnZSA9IG9wdGlvbnM7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsKSB7CiAgICAgIHV0aWwudXBkYXRlKGVyciwgb3B0aW9ucyk7CiAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UpCiAgICAgICAgZXJyLm1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7CiAgICAgIGlmIChvcHRpb25zLmNvZGUgfHwgb3B0aW9ucy5uYW1lKQogICAgICAgIGVyci5jb2RlID0gb3B0aW9ucy5jb2RlIHx8IG9wdGlvbnMubmFtZTsKICAgICAgaWYgKG9wdGlvbnMuc3RhY2spCiAgICAgICAgZXJyLnN0YWNrID0gb3B0aW9ucy5zdGFjazsKICAgIH0KCiAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAnbmFtZScsIHt3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2V9KTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ21lc3NhZ2UnLCB7ZW51bWVyYWJsZTogdHJ1ZX0pOwogICAgfQoKICAgIGVyci5uYW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLm5hbWUgfHwgZXJyLm5hbWUgfHwgZXJyLmNvZGUgfHwgJ0Vycm9yJzsKICAgIGVyci50aW1lID0gbmV3IERhdGUoKTsKCiAgICBpZiAob3JpZ2luYWxFcnJvcikgZXJyLm9yaWdpbmFsRXJyb3IgPSBvcmlnaW5hbEVycm9yOwoKICAgIHJldHVybiBlcnI7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgaW5oZXJpdDogZnVuY3Rpb24gaW5oZXJpdChrbGFzcywgZmVhdHVyZXMpIHsKICAgIHZhciBuZXdPYmplY3QgPSBudWxsOwogICAgaWYgKGZlYXR1cmVzID09PSB1bmRlZmluZWQpIHsKICAgICAgZmVhdHVyZXMgPSBrbGFzczsKICAgICAga2xhc3MgPSBPYmplY3Q7CiAgICAgIG5ld09iamVjdCA9IHt9OwogICAgfSBlbHNlIHsKICAgICAgdmFyIGN0b3IgPSBmdW5jdGlvbiBDb25zdHJ1Y3RvcldyYXBwZXIoKSB7fTsKICAgICAgY3Rvci5wcm90b3R5cGUgPSBrbGFzcy5wcm90b3R5cGU7CiAgICAgIG5ld09iamVjdCA9IG5ldyBjdG9yKCk7CiAgICB9CgogICAgLy8gY29uc3RydWN0b3Igbm90IHN1cHBsaWVkLCBjcmVhdGUgcGFzcy10aHJvdWdoIGN0b3IKICAgIGlmIChmZWF0dXJlcy5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CiAgICAgIGZlYXR1cmVzLmNvbnN0cnVjdG9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKGtsYXNzICE9PSBPYmplY3QpIHsKICAgICAgICAgIHJldHVybiBrbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICBmZWF0dXJlcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBuZXdPYmplY3Q7CiAgICB1dGlsLnVwZGF0ZShmZWF0dXJlcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGZlYXR1cmVzKTsKICAgIGZlYXR1cmVzLmNvbnN0cnVjdG9yLl9fc3VwZXJfXyA9IGtsYXNzOwogICAgcmV0dXJuIGZlYXR1cmVzLmNvbnN0cnVjdG9yOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIG1peGluOiBmdW5jdGlvbiBtaXhpbigpIHsKICAgIHZhciBrbGFzcyA9IGFyZ3VtZW50c1swXTsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIC8vIGpzaGludCBmb3JpbjpmYWxzZQogICAgICBmb3IgKHZhciBwcm9wIGluIGFyZ3VtZW50c1tpXS5wcm90b3R5cGUpIHsKICAgICAgICB2YXIgZm4gPSBhcmd1bWVudHNbaV0ucHJvdG90eXBlW3Byb3BdOwogICAgICAgIGlmIChwcm9wICE9PSAnY29uc3RydWN0b3InKSB7CiAgICAgICAgICBrbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmbjsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBrbGFzczsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBoaWRlUHJvcGVydGllczogZnVuY3Rpb24gaGlkZVByb3BlcnRpZXMob2JqLCBwcm9wcykgewogICAgaWYgKHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09ICdmdW5jdGlvbicpIHJldHVybjsKCiAgICB1dGlsLmFycmF5RWFjaChwcm9wcywgZnVuY3Rpb24gKGtleSkgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIHByb3BlcnR5OiBmdW5jdGlvbiBwcm9wZXJ0eShvYmosIG5hbWUsIHZhbHVlLCBlbnVtZXJhYmxlLCBpc1ZhbHVlKSB7CiAgICB2YXIgb3B0cyA9IHsKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlICE9PSB1bmRlZmluZWQgPyBlbnVtZXJhYmxlIDogdHJ1ZQogICAgfTsKICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWlzVmFsdWUpIHsKICAgICAgb3B0cy5nZXQgPSB2YWx1ZTsKICAgIH0KICAgIGVsc2UgewogICAgICBvcHRzLnZhbHVlID0gdmFsdWU7IG9wdHMud3JpdGFibGUgPSB0cnVlOwogICAgfQoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIG9wdHMpOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIG1lbW9pemVkUHJvcGVydHk6IGZ1bmN0aW9uIG1lbW9pemVkUHJvcGVydHkob2JqLCBuYW1lLCBnZXQsIGVudW1lcmFibGUpIHsKICAgIHZhciBjYWNoZWRWYWx1ZSA9IG51bGw7CgogICAgLy8gYnVpbGQgZW51bWVyYWJsZSBhdHRyaWJ1dGUgZm9yIGVhY2ggdmFsdWUgd2l0aCBsYXp5IGFjY2Vzc29yLgogICAgdXRpbC5wcm9wZXJ0eShvYmosIG5hbWUsIGZ1bmN0aW9uKCkgewogICAgICBpZiAoY2FjaGVkVmFsdWUgPT09IG51bGwpIHsKICAgICAgICBjYWNoZWRWYWx1ZSA9IGdldCgpOwogICAgICB9CiAgICAgIHJldHVybiBjYWNoZWRWYWx1ZTsKICAgIH0sIGVudW1lcmFibGUpOwogIH0sCgogIC8qKgogICAqIFRPRE8gUmVtb3ZlIGluIG1ham9yIHZlcnNpb24gcmV2aXNpb24KICAgKiBUaGlzIGJhY2tmaWxsIHBvcHVsYXRlcyByZXNwb25zZSBkYXRhIHdpdGhvdXQgdGhlCiAgICogdG9wLWxldmVsIHBheWxvYWQgbmFtZS4KICAgKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGhvaXN0UGF5bG9hZE1lbWJlcjogZnVuY3Rpb24gaG9pc3RQYXlsb2FkTWVtYmVyKHJlc3ApIHsKICAgIHZhciByZXEgPSByZXNwLnJlcXVlc3Q7CiAgICB2YXIgb3BlcmF0aW9uTmFtZSA9IHJlcS5vcGVyYXRpb247CiAgICB2YXIgb3BlcmF0aW9uID0gcmVxLnNlcnZpY2UuYXBpLm9wZXJhdGlvbnNbb3BlcmF0aW9uTmFtZV07CiAgICB2YXIgb3V0cHV0ID0gb3BlcmF0aW9uLm91dHB1dDsKICAgIGlmIChvdXRwdXQucGF5bG9hZCAmJiAhb3BlcmF0aW9uLmhhc0V2ZW50T3V0cHV0KSB7CiAgICAgIHZhciBwYXlsb2FkTWVtYmVyID0gb3V0cHV0Lm1lbWJlcnNbb3V0cHV0LnBheWxvYWRdOwogICAgICB2YXIgcmVzcG9uc2VQYXlsb2FkID0gcmVzcC5kYXRhW291dHB1dC5wYXlsb2FkXTsKICAgICAgaWYgKHBheWxvYWRNZW1iZXIudHlwZSA9PT0gJ3N0cnVjdHVyZScpIHsKICAgICAgICB1dGlsLmVhY2gocmVzcG9uc2VQYXlsb2FkLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICB1dGlsLnByb3BlcnR5KHJlc3AuZGF0YSwga2V5LCB2YWx1ZSwgZmFsc2UpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQ29tcHV0ZSBTSEEtMjU2IGNoZWNrc3VtcyBvZiBzdHJlYW1zCiAgICoKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjb21wdXRlU2hhMjU2OiBmdW5jdGlvbiBjb21wdXRlU2hhMjU2KGJvZHksIGRvbmUpIHsKICAgIGlmICh1dGlsLmlzTm9kZSgpKSB7CiAgICAgIHZhciBTdHJlYW0gPSB1dGlsLnN0cmVhbS5TdHJlYW07CiAgICAgIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7CiAgICAgIGlmICh0eXBlb2YgU3RyZWFtID09PSAnZnVuY3Rpb24nICYmIGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIHsKICAgICAgICBpZiAodHlwZW9mIGJvZHkucGF0aCA9PT0gJ3N0cmluZycpIHsgLy8gYXNzdW1lIGZpbGUgb2JqZWN0CiAgICAgICAgICB2YXIgc2V0dGluZ3MgPSB7fTsKICAgICAgICAgIGlmICh0eXBlb2YgYm9keS5zdGFydCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgc2V0dGluZ3Muc3RhcnQgPSBib2R5LnN0YXJ0OwogICAgICAgICAgfQogICAgICAgICAgaWYgKHR5cGVvZiBib2R5LmVuZCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgc2V0dGluZ3MuZW5kID0gYm9keS5lbmQ7CiAgICAgICAgICB9CiAgICAgICAgICBib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbShib2R5LnBhdGgsIHNldHRpbmdzKTsKICAgICAgICB9IGVsc2UgeyAvLyBUT0RPIHN1cHBvcnQgb3RoZXIgc3RyZWFtIHR5cGVzCiAgICAgICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ05vbi1maWxlIHN0cmVhbSBvYmplY3RzIGFyZSAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbm90IHN1cHBvcnRlZCB3aXRoIFNpZ1Y0JykpOwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIHV0aWwuY3J5cHRvLnNoYTI1Nihib2R5LCAnaGV4JywgZnVuY3Rpb24oZXJyLCBzaGEpIHsKICAgICAgaWYgKGVycikgZG9uZShlcnIpOwogICAgICBlbHNlIGRvbmUobnVsbCwgc2hhKTsKICAgIH0pOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGlzQ2xvY2tTa2V3ZWQ6IGZ1bmN0aW9uIGlzQ2xvY2tTa2V3ZWQoc2VydmVyVGltZSkgewogICAgaWYgKHNlcnZlclRpbWUpIHsKICAgICAgdXRpbC5wcm9wZXJ0eShBV1MuY29uZmlnLCAnaXNDbG9ja1NrZXdlZCcsCiAgICAgICAgTWF0aC5hYnMobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzZXJ2ZXJUaW1lKSA+PSAzMDAwMDAsIGZhbHNlKTsKICAgICAgcmV0dXJuIEFXUy5jb25maWcuaXNDbG9ja1NrZXdlZDsKICAgIH0KICB9LAoKICBhcHBseUNsb2NrT2Zmc2V0OiBmdW5jdGlvbiBhcHBseUNsb2NrT2Zmc2V0KHNlcnZlclRpbWUpIHsKICAgIGlmIChzZXJ2ZXJUaW1lKQogICAgICBBV1MuY29uZmlnLnN5c3RlbUNsb2NrT2Zmc2V0ID0gc2VydmVyVGltZSAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGV4dHJhY3RSZXF1ZXN0SWQ6IGZ1bmN0aW9uIGV4dHJhY3RSZXF1ZXN0SWQocmVzcCkgewogICAgdmFyIHJlcXVlc3RJZCA9IHJlc3AuaHR0cFJlc3BvbnNlLmhlYWRlcnNbJ3gtYW16LXJlcXVlc3QtaWQnXSB8fAogICAgICAgICAgICAgICAgICAgICByZXNwLmh0dHBSZXNwb25zZS5oZWFkZXJzWyd4LWFtem4tcmVxdWVzdGlkJ107CgogICAgaWYgKCFyZXF1ZXN0SWQgJiYgcmVzcC5kYXRhICYmIHJlc3AuZGF0YS5SZXNwb25zZU1ldGFkYXRhKSB7CiAgICAgIHJlcXVlc3RJZCA9IHJlc3AuZGF0YS5SZXNwb25zZU1ldGFkYXRhLlJlcXVlc3RJZDsKICAgIH0KCiAgICBpZiAocmVxdWVzdElkKSB7CiAgICAgIHJlc3AucmVxdWVzdElkID0gcmVxdWVzdElkOwogICAgfQoKICAgIGlmIChyZXNwLmVycm9yKSB7CiAgICAgIHJlc3AuZXJyb3IucmVxdWVzdElkID0gcmVxdWVzdElkOwogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGFkZFByb21pc2VzOiBmdW5jdGlvbiBhZGRQcm9taXNlcyhjb25zdHJ1Y3RvcnMsIFByb21pc2VEZXBlbmRlbmN5KSB7CiAgICB2YXIgZGVsZXRlUHJvbWlzZXMgPSBmYWxzZTsKICAgIGlmIChQcm9taXNlRGVwZW5kZW5jeSA9PT0gdW5kZWZpbmVkICYmIEFXUyAmJiBBV1MuY29uZmlnKSB7CiAgICAgIFByb21pc2VEZXBlbmRlbmN5ID0gQVdTLmNvbmZpZy5nZXRQcm9taXNlc0RlcGVuZGVuY3koKTsKICAgIH0KICAgIGlmIChQcm9taXNlRGVwZW5kZW5jeSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykgewogICAgICBQcm9taXNlRGVwZW5kZW5jeSA9IFByb21pc2U7CiAgICB9CiAgICBpZiAodHlwZW9mIFByb21pc2VEZXBlbmRlbmN5ICE9PSAnZnVuY3Rpb24nKSBkZWxldGVQcm9taXNlcyA9IHRydWU7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29uc3RydWN0b3JzKSkgY29uc3RydWN0b3JzID0gW2NvbnN0cnVjdG9yc107CgogICAgZm9yICh2YXIgaW5kID0gMDsgaW5kIDwgY29uc3RydWN0b3JzLmxlbmd0aDsgaW5kKyspIHsKICAgICAgdmFyIGNvbnN0cnVjdG9yID0gY29uc3RydWN0b3JzW2luZF07CiAgICAgIGlmIChkZWxldGVQcm9taXNlcykgewogICAgICAgIGlmIChjb25zdHJ1Y3Rvci5kZWxldGVQcm9taXNlc0Zyb21DbGFzcykgewogICAgICAgICAgY29uc3RydWN0b3IuZGVsZXRlUHJvbWlzZXNGcm9tQ2xhc3MoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY29uc3RydWN0b3IuYWRkUHJvbWlzZXNUb0NsYXNzKSB7CiAgICAgICAgY29uc3RydWN0b3IuYWRkUHJvbWlzZXNUb0NsYXNzKFByb21pc2VEZXBlbmRlbmN5KTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gYSBwcm9taXNlIHdob3NlIGZhdGUgaXMgZGVjaWRlZCBieSB0aGUKICAgKiBjYWxsYmFjayBiZWhhdmlvciBvZiB0aGUgZ2l2ZW4gbWV0aG9kIHdpdGggYG1ldGhvZE5hbWVgLiBUaGUgbWV0aG9kIHRvIGJlCiAgICogcHJvbWlzaWZpZWQgc2hvdWxkIGNvbmZvcm0gdG8gbm9kZS5qcyBjb252ZW50aW9uIG9mIGFjY2VwdGluZyBhIGNhbGxiYWNrIGFzCiAgICogbGFzdCBhcmd1bWVudCBhbmQgY2FsbGluZyB0aGF0IGNhbGxiYWNrIHdpdGggZXJyb3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICogYW5kIHN1Y2Nlc3MgdmFsdWUgb24gdGhlIHNlY29uZCBhcmd1bWVudC4KICAgKi8KICBwcm9taXNpZnlNZXRob2Q6IGZ1bmN0aW9uIHByb21pc2lmeU1ldGhvZChtZXRob2ROYW1lLCBQcm9taXNlRGVwZW5kZW5jeSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIHByb21pc2UoKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICByZXR1cm4gbmV3IFByb21pc2VEZXBlbmRlbmN5KGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGFyZ3MucHVzaChmdW5jdGlvbihlcnIsIGRhdGEpIHsKICAgICAgICAgIGlmIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlKGRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHNlbGZbbWV0aG9kTmFtZV0uYXBwbHkoc2VsZiwgYXJncyk7CiAgICAgIH0pOwogICAgfTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBpc0R1YWxzdGFja0F2YWlsYWJsZTogZnVuY3Rpb24gaXNEdWFsc3RhY2tBdmFpbGFibGUoc2VydmljZSkgewogICAgaWYgKCFzZXJ2aWNlKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuLi9hcGlzL21ldGFkYXRhLmpzb24nKTsKICAgIGlmICh0eXBlb2Ygc2VydmljZSAhPT0gJ3N0cmluZycpIHNlcnZpY2UgPSBzZXJ2aWNlLnNlcnZpY2VJZGVudGlmaWVyOwogICAgaWYgKHR5cGVvZiBzZXJ2aWNlICE9PSAnc3RyaW5nJyB8fCAhbWV0YWRhdGEuaGFzT3duUHJvcGVydHkoc2VydmljZSkpIHJldHVybiBmYWxzZTsKICAgIHJldHVybiAhIW1ldGFkYXRhW3NlcnZpY2VdLmR1YWxzdGFja0F2YWlsYWJsZTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBjYWxjdWxhdGVSZXRyeURlbGF5OiBmdW5jdGlvbiBjYWxjdWxhdGVSZXRyeURlbGF5KHJldHJ5Q291bnQsIHJldHJ5RGVsYXlPcHRpb25zKSB7CiAgICBpZiAoIXJldHJ5RGVsYXlPcHRpb25zKSByZXRyeURlbGF5T3B0aW9ucyA9IHt9OwogICAgdmFyIGN1c3RvbUJhY2tvZmYgPSByZXRyeURlbGF5T3B0aW9ucy5jdXN0b21CYWNrb2ZmIHx8IG51bGw7CiAgICBpZiAodHlwZW9mIGN1c3RvbUJhY2tvZmYgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuIGN1c3RvbUJhY2tvZmYocmV0cnlDb3VudCk7CiAgICB9CiAgICB2YXIgYmFzZSA9IHR5cGVvZiByZXRyeURlbGF5T3B0aW9ucy5iYXNlID09PSAnbnVtYmVyJyA/IHJldHJ5RGVsYXlPcHRpb25zLmJhc2UgOiAxMDA7CiAgICB2YXIgZGVsYXkgPSBNYXRoLnJhbmRvbSgpICogKE1hdGgucG93KDIsIHJldHJ5Q291bnQpICogYmFzZSk7CiAgICByZXR1cm4gZGVsYXk7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgaGFuZGxlUmVxdWVzdFdpdGhSZXRyaWVzOiBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0V2l0aFJldHJpZXMoaHR0cFJlcXVlc3QsIG9wdGlvbnMsIGNiKSB7CiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTsKICAgIHZhciBodHRwID0gQVdTLkh0dHBDbGllbnQuZ2V0SW5zdGFuY2UoKTsKICAgIHZhciBodHRwT3B0aW9ucyA9IG9wdGlvbnMuaHR0cE9wdGlvbnMgfHwge307CiAgICB2YXIgcmV0cnlDb3VudCA9IDA7CgogICAgdmFyIGVyckNhbGxiYWNrID0gZnVuY3Rpb24oZXJyKSB7CiAgICAgIHZhciBtYXhSZXRyaWVzID0gb3B0aW9ucy5tYXhSZXRyaWVzIHx8IDA7CiAgICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgPT09ICdUaW1lb3V0RXJyb3InKSBlcnIucmV0cnlhYmxlID0gdHJ1ZTsKICAgICAgaWYgKGVyciAmJiBlcnIucmV0cnlhYmxlICYmIHJldHJ5Q291bnQgPCBtYXhSZXRyaWVzKSB7CiAgICAgICAgcmV0cnlDb3VudCsrOwogICAgICAgIHZhciBkZWxheSA9IHV0aWwuY2FsY3VsYXRlUmV0cnlEZWxheShyZXRyeUNvdW50LCBvcHRpb25zLnJldHJ5RGVsYXlPcHRpb25zKTsKICAgICAgICBzZXRUaW1lb3V0KHNlbmRSZXF1ZXN0LCBkZWxheSArIChlcnIucmV0cnlBZnRlciB8fCAwKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY2IoZXJyKTsKICAgICAgfQogICAgfTsKCiAgICB2YXIgc2VuZFJlcXVlc3QgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGRhdGEgPSAnJzsKICAgICAgaHR0cC5oYW5kbGVSZXF1ZXN0KGh0dHBSZXF1ZXN0LCBodHRwT3B0aW9ucywgZnVuY3Rpb24oaHR0cFJlc3BvbnNlKSB7CiAgICAgICAgaHR0cFJlc3BvbnNlLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHsgZGF0YSArPSBjaHVuay50b1N0cmluZygpOyB9KTsKICAgICAgICBodHRwUmVzcG9uc2Uub24oJ2VuZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBodHRwUmVzcG9uc2Uuc3RhdHVzQ29kZTsKICAgICAgICAgIGlmIChzdGF0dXNDb2RlIDwgMzAwKSB7CiAgICAgICAgICAgIGNiKG51bGwsIGRhdGEpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHJldHJ5QWZ0ZXIgPSBwYXJzZUludChodHRwUmVzcG9uc2UuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSwgMTApICogMTAwMCB8fCAwOwogICAgICAgICAgICB2YXIgZXJyID0gdXRpbC5lcnJvcihuZXcgRXJyb3IoKSwKICAgICAgICAgICAgICB7IHJldHJ5YWJsZTogc3RhdHVzQ29kZSA+PSA1MDAgfHwgc3RhdHVzQ29kZSA9PT0gNDI5IH0KICAgICAgICAgICAgKTsKICAgICAgICAgICAgaWYgKHJldHJ5QWZ0ZXIgJiYgZXJyLnJldHJ5YWJsZSkgZXJyLnJldHJ5QWZ0ZXIgPSByZXRyeUFmdGVyOwogICAgICAgICAgICBlcnJDYWxsYmFjayhlcnIpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9LCBlcnJDYWxsYmFjayk7CiAgICB9OwoKICAgIEFXUy51dGlsLmRlZmVyKHNlbmRSZXF1ZXN0KTsKICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICB1dWlkOiB7CiAgICB2NDogZnVuY3Rpb24gdXVpZFY0KCkgewogICAgICByZXR1cm4gcmVxdWlyZSgndXVpZCcpLnY0KCk7CiAgICB9CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY29udmVydFBheWxvYWRUb1N0cmluZzogZnVuY3Rpb24gY29udmVydFBheWxvYWRUb1N0cmluZyhyZXNwKSB7CiAgICB2YXIgcmVxID0gcmVzcC5yZXF1ZXN0OwogICAgdmFyIG9wZXJhdGlvbiA9IHJlcS5vcGVyYXRpb247CiAgICB2YXIgcnVsZXMgPSByZXEuc2VydmljZS5hcGkub3BlcmF0aW9uc1tvcGVyYXRpb25dLm91dHB1dCB8fCB7fTsKICAgIGlmIChydWxlcy5wYXlsb2FkICYmIHJlc3AuZGF0YVtydWxlcy5wYXlsb2FkXSkgewogICAgICByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0gPSByZXNwLmRhdGFbcnVsZXMucGF5bG9hZF0udG9TdHJpbmcoKTsKICAgIH0KICB9LAoKICAvKioKICAgKiBAYXBpIHByaXZhdGUKICAgKi8KICBkZWZlcjogZnVuY3Rpb24gZGVmZXIoY2FsbGJhY2spIHsKICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjayk7CiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicpIHsKICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTsKICAgIH0gZWxzZSB7CiAgICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApOwogICAgfQogIH0sCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGdldFJlcXVlc3RQYXlsb2FkU2hhcGU6IGZ1bmN0aW9uIGdldFJlcXVlc3RQYXlsb2FkU2hhcGUocmVxKSB7CiAgICB2YXIgb3BlcmF0aW9ucyA9IHJlcS5zZXJ2aWNlLmFwaS5vcGVyYXRpb25zOwogICAgaWYgKCFvcGVyYXRpb25zKSByZXR1cm4gdW5kZWZpbmVkOwogICAgdmFyIG9wZXJhdGlvbiA9IChvcGVyYXRpb25zIHx8IHt9KVtyZXEub3BlcmF0aW9uXTsKICAgIGlmICghb3BlcmF0aW9uIHx8ICFvcGVyYXRpb24uaW5wdXQgfHwgIW9wZXJhdGlvbi5pbnB1dC5wYXlsb2FkKSByZXR1cm4gdW5kZWZpbmVkOwogICAgcmV0dXJuIG9wZXJhdGlvbi5pbnB1dC5tZW1iZXJzW29wZXJhdGlvbi5pbnB1dC5wYXlsb2FkXTsKICB9LAoKICBnZXRQcm9maWxlc0Zyb21TaGFyZWRDb25maWc6IGZ1bmN0aW9uIGdldFByb2ZpbGVzRnJvbVNoYXJlZENvbmZpZyhpbmlMb2FkZXIsIGZpbGVuYW1lKSB7CiAgICB2YXIgcHJvZmlsZXMgPSB7fTsKICAgIHZhciBwcm9maWxlc0Zyb21Db25maWcgPSB7fTsKICAgIGlmIChwcm9jZXNzLmVudlt1dGlsLmNvbmZpZ09wdEluRW52XSkgewogICAgICB2YXIgcHJvZmlsZXNGcm9tQ29uZmlnID0gaW5pTG9hZGVyLmxvYWRGcm9tKHsKICAgICAgICBpc0NvbmZpZzogdHJ1ZSwKICAgICAgICBmaWxlbmFtZTogcHJvY2Vzcy5lbnZbdXRpbC5zaGFyZWRDb25maWdGaWxlRW52XQogICAgICB9KTsKICAgIH0KICAgIHZhciBwcm9maWxlc0Zyb21DcmVkcyA9IGluaUxvYWRlci5sb2FkRnJvbSh7CiAgICAgIGZpbGVuYW1lOiBmaWxlbmFtZSB8fAogICAgICAgIChwcm9jZXNzLmVudlt1dGlsLmNvbmZpZ09wdEluRW52XSAmJiBwcm9jZXNzLmVudlt1dGlsLnNoYXJlZENyZWRlbnRpYWxzRmlsZUVudl0pCiAgICB9KTsKICAgIGZvciAodmFyIGkgPSAwLCBwcm9maWxlTmFtZXMgPSBPYmplY3Qua2V5cyhwcm9maWxlc0Zyb21Db25maWcpOyBpIDwgcHJvZmlsZU5hbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHByb2ZpbGVzW3Byb2ZpbGVOYW1lc1tpXV0gPSBwcm9maWxlc0Zyb21Db25maWdbcHJvZmlsZU5hbWVzW2ldXTsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwLCBwcm9maWxlTmFtZXMgPSBPYmplY3Qua2V5cyhwcm9maWxlc0Zyb21DcmVkcyk7IGkgPCBwcm9maWxlTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgcHJvZmlsZXNbcHJvZmlsZU5hbWVzW2ldXSA9IHByb2ZpbGVzRnJvbUNyZWRzW3Byb2ZpbGVOYW1lc1tpXV07CiAgICB9CiAgICByZXR1cm4gcHJvZmlsZXM7CiAgfSwKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgZGVmYXVsdFByb2ZpbGU6ICdkZWZhdWx0JywKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgY29uZmlnT3B0SW5FbnY6ICdBV1NfU0RLX0xPQURfQ09ORklHJywKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgc2hhcmVkQ3JlZGVudGlhbHNGaWxlRW52OiAnQVdTX1NIQVJFRF9DUkVERU5USUFMU19GSUxFJywKCiAgLyoqCiAgICogQGFwaSBwcml2YXRlCiAgICovCiAgc2hhcmVkQ29uZmlnRmlsZUVudjogJ0FXU19DT05GSUdfRklMRScsCgogIC8qKgogICAqIEBhcGkgcHJpdmF0ZQogICAqLwogIGltZHNEaXNhYmxlZEVudjogJ0FXU19FQzJfTUVUQURBVEFfRElTQUJMRUQnCn07CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IHV0aWw7Cgp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykscmVxdWlyZSgidGltZXJzIikuc2V0SW1tZWRpYXRlKQp9LHsiLi4vYXBpcy9tZXRhZGF0YS5qc29uIjo0LCIuL2NvcmUiOjE4LCJfcHJvY2VzcyI6ODYsImZzIjo3OSwidGltZXJzIjo5MywidXVpZCI6OTh9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpOwp2YXIgU2hhcGUgPSByZXF1aXJlKCcuLi9tb2RlbC9zaGFwZScpOwoKZnVuY3Rpb24gRG9tWG1sUGFyc2VyKCkgeyB9CgpEb21YbWxQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oeG1sLCBzaGFwZSkgewogIGlmICh4bWwucmVwbGFjZSgvXlxzKy8sICcnKSA9PT0gJycpIHJldHVybiB7fTsKCiAgdmFyIHJlc3VsdCwgZXJyb3I7CiAgdHJ5IHsKICAgIGlmICh3aW5kb3cuRE9NUGFyc2VyKSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTsKICAgICAgICByZXN1bHQgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHhtbCwgJ3RleHQveG1sJyk7CiAgICAgIH0gY2F0Y2ggKHN5bnRheEVycm9yKSB7CiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ1BhcnNlIGVycm9yIGluIGRvY3VtZW50JyksCiAgICAgICAgICB7CiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IHN5bnRheEVycm9yLAogICAgICAgICAgICBjb2RlOiAnWE1MUGFyc2VyRXJyb3InLAogICAgICAgICAgICByZXRyeWFibGU6IHRydWUKICAgICAgICAgIH0pOwogICAgICB9CgogICAgICBpZiAocmVzdWx0LmRvY3VtZW50RWxlbWVudCA9PT0gbnVsbCkgewogICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKCdDYW5ub3QgcGFyc2UgZW1wdHkgZG9jdW1lbnQuJyksCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICdYTUxQYXJzZXJFcnJvcicsCiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHZhciBpc0Vycm9yID0gcmVzdWx0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdwYXJzZXJlcnJvcicpWzBdOwogICAgICBpZiAoaXNFcnJvciAmJiAoaXNFcnJvci5wYXJlbnROb2RlID09PSByZXN1bHQgfHwKICAgICAgICAgIGlzRXJyb3IucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ2JvZHknIHx8CiAgICAgICAgICBpc0Vycm9yLnBhcmVudE5vZGUucGFyZW50Tm9kZSA9PT0gcmVzdWx0IHx8CiAgICAgICAgICBpc0Vycm9yLnBhcmVudE5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PT0gJ2JvZHknKSkgewogICAgICAgIHZhciBlcnJvckVsZW1lbnQgPSBpc0Vycm9yLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdkaXYnKVswXSB8fCBpc0Vycm9yOwogICAgICAgIHRocm93IHV0aWwuZXJyb3IobmV3IEVycm9yKGVycm9yRWxlbWVudC50ZXh0Q29udGVudCB8fCAnUGFyc2VyIGVycm9yIGluIGRvY3VtZW50JyksCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICdYTUxQYXJzZXJFcnJvcicsCiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAod2luZG93LkFjdGl2ZVhPYmplY3QpIHsKICAgICAgcmVzdWx0ID0gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MRE9NJyk7CiAgICAgIHJlc3VsdC5hc3luYyA9IGZhbHNlOwoKICAgICAgaWYgKCFyZXN1bHQubG9hZFhNTCh4bWwpKSB7CiAgICAgICAgdGhyb3cgdXRpbC5lcnJvcihuZXcgRXJyb3IoJ1BhcnNlIGVycm9yIGluIGRvY3VtZW50JyksCiAgICAgICAgICB7CiAgICAgICAgICAgIGNvZGU6ICdYTUxQYXJzZXJFcnJvcicsCiAgICAgICAgICAgIHJldHJ5YWJsZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxvYWQgWE1MIHBhcnNlcicpOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIGVycm9yID0gZTsKICB9CgogIGlmIChyZXN1bHQgJiYgcmVzdWx0LmRvY3VtZW50RWxlbWVudCAmJiAhZXJyb3IpIHsKICAgIHZhciBkYXRhID0gcGFyc2VYbWwocmVzdWx0LmRvY3VtZW50RWxlbWVudCwgc2hhcGUpOwogICAgdmFyIG1ldGFkYXRhID0gZ2V0RWxlbWVudEJ5VGFnTmFtZShyZXN1bHQuZG9jdW1lbnRFbGVtZW50LCAnUmVzcG9uc2VNZXRhZGF0YScpOwogICAgaWYgKG1ldGFkYXRhKSB7CiAgICAgIGRhdGEuUmVzcG9uc2VNZXRhZGF0YSA9IHBhcnNlWG1sKG1ldGFkYXRhLCB7fSk7CiAgICB9CiAgICByZXR1cm4gZGF0YTsKICB9IGVsc2UgaWYgKGVycm9yKSB7CiAgICB0aHJvdyB1dGlsLmVycm9yKGVycm9yIHx8IG5ldyBFcnJvcigpLCB7Y29kZTogJ1hNTFBhcnNlckVycm9yJywgcmV0cnlhYmxlOiB0cnVlfSk7CiAgfSBlbHNlIHsgLy8gZW1wdHkgeG1sIGRvY3VtZW50CiAgICByZXR1cm4ge307CiAgfQp9OwoKZnVuY3Rpb24gZ2V0RWxlbWVudEJ5VGFnTmFtZSh4bWwsIHRhZykgewogIHZhciBlbGVtZW50cyA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWcpOwogIGZvciAodmFyIGkgPSAwLCBpTGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgaUxlbjsgaSsrKSB7CiAgICBpZiAoZWxlbWVudHNbaV0ucGFyZW50Tm9kZSA9PT0geG1sKSB7CiAgICAgIHJldHVybiBlbGVtZW50c1tpXTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIHBhcnNlWG1sKHhtbCwgc2hhcGUpIHsKICBpZiAoIXNoYXBlKSBzaGFwZSA9IHt9OwogIHN3aXRjaCAoc2hhcGUudHlwZSkgewogICAgY2FzZSAnc3RydWN0dXJlJzogcmV0dXJuIHBhcnNlU3RydWN0dXJlKHhtbCwgc2hhcGUpOwogICAgY2FzZSAnbWFwJzogcmV0dXJuIHBhcnNlTWFwKHhtbCwgc2hhcGUpOwogICAgY2FzZSAnbGlzdCc6IHJldHVybiBwYXJzZUxpc3QoeG1sLCBzaGFwZSk7CiAgICBjYXNlIHVuZGVmaW5lZDogY2FzZSBudWxsOiByZXR1cm4gcGFyc2VVbmtub3duKHhtbCk7CiAgICBkZWZhdWx0OiByZXR1cm4gcGFyc2VTY2FsYXIoeG1sLCBzaGFwZSk7CiAgfQp9CgpmdW5jdGlvbiBwYXJzZVN0cnVjdHVyZSh4bWwsIHNoYXBlKSB7CiAgdmFyIGRhdGEgPSB7fTsKICBpZiAoeG1sID09PSBudWxsKSByZXR1cm4gZGF0YTsKCiAgdXRpbC5lYWNoKHNoYXBlLm1lbWJlcnMsIGZ1bmN0aW9uKG1lbWJlck5hbWUsIG1lbWJlclNoYXBlKSB7CiAgICBpZiAobWVtYmVyU2hhcGUuaXNYbWxBdHRyaWJ1dGUpIHsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4bWwuYXR0cmlidXRlcywgbWVtYmVyU2hhcGUubmFtZSkpIHsKICAgICAgICB2YXIgdmFsdWUgPSB4bWwuYXR0cmlidXRlc1ttZW1iZXJTaGFwZS5uYW1lXS52YWx1ZTsKICAgICAgICBkYXRhW21lbWJlck5hbWVdID0gcGFyc2VYbWwoe3RleHRDb250ZW50OiB2YWx1ZX0sIG1lbWJlclNoYXBlKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdmFyIHhtbENoaWxkID0gbWVtYmVyU2hhcGUuZmxhdHRlbmVkID8geG1sIDoKICAgICAgICBnZXRFbGVtZW50QnlUYWdOYW1lKHhtbCwgbWVtYmVyU2hhcGUubmFtZSk7CiAgICAgIGlmICh4bWxDaGlsZCkgewogICAgICAgIGRhdGFbbWVtYmVyTmFtZV0gPSBwYXJzZVhtbCh4bWxDaGlsZCwgbWVtYmVyU2hhcGUpOwogICAgICB9IGVsc2UgaWYgKCFtZW1iZXJTaGFwZS5mbGF0dGVuZWQgJiYgbWVtYmVyU2hhcGUudHlwZSA9PT0gJ2xpc3QnKSB7CiAgICAgICAgZGF0YVttZW1iZXJOYW1lXSA9IG1lbWJlclNoYXBlLmRlZmF1bHRWYWx1ZTsKICAgICAgfQogICAgfQogIH0pOwoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gcGFyc2VNYXAoeG1sLCBzaGFwZSkgewogIHZhciBkYXRhID0ge307CiAgdmFyIHhtbEtleSA9IHNoYXBlLmtleS5uYW1lIHx8ICdrZXknOwogIHZhciB4bWxWYWx1ZSA9IHNoYXBlLnZhbHVlLm5hbWUgfHwgJ3ZhbHVlJzsKICB2YXIgdGFnTmFtZSA9IHNoYXBlLmZsYXR0ZW5lZCA/IHNoYXBlLm5hbWUgOiAnZW50cnknOwoKICB2YXIgY2hpbGQgPSB4bWwuZmlyc3RFbGVtZW50Q2hpbGQ7CiAgd2hpbGUgKGNoaWxkKSB7CiAgICBpZiAoY2hpbGQubm9kZU5hbWUgPT09IHRhZ05hbWUpIHsKICAgICAgdmFyIGtleSA9IGdldEVsZW1lbnRCeVRhZ05hbWUoY2hpbGQsIHhtbEtleSkudGV4dENvbnRlbnQ7CiAgICAgIHZhciB2YWx1ZSA9IGdldEVsZW1lbnRCeVRhZ05hbWUoY2hpbGQsIHhtbFZhbHVlKTsKICAgICAgZGF0YVtrZXldID0gcGFyc2VYbWwodmFsdWUsIHNoYXBlLnZhbHVlKTsKICAgIH0KICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nOwogIH0KICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gcGFyc2VMaXN0KHhtbCwgc2hhcGUpIHsKICB2YXIgZGF0YSA9IFtdOwogIHZhciB0YWdOYW1lID0gc2hhcGUuZmxhdHRlbmVkID8gc2hhcGUubmFtZSA6IChzaGFwZS5tZW1iZXIubmFtZSB8fCAnbWVtYmVyJyk7CgogIHZhciBjaGlsZCA9IHhtbC5maXJzdEVsZW1lbnRDaGlsZDsKICB3aGlsZSAoY2hpbGQpIHsKICAgIGlmIChjaGlsZC5ub2RlTmFtZSA9PT0gdGFnTmFtZSkgewogICAgICBkYXRhLnB1c2gocGFyc2VYbWwoY2hpbGQsIHNoYXBlLm1lbWJlcikpOwogICAgfQogICAgY2hpbGQgPSBjaGlsZC5uZXh0RWxlbWVudFNpYmxpbmc7CiAgfQogIHJldHVybiBkYXRhOwp9CgpmdW5jdGlvbiBwYXJzZVNjYWxhcih4bWwsIHNoYXBlKSB7CiAgaWYgKHhtbC5nZXRBdHRyaWJ1dGUpIHsKICAgIHZhciBlbmNvZGluZyA9IHhtbC5nZXRBdHRyaWJ1dGUoJ2VuY29kaW5nJyk7CiAgICBpZiAoZW5jb2RpbmcgPT09ICdiYXNlNjQnKSB7CiAgICAgIHNoYXBlID0gbmV3IFNoYXBlLmNyZWF0ZSh7dHlwZTogZW5jb2Rpbmd9KTsKICAgIH0KICB9CgogIHZhciB0ZXh0ID0geG1sLnRleHRDb250ZW50OwogIGlmICh0ZXh0ID09PSAnJykgdGV4dCA9IG51bGw7CiAgaWYgKHR5cGVvZiBzaGFwZS50b1R5cGUgPT09ICdmdW5jdGlvbicpIHsKICAgIHJldHVybiBzaGFwZS50b1R5cGUodGV4dCk7CiAgfSBlbHNlIHsKICAgIHJldHVybiB0ZXh0OwogIH0KfQoKZnVuY3Rpb24gcGFyc2VVbmtub3duKHhtbCkgewogIGlmICh4bWwgPT09IHVuZGVmaW5lZCB8fCB4bWwgPT09IG51bGwpIHJldHVybiAnJzsKCiAgLy8gZW1wdHkgb2JqZWN0CiAgaWYgKCF4bWwuZmlyc3RFbGVtZW50Q2hpbGQpIHsKICAgIGlmICh4bWwucGFyZW50Tm9kZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4ge307CiAgICBpZiAoeG1sLmNoaWxkTm9kZXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7CiAgICBlbHNlIHJldHVybiB4bWwudGV4dENvbnRlbnQ7CiAgfQoKICAvLyBvYmplY3QsIHBhcnNlIGFzIHN0cnVjdHVyZQogIHZhciBzaGFwZSA9IHt0eXBlOiAnc3RydWN0dXJlJywgbWVtYmVyczoge319OwogIHZhciBjaGlsZCA9IHhtbC5maXJzdEVsZW1lbnRDaGlsZDsKICB3aGlsZSAoY2hpbGQpIHsKICAgIHZhciB0YWcgPSBjaGlsZC5ub2RlTmFtZTsKICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2hhcGUubWVtYmVycywgdGFnKSkgewogICAgICAvLyBtdWx0aXBsZSB0YWdzIG9mIHRoZSBzYW1lIG5hbWUgbWFrZXMgaXQgYSBsaXN0CiAgICAgIHNoYXBlLm1lbWJlcnNbdGFnXS50eXBlID0gJ2xpc3QnOwogICAgfSBlbHNlIHsKICAgICAgc2hhcGUubWVtYmVyc1t0YWddID0ge25hbWU6IHRhZ307CiAgICB9CiAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZzsKICB9CiAgcmV0dXJuIHBhcnNlU3RydWN0dXJlKHhtbCwgc2hhcGUpOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IERvbVhtbFBhcnNlcjsKCn0seyIuLi9tb2RlbC9zaGFwZSI6NDMsIi4uL3V0aWwiOjcxfV0sNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTsKdmFyIFhtbE5vZGUgPSByZXF1aXJlKCcuL3htbC1ub2RlJykuWG1sTm9kZTsKdmFyIFhtbFRleHQgPSByZXF1aXJlKCcuL3htbC10ZXh0JykuWG1sVGV4dDsKCmZ1bmN0aW9uIFhtbEJ1aWxkZXIoKSB7IH0KClhtbEJ1aWxkZXIucHJvdG90eXBlLnRvWE1MID0gZnVuY3Rpb24ocGFyYW1zLCBzaGFwZSwgcm9vdEVsZW1lbnQsIG5vRW1wdHkpIHsKICB2YXIgeG1sID0gbmV3IFhtbE5vZGUocm9vdEVsZW1lbnQpOwogIGFwcGx5TmFtZXNwYWNlcyh4bWwsIHNoYXBlLCB0cnVlKTsKICBzZXJpYWxpemUoeG1sLCBwYXJhbXMsIHNoYXBlKTsKICByZXR1cm4geG1sLmNoaWxkcmVuLmxlbmd0aCA+IDAgfHwgbm9FbXB0eSA/IHhtbC50b1N0cmluZygpIDogJyc7Cn07CgpmdW5jdGlvbiBzZXJpYWxpemUoeG1sLCB2YWx1ZSwgc2hhcGUpIHsKICBzd2l0Y2ggKHNoYXBlLnR5cGUpIHsKICAgIGNhc2UgJ3N0cnVjdHVyZSc6IHJldHVybiBzZXJpYWxpemVTdHJ1Y3R1cmUoeG1sLCB2YWx1ZSwgc2hhcGUpOwogICAgY2FzZSAnbWFwJzogcmV0dXJuIHNlcmlhbGl6ZU1hcCh4bWwsIHZhbHVlLCBzaGFwZSk7CiAgICBjYXNlICdsaXN0JzogcmV0dXJuIHNlcmlhbGl6ZUxpc3QoeG1sLCB2YWx1ZSwgc2hhcGUpOwogICAgZGVmYXVsdDogcmV0dXJuIHNlcmlhbGl6ZVNjYWxhcih4bWwsIHZhbHVlLCBzaGFwZSk7CiAgfQp9CgpmdW5jdGlvbiBzZXJpYWxpemVTdHJ1Y3R1cmUoeG1sLCBwYXJhbXMsIHNoYXBlKSB7CiAgdXRpbC5hcnJheUVhY2goc2hhcGUubWVtYmVyTmFtZXMsIGZ1bmN0aW9uKG1lbWJlck5hbWUpIHsKICAgIHZhciBtZW1iZXJTaGFwZSA9IHNoYXBlLm1lbWJlcnNbbWVtYmVyTmFtZV07CiAgICBpZiAobWVtYmVyU2hhcGUubG9jYXRpb24gIT09ICdib2R5JykgcmV0dXJuOwoKICAgIHZhciB2YWx1ZSA9IHBhcmFtc1ttZW1iZXJOYW1lXTsKICAgIHZhciBuYW1lID0gbWVtYmVyU2hhcGUubmFtZTsKICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7CiAgICAgIGlmIChtZW1iZXJTaGFwZS5pc1htbEF0dHJpYnV0ZSkgewogICAgICAgIHhtbC5hZGRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpOwogICAgICB9IGVsc2UgaWYgKG1lbWJlclNoYXBlLmZsYXR0ZW5lZCkgewogICAgICAgIHNlcmlhbGl6ZSh4bWwsIHZhbHVlLCBtZW1iZXJTaGFwZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGVsZW1lbnQgPSBuZXcgWG1sTm9kZShuYW1lKTsKICAgICAgICB4bWwuYWRkQ2hpbGROb2RlKGVsZW1lbnQpOwogICAgICAgIGFwcGx5TmFtZXNwYWNlcyhlbGVtZW50LCBtZW1iZXJTaGFwZSk7CiAgICAgICAgc2VyaWFsaXplKGVsZW1lbnQsIHZhbHVlLCBtZW1iZXJTaGFwZSk7CiAgICAgIH0KICAgIH0KICB9KTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplTWFwKHhtbCwgbWFwLCBzaGFwZSkgewogIHZhciB4bWxLZXkgPSBzaGFwZS5rZXkubmFtZSB8fCAna2V5JzsKICB2YXIgeG1sVmFsdWUgPSBzaGFwZS52YWx1ZS5uYW1lIHx8ICd2YWx1ZSc7CgogIHV0aWwuZWFjaChtYXAsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgIHZhciBlbnRyeSA9IG5ldyBYbWxOb2RlKHNoYXBlLmZsYXR0ZW5lZCA/IHNoYXBlLm5hbWUgOiAnZW50cnknKTsKICAgIHhtbC5hZGRDaGlsZE5vZGUoZW50cnkpOwoKICAgIHZhciBlbnRyeUtleSA9IG5ldyBYbWxOb2RlKHhtbEtleSk7CiAgICB2YXIgZW50cnlWYWx1ZSA9IG5ldyBYbWxOb2RlKHhtbFZhbHVlKTsKICAgIGVudHJ5LmFkZENoaWxkTm9kZShlbnRyeUtleSk7CiAgICBlbnRyeS5hZGRDaGlsZE5vZGUoZW50cnlWYWx1ZSk7CgogICAgc2VyaWFsaXplKGVudHJ5S2V5LCBrZXksIHNoYXBlLmtleSk7CiAgICBzZXJpYWxpemUoZW50cnlWYWx1ZSwgdmFsdWUsIHNoYXBlLnZhbHVlKTsKICB9KTsKfQoKZnVuY3Rpb24gc2VyaWFsaXplTGlzdCh4bWwsIGxpc3QsIHNoYXBlKSB7CiAgaWYgKHNoYXBlLmZsYXR0ZW5lZCkgewogICAgdXRpbC5hcnJheUVhY2gobGlzdCwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdmFyIG5hbWUgPSBzaGFwZS5tZW1iZXIubmFtZSB8fCBzaGFwZS5uYW1lOwogICAgICB2YXIgZWxlbWVudCA9IG5ldyBYbWxOb2RlKG5hbWUpOwogICAgICB4bWwuYWRkQ2hpbGROb2RlKGVsZW1lbnQpOwogICAgICBzZXJpYWxpemUoZWxlbWVudCwgdmFsdWUsIHNoYXBlLm1lbWJlcik7CiAgICB9KTsKICB9IGVsc2UgewogICAgdXRpbC5hcnJheUVhY2gobGlzdCwgZnVuY3Rpb24odmFsdWUpIHsKICAgICAgdmFyIG5hbWUgPSBzaGFwZS5tZW1iZXIubmFtZSB8fCAnbWVtYmVyJzsKICAgICAgdmFyIGVsZW1lbnQgPSBuZXcgWG1sTm9kZShuYW1lKTsKICAgICAgeG1sLmFkZENoaWxkTm9kZShlbGVtZW50KTsKICAgICAgc2VyaWFsaXplKGVsZW1lbnQsIHZhbHVlLCBzaGFwZS5tZW1iZXIpOwogICAgfSk7CiAgfQp9CgpmdW5jdGlvbiBzZXJpYWxpemVTY2FsYXIoeG1sLCB2YWx1ZSwgc2hhcGUpIHsKICB4bWwuYWRkQ2hpbGROb2RlKAogICAgbmV3IFhtbFRleHQoc2hhcGUudG9XaXJlRm9ybWF0KHZhbHVlKSkKICApOwp9CgpmdW5jdGlvbiBhcHBseU5hbWVzcGFjZXMoeG1sLCBzaGFwZSwgaXNSb290KSB7CiAgdmFyIHVyaSwgcHJlZml4ID0gJ3htbG5zJzsKICBpZiAoc2hhcGUueG1sTmFtZXNwYWNlVXJpKSB7CiAgICB1cmkgPSBzaGFwZS54bWxOYW1lc3BhY2VVcmk7CiAgICBpZiAoc2hhcGUueG1sTmFtZXNwYWNlUHJlZml4KSBwcmVmaXggKz0gJzonICsgc2hhcGUueG1sTmFtZXNwYWNlUHJlZml4OwogIH0gZWxzZSBpZiAoaXNSb290ICYmIHNoYXBlLmFwaS54bWxOYW1lc3BhY2VVcmkpIHsKICAgIHVyaSA9IHNoYXBlLmFwaS54bWxOYW1lc3BhY2VVcmk7CiAgfQoKICBpZiAodXJpKSB4bWwuYWRkQXR0cmlidXRlKHByZWZpeCwgdXJpKTsKfQoKLyoqCiAqIEBhcGkgcHJpdmF0ZQogKi8KbW9kdWxlLmV4cG9ydHMgPSBYbWxCdWlsZGVyOwoKfSx7Ii4uL3V0aWwiOjcxLCIuL3htbC1ub2RlIjo3NiwiLi94bWwtdGV4dCI6Nzd9XSw3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qKgogKiBFc2NhcGVzIGNoYXJhY3RlcnMgdGhhdCBjYW4gbm90IGJlIGluIGFuIFhNTCBhdHRyaWJ1dGUuCiAqLwpmdW5jdGlvbiBlc2NhcGVBdHRyaWJ1dGUodmFsdWUpIHsKICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLycvZywgJyZhcG9zOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JykucmVwbGFjZSgvIi9nLCAnJnF1b3Q7Jyk7Cn0KCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgZXNjYXBlQXR0cmlidXRlOiBlc2NhcGVBdHRyaWJ1dGUKfTsKCn0se31dLDc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLyoqCiAqIEVzY2FwZXMgY2hhcmFjdGVycyB0aGF0IGNhbiBub3QgYmUgaW4gYW4gWE1MIGVsZW1lbnQuCiAqLwpmdW5jdGlvbiBlc2NhcGVFbGVtZW50KHZhbHVlKSB7CiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpOwp9CgovKioKICogQGFwaSBwcml2YXRlCiAqLwptb2R1bGUuZXhwb3J0cyA9IHsKICAgIGVzY2FwZUVsZW1lbnQ6IGVzY2FwZUVsZW1lbnQKfTsKCn0se31dLDc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGVzY2FwZUF0dHJpYnV0ZSA9IHJlcXVpcmUoJy4vZXNjYXBlLWF0dHJpYnV0ZScpLmVzY2FwZUF0dHJpYnV0ZTsKCi8qKgogKiBSZXByZXNlbnRzIGFuIFhNTCBub2RlLgogKiBAYXBpIHByaXZhdGUKICovCmZ1bmN0aW9uIFhtbE5vZGUobmFtZSwgY2hpbGRyZW4pIHsKICAgIGlmIChjaGlsZHJlbiA9PT0gdm9pZCAwKSB7IGNoaWxkcmVuID0gW107IH0KICAgIHRoaXMubmFtZSA9IG5hbWU7CiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTsKfQpYbWxOb2RlLnByb3RvdHlwZS5hZGRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICAgIHRoaXMuYXR0cmlidXRlc1tuYW1lXSA9IHZhbHVlOwogICAgcmV0dXJuIHRoaXM7Cn07ClhtbE5vZGUucHJvdG90eXBlLmFkZENoaWxkTm9kZSA9IGZ1bmN0aW9uIChjaGlsZCkgewogICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTsKICAgIHJldHVybiB0aGlzOwp9OwpYbWxOb2RlLnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgZGVsZXRlIHRoaXMuYXR0cmlidXRlc1tuYW1lXTsKICAgIHJldHVybiB0aGlzOwp9OwpYbWxOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBoYXNDaGlsZHJlbiA9IEJvb2xlYW4odGhpcy5jaGlsZHJlbi5sZW5ndGgpOwogICAgdmFyIHhtbFRleHQgPSAnPCcgKyB0aGlzLm5hbWU7CiAgICAvLyBhZGQgYXR0cmlidXRlcwogICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7CiAgICBmb3IgKHZhciBpID0gMCwgYXR0cmlidXRlTmFtZXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKTsgaSA8IGF0dHJpYnV0ZU5hbWVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lc1tpXTsKICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTsKICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgYXR0cmlidXRlICE9PSBudWxsKSB7CiAgICAgICAgICAgIHhtbFRleHQgKz0gJyAnICsgYXR0cmlidXRlTmFtZSArICc9XCInICsgZXNjYXBlQXR0cmlidXRlKCcnICsgYXR0cmlidXRlKSArICdcIic7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHhtbFRleHQgKz0gIWhhc0NoaWxkcmVuID8gJy8+JyA6ICc+JyArIHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvU3RyaW5nKCk7IH0pLmpvaW4oJycpICsgJzwvJyArIHRoaXMubmFtZSArICc+JzsKfTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgWG1sTm9kZTogWG1sTm9kZQp9OwoKfSx7Ii4vZXNjYXBlLWF0dHJpYnV0ZSI6NzR9XSw3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBlc2NhcGVFbGVtZW50ID0gcmVxdWlyZSgnLi9lc2NhcGUtZWxlbWVudCcpLmVzY2FwZUVsZW1lbnQ7CgovKioKICogUmVwcmVzZW50cyBhbiBYTUwgdGV4dCB2YWx1ZS4KICogQGFwaSBwcml2YXRlCiAqLwpmdW5jdGlvbiBYbWxUZXh0KHZhbHVlKSB7CiAgICB0aGlzLnZhbHVlID0gdmFsdWU7Cn0KClhtbFRleHQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGVzY2FwZUVsZW1lbnQoJycgKyB0aGlzLnZhbHVlKTsKfTsKCi8qKgogKiBAYXBpIHByaXZhdGUKICovCm1vZHVsZS5leHBvcnRzID0gewogICAgWG1sVGV4dDogWG1sVGV4dAp9OwoKfSx7Ii4vZXNjYXBlLWVsZW1lbnQiOjc1fV0sNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCcKCmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGgKZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5CmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXkKCnZhciBsb29rdXAgPSBbXQp2YXIgcmV2TG9va3VwID0gW10KdmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheQoKdmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycKZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICBsb29rdXBbaV0gPSBjb2RlW2ldCiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpCn0KCi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy4KLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9ucwpyZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjIKcmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzCgpmdW5jdGlvbiBnZXRMZW5zIChiNjQpIHsKICB2YXIgbGVuID0gYjY0Lmxlbmd0aAoKICBpZiAobGVuICUgNCA+IDApIHsKICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpCiAgfQoKICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmQKICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDIKICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpCiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW4KCiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW4KICAgID8gMAogICAgOiA0IC0gKHZhbGlkTGVuICUgNCkKCiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXQp9CgovLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGEKZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7CiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NCkKICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdCiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV0KICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW4KfQoKZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikgewogIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlbgp9CgpmdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7CiAgdmFyIHRtcAogIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpCiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXQogIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdCgogIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpCgogIHZhciBjdXJCeXRlID0gMAoKICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzCiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDAKICAgID8gdmFsaWRMZW4gLSA0CiAgICA6IHZhbGlkTGVuCgogIHZhciBpCiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7CiAgICB0bXAgPQogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfAogICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHwKICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHwKICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV0KICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGCiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGCiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkYKICB9CgogIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHsKICAgIHRtcCA9CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwKICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpCiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkYKICB9CgogIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHsKICAgIHRtcCA9CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8CiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKQogICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRgogICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGCiAgfQoKICByZXR1cm4gYXJyCn0KCmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7CiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArCiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gKwogICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKwogICAgbG9va3VwW251bSAmIDB4M0ZdCn0KCmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkgewogIHZhciB0bXAKICB2YXIgb3V0cHV0ID0gW10KICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykgewogICAgdG1wID0KICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgKwogICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgKwogICAgICAodWludDhbaSArIDJdICYgMHhGRikKICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKQogIH0KICByZXR1cm4gb3V0cHV0LmpvaW4oJycpCn0KCmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7CiAgdmFyIHRtcAogIHZhciBsZW4gPSB1aW50OC5sZW5ndGgKICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXMKICB2YXIgcGFydHMgPSBbXQogIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgMwoKICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyCiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkgewogICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSkKICB9CgogIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXMKICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkgewogICAgdG1wID0gdWludDhbbGVuIC0gMV0KICAgIHBhcnRzLnB1c2goCiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gKwogICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICsKICAgICAgJz09JwogICAgKQogIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikgewogICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV0KICAgIHBhcnRzLnB1c2goCiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICsKICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArCiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gKwogICAgICAnPScKICAgICkKICB9CgogIHJldHVybiBwYXJ0cy5qb2luKCcnKQp9Cgp9LHt9XSw3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cgp9LHt9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsoZnVuY3Rpb24gKCl7Ci8qISBodHRwczovL210aHMuYmUvcHVueWNvZGUgdjEuMy4yIGJ5IEBtYXRoaWFzICovCjsoZnVuY3Rpb24ocm9vdCkgewoKCS8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgKi8KCXZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYKCQkhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzOwoJdmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJgoJCSFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlOwoJdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDsKCWlmICgKCQlmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fAoJCWZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8CgkJZnJlZUdsb2JhbC5zZWxmID09PSBmcmVlR2xvYmFsCgkpIHsKCQlyb290ID0gZnJlZUdsb2JhbDsKCX0KCgkvKioKCSAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC4KCSAqIEBuYW1lIHB1bnljb2RlCgkgKiBAdHlwZSBPYmplY3QKCSAqLwoJdmFyIHB1bnljb2RlLAoKCS8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi8KCW1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTEKCgkvKiogQm9vdHN0cmluZyBwYXJhbWV0ZXJzICovCgliYXNlID0gMzYsCgl0TWluID0gMSwKCXRNYXggPSAyNiwKCXNrZXcgPSAzOCwKCWRhbXAgPSA3MDAsCglpbml0aWFsQmlhcyA9IDcyLAoJaW5pdGlhbE4gPSAxMjgsIC8vIDB4ODAKCWRlbGltaXRlciA9ICctJywgLy8gJ1x4MkQnCgoJLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi8KCXJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLAoJcmVnZXhOb25BU0NJSSA9IC9bXlx4MjAtXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFycwoJcmVnZXhTZXBhcmF0b3JzID0gL1tceDJFXHUzMDAyXHVGRjBFXHVGRjYxXS9nLCAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzCgoJLyoqIEVycm9yIG1lc3NhZ2VzICovCgllcnJvcnMgPSB7CgkJJ292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJywKCQknbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLAoJCSdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnCgl9LAoKCS8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi8KCWJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbiwKCWZsb29yID0gTWF0aC5mbG9vciwKCXN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUsCgoJLyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqLwoJa2V5OwoKCS8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCS8qKgoJICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uCgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuCgkgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuCgkgKi8KCWZ1bmN0aW9uIGVycm9yKHR5cGUpIHsKCQl0aHJvdyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7Cgl9CgoJLyoqCgkgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi4KCSAqIEBwcml2YXRlCgkgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLgoJICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5CgkgKiBpdGVtLgoJICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLgoJICovCglmdW5jdGlvbiBtYXAoYXJyYXksIGZuKSB7CgkJdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKCQl2YXIgcmVzdWx0ID0gW107CgkJd2hpbGUgKGxlbmd0aC0tKSB7CgkJCXJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7CgkJfQoJCXJldHVybiByZXN1bHQ7Cgl9CgoJLyoqCgkgKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWwKCSAqIGFkZHJlc3Nlcy4KCSAqIEBwcml2YXRlCgkgKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLgoJICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5CgkgKiBjaGFyYWN0ZXIuCgkgKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjawoJICogZnVuY3Rpb24uCgkgKi8KCWZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7CgkJdmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7CgkJdmFyIHJlc3VsdCA9ICcnOwoJCWlmIChwYXJ0cy5sZW5ndGggPiAxKSB7CgkJCS8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmUKCQkJLy8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC4KCQkJcmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7CgkJCXN0cmluZyA9IHBhcnRzWzFdOwoJCX0KCQkvLyBBdm9pZCBgc3BsaXQocmVnZXgpYCBmb3IgSUU4IGNvbXBhdGliaWxpdHkuIFNlZSAjMTcuCgkJc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXHgyRScpOwoJCXZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTsKCQl2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7CgkJcmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7Cgl9CgoJLyoqCgkgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlCgkgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksCgkgKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaAoJICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsCgkgKiBtYXRjaGluZyBVVEYtMTYuCgkgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmVuY29kZWAKCSAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPgoJICogQG1lbWJlck9mIHB1bnljb2RlLnVjczIKCSAqIEBuYW1lIGRlY29kZQoJICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS4KCSAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy4KCSAqLwoJZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHsKCQl2YXIgb3V0cHV0ID0gW10sCgkJICAgIGNvdW50ZXIgPSAwLAoJCSAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLAoJCSAgICB2YWx1ZSwKCQkgICAgZXh0cmE7CgkJd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHsKCQkJdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspOwoJCQlpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7CgkJCQkvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIKCQkJCWV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTsKCQkJCWlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlCgkJCQkJb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTsKCQkJCX0gZWxzZSB7CgkJCQkJLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHQKCQkJCQkvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIKCQkJCQlvdXRwdXQucHVzaCh2YWx1ZSk7CgkJCQkJY291bnRlci0tOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJb3V0cHV0LnB1c2godmFsdWUpOwoJCQl9CgkJfQoJCXJldHVybiBvdXRwdXQ7Cgl9CgoJLyoqCgkgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuCgkgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWAKCSAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyCgkgKiBAbmFtZSBlbmNvZGUKCSAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuCgkgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuCgkgKi8KCWZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHsKCQlyZXR1cm4gbWFwKGFycmF5LCBmdW5jdGlvbih2YWx1ZSkgewoJCQl2YXIgb3V0cHV0ID0gJyc7CgkJCWlmICh2YWx1ZSA+IDB4RkZGRikgewoJCQkJdmFsdWUgLT0gMHgxMDAwMDsKCQkJCW91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApOwoJCQkJdmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGOwoJCQl9CgkJCW91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpOwoJCQlyZXR1cm4gb3V0cHV0OwoJCX0pLmpvaW4oJycpOwoJfQoKCS8qKgoJICogQ29udmVydHMgYSBiYXNpYyBjb2RlIHBvaW50IGludG8gYSBkaWdpdC9pbnRlZ2VyLgoJICogQHNlZSBgZGlnaXRUb0Jhc2ljKClgCgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVQb2ludCBUaGUgYmFzaWMgbnVtZXJpYyBjb2RlIHBvaW50IHZhbHVlLgoJICogQHJldHVybnMge051bWJlcn0gVGhlIG51bWVyaWMgdmFsdWUgb2YgYSBiYXNpYyBjb2RlIHBvaW50IChmb3IgdXNlIGluCgkgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmCgkgKiB0aGUgY29kZSBwb2ludCBkb2VzIG5vdCByZXByZXNlbnQgYSB2YWx1ZS4KCSAqLwoJZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkgewoJCWlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7CgkJCXJldHVybiBjb2RlUG9pbnQgLSAyMjsKCQl9CgkJaWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHsKCQkJcmV0dXJuIGNvZGVQb2ludCAtIDY1OwoJCX0KCQlpZiAoY29kZVBvaW50IC0gOTcgPCAyNikgewoJCQlyZXR1cm4gY29kZVBvaW50IC0gOTc7CgkJfQoJCXJldHVybiBiYXNlOwoJfQoKCS8qKgoJICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LgoJICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgCgkgKiBAcHJpdmF0ZQoJICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC4KCSAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yCgkgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZQoJICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzCgkgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZAoJICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS4KCSAqLwoJZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7CgkJLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLloKCQkvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjkKCQlyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpOwoJfQoKCS8qKgoJICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi4KCSAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjQKCSAqIEBwcml2YXRlCgkgKi8KCWZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkgewoJCXZhciBrID0gMDsKCQlkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxOwoJCWRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTsKCQlmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkgewoJCQlkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7CgkJfQoJCXJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpOwoJfQoKCS8qKgoJICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGUKCSAqIHN5bWJvbHMuCgkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCSAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy4KCSAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy4KCSAqLwoJZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7CgkJLy8gRG9uJ3QgdXNlIFVDUy0yCgkJdmFyIG91dHB1dCA9IFtdLAoJCSAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCwKCQkgICAgb3V0LAoJCSAgICBpID0gMCwKCQkgICAgbiA9IGluaXRpYWxOLAoJCSAgICBiaWFzID0gaW5pdGlhbEJpYXMsCgkJICAgIGJhc2ljLAoJCSAgICBqLAoJCSAgICBpbmRleCwKCQkgICAgb2xkaSwKCQkgICAgdywKCQkgICAgaywKCQkgICAgZGlnaXQsCgkJICAgIHQsCgkJICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqLwoJCSAgICBiYXNlTWludXNUOwoKCQkvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGUKCQkvLyBwb2ludHMgYmVmb3JlIHRoZSBsYXN0IGRlbGltaXRlciwgb3IgYDBgIGlmIHRoZXJlIGlzIG5vbmUsIHRoZW4gY29weQoJCS8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LgoKCQliYXNpYyA9IGlucHV0Lmxhc3RJbmRleE9mKGRlbGltaXRlcik7CgkJaWYgKGJhc2ljIDwgMCkgewoJCQliYXNpYyA9IDA7CgkJfQoKCQlmb3IgKGogPSAwOyBqIDwgYmFzaWM7ICsraikgewoJCQkvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQKCQkJaWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkgewoJCQkJZXJyb3IoJ25vdC1iYXNpYycpOwoJCQl9CgkJCW91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpOwoJCX0KCgkJLy8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZQoJCS8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuCgoJCWZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7CgoJCQkvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuCgkJCS8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCwKCQkJLy8gd2hpY2ggZ2V0cyBhZGRlZCB0byBgaWAuIFRoZSBvdmVyZmxvdyBjaGVja2luZyBpcyBlYXNpZXIKCQkJLy8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmcKCQkJLy8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC4KCQkJZm9yIChvbGRpID0gaSwgdyA9IDEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkgewoKCQkJCWlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkgewoJCQkJCWVycm9yKCdpbnZhbGlkLWlucHV0Jyk7CgkJCQl9CgoJCQkJZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7CgoJCQkJaWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkgewoJCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQkJfQoKCQkJCWkgKz0gZGlnaXQgKiB3OwoJCQkJdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7CgoJCQkJaWYgKGRpZ2l0IDwgdCkgewoJCQkJCWJyZWFrOwoJCQkJfQoKCQkJCWJhc2VNaW51c1QgPSBiYXNlIC0gdDsKCQkJCWlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHsKCQkJCQllcnJvcignb3ZlcmZsb3cnKTsKCQkJCX0KCgkJCQl3ICo9IGJhc2VNaW51c1Q7CgoJCQl9CgoJCQlvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTsKCQkJYmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7CgoJCQkvLyBgaWAgd2FzIHN1cHBvc2VkIHRvIHdyYXAgYXJvdW5kIGZyb20gYG91dGAgdG8gYDBgLAoJCQkvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OgoJCQlpZiAoZmxvb3IoaSAvIG91dCkgPiBtYXhJbnQgLSBuKSB7CgkJCQllcnJvcignb3ZlcmZsb3cnKTsKCQkJfQoKCQkJbiArPSBmbG9vcihpIC8gb3V0KTsKCQkJaSAlPSBvdXQ7CgoJCQkvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0CgkJCW91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTsKCgkJfQoKCQlyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpOwoJfQoKCS8qKgoJICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGEKCSAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuCgkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCSAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy4KCSAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy4KCSAqLwoJZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7CgkJdmFyIG4sCgkJICAgIGRlbHRhLAoJCSAgICBoYW5kbGVkQ1BDb3VudCwKCQkgICAgYmFzaWNMZW5ndGgsCgkJICAgIGJpYXMsCgkJICAgIGosCgkJICAgIG0sCgkJICAgIHEsCgkJICAgIGssCgkJICAgIHQsCgkJICAgIGN1cnJlbnRWYWx1ZSwKCQkgICAgb3V0cHV0ID0gW10sCgkJICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovCgkJICAgIGlucHV0TGVuZ3RoLAoJCSAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi8KCQkgICAgaGFuZGxlZENQQ291bnRQbHVzT25lLAoJCSAgICBiYXNlTWludXNULAoJCSAgICBxTWludXNUOwoKCQkvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlCgkJaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTsKCgkJLy8gQ2FjaGUgdGhlIGxlbmd0aAoJCWlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoOwoKCQkvLyBJbml0aWFsaXplIHRoZSBzdGF0ZQoJCW4gPSBpbml0aWFsTjsKCQlkZWx0YSA9IDA7CgkJYmlhcyA9IGluaXRpYWxCaWFzOwoKCQkvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzCgkJZm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHsKCQkJY3VycmVudFZhbHVlID0gaW5wdXRbal07CgkJCWlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7CgkJCQlvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7CgkJCX0KCQl9CgoJCWhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOwoKCQkvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDsKCQkvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuCgoJCS8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIC0gaWYgaXQgaXMgbm90IGVtcHR5IC0gd2l0aCBhIGRlbGltaXRlcgoJCWlmIChiYXNpY0xlbmd0aCkgewoJCQlvdXRwdXQucHVzaChkZWxpbWl0ZXIpOwoJCX0KCgkJLy8gTWFpbiBlbmNvZGluZyBsb29wOgoJCXdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7CgoJCQkvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0CgkJCS8vIGxhcmdlciBvbmU6CgkJCWZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CgkJCQljdXJyZW50VmFsdWUgPSBpbnB1dFtqXTsKCQkJCWlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7CgkJCQkJbSA9IGN1cnJlbnRWYWx1ZTsKCQkJCX0KCQkJfQoKCQkJLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LAoJCQkvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdwoJCQloYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7CgkJCWlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7CgkJCQllcnJvcignb3ZlcmZsb3cnKTsKCQkJfQoKCQkJZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTsKCQkJbiA9IG07CgoJCQlmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikgewoJCQkJY3VycmVudFZhbHVlID0gaW5wdXRbal07CgoJCQkJaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkgewoJCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQkJfQoKCQkJCWlmIChjdXJyZW50VmFsdWUgPT0gbikgewoJCQkJCS8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyCgkJCQkJZm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkgewoJCQkJCQl0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTsKCQkJCQkJaWYgKHEgPCB0KSB7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCQlxTWludXNUID0gcSAtIHQ7CgkJCQkJCWJhc2VNaW51c1QgPSBiYXNlIC0gdDsKCQkJCQkJb3V0cHV0LnB1c2goCgkJCQkJCQlzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCwgMCkpCgkJCQkJCSk7CgkJCQkJCXEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7CgkJCQkJfQoKCQkJCQlvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7CgkJCQkJYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTsKCQkJCQlkZWx0YSA9IDA7CgkJCQkJKytoYW5kbGVkQ1BDb3VudDsKCQkJCX0KCQkJfQoKCQkJKytkZWx0YTsKCQkJKytuOwoKCQl9CgkJcmV0dXJuIG91dHB1dC5qb2luKCcnKTsKCX0KCgkvKioKCSAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MKCSAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS4KCSAqIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IG9uIGEgc3RyaW5nIHRoYXQgaGFzIGFscmVhZHkgYmVlbgoJICogY29udmVydGVkIHRvIFVuaWNvZGUuCgkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCSAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGVkIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8KCSAqIGNvbnZlcnQgdG8gVW5pY29kZS4KCSAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZQoJICogc3RyaW5nLgoJICovCglmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHsKCQlyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHsKCQkJcmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpCgkJCQk/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSkKCQkJCTogc3RyaW5nOwoJCX0pOwoJfQoKCS8qKgoJICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvCgkgKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCwKCSAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpbgoJICogQVNDSUkuCgkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCSAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhCgkgKiBVbmljb2RlIHN0cmluZy4KCSAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3IKCSAqIGVtYWlsIGFkZHJlc3MuCgkgKi8KCWZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHsKCQlyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHsKCQkJcmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpCgkJCQk/ICd4bi0tJyArIGVuY29kZShzdHJpbmcpCgkJCQk6IHN0cmluZzsKCQl9KTsKCX0KCgkvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgkvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovCglwdW55Y29kZSA9IHsKCQkvKioKCQkgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuCgkJICogQG1lbWJlck9mIHB1bnljb2RlCgkJICogQHR5cGUgU3RyaW5nCgkJICovCgkJJ3ZlcnNpb24nOiAnMS4zLjInLAoJCS8qKgoJCSAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyCgkJICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay4KCQkgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz4KCQkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCQkgKiBAdHlwZSBPYmplY3QKCQkgKi8KCQkndWNzMic6IHsKCQkJJ2RlY29kZSc6IHVjczJkZWNvZGUsCgkJCSdlbmNvZGUnOiB1Y3MyZW5jb2RlCgkJfSwKCQknZGVjb2RlJzogZGVjb2RlLAoJCSdlbmNvZGUnOiBlbmNvZGUsCgkJJ3RvQVNDSUknOiB0b0FTQ0lJLAoJCSd0b1VuaWNvZGUnOiB0b1VuaWNvZGUKCX07CgoJLyoqIEV4cG9zZSBgcHVueWNvZGVgICovCgkvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBzcGVjaWZpYyBjb25kaXRpb24gcGF0dGVybnMKCS8vIGxpa2UgdGhlIGZvbGxvd2luZzoKCWlmICgKCQl0cnVlCgkpIHsKCQkhKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gcHVueWNvZGU7CgkJfSkuY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpLAoJCV9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsKCX0gZWxzZSB7fQoKfSh0aGlzKSk7Cgp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHR5cGVvZiBfX3dlYnBhY2tfcmVxdWlyZV9fLmcgIT09ICJ1bmRlZmluZWQiID8gX193ZWJwYWNrX3JlcXVpcmVfXy5nIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0se31dLDgxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChnbG9iYWwsQnVmZmVyKXsoZnVuY3Rpb24gKCl7Ci8qIQogKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci4KICoKICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+CiAqIEBsaWNlbnNlICBNSVQKICovCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCgondXNlIHN0cmljdCcKCnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKQp2YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKQp2YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKQoKZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXIKZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlcgpleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTAKCi8qKgogKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOgogKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KQogKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpCiAqCiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKywKICogT3BlcmEgMTEuNissIGlPUyA0LjIrLgogKgogKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuCiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLgogKgogKiBOb3RlOgogKgogKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLAogKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguCiAqCiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLgogKgogKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZgogKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuCgogKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleQogKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS4KICovCkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZAogID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQKICA6IHR5cGVkQXJyYXlTdXBwb3J0KCkKCi8qCiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC4KICovCmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKQoKZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkgewogIHRyeSB7CiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSkKICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fQogICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQKICAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YAogICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgCiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlCiAgfQp9CgpmdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHsKICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQKICAgID8gMHg3ZmZmZmZmZgogICAgOiAweDNmZmZmZmZmCn0KCmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7CiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJykKICB9CiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2UKICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpCiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzcwogICAgaWYgKHRoYXQgPT09IG51bGwpIHsKICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKQogICAgfQogICAgdGhhdC5sZW5ndGggPSBsZW5ndGgKICB9CgogIHJldHVybiB0aGF0Cn0KCi8qKgogKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXIKICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZgogKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzCiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0CiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuCiAqCiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC4KICovCgpmdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7CiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKICB9CgogIC8vIENvbW1vbiBjYXNlLgogIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykgewogICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJwogICAgICApCiAgICB9CiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKQogIH0KICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKfQoKQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uCgovLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi4KQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikgewogIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlCiAgcmV0dXJuIGFycgp9CgpmdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKQogIH0KCiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewogICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQogIH0KCiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KQogIH0KCiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpCn0KCi8qKgogKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvcgogKiBpZiB2YWx1ZSBpcyBhIG51bWJlci4KICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKQogKiBCdWZmZXIuZnJvbShhcnJheSkKICogQnVmZmVyLmZyb20oYnVmZmVyKQogKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSkKICoqLwpCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKfQoKaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZQogIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5CiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmCiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikgewogICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTcKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7CiAgICAgIHZhbHVlOiBudWxsLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0pCiAgfQp9CgpmdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7CiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignInNpemUiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKQogIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKQogIH0KfQoKZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CiAgYXNzZXJ0U2l6ZShzaXplKQogIGlmIChzaXplIDw9IDApIHsKICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkKICB9CiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkgewogICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXMKICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGQKICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC4KICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnCiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpCiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCkKICB9CiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKQp9CgovKioKICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pCiAqKi8KQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKQp9CgpmdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkgewogIGFzc2VydFNpemUoc2l6ZSkKICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKQogIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7CiAgICAgIHRoYXRbaV0gPSAwCiAgICB9CiAgfQogIHJldHVybiB0aGF0Cn0KCi8qKgogKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKiAqLwpCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKQp9Ci8qKgogKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KICovCkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkgewogIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKQp9CgpmdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7CiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7CiAgICBlbmNvZGluZyA9ICd1dGY4JwogIH0KCiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJlbmNvZGluZyIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpCiAgfQoKICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDAKICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aCkKCiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZykKCiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7CiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGwKICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuCiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJykKICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCkKICB9CgogIHJldHVybiB0aGF0Cn0KCmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7CiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMAogIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHsKICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NQogIH0KICByZXR1cm4gdGhhdAp9CgpmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXIKCiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCdvZmZzZXRcJyBpcyBvdXQgb2YgYm91bmRzJykKICB9CgogIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ2xlbmd0aFwnIGlzIG91dCBvZiBib3VuZHMnKQogIH0KCiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSkKICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KQogIH0gZWxzZSB7CiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpCiAgfQoKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZQogICAgdGhhdCA9IGFycmF5CiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzcwogICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpCiAgfQogIHJldHVybiB0aGF0Cn0KCmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikgewogIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkgewogICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwCiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbikKCiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIHRoYXQKICAgIH0KCiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pCiAgICByZXR1cm4gdGhhdAogIH0KCiAgaWYgKG9iaikgewogICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmCiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHsKICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkgewogICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMCkKICAgICAgfQogICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmopCiAgICB9CgogICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBpc0FycmF5KG9iai5kYXRhKSkgewogICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSkKICAgIH0KICB9CgogIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKQp9CgpmdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHsKICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBrTWF4TGVuZ3RoKClgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW4KICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLikKICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKQogIH0KICByZXR1cm4gbGVuZ3RoIHwgMAp9CgpmdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHsKICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEKICAgIGxlbmd0aCA9IDAKICB9CiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKQp9CgpCdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikgewogIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpCn0KCkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikgewogIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKQogIH0KCiAgaWYgKGEgPT09IGIpIHJldHVybiAwCgogIHZhciB4ID0gYS5sZW5ndGgKICB2YXIgeSA9IGIubGVuZ3RoCgogIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7CiAgICBpZiAoYVtpXSAhPT0gYltpXSkgewogICAgICB4ID0gYVtpXQogICAgICB5ID0gYltpXQogICAgICBicmVhawogICAgfQogIH0KCiAgaWYgKHggPCB5KSByZXR1cm4gLTEKICBpZiAoeSA8IHgpIHJldHVybiAxCiAgcmV0dXJuIDAKfQoKQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykgewogIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7CiAgICBjYXNlICdoZXgnOgogICAgY2FzZSAndXRmOCc6CiAgICBjYXNlICd1dGYtOCc6CiAgICBjYXNlICdhc2NpaSc6CiAgICBjYXNlICdsYXRpbjEnOgogICAgY2FzZSAnYmluYXJ5JzoKICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICBjYXNlICd1Y3MyJzoKICAgIGNhc2UgJ3Vjcy0yJzoKICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgY2FzZSAndXRmLTE2bGUnOgogICAgICByZXR1cm4gdHJ1ZQogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlCiAgfQp9CgpCdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHsKICBpZiAoIWlzQXJyYXkobGlzdCkpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQogIH0KCiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApCiAgfQoKICB2YXIgaQogIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkgewogICAgbGVuZ3RoID0gMAogICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoCiAgICB9CiAgfQoKICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCkKICB2YXIgcG9zID0gMAogIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CiAgICB2YXIgYnVmID0gbGlzdFtpXQogICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJykKICAgIH0KICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKQogICAgcG9zICs9IGJ1Zi5sZW5ndGgKICB9CiAgcmV0dXJuIGJ1ZmZlcgp9CgpmdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7CiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7CiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aAogIH0KICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmCiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHsKICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aAogIH0KICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHsKICAgIHN0cmluZyA9ICcnICsgc3RyaW5nCiAgfQoKICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aAogIGlmIChsZW4gPT09IDApIHJldHVybiAwCgogIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvbgogIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCiAgZm9yICg7OykgewogICAgc3dpdGNoIChlbmNvZGluZykgewogICAgICBjYXNlICdhc2NpaSc6CiAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgcmV0dXJuIGxlbgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICBjYXNlIHVuZGVmaW5lZDoKICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGgKICAgICAgY2FzZSAndWNzMic6CiAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICByZXR1cm4gbGVuICogMgogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBsZW4gPj4+IDEKICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aAogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4CiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKQogICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZQogICAgfQogIH0KfQpCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGgKCmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHsKICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZQoKICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0ICJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5CiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS4KCiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kCiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLgogIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sCiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uCiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7CiAgICBzdGFydCA9IDAKICB9CiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzIKICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LgogIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7CiAgICByZXR1cm4gJycKICB9CgogIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkgewogICAgZW5kID0gdGhpcy5sZW5ndGgKICB9CgogIGlmIChlbmQgPD0gMCkgewogICAgcmV0dXJuICcnCiAgfQoKICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLgogIGVuZCA+Pj49IDAKICBzdGFydCA+Pj49IDAKCiAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgcmV0dXJuICcnCiAgfQoKICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JwoKICB3aGlsZSAodHJ1ZSkgewogICAgc3dpdGNoIChlbmNvZGluZykgewogICAgICBjYXNlICdoZXgnOgogICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgY2FzZSAndXRmOCc6CiAgICAgIGNhc2UgJ3V0Zi04JzoKICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICdhc2NpaSc6CiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCiAgICAgIGNhc2UgJ2xhdGluMSc6CiAgICAgIGNhc2UgJ2JpbmFyeSc6CiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgY2FzZSAndWNzMic6CiAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQogICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkKICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKICAgIH0KICB9Cn0KCi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0Ci8vIEJ1ZmZlciBpbnN0YW5jZXMuCkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZQoKZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkgewogIHZhciBpID0gYltuXQogIGJbbl0gPSBiW21dCiAgYlttXSA9IGkKfQoKQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aAogIGlmIChsZW4gJSAyICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKQogIH0KICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7CiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKQogIH0KICByZXR1cm4gdGhpcwp9CgpCdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7CiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCiAgaWYgKGxlbiAlIDQgIT09IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDMpCiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMikKICB9CiAgcmV0dXJuIHRoaXMKfQoKQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aAogIGlmIChsZW4gJSA4ICE9PSAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKQogIH0KICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7CiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KQogICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpCiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSkKICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KQogIH0KICByZXR1cm4gdGhpcwp9CgpCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkgewogIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDAKICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJycKICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpCiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpCn0KCkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKQogIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZQogIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMAp9CgpCdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHsKICB2YXIgc3RyID0gJycKICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUwogIGlmICh0aGlzLmxlbmd0aCA+IDApIHsKICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpCiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnCiAgfQogIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nCn0KCkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCiAgfQoKICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkgewogICAgc3RhcnQgPSAwCiAgfQogIGlmIChlbmQgPT09IHVuZGVmaW5lZCkgewogICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDAKICB9CiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7CiAgICB0aGlzU3RhcnQgPSAwCiAgfQogIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aAogIH0KCiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JykKICB9CgogIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHsKICAgIHJldHVybiAwCiAgfQogIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkgewogICAgcmV0dXJuIC0xCiAgfQogIGlmIChzdGFydCA+PSBlbmQpIHsKICAgIHJldHVybiAxCiAgfQoKICBzdGFydCA+Pj49IDAKICBlbmQgPj4+PSAwCiAgdGhpc1N0YXJ0ID4+Pj0gMAogIHRoaXNFbmQgPj4+PSAwCgogIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwCgogIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydAogIHZhciB5ID0gZW5kIC0gc3RhcnQKICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSkKCiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpCiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZCkKCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkgewogICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7CiAgICAgIHggPSB0aGlzQ29weVtpXQogICAgICB5ID0gdGFyZ2V0Q29weVtpXQogICAgICBicmVhawogICAgfQogIH0KCiAgaWYgKHggPCB5KSByZXR1cm4gLTEKICBpZiAoeSA8IHgpIHJldHVybiAxCiAgcmV0dXJuIDAKfQoKLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLAovLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLgovLwovLyBBcmd1bWVudHM6Ci8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoCi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyCi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMgovLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZwovLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZgpmdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2gKICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xCgogIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0CiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0CiAgICBieXRlT2Zmc2V0ID0gMAogIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHsKICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmCiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHsKICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMAogIH0KICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuCiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7CiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCAiZm9vIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyCiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSkKICB9CgogIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyCiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXQKICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7CiAgICBpZiAoZGlyKSByZXR1cm4gLTEKICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxCiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkgewogICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDAKICAgIGVsc2UgcmV0dXJuIC0xCiAgfQoKICAvLyBOb3JtYWxpemUgdmFsCiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKQogIH0KCiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2YKICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHsKICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHMKICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiAtMQogICAgfQogICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV0KICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJgogICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmIChkaXIpIHsKICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQogICAgICB9CiAgICB9CiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKICB9CgogIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpCn0KCmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHsKICB2YXIgaW5kZXhTaXplID0gMQogIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoCiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGgKCiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHsKICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fAogICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHsKICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7CiAgICAgICAgcmV0dXJuIC0xCiAgICAgIH0KICAgICAgaW5kZXhTaXplID0gMgogICAgICBhcnJMZW5ndGggLz0gMgogICAgICB2YWxMZW5ndGggLz0gMgogICAgICBieXRlT2Zmc2V0IC89IDIKICAgIH0KICB9CgogIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkgewogICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkgewogICAgICByZXR1cm4gYnVmW2ldCiAgICB9IGVsc2UgewogICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKQogICAgfQogIH0KCiAgdmFyIGkKICBpZiAoZGlyKSB7CiAgICB2YXIgZm91bmRJbmRleCA9IC0xCiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHsKICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkgewogICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGkKICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplCiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4CiAgICAgICAgZm91bmRJbmRleCA9IC0xCiAgICAgIH0KICAgIH0KICB9IGVsc2UgewogICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGgKICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7CiAgICAgIHZhciBmb3VuZCA9IHRydWUKICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykgewogICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHsKICAgICAgICAgIGZvdW5kID0gZmFsc2UKICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGkKICAgIH0KICB9CgogIHJldHVybiAtMQp9CgpCdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMQp9CgpCdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpCn0KCkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewogIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSkKfQoKZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDAKICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldAogIGlmICghbGVuZ3RoKSB7CiAgICBsZW5ndGggPSByZW1haW5pbmcKICB9IGVsc2UgewogICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aCkKICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHsKICAgICAgbGVuZ3RoID0gcmVtYWluaW5nCiAgICB9CiAgfQoKICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0cwogIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoCiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpCgogIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7CiAgICBsZW5ndGggPSBzdHJMZW4gLyAyCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpCiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGkKICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZAogIH0KICByZXR1cm4gaQp9CgpmdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKQp9CgpmdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewogIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHsKICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKQogIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgewogICAgZW5jb2RpbmcgPSAndXRmOCcKICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICBvZmZzZXQgPSAwCiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpCiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykgewogICAgZW5jb2RpbmcgPSBvZmZzZXQKICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoCiAgICBvZmZzZXQgPSAwCiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSkKICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHsKICAgIG9mZnNldCA9IG9mZnNldCB8IDAKICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7CiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDAKICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnCiAgICB9IGVsc2UgewogICAgICBlbmNvZGluZyA9IGxlbmd0aAogICAgICBsZW5ndGggPSB1bmRlZmluZWQKICAgIH0KICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzCiAgfSBlbHNlIHsKICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJwogICAgKQogIH0KCiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0CiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nCgogIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKQogIH0KCiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCcKCiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2UKICBmb3IgKDs7KSB7CiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGUKICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ3VjczInOgogICAgICBjYXNlICd1Y3MtMic6CiAgICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgZGVmYXVsdDoKICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlCiAgICB9CiAgfQp9CgpCdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7CiAgcmV0dXJuIHsKICAgIHR5cGU6ICdCdWZmZXInLAogICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApCiAgfQp9CgpmdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkgewogICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZikKICB9IGVsc2UgewogICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSkKICB9Cn0KCmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKQogIHZhciByZXMgPSBbXQoKICB2YXIgaSA9IHN0YXJ0CiAgd2hpbGUgKGkgPCBlbmQpIHsKICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV0KICAgIHZhciBjb2RlUG9pbnQgPSBudWxsCiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDQKICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzCiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMgogICAgICA6IDEKCiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7CiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQKCiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7CiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZQogICAgICAgICAgfQogICAgICAgICAgYnJlYWsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpCiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RikgewogICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgYnJlYWsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQogICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKQogICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgNDoKICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdCiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXQogICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpCiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkgewogICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkgewogICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhCiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGUKICAgICAgY29kZVBvaW50ID0gMHhGRkZECiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxCiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikgewogICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKQogICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMAogICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApCiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGCiAgICB9CgogICAgcmVzLnB1c2goY29kZVBvaW50KQogICAgaSArPSBieXRlc1BlclNlcXVlbmNlCiAgfQoKICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcykKfQoKLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoCi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy4KLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eQp2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDAKCmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykgewogIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aAogIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHsKICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKQogIH0KCiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCAiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkIi4KICB2YXIgcmVzID0gJycKICB2YXIgaSA9IDAKICB3aGlsZSAoaSA8IGxlbikgewogICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoCiAgICAgIFN0cmluZywKICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKQogICAgKQogIH0KICByZXR1cm4gcmVzCn0KCmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciByZXQgPSAnJwogIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpCiAgfQogIHJldHVybiByZXQKfQoKZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciByZXQgPSAnJwogIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSkKICB9CiAgcmV0dXJuIHJldAp9CgpmdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGgKCiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMAogIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW4KCiAgdmFyIG91dCA9ICcnCiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgIG91dCArPSB0b0hleChidWZbaV0pCiAgfQogIHJldHVybiBvdXQKfQoKZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZCkKICB2YXIgcmVzID0gJycKICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7CiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NikKICB9CiAgcmV0dXJuIHJlcwp9CgpCdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKICBzdGFydCA9IH5+c3RhcnQKICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kCgogIGlmIChzdGFydCA8IDApIHsKICAgIHN0YXJ0ICs9IGxlbgogICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwCiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikgewogICAgc3RhcnQgPSBsZW4KICB9CgogIGlmIChlbmQgPCAwKSB7CiAgICBlbmQgKz0gbGVuCiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMAogIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7CiAgICBlbmQgPSBsZW4KICB9CgogIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQKCiAgdmFyIG5ld0J1ZgogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKQogICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICB9IGVsc2UgewogICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnQKICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZCkKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkgewogICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF0KICAgIH0KICB9CgogIHJldHVybiBuZXdCdWYKfQoKLyoKICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuCiAqLwpmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkgewogIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpCiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciB2YWwgPSB0aGlzW29mZnNldF0KICB2YXIgbXVsID0gMQogIHZhciBpID0gMAogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAogIH0KCiAgcmV0dXJuIHZhbAp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCiAgfQoKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdCiAgdmFyIG11bCA9IDEKICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWwKICB9CgogIHJldHVybiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKQogIHJldHVybiB0aGlzW29mZnNldF0KfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQogIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8CiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHwKICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArCiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArCiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHwKICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKICAgIHRoaXNbb2Zmc2V0ICsgM10pCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciB2YWwgPSB0aGlzW29mZnNldF0KICB2YXIgbXVsID0gMQogIHZhciBpID0gMAogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAogIH0KICBtdWwgKj0gMHg4MAoKICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKICByZXR1cm4gdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgogIHZhciBpID0gYnl0ZUxlbmd0aAogIHZhciBtdWwgPSAxCiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXQogIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bAogIH0KICBtdWwgKj0gMHg4MAoKICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKICByZXR1cm4gdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpCiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKQogIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQogIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQogIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOCkKICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdKSB8CiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8CiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfAogICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgogIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8CiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAogICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfAogICAgKHRoaXNbb2Zmc2V0ICsgM10pCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQogIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCkKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCkKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KQp9CgpmdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignImJ1ZmZlciIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpCiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignInZhbHVlIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJykKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDAKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxCiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCkKICB9CgogIHZhciBtdWwgPSAxCiAgdmFyIGkgPSAwCiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGCiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRgogIH0KCiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDEKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKQogIH0KCiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMQogIHZhciBtdWwgPSAxCiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApCiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKQogIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgcmV0dXJuIG9mZnNldCArIDEKfQoKZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7CiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDEKICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDIpOyBpIDwgajsgKytpKSB7CiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PgogICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDgKICB9Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyAyCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKQogIH0KICByZXR1cm4gb2Zmc2V0ICsgMgp9CgpmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHsKICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDEKICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7CiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmCiAgfQp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCkKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpCiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNikKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpCiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZikKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgewogICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKQoKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KQogIH0KCiAgdmFyIGkgPSAwCiAgdmFyIG11bCA9IDEKICB2YXIgc3ViID0gMAogIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkgewogICAgICBzdWIgPSAxCiAgICB9CiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkKCiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdCkKICB9CgogIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKICB2YXIgbXVsID0gMQogIHZhciBzdWIgPSAwCiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgogIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHsKICAgICAgc3ViID0gMQogICAgfQogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRgogIH0KCiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApCiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKQogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMQogIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgcmV0dXJuIG9mZnNldCArIDEKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyAyCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKQogIH0gZWxzZSB7CiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDIKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpCiAgfQogIHJldHVybiBvZmZzZXQgKyA0Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKQogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCkKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKQogIH0gZWxzZSB7CiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDQKfQoKZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKQp9CgpmdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOCkKICB9CiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpCiAgcmV0dXJuIG9mZnNldCArIDQKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCkKfQoKZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIHsKICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpCiAgfQogIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KQogIHJldHVybiBvZmZzZXQgKyA4Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewogIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpCn0KCi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aCkKQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkgewogIGlmICghc3RhcnQpIHN0YXJ0ID0gMAogIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGgKICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoCiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwCiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0CgogIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZQogIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMAogIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMAoKICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zCiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKQogIH0KICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpCiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpCgogIC8vIEFyZSB3ZSBvb2I/CiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aAogIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkgewogICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQKICB9CgogIHZhciBsZW4gPSBlbmQgLSBzdGFydAogIHZhciBpCgogIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkgewogICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kCiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkgewogICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XQogICAgfQogIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnQKICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkgewogICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XQogICAgfQogIH0gZWxzZSB7CiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbCgKICAgICAgdGFyZ2V0LAogICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksCiAgICAgIHRhcmdldFN0YXJ0CiAgICApCiAgfQoKICByZXR1cm4gbGVuCn0KCi8vIFVzYWdlOgovLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSkKLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pCi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKQpCdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7CiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczoKICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHsKICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVuY29kaW5nID0gc3RhcnQKICAgICAgc3RhcnQgPSAwCiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVuY29kaW5nID0gZW5kCiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCiAgICB9CiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkgewogICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApCiAgICAgIGlmIChjb2RlIDwgMjU2KSB7CiAgICAgICAgdmFsID0gY29kZQogICAgICB9CiAgICB9CiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKQogICAgfQogICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpCiAgICB9CiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgewogICAgdmFsID0gdmFsICYgMjU1CiAgfQoKICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS4KICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKQogIH0KCiAgaWYgKGVuZCA8PSBzdGFydCkgewogICAgcmV0dXJuIHRoaXMKICB9CgogIHN0YXJ0ID0gc3RhcnQgPj4+IDAKICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwCgogIGlmICghdmFsKSB2YWwgPSAwCgogIHZhciBpCiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CiAgICAgIHRoaXNbaV0gPSB2YWwKICAgIH0KICB9IGVsc2UgewogICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbCkKICAgICAgPyB2YWwKICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpCiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoCiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkgewogICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXQogICAgfQogIH0KCiAgcmV0dXJuIHRoaXMKfQoKLy8gSEVMUEVSIEZVTkNUSU9OUwovLyA9PT09PT09PT09PT09PT09Cgp2YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXC8wLTlBLVphLXotX10vZwoKZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikgewogIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcbiBhbmQgXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3QKICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpCiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJwogIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnCiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90CiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7CiAgICBzdHIgPSBzdHIgKyAnPScKICB9CiAgcmV0dXJuIHN0cgp9CgpmdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHsKICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpCiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpCn0KCmZ1bmN0aW9uIHRvSGV4IChuKSB7CiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpCiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpCn0KCmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7CiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eQogIHZhciBjb2RlUG9pbnQKICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aAogIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbAogIHZhciBieXRlcyA9IFtdCgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpCgogICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudAogICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHsKICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7CiAgICAgICAgLy8gbm8gbGVhZCB5ZXQKICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7CiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsCiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7CiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkCiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQoKICAgICAgICAvLyB2YWxpZCBsZWFkCiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludAoKICAgICAgICBjb250aW51ZQogICAgICB9CgogICAgICAvLyAyIGxlYWRzIGluIGEgcm93CiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHsKICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXIKICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMAogICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7CiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWQKICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpCiAgICB9CgogICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGwKCiAgICAvLyBlbmNvZGUgdXRmOAogICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHsKICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KQogICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWsKICAgICAgYnl0ZXMucHVzaCgKICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCwKICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MAogICAgICApCiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHsKICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goCiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsCiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLAogICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCiAgICAgICkKICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHsKICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrCiAgICAgIGJ5dGVzLnB1c2goCiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLAogICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCwKICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsCiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKICAgICAgKQogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKQogICAgfQogIH0KCiAgcmV0dXJuIGJ5dGVzCn0KCmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7CiAgdmFyIGJ5dGVBcnJheSA9IFtdCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLgogICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKQogIH0KICByZXR1cm4gYnl0ZUFycmF5Cn0KCmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7CiAgdmFyIGMsIGhpLCBsbwogIHZhciBieXRlQXJyYXkgPSBbXQogIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWsKCiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSkKICAgIGhpID0gYyA+PiA4CiAgICBsbyA9IGMgJSAyNTYKICAgIGJ5dGVBcnJheS5wdXNoKGxvKQogICAgYnl0ZUFycmF5LnB1c2goaGkpCiAgfQoKICByZXR1cm4gYnl0ZUFycmF5Cn0KCmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikgewogIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSkKfQoKZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVhawogICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldCiAgfQogIHJldHVybiBpCn0KCmZ1bmN0aW9uIGlzbmFuICh2YWwpIHsKICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmUKfQoKfSkuY2FsbCh0aGlzKX0pLmNhbGwodGhpcyx0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXy5nICE9PSAidW5kZWZpbmVkIiA/IF9fd2VicGFja19yZXF1aXJlX18uZyA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9LHJlcXVpcmUoImJ1ZmZlciIpLkJ1ZmZlcikKfSx7ImJhc2U2NC1qcyI6NzgsImJ1ZmZlciI6ODEsImllZWU3NTQiOjgzLCJpc2FycmF5Ijo4NH1dLDgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgewogIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTsKICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkOwp9Cm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyOwoKLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54CkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7CkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDsKCi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZQovLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLgpFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwOwoKLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHsKICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKQogICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTsKICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuOwogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkgewogIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7CgogIGlmICghdGhpcy5fZXZlbnRzKQogICAgdGhpcy5fZXZlbnRzID0ge307CgogIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy4KICBpZiAodHlwZSA9PT0gJ2Vycm9yJykgewogICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHwKICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHsKICAgICAgZXIgPSBhcmd1bWVudHNbMV07CiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlcgogICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCAiZXJyb3IiIGV2ZW50LiAoJyArIGVyICsgJyknKTsKICAgICAgICBlcnIuY29udGV4dCA9IGVyOwogICAgICAgIHRocm93IGVycjsKICAgICAgfQogICAgfQogIH0KCiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKCiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKQogICAgcmV0dXJuIGZhbHNlOwoKICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkgewogICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7CiAgICAgIC8vIGZhc3QgY2FzZXMKICAgICAgY2FzZSAxOgogICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAyOgogICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDM6CiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTsKICAgICAgICBicmVhazsKICAgICAgLy8gc2xvd2VyCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTsKICAgIH0KICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7CiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTsKICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7CiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspCiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTsKICB9CgogIHJldHVybiB0cnVlOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgdmFyIG07CgogIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpCiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpOwoKICBpZiAoIXRoaXMuX2V2ZW50cykKICAgIHRoaXMuX2V2ZW50cyA9IHt9OwoKICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSAibmV3TGlzdGVuZXIiISBCZWZvcmUKICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCAibmV3TGlzdGVuZXIiLgogIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpCiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSwKICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/CiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7CgogIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKQogICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuCiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjsKICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKQogICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLgogICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpOwogIGVsc2UKICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LgogICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdOwoKICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVhawogIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7CiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHsKICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVyczsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVyczsKICAgIH0KCiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkgewogICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTsKICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArCiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArCiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7CiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTAKICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikgewogIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpCiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpOwoKICB2YXIgZmlyZWQgPSBmYWxzZTsKCiAgZnVuY3Rpb24gZygpIHsKICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7CgogICAgaWYgKCFmaXJlZCkgewogICAgICBmaXJlZCA9IHRydWU7CiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CiAgfQoKICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7CiAgdGhpcy5vbih0eXBlLCBnKTsKCiAgcmV0dXJuIHRoaXM7Cn07CgovLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZApFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHsKICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTsKCiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkKICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgogIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pCiAgICByZXR1cm4gdGhpczsKCiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKICBsZW5ndGggPSBsaXN0Lmxlbmd0aDsKICBwb3NpdGlvbiA9IC0xOwoKICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwKICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7CiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOwogICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikKICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTsKCiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkgewogICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykgewogICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwKICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkgewogICAgICAgIHBvc2l0aW9uID0gaTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIGlmIChwb3NpdGlvbiA8IDApCiAgICAgIHJldHVybiB0aGlzOwoKICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgewogICAgICBsaXN0Lmxlbmd0aCA9IDA7CiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07CiAgICB9IGVsc2UgewogICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7CiAgICB9CgogICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikKICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTsKICB9CgogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7CiAgdmFyIGtleSwgbGlzdGVuZXJzOwoKICBpZiAoIXRoaXMuX2V2ZW50cykKICAgIHJldHVybiB0aGlzOwoKICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0CiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKQogICAgICB0aGlzLl9ldmVudHMgPSB7fTsKICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSkKICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzCiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHsKICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykgewogICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTsKICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTsKICAgIH0KICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwogICAgdGhpcy5fZXZlbnRzID0ge307CiAgICByZXR1cm4gdGhpczsKICB9CgogIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKCiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkgewogICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpOwogIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7CiAgICAvLyBMSUZPIG9yZGVyCiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCkKICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTsKICB9CiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKCiAgcmV0dXJuIHRoaXM7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHsKICB2YXIgcmV0OwogIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pCiAgICByZXQgPSBbXTsKICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpCiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTsKICBlbHNlCiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTsKICByZXR1cm4gcmV0Owp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkgewogIGlmICh0aGlzLl9ldmVudHMpIHsKICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdOwoKICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKQogICAgICByZXR1cm4gMTsKICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpCiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDsKICB9CiAgcmV0dXJuIDA7Cn07CgpFdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHsKICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpOwp9OwoKZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKfQoKZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwp9CgpmdW5jdGlvbiBpc09iamVjdChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwp9CgpmdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cn0KCn0se31dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKICB2YXIgZSwgbQogIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDEKICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMQogIHZhciBlQmlhcyA9IGVNYXggPj4gMQogIHZhciBuQml0cyA9IC03CiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMAogIHZhciBkID0gaXNMRSA/IC0xIDogMQogIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldCgogIGkgKz0gZAoKICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKQogIHMgPj49ICgtbkJpdHMpCiAgbkJpdHMgKz0gZUxlbgogIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge30KCiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSkKICBlID4+PSAoLW5CaXRzKQogIG5CaXRzICs9IG1MZW4KICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgogIGlmIChlID09PSAwKSB7CiAgICBlID0gMSAtIGVCaWFzCiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7CiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSkKICB9IGVsc2UgewogICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKQogICAgZSA9IGUgLSBlQmlhcwogIH0KICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKQp9CgpleHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7CiAgdmFyIGUsIG0sIGMKICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxCiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEKICB2YXIgZUJpYXMgPSBlTWF4ID4+IDEKICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApCiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKQogIHZhciBkID0gaXNMRSA/IDEgOiAtMQogIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwCgogIHZhbHVlID0gTWF0aC5hYnModmFsdWUpCgogIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7CiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDAKICAgIGUgPSBlTWF4CiAgfSBlbHNlIHsKICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKQogICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkgewogICAgICBlLS0KICAgICAgYyAqPSAyCiAgICB9CiAgICBpZiAoZSArIGVCaWFzID49IDEpIHsKICAgICAgdmFsdWUgKz0gcnQgLyBjCiAgICB9IGVsc2UgewogICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcykKICAgIH0KICAgIGlmICh2YWx1ZSAqIGMgPj0gMikgewogICAgICBlKysKICAgICAgYyAvPSAyCiAgICB9CgogICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7CiAgICAgIG0gPSAwCiAgICAgIGUgPSBlTWF4CiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7CiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pCiAgICAgIGUgPSBlICsgZUJpYXMKICAgIH0gZWxzZSB7CiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKQogICAgICBlID0gMAogICAgfQogIH0KCiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge30KCiAgZSA9IChlIDw8IG1MZW4pIHwgbQogIGVMZW4gKz0gbUxlbgogIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge30KCiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4Cn0KCn0se31dLDg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikgewogIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJzsKfTsKCn0se31dLDg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uKGV4cG9ydHMpIHsKICAidXNlIHN0cmljdCI7CgogIGZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7CiAgICBpZiAob2JqICE9PSBudWxsKSB7CiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gIltvYmplY3QgQXJyYXldIjsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikgewogICAgaWYgKG9iaiAhPT0gbnVsbCkgewogICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICJbb2JqZWN0IE9iamVjdF0iOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gc3RyaWN0RGVlcEVxdWFsKGZpcnN0LCBzZWNvbmQpIHsKICAgIC8vIENoZWNrIHRoZSBzY2FsYXIgY2FzZSBmaXJzdC4KICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIENoZWNrIGlmIHRoZXkgYXJlIHRoZSBzYW1lIHR5cGUuCiAgICB2YXIgZmlyc3RUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZpcnN0KTsKICAgIGlmIChmaXJzdFR5cGUgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZWNvbmQpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICAgIC8vIFdlIGtub3cgdGhhdCBmaXJzdCBhbmQgc2Vjb25kIGhhdmUgdGhlIHNhbWUgdHlwZSBzbyB3ZSBjYW4ganVzdCBjaGVjayB0aGUKICAgIC8vIGZpcnN0IHR5cGUgZnJvbSBub3cgb24uCiAgICBpZiAoaXNBcnJheShmaXJzdCkgPT09IHRydWUpIHsKICAgICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB0aGV5J3JlIG5vdCB0aGUgc2FtZSBsZW5ndGg7CiAgICAgIGlmIChmaXJzdC5sZW5ndGggIT09IHNlY29uZC5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaXJzdC5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChzdHJpY3REZWVwRXF1YWwoZmlyc3RbaV0sIHNlY29uZFtpXSkgPT09IGZhbHNlKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKGlzT2JqZWN0KGZpcnN0KSA9PT0gdHJ1ZSkgewogICAgICAvLyBBbiBvYmplY3QgaXMgZXF1YWwgaWYgaXQgaGFzIHRoZSBzYW1lIGtleS92YWx1ZSBwYWlycy4KICAgICAgdmFyIGtleXNTZWVuID0ge307CiAgICAgIGZvciAodmFyIGtleSBpbiBmaXJzdCkgewogICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZpcnN0LCBrZXkpKSB7CiAgICAgICAgICBpZiAoc3RyaWN0RGVlcEVxdWFsKGZpcnN0W2tleV0sIHNlY29uZFtrZXldKSA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICAgICAga2V5c1NlZW5ba2V5XSA9IHRydWU7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIE5vdyBjaGVjayB0aGF0IHRoZXJlIGFyZW4ndCBhbnkga2V5cyBpbiBzZWNvbmQgdGhhdCB3ZXJlbid0CiAgICAgIC8vIGluIGZpcnN0LgogICAgICBmb3IgKHZhciBrZXkyIGluIHNlY29uZCkgewogICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNlY29uZCwga2V5MikpIHsKICAgICAgICAgIGlmIChrZXlzU2VlbltrZXkyXSAhPT0gdHJ1ZSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gaXNGYWxzZShvYmopIHsKICAgIC8vIEZyb20gdGhlIHNwZWM6CiAgICAvLyBBIGZhbHNlIHZhbHVlIGNvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmcgdmFsdWVzOgogICAgLy8gRW1wdHkgbGlzdAogICAgLy8gRW1wdHkgb2JqZWN0CiAgICAvLyBFbXB0eSBzdHJpbmcKICAgIC8vIEZhbHNlIGJvb2xlYW4KICAgIC8vIG51bGwgdmFsdWUKCiAgICAvLyBGaXJzdCBjaGVjayB0aGUgc2NhbGFyIHZhbHVlcy4KICAgIGlmIChvYmogPT09ICIiIHx8IG9iaiA9PT0gZmFsc2UgfHwgb2JqID09PSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAwKSB7CiAgICAgICAgLy8gQ2hlY2sgZm9yIGFuIGVtcHR5IGFycmF5LgogICAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIGlmIChpc09iamVjdChvYmopKSB7CiAgICAgICAgLy8gQ2hlY2sgZm9yIGFuIGVtcHR5IG9iamVjdC4KICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7CiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkga2V5cywgdGhlbgogICAgICAgICAgICAvLyB0aGUgb2JqZWN0IGlzIG5vdCBlbXB0eSBzbyB0aGUgb2JqZWN0CiAgICAgICAgICAgIC8vIGlzIG5vdCBmYWxzZS4KICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBvYmpWYWx1ZXMob2JqKSB7CiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7CiAgICB2YXIgdmFsdWVzID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFsdWVzLnB1c2gob2JqW2tleXNbaV1dKTsKICAgIH0KICAgIHJldHVybiB2YWx1ZXM7CiAgfQoKICBmdW5jdGlvbiBtZXJnZShhLCBiKSB7CiAgICAgIHZhciBtZXJnZWQgPSB7fTsKICAgICAgZm9yICh2YXIga2V5IGluIGEpIHsKICAgICAgICAgIG1lcmdlZFtrZXldID0gYVtrZXldOwogICAgICB9CiAgICAgIGZvciAodmFyIGtleTIgaW4gYikgewogICAgICAgICAgbWVyZ2VkW2tleTJdID0gYltrZXkyXTsKICAgICAgfQogICAgICByZXR1cm4gbWVyZ2VkOwogIH0KCiAgdmFyIHRyaW1MZWZ0OwogIGlmICh0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS50cmltTGVmdCA9PT0gImZ1bmN0aW9uIikgewogICAgdHJpbUxlZnQgPSBmdW5jdGlvbihzdHIpIHsKICAgICAgcmV0dXJuIHN0ci50cmltTGVmdCgpOwogICAgfTsKICB9IGVsc2UgewogICAgdHJpbUxlZnQgPSBmdW5jdGlvbihzdHIpIHsKICAgICAgcmV0dXJuIHN0ci5tYXRjaCgvXlxzKiguKikvKVsxXTsKICAgIH07CiAgfQoKICAvLyBUeXBlIGNvbnN0YW50cyB1c2VkIHRvIGRlZmluZSBmdW5jdGlvbnMuCiAgdmFyIFRZUEVfTlVNQkVSID0gMDsKICB2YXIgVFlQRV9BTlkgPSAxOwogIHZhciBUWVBFX1NUUklORyA9IDI7CiAgdmFyIFRZUEVfQVJSQVkgPSAzOwogIHZhciBUWVBFX09CSkVDVCA9IDQ7CiAgdmFyIFRZUEVfQk9PTEVBTiA9IDU7CiAgdmFyIFRZUEVfRVhQUkVGID0gNjsKICB2YXIgVFlQRV9OVUxMID0gNzsKICB2YXIgVFlQRV9BUlJBWV9OVU1CRVIgPSA4OwogIHZhciBUWVBFX0FSUkFZX1NUUklORyA9IDk7CgogIHZhciBUT0tfRU9GID0gIkVPRiI7CiAgdmFyIFRPS19VTlFVT1RFRElERU5USUZJRVIgPSAiVW5xdW90ZWRJZGVudGlmaWVyIjsKICB2YXIgVE9LX1FVT1RFRElERU5USUZJRVIgPSAiUXVvdGVkSWRlbnRpZmllciI7CiAgdmFyIFRPS19SQlJBQ0tFVCA9ICJSYnJhY2tldCI7CiAgdmFyIFRPS19SUEFSRU4gPSAiUnBhcmVuIjsKICB2YXIgVE9LX0NPTU1BID0gIkNvbW1hIjsKICB2YXIgVE9LX0NPTE9OID0gIkNvbG9uIjsKICB2YXIgVE9LX1JCUkFDRSA9ICJSYnJhY2UiOwogIHZhciBUT0tfTlVNQkVSID0gIk51bWJlciI7CiAgdmFyIFRPS19DVVJSRU5UID0gIkN1cnJlbnQiOwogIHZhciBUT0tfRVhQUkVGID0gIkV4cHJlZiI7CiAgdmFyIFRPS19QSVBFID0gIlBpcGUiOwogIHZhciBUT0tfT1IgPSAiT3IiOwogIHZhciBUT0tfQU5EID0gIkFuZCI7CiAgdmFyIFRPS19FUSA9ICJFUSI7CiAgdmFyIFRPS19HVCA9ICJHVCI7CiAgdmFyIFRPS19MVCA9ICJMVCI7CiAgdmFyIFRPS19HVEUgPSAiR1RFIjsKICB2YXIgVE9LX0xURSA9ICJMVEUiOwogIHZhciBUT0tfTkUgPSAiTkUiOwogIHZhciBUT0tfRkxBVFRFTiA9ICJGbGF0dGVuIjsKICB2YXIgVE9LX1NUQVIgPSAiU3RhciI7CiAgdmFyIFRPS19GSUxURVIgPSAiRmlsdGVyIjsKICB2YXIgVE9LX0RPVCA9ICJEb3QiOwogIHZhciBUT0tfTk9UID0gIk5vdCI7CiAgdmFyIFRPS19MQlJBQ0UgPSAiTGJyYWNlIjsKICB2YXIgVE9LX0xCUkFDS0VUID0gIkxicmFja2V0IjsKICB2YXIgVE9LX0xQQVJFTj0gIkxwYXJlbiI7CiAgdmFyIFRPS19MSVRFUkFMPSAiTGl0ZXJhbCI7CgogIC8vIFRoZSAiJiIsICJbIiwgIjwiLCAiPiIgdG9rZW5zCiAgLy8gYXJlIG5vdCBpbiBiYXNpY1Rva2VuIGJlY2F1c2UKICAvLyB0aGVyZSBhcmUgdHdvIHRva2VuIHZhcmlhbnRzCiAgLy8gKCImJiIsICJbPyIsICI8PSIsICI+PSIpLiAgVGhpcyBpcyBzcGVjaWFsbHkgaGFuZGxlZAogIC8vIGJlbG93LgoKICB2YXIgYmFzaWNUb2tlbnMgPSB7CiAgICAiLiI6IFRPS19ET1QsCiAgICAiKiI6IFRPS19TVEFSLAogICAgIiwiOiBUT0tfQ09NTUEsCiAgICAiOiI6IFRPS19DT0xPTiwKICAgICJ7IjogVE9LX0xCUkFDRSwKICAgICJ9IjogVE9LX1JCUkFDRSwKICAgICJdIjogVE9LX1JCUkFDS0VULAogICAgIigiOiBUT0tfTFBBUkVOLAogICAgIikiOiBUT0tfUlBBUkVOLAogICAgIkAiOiBUT0tfQ1VSUkVOVAogIH07CgogIHZhciBvcGVyYXRvclN0YXJ0VG9rZW4gPSB7CiAgICAgICI8IjogdHJ1ZSwKICAgICAgIj4iOiB0cnVlLAogICAgICAiPSI6IHRydWUsCiAgICAgICIhIjogdHJ1ZQogIH07CgogIHZhciBza2lwQ2hhcnMgPSB7CiAgICAgICIgIjogdHJ1ZSwKICAgICAgIlx0IjogdHJ1ZSwKICAgICAgIlxuIjogdHJ1ZQogIH07CgoKICBmdW5jdGlvbiBpc0FscGhhKGNoKSB7CiAgICAgIHJldHVybiAoY2ggPj0gImEiICYmIGNoIDw9ICJ6IikgfHwKICAgICAgICAgICAgIChjaCA+PSAiQSIgJiYgY2ggPD0gIloiKSB8fAogICAgICAgICAgICAgY2ggPT09ICJfIjsKICB9CgogIGZ1bmN0aW9uIGlzTnVtKGNoKSB7CiAgICAgIHJldHVybiAoY2ggPj0gIjAiICYmIGNoIDw9ICI5IikgfHwKICAgICAgICAgICAgIGNoID09PSAiLSI7CiAgfQogIGZ1bmN0aW9uIGlzQWxwaGFOdW0oY2gpIHsKICAgICAgcmV0dXJuIChjaCA+PSAiYSIgJiYgY2ggPD0gInoiKSB8fAogICAgICAgICAgICAgKGNoID49ICJBIiAmJiBjaCA8PSAiWiIpIHx8CiAgICAgICAgICAgICAoY2ggPj0gIjAiICYmIGNoIDw9ICI5IikgfHwKICAgICAgICAgICAgIGNoID09PSAiXyI7CiAgfQoKICBmdW5jdGlvbiBMZXhlcigpIHsKICB9CiAgTGV4ZXIucHJvdG90eXBlID0gewogICAgICB0b2tlbml6ZTogZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICB2YXIgdG9rZW5zID0gW107CiAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gMDsKICAgICAgICAgIHZhciBzdGFydDsKICAgICAgICAgIHZhciBpZGVudGlmaWVyOwogICAgICAgICAgdmFyIHRva2VuOwogICAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnQgPCBzdHJlYW0ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgaWYgKGlzQWxwaGEoc3RyZWFtW3RoaXMuX2N1cnJlbnRdKSkgewogICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSB0aGlzLl9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyKHN0cmVhbSk7CiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHt0eXBlOiBUT0tfVU5RVU9URURJREVOVElGSUVSLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlkZW50aWZpZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnR9KTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJhc2ljVG9rZW5zW3N0cmVhbVt0aGlzLl9jdXJyZW50XV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogYmFzaWNUb2tlbnNbc3RyZWFtW3RoaXMuX2N1cnJlbnRdXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmVhbVt0aGlzLl9jdXJyZW50XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuX2N1cnJlbnR9KTsKICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdW0oc3RyZWFtW3RoaXMuX2N1cnJlbnRdKSkgewogICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMuX2NvbnN1bWVOdW1iZXIoc3RyZWFtKTsKICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSAiWyIpIHsKICAgICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBpbmNyZW1lbnQgdGhpcy5fY3VycmVudC4gIFRoaXMgaGFwcGVucwogICAgICAgICAgICAgICAgICAvLyBpbiBfY29uc3VtZUxCcmFja2V0CiAgICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5fY29uc3VtZUxCcmFja2V0KHN0cmVhbSk7CiAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gIlwiIikgewogICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSB0aGlzLl9jb25zdW1lUXVvdGVkSWRlbnRpZmllcihzdHJlYW0pOwogICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX1FVT1RFRElERU5USUZJRVIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaWRlbnRpZmllciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydH0pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtW3RoaXMuX2N1cnJlbnRdID09PSAiJyIpIHsKICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLl9jdXJyZW50OwogICAgICAgICAgICAgICAgICBpZGVudGlmaWVyID0gdGhpcy5fY29uc3VtZVJhd1N0cmluZ0xpdGVyYWwoc3RyZWFtKTsKICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFRPS19MSVRFUkFMLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlkZW50aWZpZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnR9KTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gImAiKSB7CiAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgICAgICAgdmFyIGxpdGVyYWwgPSB0aGlzLl9jb25zdW1lTGl0ZXJhbChzdHJlYW0pOwogICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX0xJVEVSQUwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbGl0ZXJhbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydH0pOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3JTdGFydFRva2VuW3N0cmVhbVt0aGlzLl9jdXJyZW50XV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh0aGlzLl9jb25zdW1lT3BlcmF0b3Ioc3RyZWFtKSk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChza2lwQ2hhcnNbc3RyZWFtW3RoaXMuX2N1cnJlbnRdXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlLgogICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09ICImIikgewogICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gIiYiKSB7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX0FORCwgdmFsdWU6ICImJiIsIHN0YXJ0OiBzdGFydH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgdG9rZW5zLnB1c2goe3R5cGU6IFRPS19FWFBSRUYsIHZhbHVlOiAiJiIsIHN0YXJ0OiBzdGFydH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09ICJ8IikgewogICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gInwiKSB7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX09SLCB2YWx1ZTogInx8Iiwgc3RhcnQ6IHN0YXJ0fSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX1BJUEUsIHZhbHVlOiAifCIsIHN0YXJ0OiBzdGFydH0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCJVbmtub3duIGNoYXJhY3RlcjoiICsgc3RyZWFtW3RoaXMuX2N1cnJlbnRdKTsKICAgICAgICAgICAgICAgICAgZXJyb3IubmFtZSA9ICJMZXhlckVycm9yIjsKICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHRva2VuczsKICAgICAgfSwKCiAgICAgIF9jb25zdW1lVW5xdW90ZWRJZGVudGlmaWVyOiBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudCA8IHN0cmVhbS5sZW5ndGggJiYgaXNBbHBoYU51bShzdHJlYW1bdGhpcy5fY3VycmVudF0pKSB7CiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0cmVhbS5zbGljZShzdGFydCwgdGhpcy5fY3VycmVudCk7CiAgICAgIH0sCgogICAgICBfY29uc3VtZVF1b3RlZElkZW50aWZpZXI6IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgIHZhciBtYXhMZW5ndGggPSBzdHJlYW0ubGVuZ3RoOwogICAgICAgICAgd2hpbGUgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSAhPT0gIlwiIiAmJiB0aGlzLl9jdXJyZW50IDwgbWF4TGVuZ3RoKSB7CiAgICAgICAgICAgICAgLy8gWW91IGNhbiBlc2NhcGUgYSBkb3VibGUgcXVvdGUgYW5kIHlvdSBjYW4gZXNjYXBlIGFuIGVzY2FwZS4KICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgaWYgKHN0cmVhbVtjdXJyZW50XSA9PT0gIlxcIiAmJiAoc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gIlxcIiB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVtjdXJyZW50ICsgMV0gPT09ICJcIiIpKSB7CiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgKz0gMjsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBjdXJyZW50Kys7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBjdXJyZW50OwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyZWFtLnNsaWNlKHN0YXJ0LCB0aGlzLl9jdXJyZW50KSk7CiAgICAgIH0sCgogICAgICBfY29uc3VtZVJhd1N0cmluZ0xpdGVyYWw6IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgIHZhciBtYXhMZW5ndGggPSBzdHJlYW0ubGVuZ3RoOwogICAgICAgICAgd2hpbGUgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSAhPT0gIiciICYmIHRoaXMuX2N1cnJlbnQgPCBtYXhMZW5ndGgpIHsKICAgICAgICAgICAgICAvLyBZb3UgY2FuIGVzY2FwZSBhIHNpbmdsZSBxdW90ZSBhbmQgeW91IGNhbiBlc2NhcGUgYW4gZXNjYXBlLgogICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgICAgICBpZiAoc3RyZWFtW2N1cnJlbnRdID09PSAiXFwiICYmIChzdHJlYW1bY3VycmVudCArIDFdID09PSAiXFwiIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gIiciKSkgewogICAgICAgICAgICAgICAgICBjdXJyZW50ICs9IDI7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgY3VycmVudCsrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gY3VycmVudDsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgIHZhciBsaXRlcmFsID0gc3RyZWFtLnNsaWNlKHN0YXJ0ICsgMSwgdGhpcy5fY3VycmVudCAtIDEpOwogICAgICAgICAgcmV0dXJuIGxpdGVyYWwucmVwbGFjZSgiXFwnIiwgIiciKTsKICAgICAgfSwKCiAgICAgIF9jb25zdW1lTnVtYmVyOiBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICB2YXIgbWF4TGVuZ3RoID0gc3RyZWFtLmxlbmd0aDsKICAgICAgICAgIHdoaWxlIChpc051bShzdHJlYW1bdGhpcy5fY3VycmVudF0pICYmIHRoaXMuX2N1cnJlbnQgPCBtYXhMZW5ndGgpIHsKICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludChzdHJlYW0uc2xpY2Uoc3RhcnQsIHRoaXMuX2N1cnJlbnQpKTsKICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX05VTUJFUiwgdmFsdWU6IHZhbHVlLCBzdGFydDogc3RhcnR9OwogICAgICB9LAoKICAgICAgX2NvbnN1bWVMQnJhY2tldDogZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9jdXJyZW50OwogICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gIj8iKSB7CiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0ZJTFRFUiwgdmFsdWU6ICJbPyIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gIl0iKSB7CiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0ZMQVRURU4sIHZhbHVlOiAiW10iLCBzdGFydDogc3RhcnR9OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IFRPS19MQlJBQ0tFVCwgdmFsdWU6ICJbIiwgc3RhcnQ6IHN0YXJ0fTsKICAgICAgICAgIH0KICAgICAgfSwKCiAgICAgIF9jb25zdW1lT3BlcmF0b3I6IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgIHZhciBzdGFydGluZ0NoYXIgPSBzdHJlYW1bc3RhcnRdOwogICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgaWYgKHN0YXJ0aW5nQ2hhciA9PT0gIiEiKSB7CiAgICAgICAgICAgICAgaWYgKHN0cmVhbVt0aGlzLl9jdXJyZW50XSA9PT0gIj0iKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfTkUsIHZhbHVlOiAiIT0iLCBzdGFydDogc3RhcnR9OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4ge3R5cGU6IFRPS19OT1QsIHZhbHVlOiAiISIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChzdGFydGluZ0NoYXIgPT09ICI8IikgewogICAgICAgICAgICAgIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09ICI9IikgewogICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0xURSwgdmFsdWU6ICI8PSIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfTFQsIHZhbHVlOiAiPCIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChzdGFydGluZ0NoYXIgPT09ICI+IikgewogICAgICAgICAgICAgIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09ICI9IikgewogICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0dURSwgdmFsdWU6ICI+PSIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiBUT0tfR1QsIHZhbHVlOiAiPiIsIHN0YXJ0OiBzdGFydH07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIGlmIChzdGFydGluZ0NoYXIgPT09ICI9IikgewogICAgICAgICAgICAgIGlmIChzdHJlYW1bdGhpcy5fY3VycmVudF0gPT09ICI9IikgewogICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Kys7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogVE9LX0VRLCB2YWx1ZTogIj09Iiwgc3RhcnQ6IHN0YXJ0fTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0sCgogICAgICBfY29uc3VtZUxpdGVyYWw6IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgdGhpcy5fY3VycmVudCsrOwogICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudDsKICAgICAgICAgIHZhciBtYXhMZW5ndGggPSBzdHJlYW0ubGVuZ3RoOwogICAgICAgICAgdmFyIGxpdGVyYWw7CiAgICAgICAgICB3aGlsZShzdHJlYW1bdGhpcy5fY3VycmVudF0gIT09ICJgIiAmJiB0aGlzLl9jdXJyZW50IDwgbWF4TGVuZ3RoKSB7CiAgICAgICAgICAgICAgLy8gWW91IGNhbiBlc2NhcGUgYSBsaXRlcmFsIGNoYXIgb3IgeW91IGNhbiBlc2NhcGUgdGhlIGVzY2FwZS4KICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuX2N1cnJlbnQ7CiAgICAgICAgICAgICAgaWYgKHN0cmVhbVtjdXJyZW50XSA9PT0gIlxcIiAmJiAoc3RyZWFtW2N1cnJlbnQgKyAxXSA9PT0gIlxcIiB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVtjdXJyZW50ICsgMV0gPT09ICJgIikpIHsKICAgICAgICAgICAgICAgICAgY3VycmVudCArPSAyOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGN1cnJlbnQrKzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IGN1cnJlbnQ7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbGl0ZXJhbFN0cmluZyA9IHRyaW1MZWZ0KHN0cmVhbS5zbGljZShzdGFydCwgdGhpcy5fY3VycmVudCkpOwogICAgICAgICAgbGl0ZXJhbFN0cmluZyA9IGxpdGVyYWxTdHJpbmcucmVwbGFjZSgiXFxgIiwgImAiKTsKICAgICAgICAgIGlmICh0aGlzLl9sb29rc0xpa2VKU09OKGxpdGVyYWxTdHJpbmcpKSB7CiAgICAgICAgICAgICAgbGl0ZXJhbCA9IEpTT04ucGFyc2UobGl0ZXJhbFN0cmluZyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIFRyeSB0byBKU09OIHBhcnNlIGl0IGFzICI8bGl0ZXJhbD4iCiAgICAgICAgICAgICAgbGl0ZXJhbCA9IEpTT04ucGFyc2UoIlwiIiArIGxpdGVyYWxTdHJpbmcgKyAiXCIiKTsKICAgICAgICAgIH0KICAgICAgICAgIC8vICsxIGdldHMgdXMgdG8gdGhlIGVuZGluZyAiYCIsICsxIHRvIG1vdmUgb24gdG8gdGhlIG5leHQgY2hhci4KICAgICAgICAgIHRoaXMuX2N1cnJlbnQrKzsKICAgICAgICAgIHJldHVybiBsaXRlcmFsOwogICAgICB9LAoKICAgICAgX2xvb2tzTGlrZUpTT046IGZ1bmN0aW9uKGxpdGVyYWxTdHJpbmcpIHsKICAgICAgICAgIHZhciBzdGFydGluZ0NoYXJzID0gIlt7XCIiOwogICAgICAgICAgdmFyIGpzb25MaXRlcmFscyA9IFsidHJ1ZSIsICJmYWxzZSIsICJudWxsIl07CiAgICAgICAgICB2YXIgbnVtYmVyTG9va2luZyA9ICItMDEyMzQ1Njc4OSI7CgogICAgICAgICAgaWYgKGxpdGVyYWxTdHJpbmcgPT09ICIiKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfSBlbHNlIGlmIChzdGFydGluZ0NoYXJzLmluZGV4T2YobGl0ZXJhbFN0cmluZ1swXSkgPj0gMCkgewogICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgfSBlbHNlIGlmIChqc29uTGl0ZXJhbHMuaW5kZXhPZihsaXRlcmFsU3RyaW5nKSA+PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlckxvb2tpbmcuaW5kZXhPZihsaXRlcmFsU3RyaW5nWzBdKSA+PSAwKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShsaXRlcmFsU3RyaW5nKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgfQogICAgICB9CiAgfTsKCiAgICAgIHZhciBiaW5kaW5nUG93ZXIgPSB7fTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19FT0ZdID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19VTlFVT1RFRElERU5USUZJRVJdID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19RVU9URURJREVOVElGSUVSXSA9IDA7CiAgICAgIGJpbmRpbmdQb3dlcltUT0tfUkJSQUNLRVRdID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19SUEFSRU5dID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19DT01NQV0gPSAwOwogICAgICBiaW5kaW5nUG93ZXJbVE9LX1JCUkFDRV0gPSAwOwogICAgICBiaW5kaW5nUG93ZXJbVE9LX05VTUJFUl0gPSAwOwogICAgICBiaW5kaW5nUG93ZXJbVE9LX0NVUlJFTlRdID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19FWFBSRUZdID0gMDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19QSVBFXSA9IDE7CiAgICAgIGJpbmRpbmdQb3dlcltUT0tfT1JdID0gMjsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19BTkRdID0gMzsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19FUV0gPSA1OwogICAgICBiaW5kaW5nUG93ZXJbVE9LX0dUXSA9IDU7CiAgICAgIGJpbmRpbmdQb3dlcltUT0tfTFRdID0gNTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19HVEVdID0gNTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19MVEVdID0gNTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19ORV0gPSA1OwogICAgICBiaW5kaW5nUG93ZXJbVE9LX0ZMQVRURU5dID0gOTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19TVEFSXSA9IDIwOwogICAgICBiaW5kaW5nUG93ZXJbVE9LX0ZJTFRFUl0gPSAyMTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19ET1RdID0gNDA7CiAgICAgIGJpbmRpbmdQb3dlcltUT0tfTk9UXSA9IDQ1OwogICAgICBiaW5kaW5nUG93ZXJbVE9LX0xCUkFDRV0gPSA1MDsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19MQlJBQ0tFVF0gPSA1NTsKICAgICAgYmluZGluZ1Bvd2VyW1RPS19MUEFSRU5dID0gNjA7CgogIGZ1bmN0aW9uIFBhcnNlcigpIHsKICB9CgogIFBhcnNlci5wcm90b3R5cGUgPSB7CiAgICAgIHBhcnNlOiBmdW5jdGlvbihleHByZXNzaW9uKSB7CiAgICAgICAgICB0aGlzLl9sb2FkVG9rZW5zKGV4cHJlc3Npb24pOwogICAgICAgICAgdGhpcy5pbmRleCA9IDA7CiAgICAgICAgICB2YXIgYXN0ID0gdGhpcy5leHByZXNzaW9uKDApOwogICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX0VPRikgewogICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbG9va2FoZWFkVG9rZW4oMCk7CiAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKAogICAgICAgICAgICAgICAgICAiVW5leHBlY3RlZCB0b2tlbiB0eXBlOiAiICsgdC50eXBlICsgIiwgdmFsdWU6ICIgKyB0LnZhbHVlKTsKICAgICAgICAgICAgICBlcnJvci5uYW1lID0gIlBhcnNlckVycm9yIjsKICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBhc3Q7CiAgICAgIH0sCgogICAgICBfbG9hZFRva2VuczogZnVuY3Rpb24oZXhwcmVzc2lvbikgewogICAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKCk7CiAgICAgICAgICB2YXIgdG9rZW5zID0gbGV4ZXIudG9rZW5pemUoZXhwcmVzc2lvbik7CiAgICAgICAgICB0b2tlbnMucHVzaCh7dHlwZTogVE9LX0VPRiwgdmFsdWU6ICIiLCBzdGFydDogZXhwcmVzc2lvbi5sZW5ndGh9KTsKICAgICAgICAgIHRoaXMudG9rZW5zID0gdG9rZW5zOwogICAgICB9LAoKICAgICAgZXhwcmVzc2lvbjogZnVuY3Rpb24ocmJwKSB7CiAgICAgICAgICB2YXIgbGVmdFRva2VuID0gdGhpcy5fbG9va2FoZWFkVG9rZW4oMCk7CiAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMubnVkKGxlZnRUb2tlbik7CiAgICAgICAgICB2YXIgY3VycmVudFRva2VuID0gdGhpcy5fbG9va2FoZWFkKDApOwogICAgICAgICAgd2hpbGUgKHJicCA8IGJpbmRpbmdQb3dlcltjdXJyZW50VG9rZW5dKSB7CiAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpOwogICAgICAgICAgICAgIGxlZnQgPSB0aGlzLmxlZChjdXJyZW50VG9rZW4sIGxlZnQpOwogICAgICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IHRoaXMuX2xvb2thaGVhZCgwKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBsZWZ0OwogICAgICB9LAoKICAgICAgX2xvb2thaGVhZDogZnVuY3Rpb24obnVtYmVyKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5pbmRleCArIG51bWJlcl0udHlwZTsKICAgICAgfSwKCiAgICAgIF9sb29rYWhlYWRUb2tlbjogZnVuY3Rpb24obnVtYmVyKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5pbmRleCArIG51bWJlcl07CiAgICAgIH0sCgogICAgICBfYWR2YW5jZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICB0aGlzLmluZGV4Kys7CiAgICAgIH0sCgogICAgICBudWQ6IGZ1bmN0aW9uKHRva2VuKSB7CiAgICAgICAgdmFyIGxlZnQ7CiAgICAgICAgdmFyIHJpZ2h0OwogICAgICAgIHZhciBleHByZXNzaW9uOwogICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkgewogICAgICAgICAgY2FzZSBUT0tfTElURVJBTDoKICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiTGl0ZXJhbCIsIHZhbHVlOiB0b2tlbi52YWx1ZX07CiAgICAgICAgICBjYXNlIFRPS19VTlFVT1RFRElERU5USUZJRVI6CiAgICAgICAgICAgIHJldHVybiB7dHlwZTogIkZpZWxkIiwgbmFtZTogdG9rZW4udmFsdWV9OwogICAgICAgICAgY2FzZSBUT0tfUVVPVEVESURFTlRJRklFUjoKICAgICAgICAgICAgdmFyIG5vZGUgPSB7dHlwZTogIkZpZWxkIiwgbmFtZTogdG9rZW4udmFsdWV9OwogICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfTFBBUkVOKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlF1b3RlZCBpZGVudGlmaWVyIG5vdCBhbGxvd2VkIGZvciBmdW5jdGlvbiBuYW1lcy4iKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBUT0tfTk9UOgogICAgICAgICAgICByaWdodCA9IHRoaXMuZXhwcmVzc2lvbihiaW5kaW5nUG93ZXIuTm90KTsKICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiTm90RXhwcmVzc2lvbiIsIGNoaWxkcmVuOiBbcmlnaHRdfTsKICAgICAgICAgIGNhc2UgVE9LX1NUQVI6CiAgICAgICAgICAgIGxlZnQgPSB7dHlwZTogIklkZW50aXR5In07CiAgICAgICAgICAgIHJpZ2h0ID0gbnVsbDsKICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX1JCUkFDS0VUKSB7CiAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gYSBtdWx0aXNlbGVjdCwKICAgICAgICAgICAgICAgIC8vIFthLCBiLCAqXQogICAgICAgICAgICAgICAgcmlnaHQgPSB7dHlwZTogIklkZW50aXR5In07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhiaW5kaW5nUG93ZXIuU3Rhcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiVmFsdWVQcm9qZWN0aW9uIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19OwogICAgICAgICAgY2FzZSBUT0tfRklMVEVSOgogICAgICAgICAgICByZXR1cm4gdGhpcy5sZWQodG9rZW4udHlwZSwge3R5cGU6ICJJZGVudGl0eSJ9KTsKICAgICAgICAgIGNhc2UgVE9LX0xCUkFDRToKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlTXVsdGlzZWxlY3RIYXNoKCk7CiAgICAgICAgICBjYXNlIFRPS19GTEFUVEVOOgogICAgICAgICAgICBsZWZ0ID0ge3R5cGU6IFRPS19GTEFUVEVOLCBjaGlsZHJlbjogW3t0eXBlOiAiSWRlbnRpdHkifV19OwogICAgICAgICAgICByaWdodCA9IHRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhiaW5kaW5nUG93ZXIuRmxhdHRlbik7CiAgICAgICAgICAgIHJldHVybiB7dHlwZTogIlByb2plY3Rpb24iLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0XX07CiAgICAgICAgICBjYXNlIFRPS19MQlJBQ0tFVDoKICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX05VTUJFUiB8fCB0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT0xPTikgewogICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZUluZGV4RXhwcmVzc2lvbigpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2plY3RJZlNsaWNlKHt0eXBlOiAiSWRlbnRpdHkifSwgcmlnaHQpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX1NUQVIgJiYKICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb29rYWhlYWQoMSkgPT09IFRPS19SQlJBQ0tFVCkgewogICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpOwogICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpOwogICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoYmluZGluZ1Bvd2VyLlN0YXIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiUHJvamVjdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3R5cGU6ICJJZGVudGl0eSJ9LCByaWdodF19OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlTXVsdGlzZWxlY3RMaXN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIFRPS19DVVJSRU5UOgogICAgICAgICAgICByZXR1cm4ge3R5cGU6IFRPS19DVVJSRU5UfTsKICAgICAgICAgIGNhc2UgVE9LX0VYUFJFRjoKICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuZXhwcmVzc2lvbihiaW5kaW5nUG93ZXIuRXhwcmVmKTsKICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiRXhwcmVzc2lvblJlZmVyZW5jZSIsIGNoaWxkcmVuOiBbZXhwcmVzc2lvbl19OwogICAgICAgICAgY2FzZSBUT0tfTFBBUkVOOgogICAgICAgICAgICB2YXIgYXJncyA9IFtdOwogICAgICAgICAgICB3aGlsZSAodGhpcy5fbG9va2FoZWFkKDApICE9PSBUT0tfUlBBUkVOKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0NVUlJFTlQpIHsKICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSB7dHlwZTogVE9LX0NVUlJFTlR9OwogICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5leHByZXNzaW9uKDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBhcmdzLnB1c2goZXhwcmVzc2lvbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JQQVJFTik7CiAgICAgICAgICAgIHJldHVybiBhcmdzWzBdOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhpcy5fZXJyb3JUb2tlbih0b2tlbik7CiAgICAgICAgfQogICAgICB9LAoKICAgICAgbGVkOiBmdW5jdGlvbih0b2tlbk5hbWUsIGxlZnQpIHsKICAgICAgICB2YXIgcmlnaHQ7CiAgICAgICAgc3dpdGNoKHRva2VuTmFtZSkgewogICAgICAgICAgY2FzZSBUT0tfRE9UOgogICAgICAgICAgICB2YXIgcmJwID0gYmluZGluZ1Bvd2VyLkRvdDsKICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX1NUQVIpIHsKICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VEb3RSSFMocmJwKTsKICAgICAgICAgICAgICAgIHJldHVybiB7dHlwZTogIlN1YmV4cHJlc3Npb24iLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0XX07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBDcmVhdGluZyBhIHByb2plY3Rpb24uCiAgICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMuX3BhcnNlUHJvamVjdGlvblJIUyhyYnApOwogICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiVmFsdWVQcm9qZWN0aW9uIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSBUT0tfUElQRToKICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24oYmluZGluZ1Bvd2VyLlBpcGUpOwogICAgICAgICAgICByZXR1cm4ge3R5cGU6IFRPS19QSVBFLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0XX07CiAgICAgICAgICBjYXNlIFRPS19PUjoKICAgICAgICAgICAgcmlnaHQgPSB0aGlzLmV4cHJlc3Npb24oYmluZGluZ1Bvd2VyLk9yKTsKICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiT3JFeHByZXNzaW9uIiwgY2hpbGRyZW46IFtsZWZ0LCByaWdodF19OwogICAgICAgICAgY2FzZSBUT0tfQU5EOgogICAgICAgICAgICByaWdodCA9IHRoaXMuZXhwcmVzc2lvbihiaW5kaW5nUG93ZXIuQW5kKTsKICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiQW5kRXhwcmVzc2lvbiIsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTsKICAgICAgICAgIGNhc2UgVE9LX0xQQVJFTjoKICAgICAgICAgICAgdmFyIG5hbWUgPSBsZWZ0Lm5hbWU7CiAgICAgICAgICAgIHZhciBhcmdzID0gW107CiAgICAgICAgICAgIHZhciBleHByZXNzaW9uLCBub2RlOwogICAgICAgICAgICB3aGlsZSAodGhpcy5fbG9va2FoZWFkKDApICE9PSBUT0tfUlBBUkVOKSB7CiAgICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0NVUlJFTlQpIHsKICAgICAgICAgICAgICAgIGV4cHJlc3Npb24gPSB7dHlwZTogVE9LX0NVUlJFTlR9OwogICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZSgpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gdGhpcy5leHByZXNzaW9uKDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfQ09NTUEpIHsKICAgICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19DT01NQSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGFyZ3MucHVzaChleHByZXNzaW9uKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUlBBUkVOKTsKICAgICAgICAgICAgbm9kZSA9IHt0eXBlOiAiRnVuY3Rpb24iLCBuYW1lOiBuYW1lLCBjaGlsZHJlbjogYXJnc307CiAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgY2FzZSBUT0tfRklMVEVSOgogICAgICAgICAgICB2YXIgY29uZGl0aW9uID0gdGhpcy5leHByZXNzaW9uKDApOwogICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUkJSQUNLRVQpOwogICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfRkxBVFRFTikgewogICAgICAgICAgICAgIHJpZ2h0ID0ge3R5cGU6ICJJZGVudGl0eSJ9OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5GaWx0ZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7dHlwZTogIkZpbHRlclByb2plY3Rpb24iLCBjaGlsZHJlbjogW2xlZnQsIHJpZ2h0LCBjb25kaXRpb25dfTsKICAgICAgICAgIGNhc2UgVE9LX0ZMQVRURU46CiAgICAgICAgICAgIHZhciBsZWZ0Tm9kZSA9IHt0eXBlOiBUT0tfRkxBVFRFTiwgY2hpbGRyZW46IFtsZWZ0XX07CiAgICAgICAgICAgIHZhciByaWdodE5vZGUgPSB0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoYmluZGluZ1Bvd2VyLkZsYXR0ZW4pOwogICAgICAgICAgICByZXR1cm4ge3R5cGU6ICJQcm9qZWN0aW9uIiwgY2hpbGRyZW46IFtsZWZ0Tm9kZSwgcmlnaHROb2RlXX07CiAgICAgICAgICBjYXNlIFRPS19FUToKICAgICAgICAgIGNhc2UgVE9LX05FOgogICAgICAgICAgY2FzZSBUT0tfR1Q6CiAgICAgICAgICBjYXNlIFRPS19HVEU6CiAgICAgICAgICBjYXNlIFRPS19MVDoKICAgICAgICAgIGNhc2UgVE9LX0xURToKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlQ29tcGFyYXRvcihsZWZ0LCB0b2tlbk5hbWUpOwogICAgICAgICAgY2FzZSBUT0tfTEJSQUNLRVQ6CiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApOwogICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gVE9LX05VTUJFUiB8fCB0b2tlbi50eXBlID09PSBUT0tfQ09MT04pIHsKICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VJbmRleEV4cHJlc3Npb24oKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9qZWN0SWZTbGljZShsZWZ0LCByaWdodCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfU1RBUik7CiAgICAgICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUkJSQUNLRVQpOwogICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLl9wYXJzZVByb2plY3Rpb25SSFMoYmluZGluZ1Bvd2VyLlN0YXIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAiUHJvamVjdGlvbiIsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRoaXMuX2Vycm9yVG9rZW4odGhpcy5fbG9va2FoZWFkVG9rZW4oMCkpOwogICAgICAgIH0KICAgICAgfSwKCiAgICAgIF9tYXRjaDogZnVuY3Rpb24odG9rZW5UeXBlKSB7CiAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSB0b2tlblR5cGUpIHsKICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbG9va2FoZWFkVG9rZW4oMCk7CiAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCJFeHBlY3RlZCAiICsgdG9rZW5UeXBlICsgIiwgZ290OiAiICsgdC50eXBlKTsKICAgICAgICAgICAgICBlcnJvci5uYW1lID0gIlBhcnNlckVycm9yIjsKICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgICAgIH0KICAgICAgfSwKCiAgICAgIF9lcnJvclRva2VuOiBmdW5jdGlvbih0b2tlbikgewogICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCJJbnZhbGlkIHRva2VuICgiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi50eXBlICsgIik6IFwiIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4udmFsdWUgKyAiXCIiKTsKICAgICAgICAgIGVycm9yLm5hbWUgPSAiUGFyc2VyRXJyb3IiOwogICAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0sCgoKICAgICAgX3BhcnNlSW5kZXhFeHByZXNzaW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT0xPTiB8fCB0aGlzLl9sb29rYWhlYWQoMSkgPT09IFRPS19DT0xPTikgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZVNsaWNlRXhwcmVzc2lvbigpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgbm9kZSA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogIkluZGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuX2xvb2thaGVhZFRva2VuKDApLnZhbHVlfTsKICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JCUkFDS0VUKTsKICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgIH0KICAgICAgfSwKCiAgICAgIF9wcm9qZWN0SWZTbGljZTogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHsKICAgICAgICAgIHZhciBpbmRleEV4cHIgPSB7dHlwZTogIkluZGV4RXhwcmVzc2lvbiIsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTsKICAgICAgICAgIGlmIChyaWdodC50eXBlID09PSAiU2xpY2UiKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgdHlwZTogIlByb2plY3Rpb24iLAogICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2luZGV4RXhwciwgdGhpcy5fcGFyc2VQcm9qZWN0aW9uUkhTKGJpbmRpbmdQb3dlci5TdGFyKV0KICAgICAgICAgICAgICB9OwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gaW5kZXhFeHByOwogICAgICAgICAgfQogICAgICB9LAoKICAgICAgX3BhcnNlU2xpY2VFeHByZXNzaW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgIC8vIFtzdGFydDplbmQ6c3RlcF0gd2hlcmUgZWFjaCBwYXJ0IGlzIG9wdGlvbmFsLCBhcyB3ZWxsIGFzIHRoZSBsYXN0CiAgICAgICAgICAvLyBjb2xvbi4KICAgICAgICAgIHZhciBwYXJ0cyA9IFtudWxsLCBudWxsLCBudWxsXTsKICAgICAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgICAgICB2YXIgY3VycmVudFRva2VuID0gdGhpcy5fbG9va2FoZWFkKDApOwogICAgICAgICAgd2hpbGUgKGN1cnJlbnRUb2tlbiAhPT0gVE9LX1JCUkFDS0VUICYmIGluZGV4IDwgMykgewogICAgICAgICAgICAgIGlmIChjdXJyZW50VG9rZW4gPT09IFRPS19DT0xPTikgewogICAgICAgICAgICAgICAgICBpbmRleCsrOwogICAgICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VG9rZW4gPT09IFRPS19OVU1CRVIpIHsKICAgICAgICAgICAgICAgICAgcGFydHNbaW5kZXhdID0gdGhpcy5fbG9va2FoZWFkVG9rZW4oMCkudmFsdWU7CiAgICAgICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2UoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuX2xvb2thaGVhZCgwKTsKICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCJTeW50YXggZXJyb3IsIHVuZXhwZWN0ZWQgdG9rZW46ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC52YWx1ZSArICIoIiArIHQudHlwZSArICIpIik7CiAgICAgICAgICAgICAgICAgIGVycm9yLm5hbWUgPSAiUGFyc2VyZXJyb3IiOwogICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY3VycmVudFRva2VuID0gdGhpcy5fbG9va2FoZWFkKDApOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JCUkFDS0VUKTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgdHlwZTogIlNsaWNlIiwKICAgICAgICAgICAgICBjaGlsZHJlbjogcGFydHMKICAgICAgICAgIH07CiAgICAgIH0sCgogICAgICBfcGFyc2VDb21wYXJhdG9yOiBmdW5jdGlvbihsZWZ0LCBjb21wYXJhdG9yKSB7CiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKGJpbmRpbmdQb3dlcltjb21wYXJhdG9yXSk7CiAgICAgICAgcmV0dXJuIHt0eXBlOiAiQ29tcGFyYXRvciIsIG5hbWU6IGNvbXBhcmF0b3IsIGNoaWxkcmVuOiBbbGVmdCwgcmlnaHRdfTsKICAgICAgfSwKCiAgICAgIF9wYXJzZURvdFJIUzogZnVuY3Rpb24ocmJwKSB7CiAgICAgICAgICB2YXIgbG9va2FoZWFkID0gdGhpcy5fbG9va2FoZWFkKDApOwogICAgICAgICAgdmFyIGV4cHJUb2tlbnMgPSBbVE9LX1VOUVVPVEVESURFTlRJRklFUiwgVE9LX1FVT1RFRElERU5USUZJRVIsIFRPS19TVEFSXTsKICAgICAgICAgIGlmIChleHByVG9rZW5zLmluZGV4T2YobG9va2FoZWFkKSA+PSAwKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvbihyYnApOwogICAgICAgICAgfSBlbHNlIGlmIChsb29rYWhlYWQgPT09IFRPS19MQlJBQ0tFVCkgewogICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19MQlJBQ0tFVCk7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlTXVsdGlzZWxlY3RMaXN0KCk7CiAgICAgICAgICB9IGVsc2UgaWYgKGxvb2thaGVhZCA9PT0gVE9LX0xCUkFDRSkgewogICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19MQlJBQ0UpOwogICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJzZU11bHRpc2VsZWN0SGFzaCgpOwogICAgICAgICAgfQogICAgICB9LAoKICAgICAgX3BhcnNlUHJvamVjdGlvblJIUzogZnVuY3Rpb24ocmJwKSB7CiAgICAgICAgICB2YXIgcmlnaHQ7CiAgICAgICAgICBpZiAoYmluZGluZ1Bvd2VyW3RoaXMuX2xvb2thaGVhZCgwKV0gPCAxMCkgewogICAgICAgICAgICAgIHJpZ2h0ID0ge3R5cGU6ICJJZGVudGl0eSJ9OwogICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19MQlJBQ0tFVCkgewogICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKHJicCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0ZJTFRFUikgewogICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5leHByZXNzaW9uKHJicCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX0RPVCkgewogICAgICAgICAgICAgIHRoaXMuX21hdGNoKFRPS19ET1QpOwogICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5fcGFyc2VEb3RSSFMocmJwKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9sb29rYWhlYWRUb2tlbigwKTsKICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoIlN5dGFueCBlcnJvciwgdW5leHBlY3RlZCB0b2tlbjogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudmFsdWUgKyAiKCIgKyB0LnR5cGUgKyAiKSIpOwogICAgICAgICAgICAgIGVycm9yLm5hbWUgPSAiUGFyc2VyRXJyb3IiOwogICAgICAgICAgICAgIHRocm93IGVycm9yOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJpZ2h0OwogICAgICB9LAoKICAgICAgX3BhcnNlTXVsdGlzZWxlY3RMaXN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBleHByZXNzaW9ucyA9IFtdOwogICAgICAgICAgd2hpbGUgKHRoaXMuX2xvb2thaGVhZCgwKSAhPT0gVE9LX1JCUkFDS0VUKSB7CiAgICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLmV4cHJlc3Npb24oMCk7CiAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByZXNzaW9uKTsKICAgICAgICAgICAgICBpZiAodGhpcy5fbG9va2FoZWFkKDApID09PSBUT0tfQ09NTUEpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX0NPTU1BKTsKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xvb2thaGVhZCgwKSA9PT0gVE9LX1JCUkFDS0VUKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHRva2VuIFJicmFja2V0Iik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfUkJSQUNLRVQpOwogICAgICAgICAgcmV0dXJuIHt0eXBlOiAiTXVsdGlTZWxlY3RMaXN0IiwgY2hpbGRyZW46IGV4cHJlc3Npb25zfTsKICAgICAgfSwKCiAgICAgIF9wYXJzZU11bHRpc2VsZWN0SGFzaDogZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIHBhaXJzID0gW107CiAgICAgICAgdmFyIGlkZW50aWZpZXJUeXBlcyA9IFtUT0tfVU5RVU9URURJREVOVElGSUVSLCBUT0tfUVVPVEVESURFTlRJRklFUl07CiAgICAgICAgdmFyIGtleVRva2VuLCBrZXlOYW1lLCB2YWx1ZSwgbm9kZTsKICAgICAgICBmb3IgKDs7KSB7CiAgICAgICAgICBrZXlUb2tlbiA9IHRoaXMuX2xvb2thaGVhZFRva2VuKDApOwogICAgICAgICAgaWYgKGlkZW50aWZpZXJUeXBlcy5pbmRleE9mKGtleVRva2VuLnR5cGUpIDwgMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkV4cGVjdGluZyBhbiBpZGVudGlmaWVyIHRva2VuLCBnb3Q6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5VG9rZW4udHlwZSk7CiAgICAgICAgICB9CiAgICAgICAgICBrZXlOYW1lID0ga2V5VG9rZW4udmFsdWU7CiAgICAgICAgICB0aGlzLl9hZHZhbmNlKCk7CiAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfQ09MT04pOwogICAgICAgICAgdmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oMCk7CiAgICAgICAgICBub2RlID0ge3R5cGU6ICJLZXlWYWx1ZVBhaXIiLCBuYW1lOiBrZXlOYW1lLCB2YWx1ZTogdmFsdWV9OwogICAgICAgICAgcGFpcnMucHVzaChub2RlKTsKICAgICAgICAgIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19DT01NQSkgewogICAgICAgICAgICB0aGlzLl9tYXRjaChUT0tfQ09NTUEpOwogICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9sb29rYWhlYWQoMCkgPT09IFRPS19SQlJBQ0UpIHsKICAgICAgICAgICAgdGhpcy5fbWF0Y2goVE9LX1JCUkFDRSk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4ge3R5cGU6ICJNdWx0aVNlbGVjdEhhc2giLCBjaGlsZHJlbjogcGFpcnN9OwogICAgICB9CiAgfTsKCgogIGZ1bmN0aW9uIFRyZWVJbnRlcnByZXRlcihydW50aW1lKSB7CiAgICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lOwogIH0KCiAgVHJlZUludGVycHJldGVyLnByb3RvdHlwZSA9IHsKICAgICAgc2VhcmNoOiBmdW5jdGlvbihub2RlLCB2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXQobm9kZSwgdmFsdWUpOwogICAgICB9LAoKICAgICAgdmlzaXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7CiAgICAgICAgICB2YXIgbWF0Y2hlZCwgY3VycmVudCwgcmVzdWx0LCBmaXJzdCwgc2Vjb25kLCBmaWVsZCwgbGVmdCwgcmlnaHQsIGNvbGxlY3RlZCwgaTsKICAgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7CiAgICAgICAgICAgIGNhc2UgIkZpZWxkIjoKICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgIGZpZWxkID0gdmFsdWVbbm9kZS5uYW1lXTsKICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAiU3ViZXhwcmVzc2lvbiI6CiAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzBdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCByZXN1bHQpOwogICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICBjYXNlICJJbmRleEV4cHJlc3Npb24iOgogICAgICAgICAgICAgIGxlZnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTsKICAgICAgICAgICAgICByaWdodCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblsxXSwgbGVmdCk7CiAgICAgICAgICAgICAgcmV0dXJuIHJpZ2h0OwogICAgICAgICAgICBjYXNlICJJbmRleCI6CiAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBpbmRleCA9IG5vZGUudmFsdWU7CiAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCkgewogICAgICAgICAgICAgICAgaW5kZXggPSB2YWx1ZS5sZW5ndGggKyBpbmRleDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWVbaW5kZXhdOwogICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgY2FzZSAiU2xpY2UiOgogICAgICAgICAgICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2YXIgc2xpY2VQYXJhbXMgPSBub2RlLmNoaWxkcmVuLnNsaWNlKDApOwogICAgICAgICAgICAgIHZhciBjb21wdXRlZCA9IHRoaXMuY29tcHV0ZVNsaWNlUGFyYW1zKHZhbHVlLmxlbmd0aCwgc2xpY2VQYXJhbXMpOwogICAgICAgICAgICAgIHZhciBzdGFydCA9IGNvbXB1dGVkWzBdOwogICAgICAgICAgICAgIHZhciBzdG9wID0gY29tcHV0ZWRbMV07CiAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBjb21wdXRlZFsyXTsKICAgICAgICAgICAgICByZXN1bHQgPSBbXTsKICAgICAgICAgICAgICBpZiAoc3RlcCA+IDApIHsKICAgICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdG9wOyBpICs9IHN0ZXApIHsKICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlW2ldKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBpID4gc3RvcDsgaSArPSBzdGVwKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZVtpXSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgY2FzZSAiUHJvamVjdGlvbiI6CiAgICAgICAgICAgICAgLy8gRXZhbHVhdGUgbGVmdCBjaGlsZC4KICAgICAgICAgICAgICB2YXIgYmFzZSA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpOwogICAgICAgICAgICAgIGlmICghaXNBcnJheShiYXNlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbGxlY3RlZCA9IFtdOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBiYXNlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCBiYXNlW2ldKTsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZC5wdXNoKGN1cnJlbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gY29sbGVjdGVkOwogICAgICAgICAgICBjYXNlICJWYWx1ZVByb2plY3Rpb24iOgogICAgICAgICAgICAgIC8vIEV2YWx1YXRlIGxlZnQgY2hpbGQuCiAgICAgICAgICAgICAgYmFzZSA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpOwogICAgICAgICAgICAgIGlmICghaXNPYmplY3QoYmFzZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb2xsZWN0ZWQgPSBbXTsKICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gb2JqVmFsdWVzKGJhc2UpOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMV0sIHZhbHVlc1tpXSk7CiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQucHVzaChjdXJyZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDsKICAgICAgICAgICAgY2FzZSAiRmlsdGVyUHJvamVjdGlvbiI6CiAgICAgICAgICAgICAgYmFzZSA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblswXSwgdmFsdWUpOwogICAgICAgICAgICAgIGlmICghaXNBcnJheShiYXNlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IFtdOwogICAgICAgICAgICAgIHZhciBmaW5hbFJlc3VsdHMgPSBbXTsKICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYmFzZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblsyXSwgYmFzZVtpXSk7CiAgICAgICAgICAgICAgICBpZiAoIWlzRmFsc2UobWF0Y2hlZCkpIHsKICAgICAgICAgICAgICAgICAgZmlsdGVyZWQucHVzaChiYXNlW2ldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWx0ZXJlZC5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblsxXSwgZmlsdGVyZWRbal0pOwogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgZmluYWxSZXN1bHRzLnB1c2goY3VycmVudCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBmaW5hbFJlc3VsdHM7CiAgICAgICAgICAgIGNhc2UgIkNvbXBhcmF0b3IiOgogICAgICAgICAgICAgIGZpcnN0ID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzBdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgc2Vjb25kID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgc3dpdGNoKG5vZGUubmFtZSkgewogICAgICAgICAgICAgICAgY2FzZSBUT0tfRVE6CiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0cmljdERlZXBFcXVhbChmaXJzdCwgc2Vjb25kKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFRPS19ORToKICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXN0cmljdERlZXBFcXVhbChmaXJzdCwgc2Vjb25kKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIFRPS19HVDoKICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmlyc3QgPiBzZWNvbmQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBUT0tfR1RFOgogICAgICAgICAgICAgICAgICByZXN1bHQgPSBmaXJzdCA+PSBzZWNvbmQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBUT0tfTFQ6CiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZpcnN0IDwgc2Vjb25kOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgVE9LX0xURToKICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZmlyc3QgPD0gc2Vjb25kOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBjb21wYXJhdG9yOiAiICsgbm9kZS5uYW1lKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICAgICAgY2FzZSBUT0tfRkxBVFRFTjoKICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTsKICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkob3JpZ2luYWwpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgdmFyIG1lcmdlZCA9IFtdOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcmlnaW5hbC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgY3VycmVudCA9IG9yaWdpbmFsW2ldOwogICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoY3VycmVudCkpIHsKICAgICAgICAgICAgICAgICAgbWVyZ2VkLnB1c2guYXBwbHkobWVyZ2VkLCBjdXJyZW50KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIG1lcmdlZC5wdXNoKGN1cnJlbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VkOwogICAgICAgICAgICBjYXNlICJJZGVudGl0eSI6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgICBjYXNlICJNdWx0aVNlbGVjdExpc3QiOgogICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGNvbGxlY3RlZCA9IFtdOwogICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgIGNvbGxlY3RlZC5wdXNoKHRoaXMudmlzaXQobm9kZS5jaGlsZHJlbltpXSwgdmFsdWUpKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDsKICAgICAgICAgICAgY2FzZSAiTXVsdGlTZWxlY3RIYXNoIjoKICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBjb2xsZWN0ZWQgPSB7fTsKICAgICAgICAgICAgICB2YXIgY2hpbGQ7CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTsKICAgICAgICAgICAgICAgIGNvbGxlY3RlZFtjaGlsZC5uYW1lXSA9IHRoaXMudmlzaXQoY2hpbGQudmFsdWUsIHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIGNvbGxlY3RlZDsKICAgICAgICAgICAgY2FzZSAiT3JFeHByZXNzaW9uIjoKICAgICAgICAgICAgICBtYXRjaGVkID0gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzBdLCB2YWx1ZSk7CiAgICAgICAgICAgICAgaWYgKGlzRmFsc2UobWF0Y2hlZCkpIHsKICAgICAgICAgICAgICAgICAgbWF0Y2hlZCA9IHRoaXMudmlzaXQobm9kZS5jaGlsZHJlblsxXSwgdmFsdWUpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlZDsKICAgICAgICAgICAgY2FzZSAiQW5kRXhwcmVzc2lvbiI6CiAgICAgICAgICAgICAgZmlyc3QgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTsKCiAgICAgICAgICAgICAgaWYgKGlzRmFsc2UoZmlyc3QpID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMV0sIHZhbHVlKTsKICAgICAgICAgICAgY2FzZSAiTm90RXhwcmVzc2lvbiI6CiAgICAgICAgICAgICAgZmlyc3QgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTsKICAgICAgICAgICAgICByZXR1cm4gaXNGYWxzZShmaXJzdCk7CiAgICAgICAgICAgIGNhc2UgIkxpdGVyYWwiOgogICAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlOwogICAgICAgICAgICBjYXNlIFRPS19QSVBFOgogICAgICAgICAgICAgIGxlZnQgPSB0aGlzLnZpc2l0KG5vZGUuY2hpbGRyZW5bMF0sIHZhbHVlKTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdChub2RlLmNoaWxkcmVuWzFdLCBsZWZ0KTsKICAgICAgICAgICAgY2FzZSBUT0tfQ1VSUkVOVDoKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIGNhc2UgIkZ1bmN0aW9uIjoKICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWRBcmdzID0gW107CiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRBcmdzLnB1c2godGhpcy52aXNpdChub2RlLmNoaWxkcmVuW2ldLCB2YWx1ZSkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ydW50aW1lLmNhbGxGdW5jdGlvbihub2RlLm5hbWUsIHJlc29sdmVkQXJncyk7CiAgICAgICAgICAgIGNhc2UgIkV4cHJlc3Npb25SZWZlcmVuY2UiOgogICAgICAgICAgICAgIHZhciByZWZOb2RlID0gbm9kZS5jaGlsZHJlblswXTsKICAgICAgICAgICAgICAvLyBUYWcgdGhlIG5vZGUgd2l0aCBhIHNwZWNpZmljIGF0dHJpYnV0ZSBzbyB0aGUgdHlwZQogICAgICAgICAgICAgIC8vIGNoZWNrZXIgdmVyaWZ5IHRoZSB0eXBlLgogICAgICAgICAgICAgIHJlZk5vZGUuam1lc3BhdGhUeXBlID0gVE9LX0VYUFJFRjsKICAgICAgICAgICAgICByZXR1cm4gcmVmTm9kZTsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gbm9kZSB0eXBlOiAiICsgbm9kZS50eXBlKTsKICAgICAgICAgIH0KICAgICAgfSwKCiAgICAgIGNvbXB1dGVTbGljZVBhcmFtczogZnVuY3Rpb24oYXJyYXlMZW5ndGgsIHNsaWNlUGFyYW1zKSB7CiAgICAgICAgdmFyIHN0YXJ0ID0gc2xpY2VQYXJhbXNbMF07CiAgICAgICAgdmFyIHN0b3AgPSBzbGljZVBhcmFtc1sxXTsKICAgICAgICB2YXIgc3RlcCA9IHNsaWNlUGFyYW1zWzJdOwogICAgICAgIHZhciBjb21wdXRlZCA9IFtudWxsLCBudWxsLCBudWxsXTsKICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCkgewogICAgICAgICAgc3RlcCA9IDE7CiAgICAgICAgfSBlbHNlIGlmIChzdGVwID09PSAwKSB7CiAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoIkludmFsaWQgc2xpY2UsIHN0ZXAgY2Fubm90IGJlIDAiKTsKICAgICAgICAgIGVycm9yLm5hbWUgPSAiUnVudGltZUVycm9yIjsKICAgICAgICAgIHRocm93IGVycm9yOwogICAgICAgIH0KICAgICAgICB2YXIgc3RlcFZhbHVlTmVnYXRpdmUgPSBzdGVwIDwgMCA/IHRydWUgOiBmYWxzZTsKCiAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7CiAgICAgICAgICAgIHN0YXJ0ID0gc3RlcFZhbHVlTmVnYXRpdmUgPyBhcnJheUxlbmd0aCAtIDEgOiAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5jYXBTbGljZVJhbmdlKGFycmF5TGVuZ3RoLCBzdGFydCwgc3RlcCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3RvcCA9PT0gbnVsbCkgewogICAgICAgICAgICBzdG9wID0gc3RlcFZhbHVlTmVnYXRpdmUgPyAtMSA6IGFycmF5TGVuZ3RoOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0b3AgPSB0aGlzLmNhcFNsaWNlUmFuZ2UoYXJyYXlMZW5ndGgsIHN0b3AsIHN0ZXApOwogICAgICAgIH0KICAgICAgICBjb21wdXRlZFswXSA9IHN0YXJ0OwogICAgICAgIGNvbXB1dGVkWzFdID0gc3RvcDsKICAgICAgICBjb21wdXRlZFsyXSA9IHN0ZXA7CiAgICAgICAgcmV0dXJuIGNvbXB1dGVkOwogICAgICB9LAoKICAgICAgY2FwU2xpY2VSYW5nZTogZnVuY3Rpb24oYXJyYXlMZW5ndGgsIGFjdHVhbFZhbHVlLCBzdGVwKSB7CiAgICAgICAgICBpZiAoYWN0dWFsVmFsdWUgPCAwKSB7CiAgICAgICAgICAgICAgYWN0dWFsVmFsdWUgKz0gYXJyYXlMZW5ndGg7CiAgICAgICAgICAgICAgaWYgKGFjdHVhbFZhbHVlIDwgMCkgewogICAgICAgICAgICAgICAgICBhY3R1YWxWYWx1ZSA9IHN0ZXAgPCAwID8gLTEgOiAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoYWN0dWFsVmFsdWUgPj0gYXJyYXlMZW5ndGgpIHsKICAgICAgICAgICAgICBhY3R1YWxWYWx1ZSA9IHN0ZXAgPCAwID8gYXJyYXlMZW5ndGggLSAxIDogYXJyYXlMZW5ndGg7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYWN0dWFsVmFsdWU7CiAgICAgIH0KCiAgfTsKCiAgZnVuY3Rpb24gUnVudGltZShpbnRlcnByZXRlcikgewogICAgdGhpcy5faW50ZXJwcmV0ZXIgPSBpbnRlcnByZXRlcjsKICAgIHRoaXMuZnVuY3Rpb25UYWJsZSA9IHsKICAgICAgICAvLyBuYW1lOiBbZnVuY3Rpb24sIDxzaWduYXR1cmU+XQogICAgICAgIC8vIFRoZSA8c2lnbmF0dXJlPiBjYW4gYmU6CiAgICAgICAgLy8KICAgICAgICAvLyB7CiAgICAgICAgLy8gICBhcmdzOiBbW3R5cGUxLCB0eXBlMl0sIFt0eXBlMSwgdHlwZTJdXSwKICAgICAgICAvLyAgIHZhcmlhZGljOiB0cnVlfGZhbHNlCiAgICAgICAgLy8gfQogICAgICAgIC8vCiAgICAgICAgLy8gRWFjaCBhcmcgaW4gdGhlIGFyZyBsaXN0IGlzIGEgbGlzdCBvZiB2YWxpZCB0eXBlcwogICAgICAgIC8vIChpZiB0aGUgZnVuY3Rpb24gaXMgb3ZlcmxvYWRlZCBhbmQgc3VwcG9ydHMgbXVsdGlwbGUKICAgICAgICAvLyB0eXBlcy4gIElmIHRoZSB0eXBlIGlzICJhbnkiIHRoZW4gbm8gdHlwZSBjaGVja2luZwogICAgICAgIC8vIG9jY3VycyBvbiB0aGUgYXJndW1lbnQuICBWYXJpYWRpYyBpcyBvcHRpb25hbAogICAgICAgIC8vIGFuZCBpZiBub3QgcHJvdmlkZWQgaXMgYXNzdW1lZCB0byBiZSBmYWxzZS4KICAgICAgICBhYnM6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25BYnMsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX05VTUJFUl19XX0sCiAgICAgICAgYXZnOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uQXZnLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BUlJBWV9OVU1CRVJdfV19LAogICAgICAgIGNlaWw6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25DZWlsLCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9OVU1CRVJdfV19LAogICAgICAgIGNvbnRhaW5zOiB7CiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbkNvbnRhaW5zLAogICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkcsIFRZUEVfQVJSQVldfSwKICAgICAgICAgICAgICAgICAgICAgICAge3R5cGVzOiBbVFlQRV9BTlldfV19LAogICAgICAgICJlbmRzX3dpdGgiOiB7CiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbkVuZHNXaXRoLAogICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkddfSwge3R5cGVzOiBbVFlQRV9TVFJJTkddfV19LAogICAgICAgIGZsb29yOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uRmxvb3IsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX05VTUJFUl19XX0sCiAgICAgICAgbGVuZ3RoOiB7CiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbkxlbmd0aCwKICAgICAgICAgICAgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfU1RSSU5HLCBUWVBFX0FSUkFZLCBUWVBFX09CSkVDVF19XX0sCiAgICAgICAgbWFwOiB7CiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbk1hcCwKICAgICAgICAgICAgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfRVhQUkVGXX0sIHt0eXBlczogW1RZUEVfQVJSQVldfV19LAogICAgICAgIG1heDogewogICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NYXgsCiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZX05VTUJFUiwgVFlQRV9BUlJBWV9TVFJJTkddfV19LAogICAgICAgICJtZXJnZSI6IHsKICAgICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uTWVyZ2UsCiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX09CSkVDVF0sIHZhcmlhZGljOiB0cnVlfV0KICAgICAgICB9LAogICAgICAgICJtYXhfYnkiOiB7CiAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NYXhCeSwKICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZXX0sIHt0eXBlczogW1RZUEVfRVhQUkVGXX1dCiAgICAgICAgfSwKICAgICAgICBzdW06IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25TdW0sIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZX05VTUJFUl19XX0sCiAgICAgICAgInN0YXJ0c193aXRoIjogewogICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25TdGFydHNXaXRoLAogICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkddfSwge3R5cGVzOiBbVFlQRV9TVFJJTkddfV19LAogICAgICAgIG1pbjogewogICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NaW4sCiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZX05VTUJFUiwgVFlQRV9BUlJBWV9TVFJJTkddfV19LAogICAgICAgICJtaW5fYnkiOiB7CiAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25NaW5CeSwKICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZXX0sIHt0eXBlczogW1RZUEVfRVhQUkVGXX1dCiAgICAgICAgfSwKICAgICAgICB0eXBlOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uVHlwZSwgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQU5ZXX1dfSwKICAgICAgICBrZXlzOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uS2V5cywgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfT0JKRUNUXX1dfSwKICAgICAgICB2YWx1ZXM6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25WYWx1ZXMsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX09CSkVDVF19XX0sCiAgICAgICAgc29ydDoge19mdW5jOiB0aGlzLl9mdW5jdGlvblNvcnQsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FSUkFZX1NUUklORywgVFlQRV9BUlJBWV9OVU1CRVJdfV19LAogICAgICAgICJzb3J0X2J5IjogewogICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uU29ydEJ5LAogICAgICAgICAgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQVJSQVldfSwge3R5cGVzOiBbVFlQRV9FWFBSRUZdfV0KICAgICAgICB9LAogICAgICAgIGpvaW46IHsKICAgICAgICAgICAgX2Z1bmM6IHRoaXMuX2Z1bmN0aW9uSm9pbiwKICAgICAgICAgICAgX3NpZ25hdHVyZTogWwogICAgICAgICAgICAgICAge3R5cGVzOiBbVFlQRV9TVFJJTkddfSwKICAgICAgICAgICAgICAgIHt0eXBlczogW1RZUEVfQVJSQVlfU1RSSU5HXX0KICAgICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgcmV2ZXJzZTogewogICAgICAgICAgICBfZnVuYzogdGhpcy5fZnVuY3Rpb25SZXZlcnNlLAogICAgICAgICAgICBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9TVFJJTkcsIFRZUEVfQVJSQVldfV19LAogICAgICAgICJ0b19hcnJheSI6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25Ub0FycmF5LCBfc2lnbmF0dXJlOiBbe3R5cGVzOiBbVFlQRV9BTlldfV19LAogICAgICAgICJ0b19zdHJpbmciOiB7X2Z1bmM6IHRoaXMuX2Z1bmN0aW9uVG9TdHJpbmcsIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FOWV19XX0sCiAgICAgICAgInRvX251bWJlciI6IHtfZnVuYzogdGhpcy5fZnVuY3Rpb25Ub051bWJlciwgX3NpZ25hdHVyZTogW3t0eXBlczogW1RZUEVfQU5ZXX1dfSwKICAgICAgICAibm90X251bGwiOiB7CiAgICAgICAgICAgIF9mdW5jOiB0aGlzLl9mdW5jdGlvbk5vdE51bGwsCiAgICAgICAgICAgIF9zaWduYXR1cmU6IFt7dHlwZXM6IFtUWVBFX0FOWV0sIHZhcmlhZGljOiB0cnVlfV0KICAgICAgICB9CiAgICB9OwogIH0KCiAgUnVudGltZS5wcm90b3R5cGUgPSB7CiAgICBjYWxsRnVuY3Rpb246IGZ1bmN0aW9uKG5hbWUsIHJlc29sdmVkQXJncykgewogICAgICB2YXIgZnVuY3Rpb25FbnRyeSA9IHRoaXMuZnVuY3Rpb25UYWJsZVtuYW1lXTsKICAgICAgaWYgKGZ1bmN0aW9uRW50cnkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIGZ1bmN0aW9uOiAiICsgbmFtZSArICIoKSIpOwogICAgICB9CiAgICAgIHRoaXMuX3ZhbGlkYXRlQXJncyhuYW1lLCByZXNvbHZlZEFyZ3MsIGZ1bmN0aW9uRW50cnkuX3NpZ25hdHVyZSk7CiAgICAgIHJldHVybiBmdW5jdGlvbkVudHJ5Ll9mdW5jLmNhbGwodGhpcywgcmVzb2x2ZWRBcmdzKTsKICAgIH0sCgogICAgX3ZhbGlkYXRlQXJnczogZnVuY3Rpb24obmFtZSwgYXJncywgc2lnbmF0dXJlKSB7CiAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgYXJncyByZXF1aXJlcyB2YWxpZGF0aW5nCiAgICAgICAgLy8gdGhlIGNvcnJlY3QgYXJpdHkgYW5kIHRoZSBjb3JyZWN0IHR5cGUgb2YgZWFjaCBhcmcuCiAgICAgICAgLy8gSWYgdGhlIGxhc3QgYXJndW1lbnQgaXMgZGVjbGFyZWQgYXMgdmFyaWFkaWMsIHRoZW4gd2UgbmVlZAogICAgICAgIC8vIGEgbWluaW11bSBudW1iZXIgb2YgYXJncyB0byBiZSByZXF1aXJlZC4gIE90aGVyd2lzZSBpdCBoYXMgdG8KICAgICAgICAvLyBiZSBhbiBleGFjdCBhbW91bnQuCiAgICAgICAgdmFyIHBsdXJhbGl6ZWQ7CiAgICAgICAgaWYgKHNpZ25hdHVyZVtzaWduYXR1cmUubGVuZ3RoIC0gMV0udmFyaWFkaWMpIHsKICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDwgc2lnbmF0dXJlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcGx1cmFsaXplZCA9IHNpZ25hdHVyZS5sZW5ndGggPT09IDEgPyAiIGFyZ3VtZW50IiA6ICIgYXJndW1lbnRzIjsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQXJndW1lbnRFcnJvcjogIiArIG5hbWUgKyAiKCkgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRha2VzIGF0IGxlYXN0IiArIHNpZ25hdHVyZS5sZW5ndGggKyBwbHVyYWxpemVkICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGJ1dCByZWNlaXZlZCAiICsgYXJncy5sZW5ndGgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCAhPT0gc2lnbmF0dXJlLmxlbmd0aCkgewogICAgICAgICAgICBwbHVyYWxpemVkID0gc2lnbmF0dXJlLmxlbmd0aCA9PT0gMSA/ICIgYXJndW1lbnQiIDogIiBhcmd1bWVudHMiOwogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFyZ3VtZW50RXJyb3I6ICIgKyBuYW1lICsgIigpICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgInRha2VzICIgKyBzaWduYXR1cmUubGVuZ3RoICsgcGx1cmFsaXplZCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIGJ1dCByZWNlaXZlZCAiICsgYXJncy5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICB2YXIgY3VycmVudFNwZWM7CiAgICAgICAgdmFyIGFjdHVhbFR5cGU7CiAgICAgICAgdmFyIHR5cGVNYXRjaGVkOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnbmF0dXJlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHR5cGVNYXRjaGVkID0gZmFsc2U7CiAgICAgICAgICAgIGN1cnJlbnRTcGVjID0gc2lnbmF0dXJlW2ldLnR5cGVzOwogICAgICAgICAgICBhY3R1YWxUeXBlID0gdGhpcy5fZ2V0VHlwZU5hbWUoYXJnc1tpXSk7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY3VycmVudFNwZWMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLl90eXBlTWF0Y2hlcyhhY3R1YWxUeXBlLCBjdXJyZW50U3BlY1tqXSwgYXJnc1tpXSkpIHsKICAgICAgICAgICAgICAgICAgICB0eXBlTWF0Y2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0eXBlTWF0Y2hlZCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUeXBlRXJyb3I6ICIgKyBuYW1lICsgIigpICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJleHBlY3RlZCBhcmd1bWVudCAiICsgKGkgKyAxKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiB0byBiZSB0eXBlICIgKyBjdXJyZW50U3BlYyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBidXQgcmVjZWl2ZWQgdHlwZSAiICsgYWN0dWFsVHlwZSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBpbnN0ZWFkLiIpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKCiAgICBfdHlwZU1hdGNoZXM6IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIGFyZ1ZhbHVlKSB7CiAgICAgICAgaWYgKGV4cGVjdGVkID09PSBUWVBFX0FOWSkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKGV4cGVjdGVkID09PSBUWVBFX0FSUkFZX1NUUklORyB8fAogICAgICAgICAgICBleHBlY3RlZCA9PT0gVFlQRV9BUlJBWV9OVU1CRVIgfHwKICAgICAgICAgICAgZXhwZWN0ZWQgPT09IFRZUEVfQVJSQVkpIHsKICAgICAgICAgICAgLy8gVGhlIGV4cGVjdGVkIHR5cGUgY2FuIGVpdGhlciBqdXN0IGJlIGFycmF5LAogICAgICAgICAgICAvLyBvciBpdCBjYW4gcmVxdWlyZSBhIHNwZWNpZmljIHN1YnR5cGUgKGFycmF5IG9mIG51bWJlcnMpLgogICAgICAgICAgICAvLwogICAgICAgICAgICAvLyBUaGUgc2ltcGxlc3QgY2FzZSBpcyBpZiAiYXJyYXkiIHdpdGggbm8gc3VidHlwZSBpcyBzcGVjaWZpZWQuCiAgICAgICAgICAgIGlmIChleHBlY3RlZCA9PT0gVFlQRV9BUlJBWSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGFjdHVhbCA9PT0gVFlQRV9BUlJBWTsKICAgICAgICAgICAgfSBlbHNlIGlmIChhY3R1YWwgPT09IFRZUEVfQVJSQVkpIHsKICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB3ZSBuZWVkIHRvIGNoZWNrIHN1YnR5cGVzLgogICAgICAgICAgICAgICAgLy8gSSB0aGluayB0aGlzIGhhcyBwb3RlbnRpYWwgdG8gYmUgaW1wcm92ZWQuCiAgICAgICAgICAgICAgICB2YXIgc3VidHlwZTsKICAgICAgICAgICAgICAgIGlmIChleHBlY3RlZCA9PT0gVFlQRV9BUlJBWV9OVU1CRVIpIHsKICAgICAgICAgICAgICAgICAgc3VidHlwZSA9IFRZUEVfTlVNQkVSOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChleHBlY3RlZCA9PT0gVFlQRV9BUlJBWV9TVFJJTkcpIHsKICAgICAgICAgICAgICAgICAgc3VidHlwZSA9IFRZUEVfU1RSSU5HOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdWYWx1ZS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdHlwZU1hdGNoZXMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRUeXBlTmFtZShhcmdWYWx1ZVtpXSksIHN1YnR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ1ZhbHVlW2ldKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDsKICAgICAgICB9CiAgICB9LAogICAgX2dldFR5cGVOYW1lOiBmdW5jdGlvbihvYmopIHsKICAgICAgICBzd2l0Y2ggKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSB7CiAgICAgICAgICAgIGNhc2UgIltvYmplY3QgU3RyaW5nXSI6CiAgICAgICAgICAgICAgcmV0dXJuIFRZUEVfU1RSSU5HOwogICAgICAgICAgICBjYXNlICJbb2JqZWN0IE51bWJlcl0iOgogICAgICAgICAgICAgIHJldHVybiBUWVBFX05VTUJFUjsKICAgICAgICAgICAgY2FzZSAiW29iamVjdCBBcnJheV0iOgogICAgICAgICAgICAgIHJldHVybiBUWVBFX0FSUkFZOwogICAgICAgICAgICBjYXNlICJbb2JqZWN0IEJvb2xlYW5dIjoKICAgICAgICAgICAgICByZXR1cm4gVFlQRV9CT09MRUFOOwogICAgICAgICAgICBjYXNlICJbb2JqZWN0IE51bGxdIjoKICAgICAgICAgICAgICByZXR1cm4gVFlQRV9OVUxMOwogICAgICAgICAgICBjYXNlICJbb2JqZWN0IE9iamVjdF0iOgogICAgICAgICAgICAgIC8vIENoZWNrIGlmIGl0J3MgYW4gZXhwcmVmLiAgSWYgaXQgaGFzLCBpdCdzIGJlZW4KICAgICAgICAgICAgICAvLyB0YWdnZWQgd2l0aCBhIGptZXNwYXRoVHlwZSBhdHRyIG9mICdFeHByZWYnOwogICAgICAgICAgICAgIGlmIChvYmouam1lc3BhdGhUeXBlID09PSBUT0tfRVhQUkVGKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gVFlQRV9FWFBSRUY7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBUWVBFX09CSkVDVDsKICAgICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSwKCiAgICBfZnVuY3Rpb25TdGFydHNXaXRoOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzWzBdLmxhc3RJbmRleE9mKHJlc29sdmVkQXJnc1sxXSkgPT09IDA7CiAgICB9LAoKICAgIF9mdW5jdGlvbkVuZHNXaXRoOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICB2YXIgc2VhcmNoU3RyID0gcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgIHZhciBzdWZmaXggPSByZXNvbHZlZEFyZ3NbMV07CiAgICAgICAgcmV0dXJuIHNlYXJjaFN0ci5pbmRleE9mKHN1ZmZpeCwgc2VhcmNoU3RyLmxlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICE9PSAtMTsKICAgIH0sCgogICAgX2Z1bmN0aW9uUmV2ZXJzZTogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKTsKICAgICAgICBpZiAodHlwZU5hbWUgPT09IFRZUEVfU1RSSU5HKSB7CiAgICAgICAgICB2YXIgb3JpZ2luYWxTdHIgPSByZXNvbHZlZEFyZ3NbMF07CiAgICAgICAgICB2YXIgcmV2ZXJzZWRTdHIgPSAiIjsKICAgICAgICAgIGZvciAodmFyIGkgPSBvcmlnaW5hbFN0ci5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgICAgICAgICAgIHJldmVyc2VkU3RyICs9IG9yaWdpbmFsU3RyW2ldOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJldmVyc2VkU3RyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgcmV2ZXJzZWRBcnJheSA9IHJlc29sdmVkQXJnc1swXS5zbGljZSgwKTsKICAgICAgICAgIHJldmVyc2VkQXJyYXkucmV2ZXJzZSgpOwogICAgICAgICAgcmV0dXJuIHJldmVyc2VkQXJyYXk7CiAgICAgICAgfQogICAgfSwKCiAgICBfZnVuY3Rpb25BYnM6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICByZXR1cm4gTWF0aC5hYnMocmVzb2x2ZWRBcmdzWzBdKTsKICAgIH0sCgogICAgX2Z1bmN0aW9uQ2VpbDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChyZXNvbHZlZEFyZ3NbMF0pOwogICAgfSwKCiAgICBfZnVuY3Rpb25Bdmc6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICAgIHZhciBzdW0gPSAwOwogICAgICAgIHZhciBpbnB1dEFycmF5ID0gcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXRBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBzdW0gKz0gaW5wdXRBcnJheVtpXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN1bSAvIGlucHV0QXJyYXkubGVuZ3RoOwogICAgfSwKCiAgICBfZnVuY3Rpb25Db250YWluczogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgICAgcmV0dXJuIHJlc29sdmVkQXJnc1swXS5pbmRleE9mKHJlc29sdmVkQXJnc1sxXSkgPj0gMDsKICAgIH0sCgogICAgX2Z1bmN0aW9uRmxvb3I6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICAgIHJldHVybiBNYXRoLmZsb29yKHJlc29sdmVkQXJnc1swXSk7CiAgICB9LAoKICAgIF9mdW5jdGlvbkxlbmd0aDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgICBpZiAoIWlzT2JqZWN0KHJlc29sdmVkQXJnc1swXSkpIHsKICAgICAgICAgcmV0dXJuIHJlc29sdmVkQXJnc1swXS5sZW5ndGg7CiAgICAgICB9IGVsc2UgewogICAgICAgICAvLyBBcyBmYXIgYXMgSSBjYW4gdGVsbCwgdGhlcmUncyBubyB3YXkgdG8gZ2V0IHRoZSBsZW5ndGgKICAgICAgICAgLy8gb2YgYW4gb2JqZWN0IHdpdGhvdXQgTyhuKSBpdGVyYXRpb24gdGhyb3VnaCB0aGUgb2JqZWN0LgogICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzb2x2ZWRBcmdzWzBdKS5sZW5ndGg7CiAgICAgICB9CiAgICB9LAoKICAgIF9mdW5jdGlvbk1hcDogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgIHZhciBtYXBwZWQgPSBbXTsKICAgICAgdmFyIGludGVycHJldGVyID0gdGhpcy5faW50ZXJwcmV0ZXI7CiAgICAgIHZhciBleHByZWZOb2RlID0gcmVzb2x2ZWRBcmdzWzBdOwogICAgICB2YXIgZWxlbWVudHMgPSByZXNvbHZlZEFyZ3NbMV07CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgIG1hcHBlZC5wdXNoKGludGVycHJldGVyLnZpc2l0KGV4cHJlZk5vZGUsIGVsZW1lbnRzW2ldKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIG1hcHBlZDsKICAgIH0sCgogICAgX2Z1bmN0aW9uTWVyZ2U6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICB2YXIgbWVyZ2VkID0ge307CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb2x2ZWRBcmdzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGN1cnJlbnQgPSByZXNvbHZlZEFyZ3NbaV07CiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnQpIHsKICAgICAgICAgIG1lcmdlZFtrZXldID0gY3VycmVudFtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbWVyZ2VkOwogICAgfSwKCiAgICBfZnVuY3Rpb25NYXg6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICBpZiAocmVzb2x2ZWRBcmdzWzBdLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLl9nZXRUeXBlTmFtZShyZXNvbHZlZEFyZ3NbMF1bMF0pOwogICAgICAgIGlmICh0eXBlTmFtZSA9PT0gVFlQRV9OVU1CRVIpIHsKICAgICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCByZXNvbHZlZEFyZ3NbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgZWxlbWVudHMgPSByZXNvbHZlZEFyZ3NbMF07CiAgICAgICAgICB2YXIgbWF4RWxlbWVudCA9IGVsZW1lbnRzWzBdOwogICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGlmIChtYXhFbGVtZW50LmxvY2FsZUNvbXBhcmUoZWxlbWVudHNbaV0pIDwgMCkgewogICAgICAgICAgICAgICAgICBtYXhFbGVtZW50ID0gZWxlbWVudHNbaV07CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIG1heEVsZW1lbnQ7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0sCgogICAgX2Z1bmN0aW9uTWluOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgaWYgKHJlc29sdmVkQXJnc1swXS5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIHR5cGVOYW1lID0gdGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdWzBdKTsKICAgICAgICBpZiAodHlwZU5hbWUgPT09IFRZUEVfTlVNQkVSKSB7CiAgICAgICAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgcmVzb2x2ZWRBcmdzWzBdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGVsZW1lbnRzID0gcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgICAgdmFyIG1pbkVsZW1lbnQgPSBlbGVtZW50c1swXTsKICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICBpZiAoZWxlbWVudHNbaV0ubG9jYWxlQ29tcGFyZShtaW5FbGVtZW50KSA8IDApIHsKICAgICAgICAgICAgICAgICAgbWluRWxlbWVudCA9IGVsZW1lbnRzW2ldOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBtaW5FbGVtZW50OwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfSwKCiAgICBfZnVuY3Rpb25TdW06IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICB2YXIgc3VtID0gMDsKICAgICAgdmFyIGxpc3RUb1N1bSA9IHJlc29sdmVkQXJnc1swXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0VG9TdW0ubGVuZ3RoOyBpKyspIHsKICAgICAgICBzdW0gKz0gbGlzdFRvU3VtW2ldOwogICAgICB9CiAgICAgIHJldHVybiBzdW07CiAgICB9LAoKICAgIF9mdW5jdGlvblR5cGU6IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICAgIHN3aXRjaCAodGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKSkgewogICAgICAgICAgY2FzZSBUWVBFX05VTUJFUjoKICAgICAgICAgICAgcmV0dXJuICJudW1iZXIiOwogICAgICAgICAgY2FzZSBUWVBFX1NUUklORzoKICAgICAgICAgICAgcmV0dXJuICJzdHJpbmciOwogICAgICAgICAgY2FzZSBUWVBFX0FSUkFZOgogICAgICAgICAgICByZXR1cm4gImFycmF5IjsKICAgICAgICAgIGNhc2UgVFlQRV9PQkpFQ1Q6CiAgICAgICAgICAgIHJldHVybiAib2JqZWN0IjsKICAgICAgICAgIGNhc2UgVFlQRV9CT09MRUFOOgogICAgICAgICAgICByZXR1cm4gImJvb2xlYW4iOwogICAgICAgICAgY2FzZSBUWVBFX0VYUFJFRjoKICAgICAgICAgICAgcmV0dXJuICJleHByZWYiOwogICAgICAgICAgY2FzZSBUWVBFX05VTEw6CiAgICAgICAgICAgIHJldHVybiAibnVsbCI7CiAgICAgICAgfQogICAgfSwKCiAgICBfZnVuY3Rpb25LZXlzOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMocmVzb2x2ZWRBcmdzWzBdKTsKICAgIH0sCgogICAgX2Z1bmN0aW9uVmFsdWVzOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICB2YXIgb2JqID0gcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTsKICAgICAgICB2YXIgdmFsdWVzID0gW107CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXlzW2ldXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB2YWx1ZXM7CiAgICB9LAoKICAgIF9mdW5jdGlvbkpvaW46IGZ1bmN0aW9uKHJlc29sdmVkQXJncykgewogICAgICAgIHZhciBqb2luQ2hhciA9IHJlc29sdmVkQXJnc1swXTsKICAgICAgICB2YXIgbGlzdEpvaW4gPSByZXNvbHZlZEFyZ3NbMV07CiAgICAgICAgcmV0dXJuIGxpc3RKb2luLmpvaW4oam9pbkNoYXIpOwogICAgfSwKCiAgICBfZnVuY3Rpb25Ub0FycmF5OiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICBpZiAodGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKSA9PT0gVFlQRV9BUlJBWSkgewogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBbcmVzb2x2ZWRBcmdzWzBdXTsKICAgICAgICB9CiAgICB9LAoKICAgIF9mdW5jdGlvblRvU3RyaW5nOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICBpZiAodGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzWzBdKSA9PT0gVFlQRV9TVFJJTkcpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQXJnc1swXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzb2x2ZWRBcmdzWzBdKTsKICAgICAgICB9CiAgICB9LAoKICAgIF9mdW5jdGlvblRvTnVtYmVyOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICB2YXIgdHlwZU5hbWUgPSB0aGlzLl9nZXRUeXBlTmFtZShyZXNvbHZlZEFyZ3NbMF0pOwogICAgICAgIHZhciBjb252ZXJ0ZWRWYWx1ZTsKICAgICAgICBpZiAodHlwZU5hbWUgPT09IFRZUEVfTlVNQkVSKSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZEFyZ3NbMF07CiAgICAgICAgfSBlbHNlIGlmICh0eXBlTmFtZSA9PT0gVFlQRV9TVFJJTkcpIHsKICAgICAgICAgICAgY29udmVydGVkVmFsdWUgPSArcmVzb2x2ZWRBcmdzWzBdOwogICAgICAgICAgICBpZiAoIWlzTmFOKGNvbnZlcnRlZFZhbHVlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRlZFZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfSwKCiAgICBfZnVuY3Rpb25Ob3ROdWxsOiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc29sdmVkQXJncy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAodGhpcy5fZ2V0VHlwZU5hbWUocmVzb2x2ZWRBcmdzW2ldKSAhPT0gVFlQRV9OVUxMKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRBcmdzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfSwKCiAgICBfZnVuY3Rpb25Tb3J0OiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICB2YXIgc29ydGVkQXJyYXkgPSByZXNvbHZlZEFyZ3NbMF0uc2xpY2UoMCk7CiAgICAgICAgc29ydGVkQXJyYXkuc29ydCgpOwogICAgICAgIHJldHVybiBzb3J0ZWRBcnJheTsKICAgIH0sCgogICAgX2Z1bmN0aW9uU29ydEJ5OiBmdW5jdGlvbihyZXNvbHZlZEFyZ3MpIHsKICAgICAgICB2YXIgc29ydGVkQXJyYXkgPSByZXNvbHZlZEFyZ3NbMF0uc2xpY2UoMCk7CiAgICAgICAgaWYgKHNvcnRlZEFycmF5Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gc29ydGVkQXJyYXk7CiAgICAgICAgfQogICAgICAgIHZhciBpbnRlcnByZXRlciA9IHRoaXMuX2ludGVycHJldGVyOwogICAgICAgIHZhciBleHByZWZOb2RlID0gcmVzb2x2ZWRBcmdzWzFdOwogICAgICAgIHZhciByZXF1aXJlZFR5cGUgPSB0aGlzLl9nZXRUeXBlTmFtZSgKICAgICAgICAgICAgaW50ZXJwcmV0ZXIudmlzaXQoZXhwcmVmTm9kZSwgc29ydGVkQXJyYXlbMF0pKTsKICAgICAgICBpZiAoW1RZUEVfTlVNQkVSLCBUWVBFX1NUUklOR10uaW5kZXhPZihyZXF1aXJlZFR5cGUpIDwgMCkgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlR5cGVFcnJvciIpOwogICAgICAgIH0KICAgICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgICAgLy8gSW4gb3JkZXIgdG8gZ2V0IGEgc3RhYmxlIHNvcnQgb3V0IG9mIGFuIHVuc3RhYmxlCiAgICAgICAgLy8gc29ydCBhbGdvcml0aG0sIHdlIGRlY29yYXRlL3NvcnQvdW5kZWNvcmF0ZSAoRFNVKQogICAgICAgIC8vIGJ5IGNyZWF0aW5nIGEgbmV3IGxpc3Qgb2YgW2luZGV4LCBlbGVtZW50XSBwYWlycy4KICAgICAgICAvLyBJbiB0aGUgY21wIGZ1bmN0aW9uLCBpZiB0aGUgZXZhbHVhdGVkIGVsZW1lbnRzIGFyZQogICAgICAgIC8vIGVxdWFsLCB0aGVuIHRoZSBpbmRleCB3aWxsIGJlIHVzZWQgYXMgdGhlIHRpZWJyZWFrZXIuCiAgICAgICAgLy8gQWZ0ZXIgdGhlIGRlY29yYXRlZCBsaXN0IGhhcyBiZWVuIHNvcnRlZCwgaXQgd2lsbCBiZQogICAgICAgIC8vIHVuZGVjb3JhdGVkIHRvIGV4dHJhY3QgdGhlIG9yaWdpbmFsIGVsZW1lbnRzLgogICAgICAgIHZhciBkZWNvcmF0ZWQgPSBbXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZEFycmF5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICBkZWNvcmF0ZWQucHVzaChbaSwgc29ydGVkQXJyYXlbaV1dKTsKICAgICAgICB9CiAgICAgICAgZGVjb3JhdGVkLnNvcnQoZnVuY3Rpb24oYSwgYikgewogICAgICAgICAgdmFyIGV4cHJBID0gaW50ZXJwcmV0ZXIudmlzaXQoZXhwcmVmTm9kZSwgYVsxXSk7CiAgICAgICAgICB2YXIgZXhwckIgPSBpbnRlcnByZXRlci52aXNpdChleHByZWZOb2RlLCBiWzFdKTsKICAgICAgICAgIGlmICh0aGF0Ll9nZXRUeXBlTmFtZShleHByQSkgIT09IHJlcXVpcmVkVHlwZSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICAgIlR5cGVFcnJvcjogZXhwZWN0ZWQgIiArIHJlcXVpcmVkVHlwZSArICIsIHJlY2VpdmVkICIgKwogICAgICAgICAgICAgICAgICB0aGF0Ll9nZXRUeXBlTmFtZShleHByQSkpOwogICAgICAgICAgfSBlbHNlIGlmICh0aGF0Ll9nZXRUeXBlTmFtZShleHByQikgIT09IHJlcXVpcmVkVHlwZSkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAgICAgICAgICAgIlR5cGVFcnJvcjogZXhwZWN0ZWQgIiArIHJlcXVpcmVkVHlwZSArICIsIHJlY2VpdmVkICIgKwogICAgICAgICAgICAgICAgICB0aGF0Ll9nZXRUeXBlTmFtZShleHByQikpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGV4cHJBID4gZXhwckIpIHsKICAgICAgICAgICAgcmV0dXJuIDE7CiAgICAgICAgICB9IGVsc2UgaWYgKGV4cHJBIDwgZXhwckIpIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gSWYgdGhleSdyZSBlcXVhbCBjb21wYXJlIHRoZSBpdGVtcyBieSB0aGVpcgogICAgICAgICAgICAvLyBvcmRlciB0byBtYWludGFpbiByZWxhdGl2ZSBvcmRlciBvZiBlcXVhbCBrZXlzCiAgICAgICAgICAgIC8vIChpLmUuIHRvIGdldCBhIHN0YWJsZSBzb3J0KS4KICAgICAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIC8vIFVuZGVjb3JhdGU6IGV4dHJhY3Qgb3V0IHRoZSBvcmlnaW5hbCBsaXN0IGVsZW1lbnRzLgogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVjb3JhdGVkLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICBzb3J0ZWRBcnJheVtqXSA9IGRlY29yYXRlZFtqXVsxXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNvcnRlZEFycmF5OwogICAgfSwKCiAgICBfZnVuY3Rpb25NYXhCeTogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgIHZhciBleHByZWZOb2RlID0gcmVzb2x2ZWRBcmdzWzFdOwogICAgICB2YXIgcmVzb2x2ZWRBcnJheSA9IHJlc29sdmVkQXJnc1swXTsKICAgICAgdmFyIGtleUZ1bmN0aW9uID0gdGhpcy5jcmVhdGVLZXlGdW5jdGlvbihleHByZWZOb2RlLCBbVFlQRV9OVU1CRVIsIFRZUEVfU1RSSU5HXSk7CiAgICAgIHZhciBtYXhOdW1iZXIgPSAtSW5maW5pdHk7CiAgICAgIHZhciBtYXhSZWNvcmQ7CiAgICAgIHZhciBjdXJyZW50OwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc29sdmVkQXJyYXkubGVuZ3RoOyBpKyspIHsKICAgICAgICBjdXJyZW50ID0ga2V5RnVuY3Rpb24ocmVzb2x2ZWRBcnJheVtpXSk7CiAgICAgICAgaWYgKGN1cnJlbnQgPiBtYXhOdW1iZXIpIHsKICAgICAgICAgIG1heE51bWJlciA9IGN1cnJlbnQ7CiAgICAgICAgICBtYXhSZWNvcmQgPSByZXNvbHZlZEFycmF5W2ldOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbWF4UmVjb3JkOwogICAgfSwKCiAgICBfZnVuY3Rpb25NaW5CeTogZnVuY3Rpb24ocmVzb2x2ZWRBcmdzKSB7CiAgICAgIHZhciBleHByZWZOb2RlID0gcmVzb2x2ZWRBcmdzWzFdOwogICAgICB2YXIgcmVzb2x2ZWRBcnJheSA9IHJlc29sdmVkQXJnc1swXTsKICAgICAgdmFyIGtleUZ1bmN0aW9uID0gdGhpcy5jcmVhdGVLZXlGdW5jdGlvbihleHByZWZOb2RlLCBbVFlQRV9OVU1CRVIsIFRZUEVfU1RSSU5HXSk7CiAgICAgIHZhciBtaW5OdW1iZXIgPSBJbmZpbml0eTsKICAgICAgdmFyIG1pblJlY29yZDsKICAgICAgdmFyIGN1cnJlbnQ7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb2x2ZWRBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgIGN1cnJlbnQgPSBrZXlGdW5jdGlvbihyZXNvbHZlZEFycmF5W2ldKTsKICAgICAgICBpZiAoY3VycmVudCA8IG1pbk51bWJlcikgewogICAgICAgICAgbWluTnVtYmVyID0gY3VycmVudDsKICAgICAgICAgIG1pblJlY29yZCA9IHJlc29sdmVkQXJyYXlbaV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBtaW5SZWNvcmQ7CiAgICB9LAoKICAgIGNyZWF0ZUtleUZ1bmN0aW9uOiBmdW5jdGlvbihleHByZWZOb2RlLCBhbGxvd2VkVHlwZXMpIHsKICAgICAgdmFyIHRoYXQgPSB0aGlzOwogICAgICB2YXIgaW50ZXJwcmV0ZXIgPSB0aGlzLl9pbnRlcnByZXRlcjsKICAgICAgdmFyIGtleUZ1bmMgPSBmdW5jdGlvbih4KSB7CiAgICAgICAgdmFyIGN1cnJlbnQgPSBpbnRlcnByZXRlci52aXNpdChleHByZWZOb2RlLCB4KTsKICAgICAgICBpZiAoYWxsb3dlZFR5cGVzLmluZGV4T2YodGhhdC5fZ2V0VHlwZU5hbWUoY3VycmVudCkpIDwgMCkgewogICAgICAgICAgdmFyIG1zZyA9ICJUeXBlRXJyb3I6IGV4cGVjdGVkIG9uZSBvZiAiICsgYWxsb3dlZFR5cGVzICsKICAgICAgICAgICAgICAgICAgICAiLCByZWNlaXZlZCAiICsgdGhhdC5fZ2V0VHlwZU5hbWUoY3VycmVudCk7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGN1cnJlbnQ7CiAgICAgIH07CiAgICAgIHJldHVybiBrZXlGdW5jOwogICAgfQoKICB9OwoKICBmdW5jdGlvbiBjb21waWxlKHN0cmVhbSkgewogICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKICAgIHZhciBhc3QgPSBwYXJzZXIucGFyc2Uoc3RyZWFtKTsKICAgIHJldHVybiBhc3Q7CiAgfQoKICBmdW5jdGlvbiB0b2tlbml6ZShzdHJlYW0pIHsKICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKCk7CiAgICAgIHJldHVybiBsZXhlci50b2tlbml6ZShzdHJlYW0pOwogIH0KCiAgZnVuY3Rpb24gc2VhcmNoKGRhdGEsIGV4cHJlc3Npb24pIHsKICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoKTsKICAgICAgLy8gVGhpcyBuZWVkcyB0byBiZSBpbXByb3ZlZC4gIEJvdGggdGhlIGludGVycHJldGVyIGFuZCBydW50aW1lIGRlcGVuZCBvbgogICAgICAvLyBlYWNoIG90aGVyLiAgVGhlIHJ1bnRpbWUgbmVlZHMgdGhlIGludGVycHJldGVyIHRvIHN1cHBvcnQgZXhwcmVmcy4KICAgICAgLy8gVGhlcmUncyBsaWtlbHkgYSBjbGVhbiB3YXkgdG8gYXZvaWQgdGhlIGN5Y2xpYyBkZXBlbmRlbmN5LgogICAgICB2YXIgcnVudGltZSA9IG5ldyBSdW50aW1lKCk7CiAgICAgIHZhciBpbnRlcnByZXRlciA9IG5ldyBUcmVlSW50ZXJwcmV0ZXIocnVudGltZSk7CiAgICAgIHJ1bnRpbWUuX2ludGVycHJldGVyID0gaW50ZXJwcmV0ZXI7CiAgICAgIHZhciBub2RlID0gcGFyc2VyLnBhcnNlKGV4cHJlc3Npb24pOwogICAgICByZXR1cm4gaW50ZXJwcmV0ZXIuc2VhcmNoKG5vZGUsIGRhdGEpOwogIH0KCiAgZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplOwogIGV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7CiAgZXhwb3J0cy5zZWFyY2ggPSBzZWFyY2g7CiAgZXhwb3J0cy5zdHJpY3REZWVwRXF1YWwgPSBzdHJpY3REZWVwRXF1YWw7Cn0pKHR5cGVvZiBleHBvcnRzID09PSAidW5kZWZpbmVkIiA/IHRoaXMuam1lc3BhdGggPSB7fSA6IGV4cG9ydHMpOwoKfSx7fV0sODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0Ci8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpcwovLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuCgp2YXIgY2FjaGVkU2V0VGltZW91dDsKdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQpmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHsKICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7Cn0KKGZ1bmN0aW9uICgpIHsKICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwogICAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICB9Cn0gKCkpCmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9CiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7CiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQogICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7CiAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApOwogICAgICAgIH0KICAgIH0KCgp9CmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHsKICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0KICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9CiAgICB0cnkgewogICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9IGNhdGNoIChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpOwogICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci4KICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dAogICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTsKICAgICAgICB9CiAgICB9CgoKCn0KdmFyIHF1ZXVlID0gW107CnZhciBkcmFpbmluZyA9IGZhbHNlOwp2YXIgY3VycmVudFF1ZXVlOwp2YXIgcXVldWVJbmRleCA9IC0xOwoKZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkgewogICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7CiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgfQogICAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgICAgIGRyYWluUXVldWUoKTsKICAgIH0KfQoKZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICAgIGlmIChkcmFpbmluZykgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwogICAgZHJhaW5pbmcgPSB0cnVlOwoKICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB3aGlsZShsZW4pIHsKICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB9CiAgICBjdXJyZW50UXVldWUgPSBudWxsOwogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKfQoKcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgIH0KICAgIH0KICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7CiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7CiAgICB9Cn07CgovLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkgewogICAgdGhpcy5mdW4gPSBmdW47CiAgICB0aGlzLmFycmF5ID0gYXJyYXk7Cn0KSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7Cn07CnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwpwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKcHJvY2Vzcy52ZXJzaW9ucyA9IHt9OwoKZnVuY3Rpb24gbm9vcCgpIHt9Cgpwcm9jZXNzLm9uID0gbm9vcDsKcHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3Mub25jZSA9IG5vb3A7CnByb2Nlc3Mub2ZmID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDsKcHJvY2Vzcy5lbWl0ID0gbm9vcDsKcHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wOwpwcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wOwoKcHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfQoKcHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKCnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07CnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpOwp9Owpwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9OwoKfSx7fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgondXNlIHN0cmljdCc7CgovLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nCi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLgovLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwNwpmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHsKICBzZXAgPSBzZXAgfHwgJyYnOwogIGVxID0gZXEgfHwgJz0nOwogIHZhciBvYmogPSB7fTsKCiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gb2JqOwogIH0KCiAgdmFyIHJlZ2V4cCA9IC9cKy9nOwogIHFzID0gcXMuc3BsaXQoc2VwKTsKCiAgdmFyIG1heEtleXMgPSAxMDAwOwogIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7CiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzOwogIH0KCiAgdmFyIGxlbiA9IHFzLmxlbmd0aDsKICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnQKICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykgewogICAgbGVuID0gbWF4S2V5czsKICB9CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSwKICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLAogICAgICAgIGtzdHIsIHZzdHIsIGssIHY7CgogICAgaWYgKGlkeCA+PSAwKSB7CiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpOwogICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7CiAgICB9IGVsc2UgewogICAgICBrc3RyID0geDsKICAgICAgdnN0ciA9ICcnOwogICAgfQoKICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7CiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpOwoKICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkgewogICAgICBvYmpba10gPSB2OwogICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHsKICAgICAgb2JqW2tdLnB1c2godik7CiAgICB9IGVsc2UgewogICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTsKICAgIH0KICB9CgogIHJldHVybiBvYmo7Cn07Cgp2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7Cn07Cgp9LHt9XSw4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCid1c2Ugc3RyaWN0JzsKCnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7CiAgc3dpdGNoICh0eXBlb2YgdikgewogICAgY2FzZSAnc3RyaW5nJzoKICAgICAgcmV0dXJuIHY7CgogICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJzsKCiAgICBjYXNlICdudW1iZXInOgogICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICcnOwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7CiAgc2VwID0gc2VwIHx8ICcmJzsKICBlcSA9IGVxIHx8ICc9JzsKICBpZiAob2JqID09PSBudWxsKSB7CiAgICBvYmogPSB1bmRlZmluZWQ7CiAgfQoKICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHsKICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7CiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7CiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHsKICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikgewogICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7CiAgICAgICAgfSkuam9pbihzZXApOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7CiAgICAgIH0KICAgIH0pLmpvaW4oc2VwKTsKCiAgfQoKICBpZiAoIW5hbWUpIHJldHVybiAnJzsKICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArCiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7Cn07Cgp2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7Cn07CgpmdW5jdGlvbiBtYXAgKHhzLCBmKSB7CiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTsKICB2YXIgcmVzID0gW107CiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykgewogICAgcmVzLnB1c2goZih4c1tpXSwgaSkpOwogIH0KICByZXR1cm4gcmVzOwp9Cgp2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHsKICB2YXIgcmVzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7CiAgfQogIHJldHVybiByZXM7Cn07Cgp9LHt9XSw4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7CmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpOwoKfSx7Ii4vZGVjb2RlIjo4NywiLi9lbmNvZGUiOjg4fV0sOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgondXNlIHN0cmljdCc7CgovLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nCi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLgovLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qb3llbnQvbm9kZS9pc3N1ZXMvMTcwNwpmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHsKICBzZXAgPSBzZXAgfHwgJyYnOwogIGVxID0gZXEgfHwgJz0nOwogIHZhciBvYmogPSB7fTsKCiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gb2JqOwogIH0KCiAgdmFyIHJlZ2V4cCA9IC9cKy9nOwogIHFzID0gcXMuc3BsaXQoc2VwKTsKCiAgdmFyIG1heEtleXMgPSAxMDAwOwogIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7CiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzOwogIH0KCiAgdmFyIGxlbiA9IHFzLmxlbmd0aDsKICAvLyBtYXhLZXlzIDw9IDAgbWVhbnMgdGhhdCB3ZSBzaG91bGQgbm90IGxpbWl0IGtleXMgY291bnQKICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykgewogICAgbGVuID0gbWF4S2V5czsKICB9CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSwKICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLAogICAgICAgIGtzdHIsIHZzdHIsIGssIHY7CgogICAgaWYgKGlkeCA+PSAwKSB7CiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpOwogICAgICB2c3RyID0geC5zdWJzdHIoaWR4ICsgMSk7CiAgICB9IGVsc2UgewogICAgICBrc3RyID0geDsKICAgICAgdnN0ciA9ICcnOwogICAgfQoKICAgIGsgPSBkZWNvZGVVUklDb21wb25lbnQoa3N0cik7CiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpOwoKICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkgewogICAgICBvYmpba10gPSB2OwogICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHsKICAgICAgb2JqW2tdLnB1c2godik7CiAgICB9IGVsc2UgewogICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTsKICAgIH0KICB9CgogIHJldHVybiBvYmo7Cn07Cgp9LHt9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCid1c2Ugc3RyaWN0JzsKCnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7CiAgc3dpdGNoICh0eXBlb2YgdikgewogICAgY2FzZSAnc3RyaW5nJzoKICAgICAgcmV0dXJuIHY7CgogICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJzsKCiAgICBjYXNlICdudW1iZXInOgogICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICcnOwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7CiAgc2VwID0gc2VwIHx8ICcmJzsKICBlcSA9IGVxIHx8ICc9JzsKICBpZiAob2JqID09PSBudWxsKSB7CiAgICBvYmogPSB1bmRlZmluZWQ7CiAgfQoKICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHsKICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7CiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9ialtrXSkpIHsKICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7CiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTsKICAgICAgICB9KS5qb2luKHNlcCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTsKICAgICAgfQogICAgfSkuam9pbihzZXApOwoKICB9CgogIGlmICghbmFtZSkgcmV0dXJuICcnOwogIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICsKICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTsKfTsKCn0se31dLDkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vZGVjb2RlIjo5MCwiLi9lbmNvZGUiOjkxLCJkdXAiOjg5fV0sOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHNldEltbWVkaWF0ZSxjbGVhckltbWVkaWF0ZSl7KGZ1bmN0aW9uICgpewp2YXIgbmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzL2Jyb3dzZXIuanMnKS5uZXh0VGljazsKdmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5Owp2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CnZhciBpbW1lZGlhdGVJZHMgPSB7fTsKdmFyIG5leHRJbW1lZGlhdGVJZCA9IDA7CgovLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzcwoKZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpOwp9OwpleHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7Cn07CmV4cG9ydHMuY2xlYXJUaW1lb3V0ID0KZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkgeyB0aW1lb3V0LmNsb3NlKCk7IH07CgpmdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7CiAgdGhpcy5faWQgPSBpZDsKICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjsKfQpUaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307ClRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7CiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpOwp9OwoKLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuCmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHsKICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7CiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2VjczsKfTsKCmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7CiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpOwogIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7Cn07CgpleHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkgewogIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTsKCiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7CiAgaWYgKG1zZWNzID49IDApIHsKICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHsKICAgICAgaWYgKGl0ZW0uX29uVGltZW91dCkKICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTsKICAgIH0sIG1zZWNzKTsKICB9Cn07CgovLyBUaGF0J3Mgbm90IGhvdyBub2RlLmpzIGltcGxlbWVudHMgaXQgYnV0IHRoZSBleHBvc2VkIGFwaSBpcyB0aGUgc2FtZS4KZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAiZnVuY3Rpb24iID8gc2V0SW1tZWRpYXRlIDogZnVuY3Rpb24oZm4pIHsKICB2YXIgaWQgPSBuZXh0SW1tZWRpYXRlSWQrKzsKICB2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZmFsc2UgOiBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CgogIGltbWVkaWF0ZUlkc1tpZF0gPSB0cnVlOwoKICBuZXh0VGljayhmdW5jdGlvbiBvbk5leHRUaWNrKCkgewogICAgaWYgKGltbWVkaWF0ZUlkc1tpZF0pIHsKICAgICAgLy8gZm4uY2FsbCgpIGlzIGZhc3RlciBzbyB3ZSBvcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiB1c2UtY2FzZQogICAgICAvLyBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2NhbGwtYXBwbHktc2VndQogICAgICBpZiAoYXJncykgewogICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwogICAgICB9IGVsc2UgewogICAgICAgIGZuLmNhbGwobnVsbCk7CiAgICAgIH0KICAgICAgLy8gUHJldmVudCBpZHMgZnJvbSBsZWFraW5nCiAgICAgIGV4cG9ydHMuY2xlYXJJbW1lZGlhdGUoaWQpOwogICAgfQogIH0pOwoKICByZXR1cm4gaWQ7Cn07CgpleHBvcnRzLmNsZWFySW1tZWRpYXRlID0gdHlwZW9mIGNsZWFySW1tZWRpYXRlID09PSAiZnVuY3Rpb24iID8gY2xlYXJJbW1lZGlhdGUgOiBmdW5jdGlvbihpZCkgewogIGRlbGV0ZSBpbW1lZGlhdGVJZHNbaWRdOwp9Owp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHJlcXVpcmUoInRpbWVycyIpLnNldEltbWVkaWF0ZSxyZXF1aXJlKCJ0aW1lcnMiKS5jbGVhckltbWVkaWF0ZSkKfSx7InByb2Nlc3MvYnJvd3Nlci5qcyI6ODYsInRpbWVycyI6OTN9XSw5NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCnZhciBwdW55Y29kZSA9IHJlcXVpcmUoJ3B1bnljb2RlJyk7CgpleHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7CmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7CmV4cG9ydHMucmVzb2x2ZU9iamVjdCA9IHVybFJlc29sdmVPYmplY3Q7CmV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0OwoKZXhwb3J0cy5VcmwgPSBVcmw7CgpmdW5jdGlvbiBVcmwoKSB7CiAgdGhpcy5wcm90b2NvbCA9IG51bGw7CiAgdGhpcy5zbGFzaGVzID0gbnVsbDsKICB0aGlzLmF1dGggPSBudWxsOwogIHRoaXMuaG9zdCA9IG51bGw7CiAgdGhpcy5wb3J0ID0gbnVsbDsKICB0aGlzLmhvc3RuYW1lID0gbnVsbDsKICB0aGlzLmhhc2ggPSBudWxsOwogIHRoaXMuc2VhcmNoID0gbnVsbDsKICB0aGlzLnF1ZXJ5ID0gbnVsbDsKICB0aGlzLnBhdGhuYW1lID0gbnVsbDsKICB0aGlzLnBhdGggPSBudWxsOwogIHRoaXMuaHJlZiA9IG51bGw7Cn0KCi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NgoKLy8gZGVmaW5lIHRoZXNlIGhlcmUgc28gYXQgbGVhc3QgdGhleSBvbmx5IGhhdmUgdG8gYmUKLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuCnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLAogICAgcG9ydFBhdHRlcm4gPSAvOlswLTldKiQvLAoKICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIHJlc2VydmVkIGZvciBkZWxpbWl0aW5nIFVSTHMuCiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLgogICAgZGVsaW1zID0gWyc8JywgJz4nLCAnIicsICdgJywgJyAnLCAnXHInLCAnXG4nLCAnXHQnXSwKCiAgICAvLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLgogICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSwKCiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuCiAgICBhdXRvRXNjYXBlID0gWydcJyddLmNvbmNhdCh1bndpc2UpLAogICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS4KICAgIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2UKICAgIC8vIGFyZSB0aGUgb25lcyB0aGF0IGFyZSAqZXhwZWN0ZWQqIHRvIGJlIHNlZW4sIHNvIHdlIGZhc3QtcGF0aAogICAgLy8gdGhlbS4KICAgIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLAogICAgaG9zdEVuZGluZ0NoYXJzID0gWycvJywgJz8nLCAnIyddLAogICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsCiAgICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bYS16MC05QS1aXy1dezAsNjN9JC8sCiAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFthLXowLTlBLVpfLV17MCw2M30pKC4qKSQvLAogICAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93ICJ1bnNhZmUiIGFuZCAidW53aXNlIiBjaGFycy4KICAgIHVuc2FmZVByb3RvY29sID0gewogICAgICAnamF2YXNjcmlwdCc6IHRydWUsCiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWUKICAgIH0sCiAgICAvLyBwcm90b2NvbHMgdGhhdCBuZXZlciBoYXZlIGEgaG9zdG5hbWUuCiAgICBob3N0bGVzc1Byb3RvY29sID0gewogICAgICAnamF2YXNjcmlwdCc6IHRydWUsCiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWUKICAgIH0sCiAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC4KICAgIHNsYXNoZWRQcm90b2NvbCA9IHsKICAgICAgJ2h0dHAnOiB0cnVlLAogICAgICAnaHR0cHMnOiB0cnVlLAogICAgICAnZnRwJzogdHJ1ZSwKICAgICAgJ2dvcGhlcic6IHRydWUsCiAgICAgICdmaWxlJzogdHJ1ZSwKICAgICAgJ2h0dHA6JzogdHJ1ZSwKICAgICAgJ2h0dHBzOic6IHRydWUsCiAgICAgICdmdHA6JzogdHJ1ZSwKICAgICAgJ2dvcGhlcjonOiB0cnVlLAogICAgICAnZmlsZTonOiB0cnVlCiAgICB9LAogICAgcXVlcnlzdHJpbmcgPSByZXF1aXJlKCdxdWVyeXN0cmluZycpOwoKZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkgewogIGlmICh1cmwgJiYgaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7CgogIHZhciB1ID0gbmV3IFVybDsKICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpOwogIHJldHVybiB1Owp9CgpVcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24odXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkgewogIGlmICghaXNTdHJpbmcodXJsKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCAiICsgdHlwZW9mIHVybCk7CiAgfQoKICB2YXIgcmVzdCA9IHVybDsKCiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy4KICAvLyBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSAiICBodHRwOi8vZm9vLmNvbSAgXG4iCiAgcmVzdCA9IHJlc3QudHJpbSgpOwoKICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTsKICBpZiAocHJvdG8pIHsKICAgIHByb3RvID0gcHJvdG9bMF07CiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7CiAgICB0aGlzLnByb3RvY29sID0gbG93ZXJQcm90bzsKICAgIHJlc3QgPSByZXN0LnN1YnN0cihwcm90by5sZW5ndGgpOwogIH0KCiAgLy8gZmlndXJlIG91dCBpZiBpdCdzIGdvdCBhIGhvc3QKICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsCiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQncwogIC8vIGhvdyB0aGUgYnJvd3NlciByZXNvbHZlcyByZWxhdGl2ZSBVUkxzLgogIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXC9cL1teQFwvXStAW15AXC9dKy8pKSB7CiAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nOwogICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHsKICAgICAgcmVzdCA9IHJlc3Quc3Vic3RyKDIpOwogICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlOwogICAgfQogIH0KCiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJgogICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkgewoKICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS4KICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuCiAgICAvLwogICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZAogICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXIKICAgIC8vIGNvbWVzICpiZWZvcmUqIHRoZSBALXNpZ24uCiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuCiAgICAvLwogICAgLy8gZXg6CiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6YwogICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AYwoKICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy4KICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuCgogICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFycwogICAgdmFyIGhvc3RFbmQgPSAtMTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTsKICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKQogICAgICAgIGhvc3RFbmQgPSBoZWM7CiAgICB9CgogICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlCiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci4KICAgIHZhciBhdXRoLCBhdFNpZ247CiAgICBpZiAoaG9zdEVuZCA9PT0gLTEpIHsKICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS4KICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpOwogICAgfSBlbHNlIHsKICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLgogICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZAogICAgICBhdFNpZ24gPSByZXN0Lmxhc3RJbmRleE9mKCdAJywgaG9zdEVuZCk7CiAgICB9CgogICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguCiAgICAvLyBQdWxsIHRoYXQgb2ZmLgogICAgaWYgKGF0U2lnbiAhPT0gLTEpIHsKICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTsKICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7CiAgICAgIHRoaXMuYXV0aCA9IGRlY29kZVVSSUNvbXBvbmVudChhdXRoKTsKICAgIH0KCiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyCiAgICBob3N0RW5kID0gLTE7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaGVjID0gcmVzdC5pbmRleE9mKG5vbkhvc3RDaGFyc1tpXSk7CiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkKICAgICAgICBob3N0RW5kID0gaGVjOwogICAgfQogICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LgogICAgaWYgKGhvc3RFbmQgPT09IC0xKQogICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGg7CgogICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTsKICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpOwoKICAgIC8vIHB1bGwgb3V0IHBvcnQuCiAgICB0aGlzLnBhcnNlSG9zdCgpOwoKICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsCiAgICAvLyBzbyBldmVuIGlmIGl0J3MgZW1wdHksIGl0IGhhcyB0byBiZSBwcmVzZW50LgogICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7CgogICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF0KICAgIC8vIGFzc3VtZSB0aGF0IGl0J3MgYW4gSVB2NiBhZGRyZXNzLgogICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJgogICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nOwoKICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLgogICAgaWYgKCFpcHY2SG9zdG5hbWUpIHsKICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1wuLyk7CiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaG9zdHBhcnRzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgIHZhciBwYXJ0ID0gaG9zdHBhcnRzW2ldOwogICAgICAgIGlmICghcGFydCkgY29udGludWU7CiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7CiAgICAgICAgICB2YXIgbmV3cGFydCA9ICcnOwogICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykgewogICAgICAgICAgICBpZiAocGFydC5jaGFyQ29kZUF0KGopID4gMTI3KSB7CiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyCiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdAogICAgICAgICAgICAgIC8vIGJyb2tlbiBieSByZXBsYWNpbmcgbm9uLUFTQ0lJIGJ5IG5vdGhpbmcKICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4JzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZXdwYXJ0ICs9IHBhcnRbal07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHkKICAgICAgICAgIGlmICghbmV3cGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkgewogICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTsKICAgICAgICAgICAgdmFyIG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpOwogICAgICAgICAgICB2YXIgYml0ID0gcGFydC5tYXRjaChob3N0bmFtZVBhcnRTdGFydCk7CiAgICAgICAgICAgIGlmIChiaXQpIHsKICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKTsKICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobm90SG9zdC5sZW5ndGgpIHsKICAgICAgICAgICAgICByZXN0ID0gJy8nICsgbm90SG9zdC5qb2luKCcuJykgKyByZXN0OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKHRoaXMuaG9zdG5hbWUubGVuZ3RoID4gaG9zdG5hbWVNYXhMZW4pIHsKICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnOwogICAgfSBlbHNlIHsKICAgICAgLy8gaG9zdG5hbWVzIGFyZSBhbHdheXMgbG93ZXIgY2FzZS4KICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTsKICAgIH0KCiAgICBpZiAoIWlwdjZIb3N0bmFtZSkgewogICAgICAvLyBJRE5BIFN1cHBvcnQ6IFJldHVybnMgYSBwdW55IGNvZGVkIHJlcHJlc2VudGF0aW9uIG9mICJkb21haW4iLgogICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHRoZSBwYXJ0IG9mIHRoZSBkb21haW4gbmFtZSB0aGF0CiAgICAgIC8vIGhhcyBub24gQVNDSUkgY2hhcmFjdGVycy4gSS5lLiBpdCBkb3NlbnQgbWF0dGVyIGlmCiAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIGluIEFTQ0lJLgogICAgICB2YXIgZG9tYWluQXJyYXkgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KCcuJyk7CiAgICAgIHZhciBuZXdPdXQgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb21haW5BcnJheS5sZW5ndGg7ICsraSkgewogICAgICAgIHZhciBzID0gZG9tYWluQXJyYXlbaV07CiAgICAgICAgbmV3T3V0LnB1c2gocy5tYXRjaCgvW15BLVphLXowLTlfLV0vKSA/CiAgICAgICAgICAgICd4bi0tJyArIHB1bnljb2RlLmVuY29kZShzKSA6IHMpOwogICAgICB9CiAgICAgIHRoaXMuaG9zdG5hbWUgPSBuZXdPdXQuam9pbignLicpOwogICAgfQoKICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7CiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7CiAgICB0aGlzLmhvc3QgPSBoICsgcDsKICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7CgogICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZQogICAgLy8gdGhlIGhvc3QgZmllbGQgc3RpbGwgcmV0YWlucyB0aGVtLCB0aG91Z2gKICAgIGlmIChpcHY2SG9zdG5hbWUpIHsKICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMik7CiAgICAgIGlmIChyZXN0WzBdICE9PSAnLycpIHsKICAgICAgICByZXN0ID0gJy8nICsgcmVzdDsKICAgICAgfQogICAgfQogIH0KCiAgLy8gbm93IHJlc3QgaXMgc2V0IHRvIHRoZSBwb3N0LWhvc3Qgc3R1ZmYuCiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLgogIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHsKCiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgImF1dG9Fc2NhcGUiIGNoYXJzIGdldAogICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5CiAgICAvLyBuZWVkIHRvIGJlLgogICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldOwogICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTsKICAgICAgaWYgKGVzYyA9PT0gYWUpIHsKICAgICAgICBlc2MgPSBlc2NhcGUoYWUpOwogICAgICB9CiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7CiAgICB9CiAgfQoKCiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC4KICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpOwogIGlmIChoYXNoICE9PSAtMSkgewogICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLgogICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7CiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBoYXNoKTsKICB9CiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7CiAgaWYgKHFtICE9PSAtMSkgewogICAgdGhpcy5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7CiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTsKICAgIGlmIChwYXJzZVF1ZXJ5U3RyaW5nKSB7CiAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnF1ZXJ5KTsKICAgIH0KICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKTsKICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHsKICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkCiAgICB0aGlzLnNlYXJjaCA9ICcnOwogICAgdGhpcy5xdWVyeSA9IHt9OwogIH0KICBpZiAocmVzdCkgdGhpcy5wYXRobmFtZSA9IHJlc3Q7CiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJgogICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7CiAgICB0aGlzLnBhdGhuYW1lID0gJy8nOwogIH0KCiAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdAogIGlmICh0aGlzLnBhdGhuYW1lIHx8IHRoaXMuc2VhcmNoKSB7CiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7CiAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnOwogICAgdGhpcy5wYXRoID0gcCArIHM7CiAgfQoKICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC4KICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpOwogIHJldHVybiB0aGlzOwp9OwoKLy8gZm9ybWF0IGEgcGFyc2VkIG9iamVjdCBpbnRvIGEgdXJsIHN0cmluZwpmdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7CiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC4KICAvLyBJZiBpdCdzIGFuIG9iaiwgdGhpcyBpcyBhIG5vLW9wLgogIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3MKICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLgogIGlmIChpc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopOwogIGlmICghKG9iaiBpbnN0YW5jZW9mIFVybCkpIHJldHVybiBVcmwucHJvdG90eXBlLmZvcm1hdC5jYWxsKG9iaik7CiAgcmV0dXJuIG9iai5mb3JtYXQoKTsKfQoKVXJsLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHsKICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJzsKICBpZiAoYXV0aCkgewogICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTsKICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpOwogICAgYXV0aCArPSAnQCc7CiAgfQoKICB2YXIgcHJvdG9jb2wgPSB0aGlzLnByb3RvY29sIHx8ICcnLAogICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsCiAgICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsCiAgICAgIGhvc3QgPSBmYWxzZSwKICAgICAgcXVlcnkgPSAnJzsKCiAgaWYgKHRoaXMuaG9zdCkgewogICAgaG9zdCA9IGF1dGggKyB0aGlzLmhvc3Q7CiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7CiAgICBob3N0ID0gYXV0aCArICh0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSA9PT0gLTEgPwogICAgICAgIHRoaXMuaG9zdG5hbWUgOgogICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpOwogICAgaWYgKHRoaXMucG9ydCkgewogICAgICBob3N0ICs9ICc6JyArIHRoaXMucG9ydDsKICAgIH0KICB9CgogIGlmICh0aGlzLnF1ZXJ5ICYmCiAgICAgIGlzT2JqZWN0KHRoaXMucXVlcnkpICYmCiAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkgewogICAgcXVlcnkgPSBxdWVyeXN0cmluZy5zdHJpbmdpZnkodGhpcy5xdWVyeSk7CiAgfQoKICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnOwoKICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuc3Vic3RyKC0xKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7CgogIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLgogIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguCiAgaWYgKHRoaXMuc2xhc2hlcyB8fAogICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7CiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTsKICAgIGlmIChwYXRobmFtZSAmJiBwYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykgcGF0aG5hbWUgPSAnLycgKyBwYXRobmFtZTsKICB9IGVsc2UgaWYgKCFob3N0KSB7CiAgICBob3N0ID0gJyc7CiAgfQoKICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDsKICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoOwoKICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHsKICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobWF0Y2gpOwogIH0pOwogIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpOwoKICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoOwp9OwoKZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7CiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmUocmVsYXRpdmUpOwp9CgpVcmwucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbihyZWxhdGl2ZSkgewogIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7Cn07CgpmdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHsKICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlOwogIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTsKfQoKVXJsLnByb3RvdHlwZS5yZXNvbHZlT2JqZWN0ID0gZnVuY3Rpb24ocmVsYXRpdmUpIHsKICBpZiAoaXNTdHJpbmcocmVsYXRpdmUpKSB7CiAgICB2YXIgcmVsID0gbmV3IFVybCgpOwogICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7CiAgICByZWxhdGl2ZSA9IHJlbDsKICB9CgogIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7CiAgT2JqZWN0LmtleXModGhpcykuZm9yRWFjaChmdW5jdGlvbihrKSB7CiAgICByZXN1bHRba10gPSB0aGlzW2tdOwogIH0sIHRoaXMpOwoKICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC4KICAvLyBldmVuIGhyZWY9IiIgd2lsbCByZW1vdmUgaXQuCiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoOwoKICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuCiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7CiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC4KICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHsKICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmUKICAgIE9iamVjdC5rZXlzKHJlbGF0aXZlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsKICAgICAgaWYgKGsgIT09ICdwcm90b2NvbCcpCiAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107CiAgICB9KTsKCiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbQogICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmCiAgICAgICAgcmVzdWx0Lmhvc3RuYW1lICYmICFyZXN1bHQucGF0aG5hbWUpIHsKICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7CiAgICB9CgogICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHsKICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmcKICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5ncwogICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsCiAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aAogICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLgogICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCwKICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLgogICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLgogICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7CiAgICAgIE9iamVjdC5rZXlzKHJlbGF0aXZlKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHsKICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTsKICAgICAgfSk7CiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sOwogICAgaWYgKCFyZWxhdGl2ZS5ob3N0ICYmICFob3N0bGVzc1Byb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkgewogICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTsKICAgICAgd2hpbGUgKHJlbFBhdGgubGVuZ3RoICYmICEocmVsYXRpdmUuaG9zdCA9IHJlbFBhdGguc2hpZnQoKSkpOwogICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJzsKICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJzsKICAgICAgaWYgKHJlbFBhdGhbMF0gIT09ICcnKSByZWxQYXRoLnVuc2hpZnQoJycpOwogICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpOwogICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lOwogICAgfQogICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDsKICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwogICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnOwogICAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoOwogICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDsKICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDsKICAgIC8vIHRvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0CiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHsKICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7CiAgICAgIHZhciBzID0gcmVzdWx0LnNlYXJjaCB8fCAnJzsKICAgICAgcmVzdWx0LnBhdGggPSBwICsgczsKICAgIH0KICAgIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlczsKICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CgogIHZhciBpc1NvdXJjZUFicyA9IChyZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSwKICAgICAgaXNSZWxBYnMgPSAoCiAgICAgICAgICByZWxhdGl2ZS5ob3N0IHx8CiAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJwogICAgICApLAogICAgICBtdXN0RW5kQWJzID0gKGlzUmVsQWJzIHx8IGlzU291cmNlQWJzIHx8CiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksCiAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLAogICAgICBzcmNQYXRoID0gcmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLAogICAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSwKICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTsKCiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZQogIC8vIGxpbmtzIGxpa2UgLi4vLi4gc2hvdWxkIGJlIGFibGUKICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuCiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy4KICAvLyBMYXRlciBvbiwgcHV0IHRoZSBmaXJzdCBwYXRoIHBhcnQgaW50byB0aGUgaG9zdCBmaWVsZC4KICBpZiAocHN5Y2hvdGljKSB7CiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJzsKICAgIHJlc3VsdC5wb3J0ID0gbnVsbDsKICAgIGlmIChyZXN1bHQuaG9zdCkgewogICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDsKICAgICAgZWxzZSBzcmNQYXRoLnVuc2hpZnQocmVzdWx0Lmhvc3QpOwogICAgfQogICAgcmVzdWx0Lmhvc3QgPSAnJzsKICAgIGlmIChyZWxhdGl2ZS5wcm90b2NvbCkgewogICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7CiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsOwogICAgICBpZiAocmVsYXRpdmUuaG9zdCkgewogICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7CiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7CiAgICAgIH0KICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7CiAgICB9CiAgICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyAmJiAocmVsUGF0aFswXSA9PT0gJycgfHwgc3JjUGF0aFswXSA9PT0gJycpOwogIH0KCiAgaWYgKGlzUmVsQWJzKSB7CiAgICAvLyBpdCdzIGFic29sdXRlLgogICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgPwogICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7CiAgICByZXN1bHQuaG9zdG5hbWUgPSAocmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdG5hbWUgPT09ICcnKSA/CiAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTsKICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTsKICAgIHNyY1BhdGggPSByZWxQYXRoOwogICAgLy8gZmFsbCB0aHJvdWdoIHRvIHRoZSBkb3QtaGFuZGxpbmcgYmVsb3cuCiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkgewogICAgLy8gaXQncyByZWxhdGl2ZQogICAgLy8gdGhyb3cgYXdheSB0aGUgZXhpc3RpbmcgZmlsZSwgYW5kIHRha2UgdGhlIG5ldyBwYXRoIGluc3RlYWQuCiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTsKICAgIHNyY1BhdGgucG9wKCk7CiAgICBzcmNQYXRoID0gc3JjUGF0aC5jb25jYXQocmVsUGF0aCk7CiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoOwogICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7CiAgfSBlbHNlIGlmICghaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkgewogICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLgogICAgLy8gbGlrZSBocmVmPSc/Zm9vJy4KICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFucwogICAgaWYgKHBzeWNob3RpYykgewogICAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IHNyY1BhdGguc2hpZnQoKTsKICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdAogICAgICAvL3RoaXMgZXNwZWNpYWx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZQogICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKQogICAgICB2YXIgYXV0aEluSG9zdCA9IHJlc3VsdC5ob3N0ICYmIHJlc3VsdC5ob3N0LmluZGV4T2YoJ0AnKSA+IDAgPwogICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTsKICAgICAgaWYgKGF1dGhJbkhvc3QpIHsKICAgICAgICByZXN1bHQuYXV0aCA9IGF1dGhJbkhvc3Quc2hpZnQoKTsKICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTsKICAgICAgfQogICAgfQogICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDsKICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwogICAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdAogICAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7CiAgICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArCiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5zZWFyY2ggPyByZXN1bHQuc2VhcmNoIDogJycpOwogICAgfQogICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgaWYgKCFzcmNQYXRoLmxlbmd0aCkgewogICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LgogICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS4KICAgIHJlc3VsdC5wYXRobmFtZSA9IG51bGw7CiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0CiAgICBpZiAocmVzdWx0LnNlYXJjaCkgewogICAgICByZXN1bHQucGF0aCA9ICcvJyArIHJlc3VsdC5zZWFyY2g7CiAgICB9IGVsc2UgewogICAgICByZXN1bHQucGF0aCA9IG51bGw7CiAgICB9CiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQoKICAvLyBpZiBhIHVybCBFTkRzIGluIC4gb3IgLi4sIHRoZW4gaXQgbXVzdCBnZXQgYSB0cmFpbGluZyBzbGFzaC4KICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSwKICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLgogIHZhciBsYXN0ID0gc3JjUGF0aC5zbGljZSgtMSlbMF07CiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoCiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0KSAmJiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8CiAgICAgIGxhc3QgPT09ICcnKTsKCiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpcgogIC8vIGlmIHRoZSBwYXRoIHRyaWVzIHRvIGdvIGFib3ZlIHRoZSByb290LCBgdXBgIGVuZHMgdXAgPiAwCiAgdmFyIHVwID0gMDsKICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7CiAgICBsYXN0ID0gc3JjUGF0aFtpXTsKICAgIGlmIChsYXN0ID09ICcuJykgewogICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTsKICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykgewogICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTsKICAgICAgdXArKzsKICAgIH0gZWxzZSBpZiAodXApIHsKICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7CiAgICAgIHVwLS07CiAgICB9CiAgfQoKICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zCiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7CiAgICBmb3IgKDsgdXAtLTsgdXApIHsKICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpOwogICAgfQogIH0KCiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiYKICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7CiAgICBzcmNQYXRoLnVuc2hpZnQoJycpOwogIH0KCiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHsKICAgIHNyY1BhdGgucHVzaCgnJyk7CiAgfQoKICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8CiAgICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpOwoKICAvLyBwdXQgdGhlIGhvc3QgYmFjawogIGlmIChwc3ljaG90aWMpIHsKICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gaXNBYnNvbHV0ZSA/ICcnIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjUGF0aC5sZW5ndGggPyBzcmNQYXRoLnNoaWZ0KCkgOiAnJzsKICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3QKICAgIC8vdGhpcyBlc3BlY2lhbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlCiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKQogICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID8KICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlOwogICAgaWYgKGF1dGhJbkhvc3QpIHsKICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7CiAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpOwogICAgfQogIH0KCiAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgfHwgKHJlc3VsdC5ob3N0ICYmIHNyY1BhdGgubGVuZ3RoKTsKCiAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHsKICAgIHNyY1BhdGgudW5zaGlmdCgnJyk7CiAgfQoKICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7CiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsOwogICAgcmVzdWx0LnBhdGggPSBudWxsOwogIH0gZWxzZSB7CiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTsKICB9CgogIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHAKICBpZiAoIWlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICFpc051bGwocmVzdWx0LnNlYXJjaCkpIHsKICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTsKICB9CiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoOwogIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlczsKICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKICByZXR1cm4gcmVzdWx0Owp9OwoKVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHsKICB2YXIgaG9zdCA9IHRoaXMuaG9zdDsKICB2YXIgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdCk7CiAgaWYgKHBvcnQpIHsKICAgIHBvcnQgPSBwb3J0WzBdOwogICAgaWYgKHBvcnQgIT09ICc6JykgewogICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTsKICAgIH0KICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKTsKICB9CiAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0Owp9OwoKZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICJzdHJpbmciOwp9CgpmdW5jdGlvbiBpc09iamVjdChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwp9CgpmdW5jdGlvbiBpc051bGwoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gbnVsbDsKfQpmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gIGFyZyA9PSBudWxsOwp9Cgp9LHsicHVueWNvZGUiOjgwLCJxdWVyeXN0cmluZyI6ODl9XSw5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykgewogIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yCiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwgewogICAgICBjb25zdHJ1Y3RvcjogewogICAgICAgIHZhbHVlOiBjdG9yLAogICAgICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICB9CiAgICB9KTsKICB9Owp9IGVsc2UgewogIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yCiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fQogICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZQogICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKQogICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yCiAgfQp9Cgp9LHt9XSw5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7CiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JwogICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nCiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbicKICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nOwp9Cn0se31dLDk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7KGZ1bmN0aW9uICgpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgp2YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZzsKZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7CiAgaWYgKCFpc1N0cmluZyhmKSkgewogICAgdmFyIG9iamVjdHMgPSBbXTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpOwogICAgfQogICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpOwogIH0KCiAgdmFyIGkgPSAxOwogIHZhciBhcmdzID0gYXJndW1lbnRzOwogIHZhciBsZW4gPSBhcmdzLmxlbmd0aDsKICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7CiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJzsKICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7CiAgICBzd2l0Y2ggKHgpIHsKICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7CiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pOwogICAgICBjYXNlICclaic6CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pOwogICAgICAgIH0gY2F0Y2ggKF8pIHsKICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7CiAgICAgICAgfQogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiB4OwogICAgfQogIH0pOwogIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7CiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkgewogICAgICBzdHIgKz0gJyAnICsgeDsKICAgIH0gZWxzZSB7CiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpOwogICAgfQogIH0KICByZXR1cm4gc3RyOwp9OwoKCi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuCi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuCi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuCmV4cG9ydHMuZGVwcmVjYXRlID0gZnVuY3Rpb24oZm4sIG1zZykgewogIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuCiAgaWYgKGlzVW5kZWZpbmVkKGdsb2JhbC5wcm9jZXNzKSkgewogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfQoKICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7CiAgICByZXR1cm4gZm47CiAgfQoKICB2YXIgd2FybmVkID0gZmFsc2U7CiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHsKICAgIGlmICghd2FybmVkKSB7CiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTsKICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHsKICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpOwogICAgICB9CiAgICAgIHdhcm5lZCA9IHRydWU7CiAgICB9CiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIHJldHVybiBkZXByZWNhdGVkOwp9OwoKCnZhciBkZWJ1Z3MgPSB7fTsKdmFyIGRlYnVnRW52aXJvbjsKZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkgewogIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKQogICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJzsKICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTsKICBpZiAoIWRlYnVnc1tzZXRdKSB7CiAgICBpZiAobmV3IFJlZ0V4cCgnXFxiJyArIHNldCArICdcXGInLCAnaScpLnRlc3QoZGVidWdFbnZpcm9uKSkgewogICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7CiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7CiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7CiAgICAgIH07CiAgICB9IGVsc2UgewogICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307CiAgICB9CiAgfQogIHJldHVybiBkZWJ1Z3Nbc2V0XTsKfTsKCgovKioKICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dAogKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy4KICoKICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC4KICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC4KICovCi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi8KZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHsKICAvLyBkZWZhdWx0IG9wdGlvbnMKICB2YXIgY3R4ID0gewogICAgc2VlbjogW10sCiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvcgogIH07CiAgLy8gbGVnYWN5Li4uCiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdOwogIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107CiAgaWYgKGlzQm9vbGVhbihvcHRzKSkgewogICAgLy8gbGVnYWN5Li4uCiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7CiAgfSBlbHNlIGlmIChvcHRzKSB7CiAgICAvLyBnb3QgYW4gIm9wdGlvbnMiIG9iamVjdAogICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7CiAgfQogIC8vIHNldCBkZWZhdWx0IG9wdGlvbnMKICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlOwogIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyOwogIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlOwogIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTsKICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yOwogIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTsKfQpleHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0OwoKCi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljcwppbnNwZWN0LmNvbG9ycyA9IHsKICAnYm9sZCcgOiBbMSwgMjJdLAogICdpdGFsaWMnIDogWzMsIDIzXSwKICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sCiAgJ2ludmVyc2UnIDogWzcsIDI3XSwKICAnd2hpdGUnIDogWzM3LCAzOV0sCiAgJ2dyZXknIDogWzkwLCAzOV0sCiAgJ2JsYWNrJyA6IFszMCwgMzldLAogICdibHVlJyA6IFszNCwgMzldLAogICdjeWFuJyA6IFszNiwgMzldLAogICdncmVlbicgOiBbMzIsIDM5XSwKICAnbWFnZW50YScgOiBbMzUsIDM5XSwKICAncmVkJyA6IFszMSwgMzldLAogICd5ZWxsb3cnIDogWzMzLCAzOV0KfTsKCi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZQppbnNwZWN0LnN0eWxlcyA9IHsKICAnc3BlY2lhbCc6ICdjeWFuJywKICAnbnVtYmVyJzogJ3llbGxvdycsCiAgJ2Jvb2xlYW4nOiAneWVsbG93JywKICAndW5kZWZpbmVkJzogJ2dyZXknLAogICdudWxsJzogJ2JvbGQnLAogICdzdHJpbmcnOiAnZ3JlZW4nLAogICdkYXRlJzogJ21hZ2VudGEnLAogIC8vICJuYW1lIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZwogICdyZWdleHAnOiAncmVkJwp9OwoKCmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHsKICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdOwoKICBpZiAoc3R5bGUpIHsKICAgIHJldHVybiAnXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgKwogICAgICAgICAgICdcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJzsKICB9IGVsc2UgewogICAgcmV0dXJuIHN0cjsKICB9Cn0KCgpmdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkgewogIHJldHVybiBzdHI7Cn0KCgpmdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkgewogIHZhciBoYXNoID0ge307CgogIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHsKICAgIGhhc2hbdmFsXSA9IHRydWU7CiAgfSk7CgogIHJldHVybiBoYXNoOwp9CgoKZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7CiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLgogIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdAogIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJgogICAgICB2YWx1ZSAmJgogICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmCiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbAogICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiYKICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suCiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHsKICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTsKICAgIGlmICghaXNTdHJpbmcocmV0KSkgewogICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTsKICAgIH0KICAgIHJldHVybiByZXQ7CiAgfQoKICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllcwogIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7CiAgaWYgKHByaW1pdGl2ZSkgewogICAgcmV0dXJuIHByaW1pdGl2ZTsKICB9CgogIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC4KICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTsKICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTsKCiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7CiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpOwogIH0KCiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZQogIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4CiAgaWYgKGlzRXJyb3IodmFsdWUpCiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkgewogICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTsKICB9CgogIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC4KICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHsKICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkgewogICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnOwogICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpOwogICAgfQogICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpOwogICAgfQogICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpOwogICAgfQogICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7CiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgICB9CiAgfQoKICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddOwoKICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5CiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7CiAgICBhcnJheSA9IHRydWU7CiAgICBicmFjZXMgPSBbJ1snLCAnXSddOwogIH0KCiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zCiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnOwogICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7CiAgfQoKICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwcwogIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsKICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpOwogIH0KCiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlCiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHsKICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTsKICB9CgogIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3IKICBpZiAoaXNFcnJvcih2YWx1ZSkpIHsKICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7CiAgfQoKICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHsKICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdOwogIH0KCiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHsKICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpOwogICAgfQogIH0KCiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7CgogIHZhciBvdXRwdXQ7CiAgaWYgKGFycmF5KSB7CiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTsKICB9IGVsc2UgewogICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7CiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTsKICAgIH0pOwogIH0KCiAgY3R4LnNlZW4ucG9wKCk7CgogIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7Cn0KCgpmdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkgewogIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTsKICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7CiAgICB2YXIgc2ltcGxlID0gJ1wnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eInwiJC9nLCAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgIlxcJyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCIvZywgJyInKSArICdcJyc7CiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7CiAgfQogIGlmIChpc051bWJlcih2YWx1ZSkpCiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpOwogIGlmIChpc0Jvb2xlYW4odmFsdWUpKQogICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7CiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzICJvYmplY3QiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS4KICBpZiAoaXNOdWxsKHZhbHVlKSkKICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7Cn0KCgpmdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkgewogIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7Cn0KCgpmdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7CiAgdmFyIG91dHB1dCA9IFtdOwogIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7CiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHsKICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywKICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3V0cHV0LnB1c2goJycpOwogICAgfQogIH0KICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICBpZiAoIWtleS5tYXRjaCgvXlxkKyQvKSkgewogICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLAogICAgICAgICAga2V5LCB0cnVlKSk7CiAgICB9CiAgfSk7CiAgcmV0dXJuIG91dHB1dDsKfQoKCmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHsKICB2YXIgbmFtZSwgc3RyLCBkZXNjOwogIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTsKICBpZiAoZGVzYy5nZXQpIHsKICAgIGlmIChkZXNjLnNldCkgewogICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgIH0gZWxzZSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7CiAgICB9CiAgfSBlbHNlIHsKICAgIGlmIChkZXNjLnNldCkgewogICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpOwogICAgfQogIH0KICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7CiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nOwogIH0KICBpZiAoIXN0cikgewogICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7CiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkgewogICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTsKICAgICAgfQogICAgICBpZiAoc3RyLmluZGV4T2YoJ1xuJykgPiAtMSkgewogICAgICAgIGlmIChhcnJheSkgewogICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTsKICAgICAgICAgIH0pLmpvaW4oJ1xuJykuc3Vic3RyKDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdHIgPSAnXG4nICsgc3RyLnNwbGl0KCdcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7CiAgICAgICAgICB9KS5qb2luKCdcbicpOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpOwogICAgfQogIH0KICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHsKICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cZCskLykpIHsKICAgICAgcmV0dXJuIHN0cjsKICAgIH0KICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7CiAgICBpZiAobmFtZS5tYXRjaCgvXiIoW2EtekEtWl9dW2EtekEtWl8wLTldKikiJC8pKSB7CiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpOwogICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTsKICAgIH0gZWxzZSB7CiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgIlxcJyIpCiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcIi9nLCAnIicpCiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheInwiJCkvZywgIiciKTsKICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTsKICAgIH0KICB9CgogIHJldHVybiBuYW1lICsgJzogJyArIHN0cjsKfQoKCmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7CiAgdmFyIG51bUxpbmVzRXN0ID0gMDsKICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHsKICAgIG51bUxpbmVzRXN0Kys7CiAgICBpZiAoY3VyLmluZGV4T2YoJ1xuJykgPj0gMCkgbnVtTGluZXNFc3QrKzsKICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1x1MDAxYlxbXGRcZD9tL2csICcnKS5sZW5ndGggKyAxOwogIH0sIDApOwoKICBpZiAobGVuZ3RoID4gNjApIHsKICAgIHJldHVybiBicmFjZXNbMF0gKwogICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcbiAnKSArCiAgICAgICAgICAgJyAnICsKICAgICAgICAgICBvdXRwdXQuam9pbignLFxuICAnKSArCiAgICAgICAgICAgJyAnICsKICAgICAgICAgICBicmFjZXNbMV07CiAgfQoKICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdOwp9CgoKLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgCi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLgpmdW5jdGlvbiBpc0FycmF5KGFyKSB7CiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpOwp9CmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7CgpmdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJzsKfQpleHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjsKCmZ1bmN0aW9uIGlzTnVsbChhcmcpIHsKICByZXR1cm4gYXJnID09PSBudWxsOwp9CmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsOwoKZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PSBudWxsOwp9CmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDsKCmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJzsKfQpleHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7CgpmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7Cn0KZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nOwoKZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnOwp9CmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDsKCmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykgewogIHJldHVybiBhcmcgPT09IHZvaWQgMDsKfQpleHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7CgpmdW5jdGlvbiBpc1JlZ0V4cChyZSkgewogIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJzsKfQpleHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7CgpmdW5jdGlvbiBpc09iamVjdChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwp9CmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDsKCmZ1bmN0aW9uIGlzRGF0ZShkKSB7CiAgcmV0dXJuIGlzT2JqZWN0KGQpICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7Cn0KZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7CgpmdW5jdGlvbiBpc0Vycm9yKGUpIHsKICByZXR1cm4gaXNPYmplY3QoZSkgJiYKICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7Cn0KZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjsKCmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7Cn0KZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjsKCmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykgewogIHJldHVybiBhcmcgPT09IG51bGwgfHwKICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8CiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8CiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8CiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sCiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnOwp9CmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTsKCmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTsKCmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pOwp9CgoKZnVuY3Rpb24gcGFkKG4pIHsKICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTsKfQoKCnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywKICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTsKCi8vIDI2IEZlYiAxNjoxOTozNApmdW5jdGlvbiB0aW1lc3RhbXAoKSB7CiAgdmFyIGQgPSBuZXcgRGF0ZSgpOwogIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLAogICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksCiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpOwogIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7Cn0KCgovLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wCmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7CiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7Cn07CgoKLyoqCiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci4KICoKICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZQogKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWQKICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmUKICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzCiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLgogKgogKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlCiAqICAgICBwcm90b3R5cGUuCiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLgogKi8KZXhwb3J0cy5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7CgpleHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkgewogIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3QKICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjsKCiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpOwogIHZhciBpID0ga2V5cy5sZW5ndGg7CiAgd2hpbGUgKGktLSkgewogICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dOwogIH0KICByZXR1cm4gb3JpZ2luOwp9OwoKZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7CiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOwp9Cgp9KS5jYWxsKHRoaXMpfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJyksdHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18uZyAhPT0gInVuZGVmaW5lZCIgPyBfX3dlYnBhY2tfcmVxdWlyZV9fLmcgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKfSx7Ii4vc3VwcG9ydC9pc0J1ZmZlciI6OTYsIl9wcm9jZXNzIjo4NiwiaW5oZXJpdHMiOjk1fV0sOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7CnZhciB2NCA9IHJlcXVpcmUoJy4vdjQnKTsKCnZhciB1dWlkID0gdjQ7CnV1aWQudjEgPSB2MTsKdXVpZC52NCA9IHY0OwoKbW9kdWxlLmV4cG9ydHMgPSB1dWlkOwoKfSx7Ii4vdjEiOjEwMSwiLi92NCI6MTAyfV0sOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06CiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWAogKi8KdmFyIGJ5dGVUb0hleCA9IFtdOwpmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7CiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTsKfQoKZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHsKICB2YXIgaSA9IG9mZnNldCB8fCAwOwogIHZhciBidGggPSBieXRlVG9IZXg7CiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzQKICByZXR1cm4gKFtidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAKCWJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywKCWJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywKCWJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywKCWJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywKCWJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sCglidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLAoJYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXV0pLmpvaW4oJycpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkOwoKfSx7fV0sMTAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZQovLyBicm93c2VyIHRoaXMgaXMgYSBsaXR0bGUgY29tcGxpY2F0ZWQgZHVlIHRvIHVua25vd24gcXVhbGl0eSBvZiBNYXRoLnJhbmRvbSgpCi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWEKLy8gZmVhdHVyZS1kZXRlY3Rpb24KCi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSAidGhpcyIgaXMgYSBDcnlwdG8KLy8gaW1wbGVtZW50YXRpb24uIEFsc28sIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byBvbiBJRTExLgp2YXIgZ2V0UmFuZG9tVmFsdWVzID0gKHR5cGVvZihjcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8CiAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mKG1zQ3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93Lm1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKSk7CgppZiAoZ2V0UmFuZG9tVmFsdWVzKSB7CiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvCiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmCgogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkgewogICAgZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTsKICAgIHJldHVybiBybmRzODsKICB9Owp9IGVsc2UgewogIC8vIE1hdGgucmFuZG9tKCktYmFzZWQgKFJORykKICAvLwogIC8vIElmIGFsbCBlbHNlIGZhaWxzLCB1c2UgTWF0aC5yYW5kb20oKS4gIEl0J3MgZmFzdCwgYnV0IGlzIG9mIHVuc3BlY2lmaWVkCiAgLy8gcXVhbGl0eS4KICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7CgogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWF0aFJORygpIHsKICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykgewogICAgICBpZiAoKGkgJiAweDAzKSA9PT0gMCkgciA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMDsKICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjsKICAgIH0KCiAgICByZXR1cm4gcm5kczsKICB9Owp9Cgp9LHt9XSwxMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7CnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7CgovLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqCi8vCi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzCi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sCgp2YXIgX25vZGVJZDsKdmFyIF9jbG9ja3NlcTsKCi8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZQp2YXIgX2xhc3RNU2VjcyA9IDA7CnZhciBfbGFzdE5TZWNzID0gMDsKCi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYnJvb2ZhL25vZGUtdXVpZCBmb3IgQVBJIGRldGFpbHMKZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHsKICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDsKICB2YXIgYiA9IGJ1ZiB8fCBbXTsKCiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDsKICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOwoKICAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3QKICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnQKICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5CiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7CiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7CiAgICBpZiAobm9kZSA9PSBudWxsKSB7CiAgICAgIC8vIFBlciA0LjUsIGNyZWF0ZSBhbmQgNDgtYml0IG5vZGUgaWQsICg0NyByYW5kb20gYml0cyArIG11bHRpY2FzdCBiaXQgPSAxKQogICAgICBub2RlID0gX25vZGVJZCA9IFsKICAgICAgICBzZWVkQnl0ZXNbMF0gfCAweDAxLAogICAgICAgIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdCiAgICAgIF07CiAgICB9CiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkgewogICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcQogICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7CiAgICB9CiAgfQoKICAvLyBVVUlEIHRpbWVzdGFtcHMgYXJlIDEwMCBuYW5vLXNlY29uZCB1bml0cyBzaW5jZSB0aGUgR3JlZ29yaWFuIGVwb2NoLAogIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvCiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnCiAgLy8gKDEwMC1uYW5vc2Vjb25kcyBvZmZzZXQgZnJvbSBtc2Vjcykgc2luY2UgdW5peCBlcG9jaCwgMTk3MC0wMS0wMSAwMDowMC4KICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7CgogIC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2sKICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9jawogIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTsKCiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKQogIHZhciBkdCA9IChtc2VjcyAtIF9sYXN0TVNlY3MpICsgKG5zZWNzIC0gX2xhc3ROU2VjcykvMTAwMDA7CgogIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb24KICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkgewogICAgY2xvY2tzZXEgPSBjbG9ja3NlcSArIDEgJiAweDNmZmY7CiAgfQoKICAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ldwogIC8vIHRpbWUgaW50ZXJ2YWwKICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkgewogICAgbnNlY3MgPSAwOwogIH0KCiAgLy8gUGVyIDQuMi4xLjIgVGhyb3cgZXJyb3IgaWYgdG9vIG1hbnkgdXVpZHMgYXJlIHJlcXVlc3RlZAogIGlmIChuc2VjcyA+PSAxMDAwMCkgewogICAgdGhyb3cgbmV3IEVycm9yKCd1dWlkLnYxKCk6IENhblwndCBjcmVhdGUgbW9yZSB0aGFuIDEwTSB1dWlkcy9zZWMnKTsKICB9CgogIF9sYXN0TVNlY3MgPSBtc2VjczsKICBfbGFzdE5TZWNzID0gbnNlY3M7CiAgX2Nsb2Nrc2VxID0gY2xvY2tzZXE7CgogIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaAogIG1zZWNzICs9IDEyMjE5MjkyODAwMDAwOwoKICAvLyBgdGltZV9sb3dgCiAgdmFyIHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwOwogIGJbaSsrXSA9IHRsID4+PiAyNCAmIDB4ZmY7CiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjsKICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7CiAgYltpKytdID0gdGwgJiAweGZmOwoKICAvLyBgdGltZV9taWRgCiAgdmFyIHRtaCA9IChtc2VjcyAvIDB4MTAwMDAwMDAwICogMTAwMDApICYgMHhmZmZmZmZmOwogIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7CiAgYltpKytdID0gdG1oICYgMHhmZjsKCiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmAKICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uCiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7CgogIC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KQogIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsKCiAgLy8gYGNsb2NrX3NlcV9sb3dgCiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOwoKICAvLyBgbm9kZWAKICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikgewogICAgYltpICsgbl0gPSBub2RlW25dOwogIH0KCiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHYxOwoKfSx7Ii4vbGliL2J5dGVzVG9VdWlkIjo5OSwiLi9saWIvcm5nIjoxMDB9XSwxMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7CnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7CgpmdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkgewogIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwOwoKICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7CiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsOwogICAgb3B0aW9ucyA9IG51bGw7CiAgfQogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7CgogIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAKICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7CiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwOwoKICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWQKICBpZiAoYnVmKSB7CiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHsKICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTsKICAgIH0KICB9CgogIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7Cn0KCm1vZHVsZS5leHBvcnRzID0gdjQ7Cgp9LHsiLi9saWIvYnl0ZXNUb1V1aWQiOjk5LCIuL2xpYi9ybmciOjEwMH1dLDEwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIExSVV8xID0gcmVxdWlyZSgiLi91dGlscy9MUlUiKTsKdmFyIENBQ0hFX1NJWkUgPSAxMDAwOwovKioKICogSW5zcGlyZWQgbm9kZS1scnUtY2FjaGVbaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9ub2RlLWxydS1jYWNoZV0KICovCnZhciBFbmRwb2ludENhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRW5kcG9pbnRDYWNoZShtYXhTaXplKSB7CiAgICAgICAgaWYgKG1heFNpemUgPT09IHZvaWQgMCkgeyBtYXhTaXplID0gQ0FDSEVfU0laRTsgfQogICAgICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemU7CiAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBMUlVfMS5MUlVDYWNoZShtYXhTaXplKTsKICAgIH0KICAgIDsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbmRwb2ludENhY2hlLnByb3RvdHlwZSwgInNpemUiLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmxlbmd0aDsKICAgICAgICB9LAogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9KTsKICAgIEVuZHBvaW50Q2FjaGUucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgICAgIHZhciBrZXlTdHJpbmcgPSB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyA/IEVuZHBvaW50Q2FjaGUuZ2V0S2V5U3RyaW5nKGtleSkgOiBrZXk7CiAgICAgICAgdmFyIGVuZHBvaW50UmVjb3JkID0gdGhpcy5wb3B1bGF0ZVZhbHVlKHZhbHVlKTsKICAgICAgICB0aGlzLmNhY2hlLnB1dChrZXlTdHJpbmcsIGVuZHBvaW50UmVjb3JkKTsKICAgIH07CiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHZhciBrZXlTdHJpbmcgPSB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyA/IEVuZHBvaW50Q2FjaGUuZ2V0S2V5U3RyaW5nKGtleSkgOiBrZXk7CiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7CiAgICAgICAgdmFyIHJlY29yZHMgPSB0aGlzLmNhY2hlLmdldChrZXlTdHJpbmcpOwogICAgICAgIGlmIChyZWNvcmRzKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb3Jkcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHJlY29yZHNbaV07CiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLkV4cGlyZSA8IG5vdykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlKGtleVN0cmluZyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVjb3JkczsKICAgIH07CiAgICBFbmRwb2ludENhY2hlLmdldEtleVN0cmluZyA9IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICB2YXIgaWRlbnRpZmllcnMgPSBbXTsKICAgICAgICB2YXIgaWRlbnRpZmllck5hbWVzID0gT2JqZWN0LmtleXMoa2V5KS5zb3J0KCk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZGVudGlmaWVyTmFtZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGlkZW50aWZpZXJOYW1lID0gaWRlbnRpZmllck5hbWVzW2ldOwogICAgICAgICAgICBpZiAoa2V5W2lkZW50aWZpZXJOYW1lXSA9PT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIGlkZW50aWZpZXJzLnB1c2goa2V5W2lkZW50aWZpZXJOYW1lXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBpZGVudGlmaWVycy5qb2luKCcgJyk7CiAgICB9OwogICAgRW5kcG9pbnRDYWNoZS5wcm90b3R5cGUucG9wdWxhdGVWYWx1ZSA9IGZ1bmN0aW9uIChlbmRwb2ludHMpIHsKICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTsKICAgICAgICByZXR1cm4gZW5kcG9pbnRzLm1hcChmdW5jdGlvbiAoZW5kcG9pbnQpIHsgcmV0dXJuICh7CiAgICAgICAgICAgIEFkZHJlc3M6IGVuZHBvaW50LkFkZHJlc3MgfHwgJycsCiAgICAgICAgICAgIEV4cGlyZTogbm93ICsgKGVuZHBvaW50LkNhY2hlUGVyaW9kSW5NaW51dGVzIHx8IDEpICogNjAgKiAxMDAwCiAgICAgICAgfSk7IH0pOwogICAgfTsKICAgIEVuZHBvaW50Q2FjaGUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuY2FjaGUuZW1wdHkoKTsKICAgIH07CiAgICBFbmRwb2ludENhY2hlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5KSB7CiAgICAgIHZhciBrZXlTdHJpbmcgPSB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyA/IEVuZHBvaW50Q2FjaGUuZ2V0S2V5U3RyaW5nKGtleSkgOiBrZXk7CiAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmUoa2V5U3RyaW5nKTsKICAgIH07CiAgICByZXR1cm4gRW5kcG9pbnRDYWNoZTsKfSgpKTsKZXhwb3J0cy5FbmRwb2ludENhY2hlID0gRW5kcG9pbnRDYWNoZTsKfSx7Ii4vdXRpbHMvTFJVIjoxMDR9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CnZhciBMaW5rZWRMaXN0Tm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIExpbmtlZExpc3ROb2RlKGtleSwgdmFsdWUpIHsKICAgICAgICB0aGlzLmtleSA9IGtleTsKICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7CiAgICB9CiAgICByZXR1cm4gTGlua2VkTGlzdE5vZGU7Cn0oKSk7CnZhciBMUlVDYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIExSVUNhY2hlKHNpemUpIHsKICAgICAgICB0aGlzLm5vZGVNYXAgPSB7fTsKICAgICAgICB0aGlzLnNpemUgPSAwOwogICAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSA8IDEpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWNoZSBzaXplIGNhbiBvbmx5IGJlIHBvc2l0aXZlIG51bWJlcicpOwogICAgICAgIH0KICAgICAgICB0aGlzLnNpemVMaW1pdCA9IHNpemU7CiAgICB9CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTFJVQ2FjaGUucHJvdG90eXBlLCAibGVuZ3RoIiwgewogICAgICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zaXplOwogICAgICAgIH0sCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0pOwogICAgTFJVQ2FjaGUucHJvdG90eXBlLnByZXBlbmRUb0xpc3QgPSBmdW5jdGlvbiAobm9kZSkgewogICAgICAgIGlmICghdGhpcy5oZWFkZXJOb2RlKSB7CiAgICAgICAgICAgIHRoaXMudGFpbE5vZGUgPSBub2RlOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdGhpcy5oZWFkZXJOb2RlLnByZXYgPSBub2RlOwogICAgICAgICAgICBub2RlLm5leHQgPSB0aGlzLmhlYWRlck5vZGU7CiAgICAgICAgfQogICAgICAgIHRoaXMuaGVhZGVyTm9kZSA9IG5vZGU7CiAgICAgICAgdGhpcy5zaXplKys7CiAgICB9OwogICAgTFJVQ2FjaGUucHJvdG90eXBlLnJlbW92ZUZyb21UYWlsID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICghdGhpcy50YWlsTm9kZSkgewogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICB2YXIgbm9kZSA9IHRoaXMudGFpbE5vZGU7CiAgICAgICAgdmFyIHByZXZOb2RlID0gbm9kZS5wcmV2OwogICAgICAgIGlmIChwcmV2Tm9kZSkgewogICAgICAgICAgICBwcmV2Tm9kZS5uZXh0ID0gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICBub2RlLnByZXYgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy50YWlsTm9kZSA9IHByZXZOb2RlOwogICAgICAgIHRoaXMuc2l6ZS0tOwogICAgICAgIHJldHVybiBub2RlOwogICAgfTsKICAgIExSVUNhY2hlLnByb3RvdHlwZS5kZXRhY2hGcm9tTGlzdCA9IGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgaWYgKHRoaXMuaGVhZGVyTm9kZSA9PT0gbm9kZSkgewogICAgICAgICAgICB0aGlzLmhlYWRlck5vZGUgPSBub2RlLm5leHQ7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLnRhaWxOb2RlID09PSBub2RlKSB7CiAgICAgICAgICAgIHRoaXMudGFpbE5vZGUgPSBub2RlLnByZXY7CiAgICAgICAgfQogICAgICAgIGlmIChub2RlLnByZXYpIHsKICAgICAgICAgICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7CiAgICAgICAgfQogICAgICAgIGlmIChub2RlLm5leHQpIHsKICAgICAgICAgICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7CiAgICAgICAgfQogICAgICAgIG5vZGUubmV4dCA9IHVuZGVmaW5lZDsKICAgICAgICBub2RlLnByZXYgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhpcy5zaXplLS07CiAgICB9OwogICAgTFJVQ2FjaGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAodGhpcy5ub2RlTWFwW2tleV0pIHsKICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVNYXBba2V5XTsKICAgICAgICAgICAgdGhpcy5kZXRhY2hGcm9tTGlzdChub2RlKTsKICAgICAgICAgICAgdGhpcy5wcmVwZW5kVG9MaXN0KG5vZGUpOwogICAgICAgICAgICByZXR1cm4gbm9kZS52YWx1ZTsKICAgICAgICB9CiAgICB9OwogICAgTFJVQ2FjaGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBpZiAodGhpcy5ub2RlTWFwW2tleV0pIHsKICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGVNYXBba2V5XTsKICAgICAgICAgICAgdGhpcy5kZXRhY2hGcm9tTGlzdChub2RlKTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMubm9kZU1hcFtrZXldOwogICAgICAgIH0KICAgIH07CiAgICBMUlVDYWNoZS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICAgICBpZiAodGhpcy5ub2RlTWFwW2tleV0pIHsKICAgICAgICAgICAgdGhpcy5yZW1vdmUoa2V5KTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAodGhpcy5zaXplID09PSB0aGlzLnNpemVMaW1pdCkgewogICAgICAgICAgICB2YXIgdGFpbE5vZGUgPSB0aGlzLnJlbW92ZUZyb21UYWlsKCk7CiAgICAgICAgICAgIHZhciBrZXlfMSA9IHRhaWxOb2RlLmtleTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMubm9kZU1hcFtrZXlfMV07CiAgICAgICAgfQogICAgICAgIHZhciBuZXdOb2RlID0gbmV3IExpbmtlZExpc3ROb2RlKGtleSwgdmFsdWUpOwogICAgICAgIHRoaXMubm9kZU1hcFtrZXldID0gbmV3Tm9kZTsKICAgICAgICB0aGlzLnByZXBlbmRUb0xpc3QobmV3Tm9kZSk7CiAgICB9OwogICAgTFJVQ2FjaGUucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5ub2RlTWFwKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07CiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5ub2RlTWFwW2tleV07CiAgICAgICAgICAgIHRoaXMuZGV0YWNoRnJvbUxpc3Qobm9kZSk7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm5vZGVNYXBba2V5XTsKICAgICAgICB9CiAgICB9OwogICAgcmV0dXJuIExSVUNhY2hlOwp9KCkpOwpleHBvcnRzLkxSVUNhY2hlID0gTFJVQ2FjaGU7Cn0se31dLDEwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEFXUyBTREsgZm9yIEphdmFTY3JpcHQgdjIuNTUzLjAKLy8gQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCi8vIExpY2Vuc2UgYXQgaHR0cHM6Ly9zZGsuYW1hem9uYXdzLmNvbS9qcy9CVU5ETEVfTElDRU5TRS50eHQKcmVxdWlyZSgnLi9icm93c2VyX2xvYWRlcicpOwoKdmFyIEFXUyA9IHJlcXVpcmUoJy4vY29yZScpOwoKaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuQVdTID0gQVdTOwppZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIC8qKgogICAgICogQGFwaSBwcml2YXRlCiAgICAgKi8KICAgIG1vZHVsZS5leHBvcnRzID0gQVdTOwp9CmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHNlbGYuQVdTID0gQVdTOwoKLyoqCiAqIEBwcml2YXRlCiAqIERPIE5PVCBSRU1PVkUKICogYnJvd3NlciBidWlsZGVyIHdpbGwgc3RyaXAgb3V0IHRoaXMgbGluZSBpZiBzZXJ2aWNlcyBhcmUgc3VwcGxpZWQgb24gdGhlIGNvbW1hbmQgbGluZS4KICovaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQVdTLCAnQ29ubmVjdCcpKSB7CiAgQVdTLmFwaUxvYWRlci5zZXJ2aWNlc1snY29ubmVjdCddID0ge307CiAgQVdTLkNvbm5lY3QgPSBBV1MuU2VydmljZS5kZWZpbmVTZXJ2aWNlKCdjb25uZWN0JywgWyAnMjAxNy0wMi0xNScgXSk7Cn0KQVdTLmFwaUxvYWRlci5zZXJ2aWNlc1snY29ubmVjdCddWycyMDE3LTAyLTE1J10gPSByZXF1aXJlKCcuLi9hcGlzL2Nvbm5lY3QtMjAxNy0wMi0xNS5taW4nKTsKCmlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEFXUywgJ1NUUycpKSB7CiAgQVdTLmFwaUxvYWRlci5zZXJ2aWNlc1snc3RzJ10gPSB7fTsKICBBV1MuU1RTID0gQVdTLlNlcnZpY2UuZGVmaW5lU2VydmljZSgnc3RzJywgWyAnMjAxMS0wNi0xNScgXSk7CiAgcmVxdWlyZSgnLi9zZXJ2aWNlcy9zdHMnKTsKfQpBV1MuYXBpTG9hZGVyLnNlcnZpY2VzWydzdHMnXVsnMjAxMS0wNi0xNSddID0gcmVxdWlyZSgnLi4vYXBpcy9zdHMtMjAxMS0wNi0xNS5taW4nKTsKCgp9LHsiLi4vYXBpcy9jb25uZWN0LTIwMTctMDItMTUubWluIjozLCIuLi9hcGlzL3N0cy0yMDExLTA2LTE1Lm1pbiI6NSwiLi9icm93c2VyX2xvYWRlciI6MTYsIi4vY29yZSI6MTgsIi4vc2VydmljZXMvc3RzIjo2MX1dfSx7fSxbMTA1XSk7CgoKCi8qKiovIH0pLAoKLyoqKi8gNzU0OgovKioqLyAoKCkgPT4gewoKLyoKICogQ29weXJpZ2h0IDIwMTQtMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8KKGZ1bmN0aW9uKCkgewogICB2YXIgZ2xvYmFsID0gdGhpczsKICAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogICBnbG9iYWwuY29ubmVjdCA9IGNvbm5lY3Q7CiAgIGdsb2JhbC5saWx5ID0gY29ubmVjdDsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgKiBlbnVtIENsaWVudE1ldGhvZHMKICAgICovCiAgIGNvbm5lY3QuQ2xpZW50TWV0aG9kcyA9IGNvbm5lY3QubWFrZUVudW0oWwogICAgICAgICAnZ2V0QWdlbnRTbmFwc2hvdCcsCiAgICAgICAgICdwdXRBZ2VudFN0YXRlJywKICAgICAgICAgJ2dldEFnZW50U3RhdGVzJywKICAgICAgICAgJ2dldERpYWxhYmxlQ291bnRyeUNvZGVzJywKICAgICAgICAgJ2dldFJvdXRpbmdQcm9maWxlUXVldWVzJywKICAgICAgICAgJ2dldEFnZW50UGVybWlzc2lvbnMnLAogICAgICAgICAnZ2V0QWdlbnRDb25maWd1cmF0aW9uJywKICAgICAgICAgJ3VwZGF0ZUFnZW50Q29uZmlndXJhdGlvbicsCiAgICAgICAgICdhY2NlcHRDb250YWN0JywKICAgICAgICAgJ2NyZWF0ZU91dGJvdW5kQ29udGFjdCcsCiAgICAgICAgICdjcmVhdGVUYXNrQ29udGFjdCcsCiAgICAgICAgICdjbGVhckNvbnRhY3QnLAogICAgICAgICAnY29tcGxldGVDb250YWN0JywKICAgICAgICAgJ2Rlc3Ryb3lDb250YWN0JywKICAgICAgICAgJ3JlamVjdENvbnRhY3QnLAogICAgICAgICAnbm90aWZ5Q29udGFjdElzc3VlJywKICAgICAgICAgJ3VwZGF0ZUNvbnRhY3RBdHRyaWJ1dGVzJywKICAgICAgICAgJ2NyZWF0ZUFkZGl0aW9uYWxDb25uZWN0aW9uJywKICAgICAgICAgJ2Rlc3Ryb3lDb25uZWN0aW9uJywKICAgICAgICAgJ2hvbGRDb25uZWN0aW9uJywKICAgICAgICAgJ3Jlc3VtZUNvbm5lY3Rpb24nLAogICAgICAgICAndG9nZ2xlQWN0aXZlQ29ubmVjdGlvbnMnLAogICAgICAgICAnY29uZmVyZW5jZUNvbm5lY3Rpb25zJywKICAgICAgICAgJ3NlbmRDbGllbnRMb2dzJywKICAgICAgICAgJ3NlbmREaWdpdHMnLAogICAgICAgICAnc2VuZFNvZnRwaG9uZUNhbGxSZXBvcnQnLAogICAgICAgICAnc2VuZFNvZnRwaG9uZUNhbGxNZXRyaWNzJywKICAgICAgICAgJ2dldEVuZHBvaW50cycsCiAgICAgICAgICdnZXROZXdBdXRoVG9rZW4nLAogICAgICAgICAnY3JlYXRlVHJhbnNwb3J0JywKICAgICAgICAgJ211dGVQYXJ0aWNpcGFudCcsCiAgICAgICAgICd1bm11dGVQYXJ0aWNpcGFudCcKICAgXSk7CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogZW51bSBBZ2VudEFwcENsaWVudE1ldGhvZHMKICAgICovCiAgIGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzID0gewogICAgICBHRVRfQ09OVEFDVDogIkFnZW50QXBwU2VydmljZS5MY21zLmdldENvbnRhY3QiLAogICAgICBERUxFVEVfU1BFQUtFUjogIkFnZW50QXBwU2VydmljZS5Wb2ljZUlkLmRlbGV0ZVNwZWFrZXIiLAogICAgICBFTlJPTExfQllfU0VTU0lPTjogIkFnZW50QXBwU2VydmljZS5Wb2ljZUlkLmVucm9sbEJ5U2Vzc2lvbiIsCiAgICAgIEVWQUxVQVRFX1NFU1NJT046ICJBZ2VudEFwcFNlcnZpY2UuVm9pY2VJZC5ldmFsdWF0ZVNlc3Npb24iLAogICAgICBERVNDUklCRV9TUEVBS0VSOiAiQWdlbnRBcHBTZXJ2aWNlLlZvaWNlSWQuZGVzY3JpYmVTcGVha2VyIiwKICAgICAgT1BUX09VVF9TUEVBS0VSOiAiQWdlbnRBcHBTZXJ2aWNlLlZvaWNlSWQub3B0T3V0U3BlYWtlciIsCiAgICAgIFVQREFURV9WT0lDRV9JRF9EQVRBOiAiQWdlbnRBcHBTZXJ2aWNlLkxjbXMudXBkYXRlVm9pY2VJZERhdGEiLAogICAgICBERVNDUklCRV9TRVNTSU9OOiAiQWdlbnRBcHBTZXJ2aWNlLlZvaWNlSWQuZGVzY3JpYmVTZXNzaW9uIiwKICAgICAgVVBEQVRFX1NFU1NJT046ICJBZ2VudEFwcFNlcnZpY2UuVm9pY2VJZC51cGRhdGVTZXNzaW9uIiwKICAgICAgU1RBUlRfVk9JQ0VfSURfU0VTU0lPTjogIkFnZW50QXBwU2VydmljZS5OYXNhLnN0YXJ0Vm9pY2VJZFNlc3Npb24iLAogICAgICBMSVNUX0lOVEVHUkFUSU9OX0FTU09DSUFUSU9OUzogIkFnZW50QXBwU2VydmljZS5BY3MubGlzdEludGVncmF0aW9uQXNzb2NpYXRpb25zIgogICB9OwoKICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGVudW0gTWFzdGVyTWV0aG9kcwogICAgKi8KICAgY29ubmVjdC5NYXN0ZXJNZXRob2RzID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAgICAgICdiZWNvbWVNYXN0ZXInLAogICAgICAgICAnY2hlY2tNYXN0ZXInCiAgIF0pOwoKICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGFic3RyYWN0IGNsYXNzIENsaWVudEJhc2UKICAgICovCiAgIHZhciBDbGllbnRCYXNlID0gZnVuY3Rpb24oKSB7fTsKICAgQ2xpZW50QmFzZS5FTVBUWV9DQUxMQkFDS1MgPSB7CiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkgeyB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbigpIHsgfQogICB9OwoKICAgQ2xpZW50QmFzZS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zSW4sIGNhbGxiYWNrc0luKSB7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChtZXRob2QsICdtZXRob2QnKTsKICAgICAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9OwogICAgICB2YXIgY2FsbGJhY2tzID0gY2FsbGJhY2tzSW4gfHwgQ2xpZW50QmFzZS5FTVBUWV9DQUxMQkFDS1M7CiAgICAgIHRoaXMuX2NhbGxJbXBsKG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFja3MpOwogICB9OwoKICAgQ2xpZW50QmFzZS5wcm90b3R5cGUuX2NhbGxJbXBsID0gZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrcykgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7CiAgIH07CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgTnVsbENsaWVudCBleHRlbmRzIENsaWVudEJhc2UKICAgICovCiAgIHZhciBOdWxsQ2xpZW50ID0gZnVuY3Rpb24oKSB7CiAgICAgIENsaWVudEJhc2UuY2FsbCh0aGlzKTsKICAgfTsKICAgTnVsbENsaWVudC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsaWVudEJhc2UucHJvdG90eXBlKTsKICAgTnVsbENsaWVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdWxsQ2xpZW50OwoKICAgTnVsbENsaWVudC5wcm90b3R5cGUuX2NhbGxJbXBsID0gZnVuY3Rpb24obWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrcykgewogICAgICBpZiAoY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5mYWlsdXJlKSB7CiAgICAgICAgIHZhciBtZXNzYWdlID0gY29ubmVjdC5zcHJpbnRmKCdObyBzdWNoIG1ldGhvZCBleGlzdHMgb24gTlVMTCBjbGllbnQ6ICVzJywgbWV0aG9kKTsKICAgICAgICAgY2FsbGJhY2tzLmZhaWx1cmUobmV3IGNvbm5lY3QuVmFsdWVFcnJvcihtZXNzYWdlKSwge21lc3NhZ2U6IG1lc3NhZ2V9KTsKICAgICAgfQogICB9OwoKICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGFic3RyYWN0IGNsYXNzIFVwc3RyZWFtQ29uZHVpdENsaWVudEJhc2UgZXh0ZW5kcyBDbGllbnRCYXNlCiAgICAqLwogICB2YXIgVXBzdHJlYW1Db25kdWl0Q2xpZW50QmFzZSA9IGZ1bmN0aW9uKGNvbmR1aXQsIHJlcXVlc3RFdmVudCwgcmVzcG9uc2VFdmVudCkgewogICAgICBDbGllbnRCYXNlLmNhbGwodGhpcyk7CiAgICAgIHRoaXMuY29uZHVpdCA9IGNvbmR1aXQ7CiAgICAgIHRoaXMucmVxdWVzdEV2ZW50ID0gcmVxdWVzdEV2ZW50OwogICAgICB0aGlzLnJlc3BvbnNlRXZlbnQgPSByZXNwb25zZUV2ZW50OwogICAgICB0aGlzLl9yZXF1ZXN0SWRDYWxsYmFja3NNYXAgPSB7fTsKCiAgICAgIHRoaXMuY29uZHVpdC5vblVwc3RyZWFtKHJlc3BvbnNlRXZlbnQsIGNvbm5lY3QuaGl0Y2godGhpcywgdGhpcy5faGFuZGxlUmVzcG9uc2UpKTsKICAgfTsKCiAgIFVwc3RyZWFtQ29uZHVpdENsaWVudEJhc2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGllbnRCYXNlLnByb3RvdHlwZSk7CiAgIFVwc3RyZWFtQ29uZHVpdENsaWVudEJhc2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVXBzdHJlYW1Db25kdWl0Q2xpZW50QmFzZTsKCiAgIFVwc3RyZWFtQ29uZHVpdENsaWVudEJhc2UucHJvdG90eXBlLl9jYWxsSW1wbCA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFja3MpIHsKICAgICAgdmFyIHJlcXVlc3QgPSBjb25uZWN0LkV2ZW50RmFjdG9yeS5jcmVhdGVSZXF1ZXN0KHRoaXMucmVxdWVzdEV2ZW50LCBtZXRob2QsIHBhcmFtcyk7CiAgICAgIHRoaXMuX3JlcXVlc3RJZENhbGxiYWNrc01hcFtyZXF1ZXN0LnJlcXVlc3RJZF0gPSBjYWxsYmFja3M7CiAgICAgIHRoaXMuY29uZHVpdC5zZW5kVXBzdHJlYW0ocmVxdWVzdC5ldmVudCwgcmVxdWVzdCk7CiAgIH07CgogICBVcHN0cmVhbUNvbmR1aXRDbGllbnRCYXNlLnByb3RvdHlwZS5fZ2V0Q2FsbGJhY2tzRm9yUmVxdWVzdCA9IGZ1bmN0aW9uKHJlcXVlc3RJZCkgewogICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fcmVxdWVzdElkQ2FsbGJhY2tzTWFwW3JlcXVlc3RJZF0gfHwgbnVsbDsKCiAgICAgIGlmIChjYWxsYmFja3MgIT0gbnVsbCkgewogICAgICAgICBkZWxldGUgdGhpcy5fcmVxdWVzdElkQ2FsbGJhY2tzTWFwW3JlcXVlc3RJZF07CiAgICAgIH0KCiAgICAgIHJldHVybiBjYWxsYmFja3M7CiAgIH07CgogICBVcHN0cmVhbUNvbmR1aXRDbGllbnRCYXNlLnByb3RvdHlwZS5faGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9nZXRDYWxsYmFja3NGb3JSZXF1ZXN0KGRhdGEucmVxdWVzdElkKTsKICAgICAgaWYgKGNhbGxiYWNrcyA9PSBudWxsKSB7CiAgICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKGRhdGEuZXJyICYmIGNhbGxiYWNrcy5mYWlsdXJlKSB7CiAgICAgICAgIGNhbGxiYWNrcy5mYWlsdXJlKGRhdGEuZXJyLCBkYXRhLmRhdGEpOwoKICAgICAgfSBlbHNlIGlmIChjYWxsYmFja3Muc3VjY2VzcykgewogICAgICAgICBjYWxsYmFja3Muc3VjY2VzcyhkYXRhLmRhdGEpOwogICAgICB9CiAgIH07CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgVXBzdHJlYW1Db25kdWl0Q2xpZW50IGV4dGVuZHMgQ2xpZW50QmFzZQogICAgKi8KICAgdmFyIFVwc3RyZWFtQ29uZHVpdENsaWVudCA9IGZ1bmN0aW9uKGNvbmR1aXQpIHsKICAgICAgVXBzdHJlYW1Db25kdWl0Q2xpZW50QmFzZS5jYWxsKHRoaXMsIGNvbmR1aXQsIGNvbm5lY3QuRXZlbnRUeXBlLkFQSV9SRVFVRVNULCBjb25uZWN0LkV2ZW50VHlwZS5BUElfUkVTUE9OU0UpOwogICB9OwogICBVcHN0cmVhbUNvbmR1aXRDbGllbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShVcHN0cmVhbUNvbmR1aXRDbGllbnRCYXNlLnByb3RvdHlwZSk7CiAgIFVwc3RyZWFtQ29uZHVpdENsaWVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVcHN0cmVhbUNvbmR1aXRDbGllbnQ7CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgVXBzdHJlYW1Db25kdWl0TWFzdGVyQ2xpZW50IGV4dGVuZHMgQ2xpZW50QmFzZQogICAgKi8KICAgdmFyIFVwc3RyZWFtQ29uZHVpdE1hc3RlckNsaWVudCA9IGZ1bmN0aW9uKGNvbmR1aXQpIHsKICAgICAgVXBzdHJlYW1Db25kdWl0Q2xpZW50QmFzZS5jYWxsKHRoaXMsIGNvbmR1aXQsIGNvbm5lY3QuRXZlbnRUeXBlLk1BU1RFUl9SRVFVRVNULCBjb25uZWN0LkV2ZW50VHlwZS5NQVNURVJfUkVTUE9OU0UpOwogICB9OwogICBVcHN0cmVhbUNvbmR1aXRNYXN0ZXJDbGllbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShVcHN0cmVhbUNvbmR1aXRDbGllbnRCYXNlLnByb3RvdHlwZSk7CiAgIFVwc3RyZWFtQ29uZHVpdE1hc3RlckNsaWVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVcHN0cmVhbUNvbmR1aXRNYXN0ZXJDbGllbnQ7CiAgIAogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBjbGFzcyBBZ2VudEFwcENsaWVudCBleHRlbmRzIENsaWVudEJhc2UKICAgKi8KICAgdmFyIEFnZW50QXBwQ2xpZW50ID0gZnVuY3Rpb24oYXV0aENvb2tpZU5hbWUsIGF1dGhUb2tlbiwgZW5kcG9pbnQpIHsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGF1dGhDb29raWVOYW1lLCAnYXV0aENvb2tpZU5hbWUnKTsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGF1dGhUb2tlbiwgJ2F1dGhUb2tlbicpOwogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZW5kcG9pbnQsICdlbmRwb2ludCcpOwogICAgICBDbGllbnRCYXNlLmNhbGwodGhpcyk7CiAgICAgIHRoaXMuZW5kcG9pbnRVcmwgPSBjb25uZWN0LmdldFVybFdpdGhQcm90b2NvbChlbmRwb2ludCk7CiAgICAgIHRoaXMuYXV0aFRva2VuID0gYXV0aFRva2VuOwogICAgICB0aGlzLmF1dGhDb29raWVOYW1lID0gYXV0aENvb2tpZU5hbWUKICAgfTsKCiAgIEFnZW50QXBwQ2xpZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xpZW50QmFzZS5wcm90b3R5cGUpOwogICBBZ2VudEFwcENsaWVudC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBZ2VudEFwcENsaWVudDsKCiAgIEFnZW50QXBwQ2xpZW50LnByb3RvdHlwZS5fY2FsbEltcGwgPSBmdW5jdGlvbihtZXRob2QsIHBhcmFtcywgY2FsbGJhY2tzKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGJlYXIgPSB7fTsKICAgICAgYmVhcltzZWxmLmF1dGhDb29raWVOYW1lXSA9IHNlbGYuYXV0aFRva2VuOwogICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyB8fCB7fSksCiAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgICAgJ1gtQW16LXRhcmdldCc6IG1ldGhvZCwKICAgICAgICAgICAgICAgJ1gtQW16LUJlYXJlcic6IEpTT04uc3RyaW5naWZ5KGJlYXIpCiAgICAgICAgIH0KICAgICAgfTsKICAgICAgY29ubmVjdC5mZXRjaChzZWxmLmVuZHBvaW50VXJsLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uKHJlcyl7CiAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzKHJlcyk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7CiAgICAgICAgIGNvbnN0IHJlYWRlciA9IGVyci5ib2R5LmdldFJlYWRlcigpOwogICAgICAgICBsZXQgYm9keSA9ICcnOwogICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7CiAgICAgICAgIHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiBwcm9jZXNzVGV4dCh7IGRvbmUsIHZhbHVlIH0pIHsKICAgICAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgICAgdmFyIGVycm9yID0gSlNPTi5wYXJzZShib2R5KTsKICAgICAgICAgICAgICAgZXJyb3Iuc3RhdHVzID0gZXJyLnN0YXR1czsKICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZhaWx1cmUoZXJyb3IpOwogICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYm9keSArPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSk7CiAgICAgICAgICAgIHJldHVybiByZWFkZXIucmVhZCgpLnRoZW4ocHJvY2Vzc1RleHQpOwogICAgICAgICB9KTsKICAgICAgfSkKICAgfTsKICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGNsYXNzIEFXU0NsaWVudCBleHRlbmRzIENsaWVudEJhc2UKICAgICovCiAgIHZhciBBV1NDbGllbnQgPSBmdW5jdGlvbihhdXRoVG9rZW4sIHJlZ2lvbiwgZW5kcG9pbnRJbikgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoYXV0aFRva2VuLCAnYXV0aFRva2VuJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChyZWdpb24sICdyZWdpb24nKTsKICAgICAgQ2xpZW50QmFzZS5jYWxsKHRoaXMpOwogICAgICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5DcmVkZW50aWFscyh7fSk7CiAgICAgIEFXUy5jb25maWcucmVnaW9uID0gcmVnaW9uOwogICAgICB0aGlzLmF1dGhUb2tlbiA9IGF1dGhUb2tlbjsKICAgICAgdmFyIGJhc2VVcmwgPSBjb25uZWN0LmdldEJhc2VVcmwoKTsKICAgICAgdmFyIGVuZHBvaW50VXJsID0gZW5kcG9pbnRJbiB8fCAoIAogICAgICAgICBiYXNlVXJsLmluY2x1ZGVzKCIuYXdzYXBwcy5jb20iKQogICAgICAgICAgICA/IGJhc2VVcmwgKyAnL2Nvbm5lY3QvYXBpJwogICAgICAgICAgICA6IGJhc2VVcmwgKyAnL2FwaScKICAgICAgKTsKICAgICAgdmFyIGVuZHBvaW50ID0gbmV3IEFXUy5FbmRwb2ludChlbmRwb2ludFVybCk7CiAgICAgIHRoaXMuY2xpZW50ID0gbmV3IEFXUy5Db25uZWN0KHtlbmRwb2ludDogZW5kcG9pbnR9KTsKICAgfTsKICAgQVdTQ2xpZW50LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xpZW50QmFzZS5wcm90b3R5cGUpOwogICBBV1NDbGllbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQVdTQ2xpZW50OwoKICAgQVdTQ2xpZW50LnByb3RvdHlwZS5fY2FsbEltcGwgPSBmdW5jdGlvbihtZXRob2QsIHBhcmFtcywgY2FsbGJhY2tzKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIGxvZyA9IGNvbm5lY3QuZ2V0TG9nKCk7CgogICAgICBpZiAoISBjb25uZWN0LmNvbnRhaW5zKHRoaXMuY2xpZW50LCBtZXRob2QpKSB7CiAgICAgICAgIHZhciBtZXNzYWdlID0gY29ubmVjdC5zcHJpbnRmKCdObyBzdWNoIG1ldGhvZCBleGlzdHMgb24gQVdTIGNsaWVudDogJXMnLCBtZXRob2QpOwogICAgICAgICBjYWxsYmFja3MuZmFpbHVyZShuZXcgY29ubmVjdC5WYWx1ZUVycm9yKG1lc3NhZ2UpLCB7bWVzc2FnZTogbWVzc2FnZX0pOwoKICAgICAgfSBlbHNlIHsKICAgICAgICAgcGFyYW1zID0gdGhpcy5fdHJhbnNsYXRlUGFyYW1zKG1ldGhvZCwgcGFyYW1zKTsKCiAgICAgICAgIGxvZy50cmFjZSgiQVdTQ2xpZW50OiAtLT4gQ2FsbGluZyBvcGVyYXRpb24gJyVzJyIsIG1ldGhvZCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKCiAgICAgICAgIHRoaXMuY2xpZW50W21ldGhvZF0ocGFyYW1zKQogICAgICAgICAgICAub24oJ2J1aWxkJywgZnVuY3Rpb24ocmVxdWVzdCkgewogICAgICAgICAgICAgICByZXF1ZXN0Lmh0dHBSZXF1ZXN0LmhlYWRlcnNbJ1gtQW16LUJlYXJlciddID0gc2VsZi5hdXRoVG9rZW47CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgIC5zZW5kKGZ1bmN0aW9uKGVyciwgZGF0YSkgewogICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gY29ubmVjdC5DVElFeGNlcHRpb25zLlVOQVVUSE9SSVpFRF9FWENFUFRJT04pIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmF1dGhGYWlsdXJlKCk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2tzLmFjY2Vzc0RlbmllZCAmJiAoZXJyLmNvZGUgPT09IGNvbm5lY3QuQ1RJRXhjZXB0aW9ucy5BQ0NFU1NfREVOSUVEX0VYQ0VQVElPTiB8fCBlcnIuc3RhdHVzQ29kZSA9PT0gNDAzKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MuYWNjZXNzRGVuaWVkKCk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbid0IHBhc3MgZXJyIGRpcmVjdGx5IHRvIHBvc3RNZXNzYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3RNZXNzYWdlKCkgdHJpZXMgdG8gY2xvbmUgdGhlIGVyciBvYmplY3QgYW5kIGZhaWxlZC4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVmZXIgdG8gaHR0cHM6Ly9naXRodWIuY29tL2dvYXRzbGFja2VyL2FsdC1kZXZ0b29sL2lzc3Vlcy81CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICBlcnJvci50eXBlID0gZXJyLmNvZGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBlcnIuc3RhY2sgPyBlcnIuc3RhY2suc3BsaXQoJ1xuJykgOiBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLmZhaWx1cmUoZXJyb3IsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBsb2cudHJhY2UoIkFXU0NsaWVudDogPC0tIE9wZXJhdGlvbiAnJXMnIGZhaWxlZDogJXMiLCBtZXRob2QsIEpTT04uc3RyaW5naWZ5KGVycikpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CgogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICBsb2cudHJhY2UoIkFXU0NsaWVudDogPC0tIE9wZXJhdGlvbiAnJXMnIHN1Y2NlZWRlZC4iLCBtZXRob2QpLndpdGhPYmplY3QoZGF0YSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MoZGF0YSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJGYWlsZWQgdG8gaGFuZGxlIEFXUyBBUEkgcmVxdWVzdCBmb3IgbWV0aG9kICVzIiwgbWV0aG9kKQogICAgICAgICAgICAgICAgICAgICAgICAud2l0aEV4Y2VwdGlvbihlKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICB9CiAgIH07CgogICBBV1NDbGllbnQucHJvdG90eXBlLl9yZXF1aXJlc0F1dGhlbnRpY2F0aW9uUGFyYW0gPSBmdW5jdGlvbiAobWV0aG9kKSB7CiAgICAgIHJldHVybiBtZXRob2QgIT09IGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5DT01QTEVURV9DT05UQUNUICYmCiAgICAgICAgIG1ldGhvZCAhPT0gY29ubmVjdC5DbGllbnRNZXRob2RzLkNMRUFSX0NPTlRBQ1QgJiYKICAgICAgICAgbWV0aG9kICE9PSBjb25uZWN0LkNsaWVudE1ldGhvZHMuUkVKRUNUX0NPTlRBQ1QgJiYKICAgICAgICAgbWV0aG9kICE9PSBjb25uZWN0LkNsaWVudE1ldGhvZHMuQ1JFQVRFX1RBU0tfQ09OVEFDVDsKICAgfTsKCiAgIEFXU0NsaWVudC5wcm90b3R5cGUuX3RyYW5zbGF0ZVBhcmFtcyA9IGZ1bmN0aW9uKG1ldGhvZCwgcGFyYW1zKSB7CiAgICAgIHN3aXRjaCAobWV0aG9kKSB7CiAgICAgICAgIGNhc2UgY29ubmVjdC5DbGllbnRNZXRob2RzLlVQREFURV9BR0VOVF9DT05GSUdVUkFUSU9OOgogICAgICAgICAgICBwYXJhbXMuY29uZmlndXJhdGlvbiA9IHRoaXMuX3RyYW5zbGF0ZUFnZW50Q29uZmlndXJhdGlvbihwYXJhbXMuY29uZmlndXJhdGlvbik7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgY2FzZSBjb25uZWN0LkNsaWVudE1ldGhvZHMuU0VORF9TT0ZUUEhPTkVfQ0FMTF9NRVRSSUNTOgogICAgICAgICAgICBwYXJhbXMuc29mdHBob25lU3RyZWFtU3RhdGlzdGljcyA9IHRoaXMuX3RyYW5zbGF0ZVNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3MoCiAgICAgICAgICAgICAgICAgIHBhcmFtcy5zb2Z0cGhvbmVTdHJlYW1TdGF0aXN0aWNzKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICBjYXNlIGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5TRU5EX1NPRlRQSE9ORV9DQUxMX1JFUE9SVDoKICAgICAgICAgICAgcGFyYW1zLnJlcG9ydCA9IHRoaXMuX3RyYW5zbGF0ZVNvZnRwaG9uZUNhbGxSZXBvcnQocGFyYW1zLnJlcG9ydCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9yZXF1aXJlc0F1dGhlbnRpY2F0aW9uUGFyYW0obWV0aG9kKSkgewogICAgICAgICBwYXJhbXMuYXV0aGVudGljYXRpb24gPSB7CiAgICAgICAgICAgIGF1dGhUb2tlbjogdGhpcy5hdXRoVG9rZW4KICAgICAgICAgfTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBhcmFtczsKICAgfTsKCiAgIEFXU0NsaWVudC5wcm90b3R5cGUuX3RyYW5zbGF0ZUFnZW50Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uKGNvbmZpZykgewogICAgICByZXR1cm4gewogICAgICAgICBuYW1lOiBjb25maWcubmFtZSwKICAgICAgICAgc29mdHBob25lRW5hYmxlZDogY29uZmlnLnNvZnRwaG9uZUVuYWJsZWQsCiAgICAgICAgIHNvZnRwaG9uZUF1dG9BY2NlcHQ6IGNvbmZpZy5zb2Z0cGhvbmVBdXRvQWNjZXB0LAogICAgICAgICBleHRlbnNpb246IGNvbmZpZy5leHRlbnNpb24sCiAgICAgICAgIHJvdXRpbmdQcm9maWxlOiB0aGlzLl90cmFuc2xhdGVSb3V0aW5nUHJvZmlsZShjb25maWcucm91dGluZ1Byb2ZpbGUpLAogICAgICAgICBhZ2VudFByZWZlcmVuY2VzOiBjb25maWcuYWdlbnRQcmVmZXJlbmNlcwogICAgICB9OwogICB9OwoKICAgQVdTQ2xpZW50LnByb3RvdHlwZS5fdHJhbnNsYXRlUm91dGluZ1Byb2ZpbGUgPSBmdW5jdGlvbihwcm9maWxlKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgIG5hbWU6IHByb2ZpbGUubmFtZSwKICAgICAgICAgcm91dGluZ1Byb2ZpbGVBUk46IHByb2ZpbGUucm91dGluZ1Byb2ZpbGVBUk4sCiAgICAgICAgIGRlZmF1bHRPdXRib3VuZFF1ZXVlOiB0aGlzLl90cmFuc2xhdGVRdWV1ZShwcm9maWxlLmRlZmF1bHRPdXRib3VuZFF1ZXVlKQogICAgICB9OwogICB9OwoKICAgQVdTQ2xpZW50LnByb3RvdHlwZS5fdHJhbnNsYXRlUXVldWUgPSBmdW5jdGlvbihxdWV1ZSkgewogICAgICByZXR1cm4gewogICAgICAgICBxdWV1ZUFSTjogICBxdWV1ZS5xdWV1ZUFSTiwKICAgICAgICAgbmFtZTogICAgICAgcXVldWUubmFtZQogICAgICB9OwogICB9OwoKICAgQVdTQ2xpZW50LnByb3RvdHlwZS5fdHJhbnNsYXRlU29mdHBob25lU3RyZWFtU3RhdGlzdGljcyA9IGZ1bmN0aW9uKHN0YXRzKSB7CiAgICAgIHN0YXRzLmZvckVhY2goZnVuY3Rpb24oc3RhdCkgewogICAgICAgICBpZiAoJ3BhY2tldHNDb3VudCcgaW4gc3RhdCkgewogICAgICAgICAgICBzdGF0LnBhY2tldENvdW50ID0gc3RhdC5wYWNrZXRzQ291bnQ7CiAgICAgICAgICAgIGRlbGV0ZSBzdGF0LnBhY2tldHNDb3VudDsKICAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiBzdGF0czsKICAgfTsKCiAgIEFXU0NsaWVudC5wcm90b3R5cGUuX3RyYW5zbGF0ZVNvZnRwaG9uZUNhbGxSZXBvcnQgPSBmdW5jdGlvbihyZXBvcnQpIHsKICAgICAgaWYgKCdoYW5kc2hha2luZ1RpbWVNaWxsaXMnIGluIHJlcG9ydCkgewogICAgICAgICByZXBvcnQuaGFuZHNoYWtlVGltZU1pbGxpcyA9IHJlcG9ydC5oYW5kc2hha2luZ1RpbWVNaWxsaXM7CiAgICAgICAgIGRlbGV0ZSByZXBvcnQuaGFuZHNoYWtpbmdUaW1lTWlsbGlzOwogICAgICB9CgogICAgICBpZiAoJ3ByZVRhbGtpbmdUaW1lTWlsbGlzJyBpbiByZXBvcnQpIHsKICAgICAgICAgcmVwb3J0LnByZVRhbGtUaW1lTWlsbGlzID0gcmVwb3J0LnByZVRhbGtpbmdUaW1lTWlsbGlzOwogICAgICAgICBkZWxldGUgcmVwb3J0LnByZVRhbGtpbmdUaW1lTWlsbGlzOwogICAgICB9CgogICAgICBpZiAoJ2hhbmRzaGFraW5nRmFpbHVyZScgaW4gcmVwb3J0KSB7CiAgICAgICAgIHJlcG9ydC5oYW5kc2hha2VGYWlsdXJlID0gcmVwb3J0LmhhbmRzaGFraW5nRmFpbHVyZTsKICAgICAgICAgZGVsZXRlIHJlcG9ydC5oYW5kc2hha2luZ0ZhaWx1cmU7CiAgICAgIH0KCiAgICAgIGlmICgndGFsa2luZ1RpbWVNaWxsaXMnIGluIHJlcG9ydCkgewogICAgICAgICByZXBvcnQudGFsa1RpbWVNaWxsaXMgPSByZXBvcnQudGFsa2luZ1RpbWVNaWxsaXM7CiAgICAgICAgIGRlbGV0ZSByZXBvcnQudGFsa2luZ1RpbWVNaWxsaXM7CiAgICAgIH0KCiAgICAgIHJlcG9ydC5zb2Z0cGhvbmVTdHJlYW1TdGF0aXN0aWNzID0gdGhpcy5fdHJhbnNsYXRlU29mdHBob25lU3RyZWFtU3RhdGlzdGljcygKICAgICAgICAgICAgcmVwb3J0LnNvZnRwaG9uZVN0cmVhbVN0YXRpc3RpY3MpOwoKICAgICAgcmV0dXJuIHJlcG9ydDsKICAgfTsKCiAgIGNvbm5lY3QuQ2xpZW50QmFzZSA9IENsaWVudEJhc2U7CiAgIGNvbm5lY3QuTnVsbENsaWVudCA9IE51bGxDbGllbnQ7CiAgIGNvbm5lY3QuVXBzdHJlYW1Db25kdWl0Q2xpZW50ID0gVXBzdHJlYW1Db25kdWl0Q2xpZW50OwogICBjb25uZWN0LlVwc3RyZWFtQ29uZHVpdE1hc3RlckNsaWVudCA9IFVwc3RyZWFtQ29uZHVpdE1hc3RlckNsaWVudDsKICAgY29ubmVjdC5BV1NDbGllbnQgPSBBV1NDbGllbnQ7CiAgIGNvbm5lY3QuQWdlbnRBcHBDbGllbnQgPSBBZ2VudEFwcENsaWVudDsKCn0pKCk7CgoKLyoqKi8gfSksCgovKioqLyA4OTU6Ci8qKiovICgoKSA9PiB7CgovKgogKiBDb3B5cmlnaHQgMjAxNC0yMDE3IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wCiAqLwooZnVuY3Rpb24gKCkgewogIHZhciBnbG9iYWwgPSB0aGlzOwogIGNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTsKICBnbG9iYWwuY29ubmVjdCA9IGNvbm5lY3Q7CiAgZ2xvYmFsLmxpbHkgPSBjb25uZWN0OwoKICBjb25uZWN0LmNvcmUgPSB7fTsKICBjb25uZWN0LmNvcmUuaW5pdGlhbGl6ZWQgPSBmYWxzZTsKICBjb25uZWN0LnZlcnNpb24gPSAiU1RSRUFNU19WRVJTSU9OIjsKICBjb25uZWN0LkRFRkFVTFRfQkFUQ0hfU0laRSA9IDUwMDsKIAogIHZhciBDQ1BfU1lOX1RJTUVPVVQgPSAxMDAwOyAvLyAxIHNlYwogIHZhciBDQ1BfQUNLX1RJTUVPVVQgPSAzMDAwOyAvLyAzIHNlYwogIHZhciBDQ1BfTE9BRF9USU1FT1VUID0gNTAwMDsgLy8gNSBzZWMKICB2YXIgQ0NQX0lGUkFNRV9SRUZSRVNIX0lOVEVSVkFMID0gNTAwMDsgLy8gNSBzZWMKICB2YXIgQ0NQX0RSX0lGUkFNRV9SRUZSRVNIX0lOVEVSVkFMID0gMTAwMDA7IC8vMTAgcwogIHZhciBDQ1BfSUZSQU1FX1JFRlJFU0hfTElNSVQgPSA2OyAvLyA2IGF0dGVtcHRzCiAgdmFyIENDUF9JRlJBTUVfTkFNRSA9ICdBbWF6b24gQ29ubmVjdCBDQ1AnOwogCiAgdmFyIExFR0FDWV9MT0dJTl9VUkxfUEFUVEVSTiA9ICJodHRwczovL3thbGlhc30uYXdzYXBwcy5jb20vYXV0aC8/Y2xpZW50X2lkPXtjbGllbnRfaWR9JnJlZGlyZWN0X3VyaT17cmVkaXJlY3R9IjsKICB2YXIgQ0xJRU5UX0lEX01BUCA9IHsKICAgICJ1cy1lYXN0LTEiOiAiMDY5MTlmNGZkOGVkMzI0ZSIKICB9OwogCiAgdmFyIEFVVEhPUklaRV9FTkRQT0lOVCA9ICIvYXV0aC9hdXRob3JpemUiOwogIHZhciBMRUdBQ1lfQVVUSE9SSVpFX0VORFBPSU5UID0gIi9jb25uZWN0L2F1dGgvYXV0aG9yaXplIjsKICB2YXIgQVVUSE9SSVpFX1JFVFJZX0lOVEVSVkFMID0gMjAwMDsKICB2YXIgQVVUSE9SSVpFX01BWF9SRVRSWSA9IDU7CiAKICB2YXIgTEVHQUNZX1dISVRFTElTVEVEX09SSUdJTlNfRU5EUE9JTlQgPSAiL2Nvbm5lY3Qvd2hpdGVsaXN0ZWQtb3JpZ2lucyI7CiAgdmFyIFdISVRFTElTVEVEX09SSUdJTlNfRU5EUE9JTlQgPSAiL3doaXRlbGlzdGVkLW9yaWdpbnMiOwogIHZhciBXSElURUxJU1RFRF9PUklHSU5TX1JFVFJZX0lOVEVSVkFMID0gMjAwMDsKICB2YXIgV0hJVEVMSVNURURfT1JJR0lOU19NQVhfUkVUUlkgPSA1OwoKICB2YXIgQ1NNX0lGUkFNRV9SRUZSRVNIX0FUVEVNUFRTID0gJ0lmcmFtZVJlZnJlc2hBdHRlbXB0cyc7CiAgdmFyIENTTV9JRlJBTUVfSU5JVElBTElaQVRJT05fU1VDQ0VTUyA9ICdJZnJhbWVJbml0aWFsaXphdGlvblN1Y2Nlc3MnOwogIHZhciBDU01fSUZSQU1FX0lOSVRJQUxJWkFUSU9OX1RJTUUgPSAnSWZyYW1lSW5pdGlhbGl6YXRpb25UaW1lJzsKCiAgdmFyIENPTk5FQ1RFRF9DQ1BTX1NJTkdMRV9UQUIgPSAnQ29ubmVjdGVkQ0NQU2luZ2xlVGFiQ291bnQnOwoKICBjb25uZWN0Lm51bWJlck9mQ29ubmVjdGVkQ0NQcyA9IDA7CiAgY29ubmVjdC5udW1iZXJPZkNvbm5lY3RlZENDUHNJblRoaXNUYWIgPSAwOwoKICBjb25uZWN0LmNvcmUuTUFYX0FVVEhPUklaRV9SRVRSWV9DT1VOVF9GT1JfU0VTU0lPTiA9IDM7CiAgY29ubmVjdC5jb3JlLk1BWF9DVElfQVVUSF9SRVRSWV9DT1VOVCA9IDEwOwogIGNvbm5lY3QuY29yZS5jdGlBdXRoUmV0cnlDb3VudCA9IDA7CiAgY29ubmVjdC5jb3JlLmF1dGhvcml6ZVRpbWVvdXRJZCA9IG51bGw7CiAgY29ubmVjdC5jb3JlLmN0aVRpbWVvdXRJZCA9IG51bGw7CgogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGVudW0gU2Vzc2lvblN0b3JhZ2VLZXlzCiAgICovCiAgY29ubmVjdC5TZXNzaW9uU3RvcmFnZUtleXMgPSBjb25uZWN0Lm1ha2VFbnVtKFsKICAgICd0YWJfaWQnLAogICAgJ2F1dGhvcml6ZV9yZXRyeV9jb3VudCcsCiAgXSk7CgogIC8qKgogICAqIEBkZXByZWNhdGVkCiAgICogVGhpcyBmdW5jdGlvbiB3YXMgb25seSBtZWFudCBmb3IgaW50ZXJuYWwgdXNlLiAKICAgKiBUaGUgbmFtZSBpcyBtaXNsZWFkaW5nIGZvciB3aGF0IGl0IHNob3VsZCBkby4KICAgKiBJbnRlcm5hbGx5IHdlIGhhdmUgcmVwbGFjZWQgaXRzIHVzYWdlIHdpdGggYGdldExvZ2luVXJsYC4KICAgKi8KICB2YXIgY3JlYXRlTG9naW5VcmwgPSBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICB2YXIgcmVkaXJlY3QgPSAiaHR0cHM6Ly9saWx5LnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3Rhdy9hdXRoL2NvZGUiOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHJlZGlyZWN0KTsKIAogICAgaWYgKHBhcmFtcy5sb2dpblVybCkgewogICAgICByZXR1cm4gcGFyYW1zLmxvZ2luVXJsCiAgICB9IGVsc2UgaWYgKHBhcmFtcy5hbGlhcykgewogICAgICBsb2cud2FybigiVGhlIGBhbGlhc2AgcGFyYW0gaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSBleHBlY3RlZCB0byBmdW5jdGlvbiBwcm9wZXJseS4gUGxlYXNlIHVzZSBgY2NwVXJsYCBvciBgbG9naW5VcmxgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FtYXpvbi1jb25uZWN0L2FtYXpvbi1jb25uZWN0LXN0cmVhbXMvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI2Nvbm5lY3Rjb3JlaW5pdGNjcCBmb3IgdmFsaWQgcGFyYW1ldGVycy4iKTsKICAgICAgcmV0dXJuIExFR0FDWV9MT0dJTl9VUkxfUEFUVEVSTgogICAgICAgIC5yZXBsYWNlKCJ7YWxpYXN9IiwgcGFyYW1zLmFsaWFzKQogICAgICAgIC5yZXBsYWNlKCJ7Y2xpZW50X2lkfSIsIENMSUVOVF9JRF9NQVBbInVzLWVhc3QtMSJdKQogICAgICAgIC5yZXBsYWNlKCJ7cmVkaXJlY3R9IiwgZ2xvYmFsLmVuY29kZVVSSUNvbXBvbmVudCgKICAgICAgICAgIHJlZGlyZWN0KSk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gcGFyYW1zLmNjcFVybDsKICAgIH0KICB9OwoKICAvKioKICAgKiBSZXBsYWNlcyBgY3JlYXRlTG9naW5VcmxgLCBhcyB0aGF0IGZ1bmN0aW9uJ3MgbmFtZSB3YXMgbWlzbGVhZGluZy4KICAgKiBUaGUgYHBhcmFtcy5hbGlhc2AgcGFyYW1ldGVyIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSByZWZyYWluIGZyb20gdXNpbmcgaXQuCiAgICovCiAgdmFyIGdldExvZ2luVXJsID0gZnVuY3Rpb24gKHBhcmFtcykgewogICAgdmFyIHJlZGlyZWN0ID0gImh0dHBzOi8vbGlseS51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS90YXcvYXV0aC9jb2RlIjsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChyZWRpcmVjdCk7CiAgICBpZiAocGFyYW1zLmxvZ2luVXJsKSB7CiAgICAgIHJldHVybiBwYXJhbXMubG9naW5VcmwKICAgIH0gZWxzZSBpZiAocGFyYW1zLmFsaWFzKSB7CiAgICAgIGxvZy53YXJuKCJUaGUgYGFsaWFzYCBwYXJhbSBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIGV4cGVjdGVkIHRvIGZ1bmN0aW9uIHByb3Blcmx5LiBQbGVhc2UgdXNlIGBjY3BVcmxgIG9yIGBsb2dpblVybGAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW1hem9uLWNvbm5lY3QvYW1hem9uLWNvbm5lY3Qtc3RyZWFtcy9ibG9iL21hc3Rlci9SRUFETUUubWQjY29ubmVjdGNvcmVpbml0Y2NwIGZvciB2YWxpZCBwYXJhbWV0ZXJzLiIpOwogICAgICByZXR1cm4gTEVHQUNZX0xPR0lOX1VSTF9QQVRURVJOCiAgICAgICAgLnJlcGxhY2UoInthbGlhc30iLCBwYXJhbXMuYWxpYXMpCiAgICAgICAgLnJlcGxhY2UoIntjbGllbnRfaWR9IiwgQ0xJRU5UX0lEX01BUFsidXMtZWFzdC0xIl0pCiAgICAgICAgLnJlcGxhY2UoIntyZWRpcmVjdH0iLCBnbG9iYWwuZW5jb2RlVVJJQ29tcG9uZW50KAogICAgICAgICAgcmVkaXJlY3QpKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBwYXJhbXMuY2NwVXJsOwogICAgfQogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKiBSZXR1cm5zIHNjaGVtZTovL2hvc3Q6cG9ydCBmb3IgYSBnaXZlbiB1cmwKICAqLwogIGZ1bmN0aW9uIHNhbml0aXplRG9tYWluKHVybCkgewogICAgdmFyIGRvbWFpbiA9IHVybC5tYXRjaCgvXig/Omh0dHBzPzpcL1wvKT8oPzpbXkBcbl0rQCk/KD86d3d3XC4pPyhbXjpcL1xuP10rKS9pZyk7CiAgICByZXR1cm4gZG9tYWluLmxlbmd0aCA/IGRvbWFpblswXSA6ICIiOwogIH0KIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogUHJpbnQgYSB3YXJuaW5nIG1lc3NhZ2UgaWYgdGhlIENvbm5lY3QgY29yZSBpcyBub3QgaW5pdGlhbGl6ZWQuCiAgICAqLwogIGNvbm5lY3QuY29yZS5jaGVja05vdEluaXRpYWxpemVkID0gZnVuY3Rpb24gKCkgewogICAgaWYgKGNvbm5lY3QuY29yZS5pbml0aWFsaXplZCkgewogICAgICB2YXIgbG9nID0gY29ubmVjdC5nZXRMb2coKTsKICAgICAgbG9nLndhcm4oIkNvbm5lY3QgY29yZSBhbHJlYWR5IGluaXRpYWxpemVkLCBvbmx5IG5lZWRzIHRvIGJlIGluaXRpYWxpemVkIG9uY2UuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KICB9OwogCiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKiBESVNBU1RFUiBSRUNPVkVSWSAKICAqLwogIAogIHZhciBtYWtlQWdlbnRPZmZsaW5lID0gZnVuY3Rpb24oYWdlbnQsIGNhbGxiYWNrcykgewogICAgdmFyIG9mZmxpbmVTdGF0ZSA9IGFnZW50LmdldEFnZW50U3RhdGVzKCkuZmluZChmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnR5cGUgPT09IGNvbm5lY3QuQWdlbnRTdGF0ZVR5cGUuT0ZGTElORTsKICAgIH0pOwogICAgYWdlbnQuc2V0U3RhdGUob2ZmbGluZVN0YXRlLCBjYWxsYmFja3MpOyAgIAogIH0KIAogIC8vIFN1cHByZXNzIENvbnRhY3RzIGZ1bmN0aW9uIAogIC8vIFRoaXMgaXMgdXNlZCBieSBEaXNhc3RlciBSZWNvdmVyeSBhcyBhIHNhZmVndWFyZCB0byBub3Qgc3VyZmFjZSBpbmNvbWluZyBjYWxscy9jaGF0cyB0byBVSQogIC8vIAogIHZhciBzdXBwcmVzc0NvbnRhY3RzID0gZnVuY3Rpb24gKGlzU3VwcHJlc3NlZCkgewogICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJbRGlzYXN0ZXIgUmVjb3ZlcnldIFNpZ25hbCBzaGFyZWR3b3JrZXIgdG8gc2V0IGNvbnRhY3RzIHN1cHByZXNzb3IgdG8gJXMgZm9yIGluc3RhbmNlICVzLiIsIAogICAgICBpc1N1cHByZXNzZWQsIGNvbm5lY3QuY29yZS5yZWdpb24KICAgICkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuU1VQUFJFU1MsIHsKICAgICAgc3VwcHJlc3M6IGlzU3VwcHJlc3NlZAogICAgfSk7CiAgfQogCiAgdmFyIHNldEZvcmNlT2ZmbGluZVVwc3RyZWFtID0gZnVuY3Rpb24ob2ZmbGluZSkgewogICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJbRElTQVNURVIgUkVDT1ZFUlldIFNpZ25hbCBzaGFyZWR3b3JrZXIgdG8gc2V0IGZvcmNlT2ZmbGluZSB0byAlcyBmb3IgaW5zdGFuY2UgJXMuIiwgCiAgICAgIG9mZmxpbmUsIGNvbm5lY3QuY29yZS5yZWdpb24KICAgICkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuRk9SQ0VfT0ZGTElORSwgewogICAgICBvZmZsaW5lOiBvZmZsaW5lCiAgICB9KTsKICB9CiAKICAvLyBGb3JjZSB0aGUgaW5zdGFuY2UgdG8gYmUgb2ZmbGluZS4gCiAgLy8gVGhpcyB0cmllcyB0byBkaXNjb25uZWN0IGFsbCBjb250YWN0cyAoSGFyZCBzdG9wKQogIC8vIGlmIGR1ZSB0byBhIGZhaWx1cmUgKHRoZSBiYWNrZW5kIGlzIG5vdCByZWFjaGFibGUpLCBzaWduYWwgdGhlIHNoYXJlZCB3b3JrZXIgdG8gZm9yY2Vfb2ZmbGluZSB3aGVuIGl0IHdha2VzIHVwIGFnYWluCiAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgb25seSBiZSByYW4gZnJvbSBuYXRpdmUgQ0NQIGZvciBkaXNjb25uZWN0aW5nIGNoYXRzLgogIHZhciBmb3JjZU9mZmxpbmUgPSBmdW5jdGlvbigpIHsKICAgIHZhciBsb2cgPSBjb25uZWN0LmdldExvZygpOwogICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gQXR0ZW1wdGluZyB0byBmb3JjZSBpbnN0YW5jZSAlcyBvZmZsaW5lIiwgY29ubmVjdC5jb3JlLnJlZ2lvbikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIGNvbm5lY3QuYWdlbnQoZnVuY3Rpb24oYWdlbnQpIHsKICAgICAgdmFyIGNvbnRhY3RDbG9zZWQgPSAwOwogICAgICB2YXIgY29udGFjdHMgPSBhZ2VudC5nZXRDb250YWN0cygpOwogICAgICBpZiAoY29udGFjdHMubGVuZ3RoKSB7CiAgICAgICAgY29udGFjdHMuZm9yRWFjaChmdW5jdGlvbihjb250YWN0KSAKICAgICAgICAgIHsKICAgICAgICAgICAgY29udGFjdC5nZXRBZ2VudENvbm5lY3Rpb24oKS5kZXN0cm95KHsKICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCBhY3RpdmUgY29udGFjdHMgYXJlIGNsb3NlZAogICAgICAgICAgICAgICAgaWYgKCsrY29udGFjdENsb3NlZCA9PT0gY29udGFjdHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgIHNldEZvcmNlT2ZmbGluZVVwc3RyZWFtKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgLy8gSXQncyBvayBpZiB3ZSdyZSBub3QgYWJsZSB0byBwdXQgdGhlIGFnZW50IG9mZmxpbmUuIAogICAgICAgICAgICAgICAgICAvLyBzaW5jZSB3ZSdyZSBzdXBwcmVzc2luZyB0aGUgYWdlbnRzIGNvbnRhY3RzIGFscmVhZHkuIAogICAgICAgICAgICAgICAgICBtYWtlQWdlbnRPZmZsaW5lKGFnZW50KTsKICAgICAgICAgICAgICAgICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gSW5zdGFuY2UgJXMgaXMgbm93IG9mZmxpbmUiLCBjb25uZWN0LmNvcmUucmVnaW9uKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgICAgICBsb2cud2FybigiW0Rpc2FzdGVyIFJlY292ZXJ5XSBBbiBlcnJvciBvY2N1cmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gZm9yY2UgdGhpcyBpbnN0YW5jZSB0byBvZmZsaW5lIGluIHJlZ2lvbiAlcyIsIGNvbm5lY3QuY29yZS5yZWdpb24pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICBsb2cud2FybihlcnIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICAvLyBzaWduYWwgdGhlIHNoYXJlZHdvcmtlciB0byBjYWxsIGZvcmNlT2ZmbGluZSBhZ2FpbiB3aGVuIG5ldHdvcmsgY29ubmVjdGlvbiAKICAgICAgICAgICAgICAgIC8vIGhhcyBiZWVuIHJlLWVzdGFibGlzaGVkICh0aGlzIGhhcHBlbnMgaW4gY2FzZSBvZiBuZXR3b3JrIG9yIGJhY2tlbmQgZmFpbHVyZXMpCiAgICAgICAgICAgICAgICBzZXRGb3JjZU9mZmxpbmVVcHN0cmVhbSh0cnVlKTsKICAgICAgICAgICAgfX0pOwogICAgICAgICAgfQogICAgICAgICkgICAgICAgIAogICAgICB9IGVsc2UgewogICAgICAgIHNldEZvcmNlT2ZmbGluZVVwc3RyZWFtKGZhbHNlKTsKICAgICAgICBtYWtlQWdlbnRPZmZsaW5lKGFnZW50KTsKICAgICAgICBsb2cuaW5mbygiW0Rpc2FzdGVyIFJlY292ZXJ5XSBJbnN0YW5jZSAlcyBpcyBub3cgb2ZmbGluZSIsIGNvbm5lY3QuY29yZS5yZWdpb24pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIH0KICAgIH0pOwogIH0KIAogIC8vSW5pdGlhdGUgRGlzYXN0ZXIgUmVjb3ZlcnkgKFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gY3VzdG9tQ0NQIHRoYXQgYXJlIERSIGVuYWJsZWQpCiAgY29ubmVjdC5jb3JlLmluaXREaXNhc3RlclJlY292ZXJ5ID0gZnVuY3Rpb24ocGFyYW1zKSB7CiAgICB2YXIgbG9nID0gY29ubmVjdC5nZXRMb2coKTsKICAgIGNvbm5lY3QuY29yZS5yZWdpb24gPSBwYXJhbXMucmVnaW9uOwogICAgY29ubmVjdC5jb3JlLnN1cHByZXNzQ29udGFjdHMgPSBzdXBwcmVzc0NvbnRhY3RzOyAgCiAgICBjb25uZWN0LmNvcmUuZm9yY2VPZmZsaW5lID0gZm9yY2VPZmZsaW5lOwoKICAgIC8vUmVnaXN0ZXIgaWZyYW1lIGxpc3RuZXIgdG8gc2V0IG5hdGl2ZSBDQ1Agb2ZmbGluZQogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25Eb3duc3RyZWFtKGNvbm5lY3QuRGlzYXN0ZXJSZWNvdmVyeUV2ZW50cy5TRVRfT0ZGTElORSwgZnVuY3Rpb24oKSB7CiAgICAgIGNvbm5lY3QuY29yZS5mb3JjZU9mZmxpbmUoKTsKICAgIH0pOwogCiAgICAvLyBSZWdpc3RlciBFdmVudCBsaXN0bmVyIHRvIEZvcmNlIHRoZSBBZ2VudCB0byBiZSBvZmZsaW5lIHdoZW4gc2hhcmVkIHdvcmtlciByZWNvdmVycyBmcm9tIG5ldHdvcmsgZmFpbHVyZQogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuRk9SQ0VfT0ZGTElORSwgZnVuY3Rpb24oKSB7CiAgICAgIGNvbm5lY3QuY29yZS5mb3JjZU9mZmxpbmUoKTsKICAgIH0pOwoKICAgIGNvbm5lY3QuaWZNYXN0ZXIoY29ubmVjdC5NYXN0ZXJUb3BpY3MuU09GVFBIT05FLCAKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gSW5pdGlhbGl6aW5nIHJlZ2lvbiAlcyBhcyBwYXJ0IG9mIGEgRGlzYXN0ZXIgUmVjb3ZlcnkgZmxlZXQiLCBjb25uZWN0LmNvcmUucmVnaW9uKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9LCAKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gJXMgYWxyZWFkeSBwYXJ0IG9mIGEgRGlzYXN0ZXIgUmVjb3ZlcnkgZmxlZXQiLCBjb25uZWN0LmNvcmUucmVnaW9uKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9KTsKCiAgICBpZiAoIXBhcmFtcy5pc1ByaW1hcnkpIHsKICAgICAgY29ubmVjdC5jb3JlLnN1cHByZXNzQ29udGFjdHModHJ1ZSk7CiAgICAgIGNvbm5lY3QuY29yZS5mb3JjZU9mZmxpbmUoKTsKICAgICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gJXMgaW5zdGFuY2UgaXMgc2V0IHRvIHN0YW5kLWJ5IiwgY29ubmVjdC5jb3JlLnJlZ2lvbikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbm5lY3QuY29yZS5zdXBwcmVzc0NvbnRhY3RzKGZhbHNlKTsKICAgICAgbG9nLmluZm8oIltEaXNhc3RlciBSZWNvdmVyeV0gJXMgaW5zdGFuY2UgaXMgc2V0IHRvIHByaW1hcnkiLCBjb25uZWN0LmNvcmUucmVnaW9uKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgfQogIH0KIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBCYXNpYyBDb25uZWN0IGNsaWVudCBpbml0aWFsaXphdGlvbi4KICAgKiBTaG91bGQgYmUgdXNlZCBvbmx5IGJ5IHRoZSBBUEkgU2hhcmVkIFdvcmtlci4KICAgKi8KICBjb25uZWN0LmNvcmUuaW5pdCA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgIGNvbm5lY3QuY29yZS5ldmVudEJ1cyA9IG5ldyBjb25uZWN0LkV2ZW50QnVzKCk7CiAgICBjb25uZWN0LmNvcmUuYWdlbnREYXRhUHJvdmlkZXIgPSBuZXcgQWdlbnREYXRhUHJvdmlkZXIoY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkpOwogICAgY29ubmVjdC5jb3JlLmluaXRDbGllbnQocGFyYW1zKTsKICAgIGNvbm5lY3QuY29yZS5pbml0QWdlbnRBcHBDbGllbnQocGFyYW1zKTsKICAgIGNvbm5lY3QuY29yZS5pbml0aWFsaXplZCA9IHRydWU7CiAgfTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBJbml0aWFsaXplZCBBV1MgY2xpZW50CiAgICogU2hvdWxkIGJlIHVzZWQgYnkgU2hhcmVkIFdvcmtlciB0byB1cGRhdGUgQVdTIGNsaWVudCB3aXRoIG5ldyBjcmVkZW50aWFscwogICAqIGFmdGVyIHJlZnJlc2hlZCBhdXRoZW50aWNhdGlvbi4KICAgKi8KICBjb25uZWN0LmNvcmUuaW5pdENsaWVudCA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChwYXJhbXMsICdwYXJhbXMnKTsKICAgIAogICAgdmFyIGF1dGhUb2tlbiA9IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChwYXJhbXMuYXV0aFRva2VuLCAncGFyYW1zLmF1dGhUb2tlbicpOwogICAgdmFyIHJlZ2lvbiA9IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChwYXJhbXMucmVnaW9uLCAncGFyYW1zLnJlZ2lvbicpOwogICAgdmFyIGVuZHBvaW50ID0gcGFyYW1zLmVuZHBvaW50IHx8IG51bGw7CiAKICAgIGNvbm5lY3QuY29yZS5jbGllbnQgPSBuZXcgY29ubmVjdC5BV1NDbGllbnQoYXV0aFRva2VuLCByZWdpb24sIGVuZHBvaW50KTsKICB9OwoKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogSW5pdGlhbGl6ZWQgQWdlbnRBcHAgY2xpZW50CiAgICogU2hvdWxkIGJlIHVzZWQgYnkgU2hhcmVkIFdvcmtlciB0byB1cGRhdGUgQWdlbnRBcHAgY2xpZW50IHdpdGggbmV3IGNyZWRlbnRpYWxzCiAgICogYWZ0ZXIgcmVmcmVzaGVkIGF1dGhlbnRpY2F0aW9uLgogICAqLwogIGNvbm5lY3QuY29yZS5pbml0QWdlbnRBcHBDbGllbnQgPSBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLCAncGFyYW1zJyk7ICAgIAogICAgdmFyIGF1dGhUb2tlbiA9IGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChwYXJhbXMuYXV0aFRva2VuLCAncGFyYW1zLmF1dGhUb2tlbicpOwogICAgdmFyIGF1dGhDb29raWVOYW1lID0gY29ubmVjdC5hc3NlcnROb3ROdWxsKHBhcmFtcy5hdXRoQ29va2llTmFtZSwgJ3BhcmFtcy5hdXRoQ29va2llTmFtZScpOwogICAgdmFyIGVuZHBvaW50ID0gY29ubmVjdC5hc3NlcnROb3ROdWxsKHBhcmFtcy5hZ2VudEFwcEVuZHBvaW50LCAncGFyYW1zLmFnZW50QXBwRW5kcG9pbnQnKTsKICAgIAogICAgY29ubmVjdC5jb3JlLmFnZW50QXBwQ2xpZW50ID0gbmV3IGNvbm5lY3QuQWdlbnRBcHBDbGllbnQoYXV0aENvb2tpZU5hbWUsIGF1dGhUb2tlbiwgZW5kcG9pbnQpOwogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogVW5pbml0aWFsaXplIENvbm5lY3QuCiAgICovCiAgY29ubmVjdC5jb3JlLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgIGNvbm5lY3QuY29yZS5jbGllbnQgPSBuZXcgY29ubmVjdC5OdWxsQ2xpZW50KCk7CiAgICBjb25uZWN0LmNvcmUuYWdlbnRBcHBDbGllbnQgPSBuZXcgY29ubmVjdC5OdWxsQ2xpZW50KCk7CiAgICBjb25uZWN0LmNvcmUubWFzdGVyQ2xpZW50ID0gbmV3IGNvbm5lY3QuTnVsbENsaWVudCgpOwogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgaWYgKGJ1cykgYnVzLnVuc3Vic2NyaWJlQWxsKCk7CiAgICBjb25uZWN0LmNvcmUuYnVzID0gbmV3IGNvbm5lY3QuRXZlbnRCdXMoKTsKICAgIGNvbm5lY3QuY29yZS5hZ2VudERhdGFQcm92aWRlciA9IG51bGw7CiAgICBjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlciA9IG51bGw7CiAgICBjb25uZWN0LmNvcmUudXBzdHJlYW0gPSBudWxsOwogICAgY29ubmVjdC5jb3JlLmtlZXBhbGl2ZU1hbmFnZXIgPSBudWxsOwogICAgY29ubmVjdC5hZ2VudC5pbml0aWFsaXplZCA9IGZhbHNlOwogICAgY29ubmVjdC5jb3JlLmluaXRpYWxpemVkID0gZmFsc2U7CiAgfTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBTZXR1cCB0aGUgU29mdHBob25lTWFuYWdlciB0byBiZSBpbml0aWFsaXplZCB3aGVuIHRoZSBhZ2VudAogICAqIGlzIGRldGVybWluZWQgdG8gaGF2ZSBzb2Z0cGhvbmUgZW5hYmxlZC4KICAgKi8KICBjb25uZWN0LmNvcmUuc29mdHBob25lVXNlck1lZGlhU3RyZWFtID0gbnVsbDsKIAogIGNvbm5lY3QuY29yZS5nZXRTb2Z0cGhvbmVVc2VyTWVkaWFTdHJlYW0gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLnNvZnRwaG9uZVVzZXJNZWRpYVN0cmVhbTsKICB9OwogCiAgY29ubmVjdC5jb3JlLnNldFNvZnRwaG9uZVVzZXJNZWRpYVN0cmVhbSA9IGZ1bmN0aW9uIChzdHJlYW0pIHsKICAgIGNvbm5lY3QuY29yZS5zb2Z0cGhvbmVVc2VyTWVkaWFTdHJlYW0gPSBzdHJlYW07CiAgfTsKIAogIGNvbm5lY3QuY29yZS5pbml0UmluZ3RvbmVFbmdpbmVzID0gZnVuY3Rpb24gKHBhcmFtcykgewogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHBhcmFtcywgInBhcmFtcyIpOwogCiAgICB2YXIgc2V0dXBSaW5ndG9uZUVuZ2luZXMgPSBmdW5jdGlvbiAocmluZ3RvbmVTZXR0aW5ncykgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwocmluZ3RvbmVTZXR0aW5ncywgInJpbmd0b25lU2V0dGluZ3MiKTsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHJpbmd0b25lU2V0dGluZ3Mudm9pY2UsICJyaW5ndG9uZVNldHRpbmdzLnZvaWNlIik7CiAgICAgIGNvbm5lY3QuYXNzZXJ0VHJ1ZShyaW5ndG9uZVNldHRpbmdzLnZvaWNlLnJpbmd0b25lVXJsIHx8IHJpbmd0b25lU2V0dGluZ3Mudm9pY2UuZGlzYWJsZWQsICJyaW5ndG9uZVNldHRpbmdzLnZvaWNlLnJpbmd0b25lVXJsIG11c3QgYmUgcHJvdmlkZWQgb3IgcmluZ3RvbmVTZXR0aW5ncy52b2ljZS5kaXNhYmxlZCBtdXN0IGJlIHRydWUiKTsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHJpbmd0b25lU2V0dGluZ3MucXVldWVfY2FsbGJhY2ssICJyaW5ndG9uZVNldHRpbmdzLnF1ZXVlX2NhbGxiYWNrIik7CiAgICAgIGNvbm5lY3QuYXNzZXJ0VHJ1ZShyaW5ndG9uZVNldHRpbmdzLnF1ZXVlX2NhbGxiYWNrLnJpbmd0b25lVXJsIHx8IHJpbmd0b25lU2V0dGluZ3MucXVldWVfY2FsbGJhY2suZGlzYWJsZWQsICJyaW5ndG9uZVNldHRpbmdzLnZvaWNlLnJpbmd0b25lVXJsIG11c3QgYmUgcHJvdmlkZWQgb3IgcmluZ3RvbmVTZXR0aW5ncy5xdWV1ZV9jYWxsYmFjay5kaXNhYmxlZCBtdXN0IGJlIHRydWUiKTsKIAogICAgICBjb25uZWN0LmNvcmUucmluZ3RvbmVFbmdpbmVzID0ge307CiAKICAgICAgY29ubmVjdC5hZ2VudChmdW5jdGlvbiAoYWdlbnQpIHsKICAgICAgICBhZ2VudC5vblJlZnJlc2goZnVuY3Rpb24gKCkgewogICAgICAgICAgY29ubmVjdC5pZk1hc3Rlcihjb25uZWN0Lk1hc3RlclRvcGljcy5SSU5HVE9ORSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoIXJpbmd0b25lU2V0dGluZ3Mudm9pY2UuZGlzYWJsZWQgJiYgIWNvbm5lY3QuY29yZS5yaW5ndG9uZUVuZ2luZXMudm9pY2UpIHsKICAgICAgICAgICAgICBjb25uZWN0LmNvcmUucmluZ3RvbmVFbmdpbmVzLnZvaWNlID0KICAgICAgICAgICAgICAgIG5ldyBjb25uZWN0LlZvaWNlUmluZ3RvbmVFbmdpbmUocmluZ3RvbmVTZXR0aW5ncy52b2ljZSk7CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJWb2ljZVJpbmd0b25lRW5naW5lIGluaXRpYWxpemVkLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIH0KIAogICAgICAgICAgICBpZiAoIXJpbmd0b25lU2V0dGluZ3MuY2hhdC5kaXNhYmxlZCAmJiAhY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcy5jaGF0KSB7CiAgICAgICAgICAgICAgY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcy5jaGF0ID0KICAgICAgICAgICAgICAgIG5ldyBjb25uZWN0LkNoYXRSaW5ndG9uZUVuZ2luZShyaW5ndG9uZVNldHRpbmdzLmNoYXQpOwogICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiQ2hhdFJpbmd0b25lRW5naW5lIGluaXRpYWxpemVkLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIH0KIAogICAgICAgICAgICBpZiAoIXJpbmd0b25lU2V0dGluZ3MudGFzay5kaXNhYmxlZCAmJiAhY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcy50YXNrKSB7CiAgICAgICAgICAgICAgY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcy50YXNrID0KICAgICAgICAgICAgICAgIG5ldyBjb25uZWN0LlRhc2tSaW5ndG9uZUVuZ2luZShyaW5ndG9uZVNldHRpbmdzLnRhc2spOwogICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJUYXNrUmluZ3RvbmVFbmdpbmUgaW5pdGlhbGl6ZWQuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgfQogCiAgICAgICAgICAgIGlmICghcmluZ3RvbmVTZXR0aW5ncy5xdWV1ZV9jYWxsYmFjay5kaXNhYmxlZCAmJiAhY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcy5xdWV1ZV9jYWxsYmFjaykgewogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5yaW5ndG9uZUVuZ2luZXMucXVldWVfY2FsbGJhY2sgPQogICAgICAgICAgICAgICAgbmV3IGNvbm5lY3QuUXVldWVDYWxsYmFja1Jpbmd0b25lRW5naW5lKHJpbmd0b25lU2V0dGluZ3MucXVldWVfY2FsbGJhY2spOwogICAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiUXVldWVDYWxsYmFja1Jpbmd0b25lRW5naW5lIGluaXRpYWxpemVkLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIGhhbmRsZVJpbmdlckRldmljZUNoYW5nZSgpOwogICAgfTsKIAogICAgdmFyIG1lcmdlUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcywgb3RoZXJQYXJhbXMpIHsKICAgICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBzdXBwb3J0IHB1bGxpbmcgZGlzYWJsZWQgZmxhZyBhbmQgcmluZ3RvbmVVcmwKICAgICAgLy8gZnJvbSBzb2Z0cGhvbmUgY29uZmlnIGlmIGl0IGV4aXN0cyBmcm9tIGRvd25zdHJlYW0gaW50byB0aGUgcmluZ3RvbmUgY29uZmlnLgogICAgICBwYXJhbXMucmluZ3RvbmUgPSBwYXJhbXMucmluZ3RvbmUgfHwge307CiAgICAgIHBhcmFtcy5yaW5ndG9uZS52b2ljZSA9IHBhcmFtcy5yaW5ndG9uZS52b2ljZSB8fCB7fTsKICAgICAgcGFyYW1zLnJpbmd0b25lLnF1ZXVlX2NhbGxiYWNrID0gcGFyYW1zLnJpbmd0b25lLnF1ZXVlX2NhbGxiYWNrIHx8IHt9OwogICAgICBwYXJhbXMucmluZ3RvbmUuY2hhdCA9IHBhcmFtcy5yaW5ndG9uZS5jaGF0IHx8IHsgZGlzYWJsZWQ6IHRydWUgfTsKICAgICAgcGFyYW1zLnJpbmd0b25lLnRhc2sgPSBwYXJhbXMucmluZ3RvbmUudGFzayB8fCB7IGRpc2FibGVkOiB0cnVlIH07CiAKICAgICAgaWYgKG90aGVyUGFyYW1zLnNvZnRwaG9uZSkgewogICAgICAgIGlmIChvdGhlclBhcmFtcy5zb2Z0cGhvbmUuZGlzYWJsZVJpbmd0b25lKSB7CiAgICAgICAgICBwYXJhbXMucmluZ3RvbmUudm9pY2UuZGlzYWJsZWQgPSB0cnVlOwogICAgICAgICAgcGFyYW1zLnJpbmd0b25lLnF1ZXVlX2NhbGxiYWNrLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB9CiAKICAgICAgICBpZiAob3RoZXJQYXJhbXMuc29mdHBob25lLnJpbmd0b25lVXJsKSB7CiAgICAgICAgICBwYXJhbXMucmluZ3RvbmUudm9pY2UucmluZ3RvbmVVcmwgPSBvdGhlclBhcmFtcy5zb2Z0cGhvbmUucmluZ3RvbmVVcmw7CiAgICAgICAgICBwYXJhbXMucmluZ3RvbmUucXVldWVfY2FsbGJhY2sucmluZ3RvbmVVcmwgPSBvdGhlclBhcmFtcy5zb2Z0cGhvbmUucmluZ3RvbmVVcmw7CiAgICAgICAgfQogICAgICB9CiAKICAgICAgaWYgKG90aGVyUGFyYW1zLmNoYXQpIHsKICAgICAgICBpZiAob3RoZXJQYXJhbXMuY2hhdC5kaXNhYmxlUmluZ3RvbmUpIHsKICAgICAgICAgIHBhcmFtcy5yaW5ndG9uZS5jaGF0LmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICB9CiAKICAgICAgICBpZiAob3RoZXJQYXJhbXMuY2hhdC5yaW5ndG9uZVVybCkgewogICAgICAgICAgcGFyYW1zLnJpbmd0b25lLmNoYXQucmluZ3RvbmVVcmwgPSBvdGhlclBhcmFtcy5jaGF0LnJpbmd0b25lVXJsOwogICAgICAgIH0KICAgICAgfQogCiAgICAgIC8vIE1lcmdlIGluIHJpbmd0b25lIHNldHRpbmdzIGZyb20gZG93bnN0cmVhbS4KICAgICAgaWYgKG90aGVyUGFyYW1zLnJpbmd0b25lKSB7CiAgICAgICAgcGFyYW1zLnJpbmd0b25lLnZvaWNlID0gY29ubmVjdC5tZXJnZShwYXJhbXMucmluZ3RvbmUudm9pY2UsCiAgICAgICAgICBvdGhlclBhcmFtcy5yaW5ndG9uZS52b2ljZSB8fCB7fSk7CiAgICAgICAgcGFyYW1zLnJpbmd0b25lLnF1ZXVlX2NhbGxiYWNrID0gY29ubmVjdC5tZXJnZShwYXJhbXMucmluZ3RvbmUucXVldWVfY2FsbGJhY2ssCiAgICAgICAgICBvdGhlclBhcmFtcy5yaW5ndG9uZS52b2ljZSB8fCB7fSk7CiAgICAgICAgcGFyYW1zLnJpbmd0b25lLmNoYXQgPSBjb25uZWN0Lm1lcmdlKHBhcmFtcy5yaW5ndG9uZS5jaGF0LAogICAgICAgICAgb3RoZXJQYXJhbXMucmluZ3RvbmUuY2hhdCB8fCB7fSk7CiAgICAgIH0KICAgIH07CiAKICAgIC8vIE1lcmdlIHBhcmFtcyBmcm9tIHBhcmFtcy5zb2Z0cGhvbmUgYW5kIHBhcmFtcy5jaGF0IGludG8gcGFyYW1zLnJpbmd0b25lCiAgICAvLyBmb3IgZW1iZWRkZWQgYW5kIG5vbi1lbWJlZGRlZCB1c2UgY2FzZXMgc28gdGhhdCBkZWZhdWx0cyBhcmUgcGlja2VkIHVwLgogICAgbWVyZ2VQYXJhbXMocGFyYW1zLCBwYXJhbXMpOwogCiAgICBpZiAoY29ubmVjdC5pc0ZyYW1lZCgpKSB7CiAgICAgIC8vIElmIHRoZSBDQ1AgaXMgaW4gYSBmcmFtZSwgd2FpdCBmb3IgY29uZmlndXJhdGlvbiBmcm9tIGRvd25zdHJlYW0uCiAgICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5DT05GSUdVUkUsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpOwogICAgICAgIC8vIE1lcmdlIGFsbCBwYXJhbXMgZnJvbSBkYXRhIGludG8gcGFyYW1zIGZvciBhbnkgb3ZlcnJpZGRlbgogICAgICAgIC8vIHZhbHVlcyBpbiBlaXRoZXIgbGVnYWN5ICJzb2Z0cGhvbmUiIG9yICJyaW5ndG9uZSIgc2V0dGluZ3MuCiAgICAgICAgbWVyZ2VQYXJhbXMocGFyYW1zLCBkYXRhKTsKICAgICAgICBzZXR1cFJpbmd0b25lRW5naW5lcyhwYXJhbXMucmluZ3RvbmUpOwogICAgICB9KTsKIAogICAgfSBlbHNlIHsKICAgICAgc2V0dXBSaW5ndG9uZUVuZ2luZXMocGFyYW1zLnJpbmd0b25lKTsKICAgIH0KICB9OwoKICB2YXIgaGFuZGxlUmluZ2VyRGV2aWNlQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICBidXMuc3Vic2NyaWJlKGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5TRVRfUklOR0VSX0RFVklDRSwgc2V0UmluZ2VyRGV2aWNlKTsKICB9CgogIHZhciBzZXRSaW5nZXJEZXZpY2UgPSBmdW5jdGlvbiAoZGF0YSl7CiAgICBpZihjb25uZWN0LmtleXMoY29ubmVjdC5jb3JlLnJpbmd0b25lRW5naW5lcykubGVuZ3RoID09PSAwIHx8ICFkYXRhIHx8ICFkYXRhLmRldmljZUlkKXsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGRldmljZUlkID0gZGF0YS5kZXZpY2VJZDsKICAgIGZvciAodmFyIHJpbmd0b25lVHlwZSBpbiBjb25uZWN0LmNvcmUucmluZ3RvbmVFbmdpbmVzKSB7CiAgICAgIGNvbm5lY3QuY29yZS5yaW5ndG9uZUVuZ2luZXNbcmluZ3RvbmVUeXBlXS5zZXRPdXRwdXREZXZpY2UoZGV2aWNlSWQpOwogICAgfQoKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuQ29uZmlndXJhdGlvbkV2ZW50cy5SSU5HRVJfREVWSUNFX0NIQU5HRUQsCiAgICAgIGRhdGE6IHsgZGV2aWNlSWQ6IGRldmljZUlkIH0KICAgIH0pOwogIH0KCiAgY29ubmVjdC5jb3JlLmluaXRTb2Z0cGhvbmVNYW5hZ2VyID0gZnVuY3Rpb24gKHBhcmFtc0luKSB7CiAgICBjb25uZWN0LmdldExvZygpLmluZm8oIltTb2Z0cGhvbmUgTWFuYWdlcl0gaW5pdFNvZnRwaG9uZU1hbmFnZXIgc3RhcnRlZCIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICB2YXIgcGFyYW1zID0gcGFyYW1zSW4gfHwge307CiAKICAgIHZhciBjb21wZXRlRm9yTWFzdGVyT25BZ2VudFVwZGF0ZSA9IGZ1bmN0aW9uIChzb2Z0cGhvbmVQYXJhbXNJbikgewogICAgICB2YXIgc29mdHBob25lUGFyYW1zID0gY29ubmVjdC5tZXJnZShwYXJhbXMuc29mdHBob25lIHx8IHt9LCBzb2Z0cGhvbmVQYXJhbXNJbik7CiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiW1NvZnRwaG9uZSBNYW5hZ2VyXSBjb21wZXRlRm9yTWFzdGVyT25BZ2VudFVwZGF0ZSBleGVjdXRlZCIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIGNvbm5lY3QuYWdlbnQoZnVuY3Rpb24gKGFnZW50KSB7CiAgICAgICAgaWYgKCFhZ2VudC5nZXRDaGFubmVsQ29uY3VycmVuY3koY29ubmVjdC5DaGFubmVsVHlwZS5WT0lDRSkpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgYWdlbnQub25SZWZyZXNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBzdWIgPSB0aGlzOwogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJbU29mdHBob25lIE1hbmFnZXJdIGFnZW50IHJlZnJlc2ggaGFuZGxlciBleGVjdXRlZCIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAKICAgICAgICAgIGNvbm5lY3QuaWZNYXN0ZXIoY29ubmVjdC5NYXN0ZXJUb3BpY3MuU09GVFBIT05FLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiW1NvZnRwaG9uZSBNYW5hZ2VyXSBjb25maXJtZWQgYXMgc29mdHBob25lIG1hc3RlciB0b3BpYyIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIGlmICghY29ubmVjdC5jb3JlLnNvZnRwaG9uZU1hbmFnZXIgJiYgYWdlbnQuaXNTb2Z0cGhvbmVFbmFibGVkKCkpIHsKICAgICAgICAgICAgICAvLyBCZWNvbWUgbWFzdGVyIHRvIHNlbmQgbG9ncywgc2luY2Ugd2UgbmVlZCBsb2dzIGZyb20gc29mdHBob25lIHRhYi4KICAgICAgICAgICAgICBjb25uZWN0LmJlY29tZU1hc3Rlcihjb25uZWN0Lk1hc3RlclRvcGljcy5TRU5EX0xPR1MpOwogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5zb2Z0cGhvbmVNYW5hZ2VyID0gbmV3IGNvbm5lY3QuU29mdHBob25lTWFuYWdlcihzb2Z0cGhvbmVQYXJhbXMpOwogICAgICAgICAgICAgIHN1Yi51bnN1YnNjcmliZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9OwogCiAgICAvKioKICAgICAqIElmIHRoZSB3aW5kb3cgaXMgZnJhbWVkLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIGEgQ09ORklHVVJFIG1lc3NhZ2UgZnJvbQogICAgICogZG93bnN0cmVhbSBiZWZvcmUgd2UgdHJ5IHRvIGluaXRpYWxpemUsIHVubGVzcyBwYXJhbXMuYWxsb3dGcmFtZWRTb2Z0cGhvbmUgaXMgdHJ1ZS4KICAgICAqLwogICAgaWYgKGNvbm5lY3QuaXNGcmFtZWQoKSAmJiAhcGFyYW1zLmFsbG93RnJhbWVkU29mdHBob25lKSB7CiAgICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5DT05GSUdVUkUsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJbU29mdHBob25lIE1hbmFnZXJdIENvbmZpZ3VyZSBldmVudCBoYW5kbGVyIGV4ZWN1dGVkIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBpZiAoZGF0YS5zb2Z0cGhvbmUgJiYgZGF0YS5zb2Z0cGhvbmUuYWxsb3dGcmFtZWRTb2Z0cGhvbmUpIHsKICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTsKICAgICAgICAgIGNvbXBldGVGb3JNYXN0ZXJPbkFnZW50VXBkYXRlKGRhdGEuc29mdHBob25lKTsKICAgICAgICAgIAogICAgICAgIH0KICAgICAgICBzZXR1cEV2ZW50TGlzdGVuZXJzRm9yTXVsdGlUYWJVc2VJbkZpcmVmb3goZGF0YS5zb2Z0cGhvbmUpOwogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbXBldGVGb3JNYXN0ZXJPbkFnZW50VXBkYXRlKHBhcmFtcyk7CiAgICAgIHNldHVwRXZlbnRMaXN0ZW5lcnNGb3JNdWx0aVRhYlVzZUluRmlyZWZveChwYXJhbXMpOwogICAgfQogCiAgICBjb25uZWN0LmFnZW50KGZ1bmN0aW9uIChhZ2VudCkgewogICAgICAvLyBTeW5jIG11dGUgYWNyb3NzIGFsbCB0YWJzIAogICAgICBpZiAoYWdlbnQuaXNTb2Z0cGhvbmVFbmFibGVkKCkgJiYgYWdlbnQuZ2V0Q2hhbm5lbENvbmN1cnJlbmN5KGNvbm5lY3QuQ2hhbm5lbFR5cGUuVk9JQ0UpKSB7CiAgICAgICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwKICAgICAgICAgIHsKICAgICAgICAgICAgZXZlbnQ6IGNvbm5lY3QuRXZlbnRUeXBlLk1VVEUKICAgICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICBmdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzRm9yTXVsdGlUYWJVc2VJbkZpcmVmb3goc29mdHBob25lUGFyYW1zSW4pIHsKICAgICAgdmFyIHNvZnRwaG9uZVBhcmFtcyA9IGNvbm5lY3QubWVyZ2UocGFyYW1zLnNvZnRwaG9uZSB8fCB7fSwgc29mdHBob25lUGFyYW1zSW4pOwoKICAgICAgLy8ga2VlcCB0aGUgc29mdHBob25lIHBhcmFtcyBmb3IgZXh0ZXJuYWwgdXNlCiAgICAgIGNvbm5lY3QuY29yZS5zb2Z0cGhvbmVQYXJhbXMgPSBzb2Z0cGhvbmVQYXJhbXM7CgogICAgICBpZiAoY29ubmVjdC5pc0ZpcmVmb3hCcm93c2VyKCkpIHsKICAgICAgICAvLyBJbiBGaXJlZm94LCB3aGVuIGEgdGFiIHRha2VzIG92ZXIgYW5vdGhlciB0YWIncyBzb2Z0cGhvbmUgcHJpbWFyeSwKICAgICAgICAvLyB0aGUgcHJldmlvdXMgcHJpbWFyeSB0YWIgc2hvdWxkIGRlbGV0ZSBzb2ZwaG9uZSBtYW5hZ2VyIGFuZCBzdG9wIG1pY3JvcGhvbmUKICAgICAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLk1BU1RFUl9SRVNQT05TRSwgZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgaWYgKHJlcy5kYXRhICYmIHJlcy5kYXRhLnRvcGljID09PSBjb25uZWN0Lk1hc3RlclRvcGljcy5TT0ZUUEhPTkUgJiYgcmVzLmRhdGEudGFrZU92ZXIgJiYgKHJlcy5kYXRhLm1hc3RlcklkICE9PSBjb25uZWN0LmNvcmUucG9ydFN0cmVhbUlkKSkgewogICAgICAgICAgICBpZiAoY29ubmVjdC5jb3JlLnNvZnRwaG9uZU1hbmFnZXIpIHsKICAgICAgICAgICAgICBjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlci5vbkluaXRDb250YWN0U3ViLnVuc3Vic2NyaWJlKCk7CiAgICAgICAgICAgICAgZGVsZXRlIGNvbm5lY3QuY29yZS5zb2Z0cGhvbmVNYW5hZ2VyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB1c2VyTWVkaWFTdHJlYW0gPSBjb25uZWN0LmNvcmUuZ2V0U29mdHBob25lVXNlck1lZGlhU3RyZWFtKCk7CiAgICAgICAgICAgIGlmICh1c2VyTWVkaWFTdHJlYW0pIHsKICAgICAgICAgICAgICB1c2VyTWVkaWFTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgeyB0cmFjay5zdG9wKCk7IH0pOwogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5zZXRTb2Z0cGhvbmVVc2VyTWVkaWFTdHJlYW0obnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gSW4gRmlyZWZveCwgd2hlbiBtdWx0aXBsZSB0YWJzIGFyZSBvcGVuLAogICAgICAgIC8vIHdlYnJ0YyBzZXNzaW9uIGlzIG5vdCBzdGFydGVkIHVudGlsIFJFQURZX1RPX1NUQVJUX1NFU1NJT04gZXZlbnQgaXMgdHJpZ2dlcmVkCiAgICAgICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkuc3Vic2NyaWJlKGNvbm5lY3QuQ29ubmVjdGlvbkV2ZW50cy5SRUFEWV9UT19TVEFSVF9TRVNTSU9OLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb25uZWN0LmlmTWFzdGVyKGNvbm5lY3QuTWFzdGVyVG9waWNzLlNPRlRQSE9ORSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoY29ubmVjdC5jb3JlLnNvZnRwaG9uZU1hbmFnZXIpIHsKICAgICAgICAgICAgICBjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlci5zdGFydFNlc3Npb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb25uZWN0LmJlY29tZU1hc3Rlcihjb25uZWN0Lk1hc3RlclRvcGljcy5TT0ZUUEhPTkUsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBjb25uZWN0LmFnZW50KGZ1bmN0aW9uIChhZ2VudCkgewogICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlciAmJiBhZ2VudC5pc1NvZnRwaG9uZUVuYWJsZWQoKSkgewogICAgICAgICAgICAgICAgICBjb25uZWN0LmJlY29tZU1hc3Rlcihjb25uZWN0Lk1hc3RlclRvcGljcy5TRU5EX0xPR1MpOwogICAgICAgICAgICAgICAgICBjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlciA9IG5ldyBjb25uZWN0LlNvZnRwaG9uZU1hbmFnZXIoc29mdHBob25lUGFyYW1zKTsKICAgICAgICAgICAgICAgICAgY29ubmVjdC5jb3JlLnNvZnRwaG9uZU1hbmFnZXIuc3RhcnRTZXNzaW9uKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CgogICAgICAgIC8vIGhhbmRsaW5nIG91dGJvdW5kLWNhbGwgYW5kIGF1dG8tYWNjZXB0IGNhc2VzIGZvciBwZW5kaW5nIHNlc3Npb24KICAgICAgICBjb25uZWN0LmNvbnRhY3QoZnVuY3Rpb24gKGMpIHsKICAgICAgICAgIGNvbm5lY3QuYWdlbnQoZnVuY3Rpb24gKGFnZW50KSB7CiAgICAgICAgICAgIGMub25SZWZyZXNoKGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgICAgICAgICAgaWYgKAogICAgICAgICAgICAgICAgY29ubmVjdC5oYXNPdGhlckNvbm5lY3RlZENDUHMoKSAmJgogICAgICAgICAgICAgICAgZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYKICAgICAgICAgICAgICAgIChjb250YWN0LmdldFN0YXR1cygpLnR5cGUgPT09IGNvbm5lY3QuQ29udGFjdFN0YXR1c1R5cGUuQ09OTkVDVElORyB8fCBjb250YWN0LmdldFN0YXR1cygpLnR5cGUgPT09IGNvbm5lY3QuQ29udGFjdFN0YXR1c1R5cGUuSU5DT01JTkcpCiAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICB2YXIgaXNPdXRCb3VuZENhbGwgPSBjb250YWN0LmlzU29mdHBob25lQ2FsbCgpICYmICFjb250YWN0LmlzSW5ib3VuZCgpOwogICAgICAgICAgICAgICAgdmFyIGlzQXV0b0FjY2VwdEVuYWJsZWQgPSBjb250YWN0LmlzU29mdHBob25lQ2FsbCgpICYmIGFnZW50LmdldENvbmZpZ3VyYXRpb24oKS5zb2Z0cGhvbmVBdXRvQWNjZXB0OwogICAgICAgICAgICAgICAgdmFyIGlzUXVldWVkQ2FsbGJhY2sgPSBjb250YWN0LmdldFR5cGUoKSA9PT0gY29ubmVjdC5Db250YWN0VHlwZS5RVUVVRV9DQUxMQkFDSzsKICAgICAgICAgICAgICAgIGlmIChpc091dEJvdW5kQ2FsbCB8fCBpc0F1dG9BY2NlcHRFbmFibGVkIHx8IGlzUXVldWVkQ2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgY29ubmVjdC5jb3JlLnRyaWdnZXJSZWFkeVRvU3RhcnRTZXNzaW9uRXZlbnQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9OwoKICAvLyB0cmlnZ2VyIFJFQURZX1RPX1NUQVJUX1NFU1NJT04gZXZlbnQgaW4gYSBjb250ZXh0IHdpdGggU29mdHBob25lIE1hbmFnZXIKICAvLyBpbnRlcm5hbCB1c2Ugb25seQogIGNvbm5lY3QuY29yZS50cmlnZ2VyUmVhZHlUb1N0YXJ0U2Vzc2lvbkV2ZW50ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGFsbG93RnJhbWVkU29mdHBob25lID0gY29ubmVjdC5jb3JlLnNvZnRwaG9uZVBhcmFtcyAmJiBjb25uZWN0LmNvcmUuc29mdHBob25lUGFyYW1zLmFsbG93RnJhbWVkU29mdHBob25lOwogICAgaWYgKGNvbm5lY3QuaXNDQ1AoKSkgewogICAgICBpZiAoYWxsb3dGcmFtZWRTb2Z0cGhvbmUpIHsKICAgICAgICAvLyB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkIGluIHRoaXMgaWZyYW1lZCBDQ1AgY29udGV4dAogICAgICAgIGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpLnRyaWdnZXIoY29ubmVjdC5Db25uZWN0aW9uRXZlbnRzLlJFQURZX1RPX1NUQVJUX1NFU1NJT04pOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChjb25uZWN0LmlzRnJhbWVkKCkpIHsKICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaWZyYW1lZCBDQ1AsIHRoZSBldmVudCBpcyBzZW5kIHRvIGRvd25zdHJlYW0gKENSTSkKICAgICAgICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmREb3duc3RyZWFtKGNvbm5lY3QuQ29ubmVjdGlvbkV2ZW50cy5SRUFEWV9UT19TVEFSVF9TRVNTSU9OKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHN0YW5kYWxvbmUgQ0NQLCB0cmlnZ2VyIHRoaXMgZXZlbnQgaW4gdGhpcyBDQ1AgY29udGV4dAogICAgICAgICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkudHJpZ2dlcihjb25uZWN0LkNvbm5lY3Rpb25FdmVudHMuUkVBRFlfVE9fU1RBUlRfU0VTU0lPTik7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBpZiAoYWxsb3dGcmFtZWRTb2Z0cGhvbmUpIHsKICAgICAgICAvLyB0aGUgZXZlbnQgaXMgc2VuZCB0byB0aGUgdXBzdHJlYW0gKGlmcmFtZWQgQ0NQKQogICAgICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkNvbm5lY3Rpb25FdmVudHMuUkVBRFlfVE9fU1RBUlRfU0VTU0lPTik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCBpbiB0aGlzIENSTSBjb250ZXh0CiAgICAgICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkudHJpZ2dlcihjb25uZWN0LkNvbm5lY3Rpb25FdmVudHMuUkVBRFlfVE9fU1RBUlRfU0VTU0lPTik7CiAgICAgIH0KICAgIH0KICB9OwoKICBjb25uZWN0LmNvcmUuaW5pdFBhZ2VPcHRpb25zID0gZnVuY3Rpb24gKHBhcmFtcykgewogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHBhcmFtcywgInBhcmFtcyIpOwogICAgaWYgKGNvbm5lY3QuaXNGcmFtZWQoKSkgewogICAgICAvLyBJZiB0aGUgQ0NQIGlzIGluIGEgZnJhbWUsIHdhaXQgZm9yIGNvbmZpZ3VyYXRpb24gZnJvbSBkb3duc3RyZWFtLgogICAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICAgIGJ1cy5zdWJzY3JpYmUoY29ubmVjdC5FdmVudFR5cGUuQ09ORklHVVJFLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsCiAgICAgICAgICB7CiAgICAgICAgICAgIGV2ZW50OiBjb25uZWN0LkNvbmZpZ3VyYXRpb25FdmVudHMuQ09ORklHVVJFLAogICAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIC8vIExpc3RlbiBmb3IgaWZyYW1lIG1lZGlhIGRldmljZXMgcmVxdWVzdCBmcm9tIENSTQogICAgICBidXMuc3Vic2NyaWJlKGNvbm5lY3QuRXZlbnRUeXBlLk1FRElBX0RFVklDRV9SRVFVRVNULCBmdW5jdGlvbiAoKSB7CiAgICAgICAgZnVuY3Rpb24gc2VuZERldmljZXMoZGV2aWNlcykgewogICAgICAgICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZERvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuTUVESUFfREVWSUNFX1JFU1BPTlNFLCBkZXZpY2VzKTsKICAgICAgICB9CiAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7CiAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKQogICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRldmljZXNJbikgewogICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlc0luIHx8IFtdOwogICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlcy5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50b0pTT04oKSB9KTsKICAgICAgICAgICAgc2VuZERldmljZXMoZGV2aWNlcyk7CiAgICAgICAgICB9KQogICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgc2VuZERldmljZXMoe2Vycm9yOiBlcnIubWVzc2FnZX0pOwogICAgICAgICAgfSk7IAogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZW5kRGV2aWNlcyh7ZXJyb3I6ICJObyBuYXZpZ2F0b3Igb3IgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyBvYmplY3QgZm91bmQifSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9OwoKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogR2V0IHRoZSBsaXN0IG9mIG1lZGlhIGRldmljZXMgZnJvbSBpZnJhbWVkIENDUAogICAqIFRpbWVvdXQgZm9yIHRoZSByZXF1ZXN0IGlzIHBhc3NlZCBhbiBhbiBvcHRpb25hbCBhcmd1bWVudAogICAqIFRoZSBkZWZhdWx0IHRpbWVvdXQgaXMgMTAwMG1zCiAgICovCiAgY29ubmVjdC5jb3JlLmdldEZyYW1lTWVkaWFEZXZpY2VzID0gZnVuY3Rpb24gKHRpbWVvdXRJbikgewogICAgdmFyIHN1YiA9IG51bGw7CiAgICB2YXIgdGltZW91dCA9IHRpbWVvdXRJbiB8fCAxMDAwOwogICAgdmFyIHRpbWVvdXRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgCiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigiVGltZW91dCBleGNlZWRlZCIpKTsgCiAgICAgIH0sIHRpbWVvdXQpOwogICAgfSk7CiAgICB2YXIgbWVkaWFEZXZpY2VzUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgCiAgICAgIGlmIChjb25uZWN0LmlzRnJhbWVkKCkgfHwgY29ubmVjdC5pc0NDUCgpKSB7CiAgICAgICAgaWYgKG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKSB7CiAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKQogICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRldmljZXNJbikgewogICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlc0luIHx8IFtdOwogICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQudG9KU09OKCkgfSk7CiAgICAgICAgICAgIHJlc29sdmUoZGV2aWNlcyk7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcigiTm8gbmF2aWdhdG9yIG9yIG5hdmlnYXRvci5tZWRpYURldmljZXMgb2JqZWN0IGZvdW5kIikpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgYnVzID0gY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCk7CiAgICAgICAgc3ViID0gYnVzLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5NRURJQV9ERVZJQ0VfUkVTUE9OU0UsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5lcnJvcikgewogICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGRhdGEuZXJyb3IpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLk1FRElBX0RFVklDRV9SRVFVRVNUKTsKICAgICAgfQogICAgfSkKICAgIHJldHVybiBQcm9taXNlLnJhY2UoW21lZGlhRGV2aWNlc1Byb21pc2UsIHRpbWVvdXRQcm9taXNlXSkKICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHN1YikgewogICAgICAgIHN1Yi51bnN1YnNjcmliZSgpOwogICAgICB9CiAgICB9KTsKICB9CgogIC8vSW50ZXJuYWwgdXNlIG9ubHkuCiAgY29ubmVjdC5jb3JlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uIChlbmRwb2ludCkgewogICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScKICAgIH07CgogICAgdmFyIGF1dGhvcml6ZUVuZHBvaW50ID0gZW5kcG9pbnQ7CiAgICBpZiAoIWF1dGhvcml6ZUVuZHBvaW50KSB7CiAgICAgIGF1dGhvcml6ZUVuZHBvaW50ID0gY29ubmVjdC5jb3JlLmlzTGVnYWN5RG9tYWluKCkKICAgICAgICA/IExFR0FDWV9BVVRIT1JJWkVfRU5EUE9JTlQKICAgICAgICA6IEFVVEhPUklaRV9FTkRQT0lOVDsKICAgIH0KICAgIHJldHVybiBjb25uZWN0LmZldGNoKGF1dGhvcml6ZUVuZHBvaW50LCBvcHRpb25zLCBBVVRIT1JJWkVfUkVUUllfSU5URVJWQUwsIEFVVEhPUklaRV9NQVhfUkVUUlkpOwogIH07CiAKICAvKioKICAgKiBAZGVwcmVjYXRlZAogICAqIFRoaXMgdXNlZCB0byBiZSB1c2VkIGludGVybmFsbHksIGJ1dCBpcyBubyBsb25nZXIgbmVlZGVkLgogICAqLwogIGNvbm5lY3QuY29yZS52ZXJpZnlEb21haW5BY2Nlc3MgPSBmdW5jdGlvbiAoYXV0aFRva2VuLCBlbmRwb2ludCkgewogICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJUaGlzIEFQSSB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiByZWxlYXNlIik7CiAgICBpZiAoIWNvbm5lY3QuaXNGcmFtZWQoKSkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICB9CiAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgaGVhZGVyczogewogICAgICAgICdYLUFtei1CZWFyZXInOiBhdXRoVG9rZW4KICAgICAgfQogICAgfTsKICAgIHZhciB3aGl0ZWxpc3RlZE9yaWdpbnNFbmRwb2ludCA9IG51bGw7CiAgICBpZiAoZW5kcG9pbnQpewogICAgICB3aGl0ZWxpc3RlZE9yaWdpbnNFbmRwb2ludCA9IGVuZHBvaW50OwogICAgfQogICAgZWxzZSB7CiAgICAgIHdoaXRlbGlzdGVkT3JpZ2luc0VuZHBvaW50ID0gY29ubmVjdC5jb3JlLmlzTGVnYWN5RG9tYWluKCkgCiAgICAgICAgPyBMRUdBQ1lfV0hJVEVMSVNURURfT1JJR0lOU19FTkRQT0lOVAogICAgICAgIDogV0hJVEVMSVNURURfT1JJR0lOU19FTkRQT0lOVDsKICAgIH0KICAgIAogICAgcmV0dXJuIGNvbm5lY3QuZmV0Y2god2hpdGVsaXN0ZWRPcmlnaW5zRW5kcG9pbnQsIG9wdGlvbnMsIFdISVRFTElTVEVEX09SSUdJTlNfUkVUUllfSU5URVJWQUwsIFdISVRFTElTVEVEX09SSUdJTlNfTUFYX1JFVFJZKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICB2YXIgdG9wRG9tYWluID0gc2FuaXRpemVEb21haW4od2luZG93LmRvY3VtZW50LnJlZmVycmVyKTsKICAgICAgdmFyIGlzQWxsb3dlZCA9IHJlc3BvbnNlLndoaXRlbGlzdGVkT3JpZ2lucy5zb21lKGZ1bmN0aW9uIChvcmlnaW4pIHsKICAgICAgICByZXR1cm4gdG9wRG9tYWluID09PSBzYW5pdGl6ZURvbWFpbihvcmlnaW4pOwogICAgICB9KTsKICAgICAgcmV0dXJuIGlzQWxsb3dlZCA/IFByb21pc2UucmVzb2x2ZSgpIDogUHJvbWlzZS5yZWplY3QoKTsKICAgIH0pOwogIH07CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyB3aW5kb3cncyBocmVmIGlzIG9uIHRoZSBsZWdhY3kgY29ubmVjdCBkb21haW4uIAogICAqIE9ubHkgdXNlZnVsIGZvciBpbnRlcm5hbCB1c2UuIAogICAqLwogIGNvbm5lY3QuY29yZS5pc0xlZ2FjeURvbWFpbiA9IGZ1bmN0aW9uKHVybCkgewogICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgcmV0dXJuIHVybC5pbmNsdWRlcygnLmF3c2FwcHMuY29tJyk7CiAgfQogCgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBJbml0aWFsaXplcyBDb25uZWN0IGJ5IGNyZWF0aW5nIG9yIGNvbm5lY3RpbmcgdG8gdGhlIEFQSSBTaGFyZWQgV29ya2VyLgogICAqIFVzZWQgb25seSBieSB0aGUgQ0NQCiAgICovCiAgY29ubmVjdC5jb3JlLmluaXRTaGFyZWRXb3JrZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7CiAgICBjb25uZWN0LmNvcmUuY2hlY2tOb3RJbml0aWFsaXplZCgpOwogICAgaWYgKGNvbm5lY3QuY29yZS5pbml0aWFsaXplZCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLCAncGFyYW1zJyk7CiAKICAgIHZhciBzaGFyZWRXb3JrZXJVcmwgPSBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLnNoYXJlZFdvcmtlclVybCwgJ3BhcmFtcy5zaGFyZWRXb3JrZXJVcmwnKTsKICAgIHZhciBhdXRoVG9rZW4gPSBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLmF1dGhUb2tlbiwgJ3BhcmFtcy5hdXRoVG9rZW4nKTsKICAgIHZhciByZWZyZXNoVG9rZW4gPSBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLnJlZnJlc2hUb2tlbiwgJ3BhcmFtcy5yZWZyZXNoVG9rZW4nKTsKICAgIHZhciBhdXRoVG9rZW5FeHBpcmF0aW9uID0gY29ubmVjdC5hc3NlcnROb3ROdWxsKHBhcmFtcy5hdXRoVG9rZW5FeHBpcmF0aW9uLCAncGFyYW1zLmF1dGhUb2tlbkV4cGlyYXRpb24nKTsKICAgIHZhciByZWdpb24gPSBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLnJlZ2lvbiwgJ3BhcmFtcy5yZWdpb24nKTsKICAgIHZhciBlbmRwb2ludCA9IHBhcmFtcy5lbmRwb2ludCB8fCBudWxsOwogICAgdmFyIGF1dGhvcml6ZUVuZHBvaW50ID0gcGFyYW1zLmF1dGhvcml6ZUVuZHBvaW50OwogICAgaWYgKCFhdXRob3JpemVFbmRwb2ludCkgewogICAgICBhdXRob3JpemVFbmRwb2ludCA9IGNvbm5lY3QuY29yZS5pc0xlZ2FjeURvbWFpbigpCiAgICAgICAgPyBMRUdBQ1lfQVVUSE9SSVpFX0VORFBPSU5UCiAgICAgICAgOiBBVVRIT1JJWkVfRU5EUE9JTlQ7CiAgICB9CiAgICB2YXIgYWdlbnRBcHBFbmRwb2ludCA9IHBhcmFtcy5hZ2VudEFwcEVuZHBvaW50IHx8IG51bGw7CiAgICB2YXIgYXV0aENvb2tpZU5hbWUgPSBwYXJhbXMuYXV0aENvb2tpZU5hbWUgfHwgbnVsbDsKIAogICAgdHJ5IHsKICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgZXZlbnQgYnVzIGFuZCBhZ2VudCBkYXRhIHByb3ZpZGVycy4KICAgICAgY29ubmVjdC5jb3JlLmV2ZW50QnVzID0gbmV3IGNvbm5lY3QuRXZlbnRCdXMoeyBsb2dFdmVudHM6IHRydWUgfSk7CiAgICAgIGNvbm5lY3QuY29yZS5hZ2VudERhdGFQcm92aWRlciA9IG5ldyBBZ2VudERhdGFQcm92aWRlcihjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKSk7CiAgICAgIGNvbm5lY3QuY29yZS5tZWRpYUZhY3RvcnkgPSBuZXcgY29ubmVjdC5NZWRpYUZhY3RvcnkocGFyYW1zKTsKICAgICAgCiAgICAgIC8vIENyZWF0ZSB0aGUgc2hhcmVkIHdvcmtlciBhbmQgdXBzdHJlYW0gY29uZHVpdC4KICAgICAgdmFyIHdvcmtlciA9IG5ldyBTaGFyZWRXb3JrZXIoc2hhcmVkV29ya2VyVXJsLCAiQ29ubmVjdFNoYXJlZFdvcmtlciIpOwogICAgICB2YXIgY29uZHVpdCA9IG5ldyBjb25uZWN0LkNvbmR1aXQoIkNvbm5lY3RTaGFyZWRXb3JrZXJDb25kdWl0IiwKICAgICAgICBuZXcgY29ubmVjdC5Qb3J0U3RyZWFtKHdvcmtlci5wb3J0KSwKICAgICAgICBuZXcgY29ubmVjdC5XaW5kb3dJT1N0cmVhbSh3aW5kb3csIHBhcmVudCkpOwogCiAgICAgIC8vIFNldCB0aGUgZ2xvYmFsIHVwc3RyZWFtIGNvbmR1aXQgZm9yIGV4dGVybmFsIHVzZS4KICAgICAgY29ubmVjdC5jb3JlLnVwc3RyZWFtID0gY29uZHVpdDsKICAgICAgY29ubmVjdC5jb3JlLndlYlNvY2tldFByb3ZpZGVyID0gbmV3IFdlYlNvY2tldFByb3ZpZGVyKCk7CiAKICAgICAgLy8gQ2xvc2Ugb3VyIHBvcnQgdG8gdGhlIHNoYXJlZCB3b3JrZXIgYmVmb3JlIHRoZSB3aW5kb3cgY2xvc2VzLgogICAgICBnbG9iYWwub251bmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQ0xPU0UpOwogICAgICAgIHdvcmtlci5wb3J0LmNsb3NlKCk7CiAgICAgIH07CiAKICAgICAgY29ubmVjdC5nZXRMb2coKS5zY2hlZHVsZVVwc3RyZWFtTG9nUHVzaChjb25kdWl0KTsKICAgICAgY29ubmVjdC5nZXRMb2coKS5zY2hlZHVsZURvd25zdHJlYW1DbGllbnRTaWRlTG9nc1B1c2goKTsKICAgICAgLy8gQnJpZGdlIGFsbCB1cHN0cmVhbSBtZXNzYWdlcyBpbnRvIHRoZSBldmVudCBidXMuCiAgICAgIGNvbmR1aXQub25BbGxVcHN0cmVhbShjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS5icmlkZ2UoKSk7CiAgICAgIC8vIFBhc3MgYWxsIHVwc3RyZWFtIG1lc3NhZ2VzIChmcm9tIHNoYXJlZCB3b3JrZXIpIGRvd25zdHJlYW0gKHRvIENDUCBjb25zdW1lcikuCiAgICAgIGNvbmR1aXQub25BbGxVcHN0cmVhbShjb25kdWl0LnBhc3NEb3duc3RyZWFtKCkpOwoKICAgICAgaWYgKGNvbm5lY3QuaXNGcmFtZWQoKSkgewogICAgICAgIC8vIEJyaWRnZSBhbGwgZG93bnN0cmVhbSBtZXNzYWdlcyBpbnRvIHRoZSBldmVudCBidXMuCiAgICAgICAgY29uZHVpdC5vbkFsbERvd25zdHJlYW0oY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkuYnJpZGdlKCkpOwogICAgICAgIC8vIFBhc3MgYWxsIGRvd25zdHJlYW0gbWVzc2FnZXMgKGZyb20gQ0NQIGNvbnN1bWVyKSB1cHN0cmVhbSAodG8gc2hhcmVkIHdvcmtlcikuCiAgICAgICAgY29uZHVpdC5vbkFsbERvd25zdHJlYW0oY29uZHVpdC5wYXNzVXBzdHJlYW0oKSk7CiAgICAgIH0KCiAgICAgIC8vIFNlbmQgY29uZmlndXJhdGlvbiB1cCB0byB0aGUgc2hhcmVkIHdvcmtlci4KICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQ09ORklHVVJFLCB7CiAgICAgICAgYXV0aFRva2VuOiBhdXRoVG9rZW4sCiAgICAgICAgYXV0aFRva2VuRXhwaXJhdGlvbjogYXV0aFRva2VuRXhwaXJhdGlvbiwKICAgICAgICBlbmRwb2ludDogZW5kcG9pbnQsCiAgICAgICAgcmVmcmVzaFRva2VuOiByZWZyZXNoVG9rZW4sCiAgICAgICAgcmVnaW9uOiByZWdpb24sCiAgICAgICAgYXV0aG9yaXplRW5kcG9pbnQ6IGF1dGhvcml6ZUVuZHBvaW50LAogICAgICAgIGFnZW50QXBwRW5kcG9pbnQ6IGFnZW50QXBwRW5kcG9pbnQsCiAgICAgICAgYXV0aENvb2tpZU5hbWU6IGF1dGhDb29raWVOYW1lCiAgICAgIH0pOwogCiAgICAgIGNvbmR1aXQub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BQ0tOT1dMRURHRSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIkFja25vd2xlZGdlZCBieSB0aGUgQ29ubmVjdFNoYXJlZFdvcmtlciEiKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIGNvbm5lY3QuY29yZS5pbml0aWFsaXplZCA9IHRydWU7CiAgICAgICAgY29ubmVjdC5jb3JlLl9zZXRUYWJJZCgpOwogICAgICAgIGNvbm5lY3QuY29yZS5wb3J0U3RyZWFtSWQgPSBkYXRhLmlkOwogICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTsKICAgICAgfSk7CiAgICAgIC8vIEFkZCBhbGwgdXBzdHJlYW0gbG9nIGVudHJpZXMgdG8gb3VyIG93biBsb2dnZXIuCiAgICAgIGNvbmR1aXQub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5MT0csIGZ1bmN0aW9uIChsb2dFbnRyeSkgewogICAgICAgIGlmIChsb2dFbnRyeS5sb2dnZXJJZCAhPT0gY29ubmVjdC5nZXRMb2coKS5nZXRMb2dnZXJJZCgpKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmFkZExvZ0VudHJ5KGNvbm5lY3QuTG9nRW50cnkuZnJvbU9iamVjdChsb2dFbnRyeSkpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIC8vIEdldCB3b3JrZXIgbG9ncwogICAgICBjb25kdWl0Lm9uVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU0VSVkVSX0JPVU5EX0lOVEVSTkFMX0xPRywgZnVuY3Rpb24gKGxvZ0VudHJ5KSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5zZW5kSW50ZXJuYWxMb2dFbnRyeVRvU2VydmVyKGNvbm5lY3QuTG9nRW50cnkuZnJvbU9iamVjdChsb2dFbnRyeSkpOwogICAgICB9KTsKICAgICAgLy8gR2V0IG91dGVyIGNvbnRleHQgbG9ncwogICAgICBjb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5TRVJWRVJfQk9VTkRfSU5URVJOQUxfTE9HLCBmdW5jdGlvbiAobG9ncykgewogICAgICAgIGlmIChjb25uZWN0LmlzRnJhbWVkKCkgJiYgQXJyYXkuaXNBcnJheShsb2dzKSkgewogICAgICAgICAgbG9ncy5mb3JFYWNoKGZ1bmN0aW9uIChsb2cpIHsKICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5zZW5kSW50ZXJuYWxMb2dFbnRyeVRvU2VydmVyKGNvbm5lY3QuTG9nRW50cnkuZnJvbU9iamVjdChsb2cpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIC8vIEdldCBsb2cgZnJvbSBvdXRlciBjb250ZXh0CiAgICAgIGNvbmR1aXQub25Eb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkxPRywgZnVuY3Rpb24gKGxvZykgewogICAgICAgIGlmIChjb25uZWN0LmlzRnJhbWVkKCkgJiYgbG9nLmxvZ2dlcklkICE9PSBjb25uZWN0LmdldExvZygpLmdldExvZ2dlcklkKCkpIHsgCiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmFkZExvZ0VudHJ5KGNvbm5lY3QuTG9nRW50cnkuZnJvbU9iamVjdChsb2cpKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgY29ubmVjdC5jb3JlLm9uQXV0aEZhaWwoY29ubmVjdC5oaXRjaChjb25uZWN0LmNvcmUsIGNvbm5lY3QuY29yZS5faGFuZGxlQXV0aEZhaWwsIHBhcmFtcy5sb2dpbkVuZHBvaW50IHx8IG51bGwsIGF1dGhvcml6ZUVuZHBvaW50KSk7IC8vIEZvciBhdXRoIHJldHJ5IGxvZ2ljIG9uIDQwMXMuCiAgICAgIGNvbm5lY3QuY29yZS5vbkF1dGhvcml6ZVN1Y2Nlc3MoY29ubmVjdC5oaXRjaChjb25uZWN0LmNvcmUsIGNvbm5lY3QuY29yZS5faGFuZGxlQXV0aG9yaXplU3VjY2VzcykpOyAvLyBGb3IgYXV0aCByZXRyeSBsb2dpYyBvbiA0MDFzLgoKICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJVc2VyIEFnZW50OiAiICsgbmF2aWdhdG9yLnVzZXJBZ2VudCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJpc0NDUHYyOiAiICsgdHJ1ZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJpc0ZyYW1lZDogIiArIGNvbm5lY3QuaXNGcmFtZWQoKSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgY29ubmVjdC5jb3JlLnVwc3RyZWFtLm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5PVVRFUl9DT05URVhUX0lORk8sIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIHN0cmVhbXNWZXJzaW9uID0gZGF0YS5zdHJlYW1zVmVyc2lvbjsKICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIlN0cmVhbXNKUyBWZXJzaW9uOiAiICsgc3RyZWFtc1ZlcnNpb24pLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIH0pOwoKICAgICAgY29uZHVpdC5vblVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLlVQREFURV9DT05ORUNURURfQ0NQUywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIk51bWJlciBvZiBjb25uZWN0ZWQgQ0NQcyB1cGRhdGVkOiAiICsgZGF0YS5sZW5ndGgpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgY29ubmVjdC5udW1iZXJPZkNvbm5lY3RlZENDUHMgPSBkYXRhLmxlbmd0aDsKICAgICAgICBpZiAoZGF0YVtjb25uZWN0LmNvcmUudGFiSWRdICYmICFpc05hTihkYXRhW2Nvbm5lY3QuY29yZS50YWJJZF0ubGVuZ3RoKSl7CiAgICAgICAgICBpZiAoY29ubmVjdC5udW1iZXJPZkNvbm5lY3RlZENDUHNJblRoaXNUYWIgIT09IGRhdGFbY29ubmVjdC5jb3JlLnRhYklkXS5sZW5ndGgpIHsKICAgICAgICAgICAgY29ubmVjdC5udW1iZXJPZkNvbm5lY3RlZENDUHNJblRoaXNUYWIgPSBkYXRhW2Nvbm5lY3QuY29yZS50YWJJZF0ubGVuZ3RoOwogICAgICAgICAgICBpZiAoY29ubmVjdC5udW1iZXJPZkNvbm5lY3RlZENDUHNJblRoaXNUYWIgPiAxKSB7CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJUaGVyZSBhcmUgIiArIGNvbm5lY3QubnVtYmVyT2ZDb25uZWN0ZWRDQ1BzSW5UaGlzVGFiICsgIiBjb25uZWN0ZWQgQ0NQcyBpbiB0aGlzIHRhYi4gUGxlYXNlIGFkanVzdCB5b3VyIGltcGxlbWVudGF0aW9uIHRvIGF2b2lkIGNvbXBsaWNhdGlvbnMuIElmIHlvdSBhcmUgZW1iZWRkaW5nIENDUCwgcGxlYXNlIGRvIHNvIGV4Y2x1c2l2ZWx5IHdpdGggaW5pdENDUC4gSW5pdENDUCB3aWxsIG5vdCBsZXQgeW91IGVtYmVkIG1vcmUgdGhhbiBvbmUgQ0NQLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29ubmVjdC5wdWJsaXNoTWV0cmljKHsKICAgICAgICAgICAgICBuYW1lOiBDT05ORUNURURfQ0NQU19TSU5HTEVfVEFCLAogICAgICAgICAgICAgIGRhdGE6IHsgY291bnQ6IGNvbm5lY3QubnVtYmVyT2ZDb25uZWN0ZWRDQ1BzSW5UaGlzVGFifQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgY29ubmVjdC5jb3JlLmNsaWVudCA9IG5ldyBjb25uZWN0LlVwc3RyZWFtQ29uZHVpdENsaWVudChjb25kdWl0KTsKICAgICAgY29ubmVjdC5jb3JlLm1hc3RlckNsaWVudCA9IG5ldyBjb25uZWN0LlVwc3RyZWFtQ29uZHVpdE1hc3RlckNsaWVudChjb25kdWl0KTsKIAogICAgICAvLyBQYXNzIHRoZSBURVJNSU5BVEUgcmVxdWVzdCB1cHN0cmVhbSB0byB0aGUgc2hhcmVkIHdvcmtlci4KICAgICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkuc3Vic2NyaWJlKGNvbm5lY3QuRXZlbnRUeXBlLlRFUk1JTkFURSwKICAgICAgICBjb25kdWl0LnBhc3NVcHN0cmVhbSgpKTsKIAogICAgICAvLyBSZWZyZXNoIHRoZSBwYWdlIHdoZW4gd2UgcmVjZWl2ZSB0aGUgVEVSTUlOQVRFRCByZXNwb25zZSBmcm9tIHRoZQogICAgICAvLyBzaGFyZWQgd29ya2VyLgogICAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS5zdWJzY3JpYmUoY29ubmVjdC5FdmVudFR5cGUuVEVSTUlOQVRFRCwgZnVuY3Rpb24gKCkgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7CiAgICAgIH0pOwogCiAgICAgIHdvcmtlci5wb3J0LnN0YXJ0KCk7CgogICAgICBjb25kdWl0Lm9uVXBzdHJlYW0oY29ubmVjdC5Wb2ljZUlkRXZlbnRzLlVQREFURV9ET01BSU5fSUQsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5kb21haW5JZCkgewogICAgICAgICAgY29ubmVjdC5jb3JlLnZvaWNlSWREb21haW5JZCA9IGRhdGEuZG9tYWluSWQ7CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIC8vIHRyeSBmZXRjaGluZyB2b2ljZUlkJ3MgZG9tYWluSWQgb25jZSB0aGUgYWdlbnQgaXMgaW5pdGlhbGl6ZWQKICAgICAgY29ubmVjdC5hZ2VudChmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHZvaWNlSWQgPSBuZXcgY29ubmVjdC5Wb2ljZUlkKCk7CiAgICAgICAgdm9pY2VJZC5nZXREb21haW5JZCgpCiAgICAgICAgICAudGhlbihmdW5jdGlvbihkb21haW5JZCkgewogICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oInZvaWNlSWQgZG9tYWluSWQgc3VjY2Vzc2Z1bGx5IGZldGNoZWQgYXQgYWdlbnQgaW5pdGlhbGl6YXRpb246ICIgKyBkb21haW5JZCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygidm9pY2VJZCBkb21haW5JZCBub3QgZmV0Y2hlZCBhdCBhZ2VudCBpbml0aWFsaXphdGlvbiIpLndpdGhPYmplY3QoeyBlcnI6IGVyciB9KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgfSk7CiAgICAgIH0pOwogCiAgICAgIC8vIEF0dGVtcHQgdG8gZ2V0IHBlcm1pc3Npb24gdG8gc2hvdyBub3RpZmljYXRpb25zLgogICAgICB2YXIgbm0gPSBjb25uZWN0LmNvcmUuZ2V0Tm90aWZpY2F0aW9uTWFuYWdlcigpOwogICAgICBubS5yZXF1ZXN0UGVybWlzc2lvbigpOwogCiAgICAgIGNvbmR1aXQub25Eb3duc3RyZWFtKGNvbm5lY3QuRGlzYXN0ZXJSZWNvdmVyeUV2ZW50cy5JTklUX0RJU0FTVEVSX1JFQ09WRVJZLCBmdW5jdGlvbihwYXJhbXMpIHsKICAgICAgICBjb25uZWN0LmNvcmUuaW5pdERpc2FzdGVyUmVjb3ZlcnkocGFyYW1zKTsKICAgICAgfSkKICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiRmFpbGVkIHRvIGluaXRpYWxpemUgdGhlIEFQSSBzaGFyZWQgd29ya2VyLCB3ZSdyZSBkZWFkISIpCiAgICAgICAgLndpdGhFeGNlcHRpb24oZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KICB9OwoKICBjb25uZWN0LmNvcmUuX3NldFRhYklkID0gZnVuY3Rpb24oKSB7CiAgICB0cnkgewogICAgICBjb25uZWN0LmNvcmUudGFiSWQgPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShjb25uZWN0LlNlc3Npb25TdG9yYWdlS2V5cy5UQUJfSUQpOwogICAgICBpZiAoIWNvbm5lY3QuY29yZS50YWJJZCl7CiAgICAgICAgY29ubmVjdC5jb3JlLnRhYklkID0gY29ubmVjdC5yYW5kb21JZCgpOwogICAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGNvbm5lY3QuU2Vzc2lvblN0b3JhZ2VLZXlzLlRBQl9JRCwgY29ubmVjdC5jb3JlLnRhYklkKTsKICAgICAgfQogICAgICBjb25uZWN0LmNvcmUudXBzdHJlYW0uc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLlRBQl9JRCwge3RhYklkOiBjb25uZWN0LmNvcmUudGFiSWR9KTsKICAgIH0gY2F0Y2goZSkgewogICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJbVGFiIElkXSBUaGVyZSB3YXMgYW4gaXNzdWUgc2V0dGluZyB0aGUgdGFiIElkIikud2l0aEV4Y2VwdGlvbihlKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgfQogIH0KIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBJbml0aWFsaXplcyBDb25uZWN0IGJ5IGNyZWF0aW5nIG9yIGNvbm5lY3RpbmcgdG8gdGhlIEFQSSBTaGFyZWQgV29ya2VyLgogICAqIEluaXRpYWxpemVzIENvbm5lY3QgYnkgbG9hZGluZyB0aGUgQ0NQIGluIGFuIGlmcmFtZSBhbmQgY29ubmVjdGluZyB0byBpdC4KICAgKi8KICBjb25uZWN0LmNvcmUuaW5pdENDUCA9IGZ1bmN0aW9uIChjb250YWluZXJEaXYsIHBhcmFtc0luKSB7CiAgICBjb25uZWN0LmNvcmUuY2hlY2tOb3RJbml0aWFsaXplZCgpOwogICAgaWYgKGNvbm5lY3QuY29yZS5pbml0aWFsaXplZCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjb25uZWN0LmdldExvZygpLmluZm8oIklmcmFtZSBpbml0aWFsaXphdGlvbiBzdGFydGVkIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIHZhciBpbml0U3RhcnRUaW1lID0gRGF0ZS5ub3coKTsKICAgIC8vIENoZWNrIGlmIENDUCBpZnJhbWUgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZCB0aHJvdWdoIGluaXRDQ1AKICAgIHRyeSB7CiAgICAgIGlmIChjb25uZWN0LmNvcmUuX2dldENDUElmcmFtZSgpKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCdBdHRlbXB0ZWQgdG8gY2FsbCBpbml0Q0NQIHdoZW4gYW4gaWZyYW1lIGdlbmVyYXRlZCBieSBpbml0Q0NQIGFscmVhZHkgZXhpc3RzJykuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICB9IGNhdGNoKGUpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcignRXJyb3Igd2hpbGUgY2hlY2tpbmcgaWYgaW5pdENDUCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCcpLndpdGhFeGNlcHRpb24oZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KIAogICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCB3aGVuIGluc3RlYWQgb2YgdGFraW5nIGEgcGFyYW1zIG9iamVjdAogICAgLy8gYXMgaW5wdXQgd2Ugb25seSBhY2NlcHRlZCBjY3BVcmwuCiAgICB2YXIgcGFyYW1zID0ge307CiAgICBpZiAodHlwZW9mIChwYXJhbXNJbikgPT09ICdzdHJpbmcnKSB7CiAgICAgIHBhcmFtcy5jY3BVcmwgPSBwYXJhbXNJbjsKICAgIH0gZWxzZSB7CiAgICAgIHBhcmFtcyA9IHBhcmFtc0luOwogICAgfQogCiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoY29udGFpbmVyRGl2LCAnY29udGFpbmVyRGl2Jyk7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwocGFyYW1zLmNjcFVybCwgJ3BhcmFtcy5jY3BVcmwnKTsKIAogICAgLy8gQ3JlYXRlIHRoZSBDQ1AgaWZyYW1lIGFuZCBhcHBlbmQgaXQgdG8gdGhlIGNvbnRhaW5lciBkaXYuCiAgICB2YXIgaWZyYW1lID0gY29ubmVjdC5jb3JlLl9jcmVhdGVDQ1BJZnJhbWUoY29udGFpbmVyRGl2LCBwYXJhbXMpOwoKICAgIC8vIEluaXRpYWxpemUgdGhlIGV2ZW50IGJ1cyBhbmQgYWdlbnQgZGF0YSBwcm92aWRlcnMuCiAgICAvLyBOT1RFOiBTZXR0aW5nIGxvZ0V2ZW50cyBoZXJlIHRvIEZBTFNFIGluIG9yZGVyIHRvIGF2b2lkIGR1cGxpY2F0aW5nCiAgICAvLyBldmVudHMgd2hpY2ggYXJlIGxvZ2dlZCBpbiBDQ1AuCiAgICBjb25uZWN0LmNvcmUuZXZlbnRCdXMgPSBuZXcgY29ubmVjdC5FdmVudEJ1cyh7IGxvZ0V2ZW50czogZmFsc2UgfSk7CiAgICBjb25uZWN0LmNvcmUuYWdlbnREYXRhUHJvdmlkZXIgPSBuZXcgQWdlbnREYXRhUHJvdmlkZXIoY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkpOwogICAgY29ubmVjdC5jb3JlLm1lZGlhRmFjdG9yeSA9IG5ldyBjb25uZWN0Lk1lZGlhRmFjdG9yeShwYXJhbXMpOwogCiAgICAvLyBCdWlsZCB0aGUgdXBzdHJlYW0gY29uZHVpdCBjb21tdW5pY2F0aW5nIHdpdGggdGhlIENDUCBpZnJhbWUuCiAgICB2YXIgY29uZHVpdCA9IG5ldyBjb25uZWN0LklGcmFtZUNvbmR1aXQocGFyYW1zLmNjcFVybCwgd2luZG93LCBpZnJhbWUpOwogCiAgICAvLyBMZXQgQ0NQIGtub3cgaWYgaWZyYW1lIGlzIHZpc2libGUKICAgIGNvbm5lY3QuY29yZS5fc2VuZElmcmFtZVN0eWxlRGF0YVVwc3RyZWFtQWZ0ZXJSZWFzb25hYmxlV2FpdFRpbWUoaWZyYW1lLCBjb25kdWl0KTsKIAogICAgLy8gU2V0IHRoZSBnbG9iYWwgdXBzdHJlYW0gY29uZHVpdCBmb3IgZXh0ZXJuYWwgdXNlLgogICAgY29ubmVjdC5jb3JlLnVwc3RyZWFtID0gY29uZHVpdDsKIAogICAgLy8gSW5pdCB3ZWJTb2NrZXRQcm92aWRlcgogICAgY29ubmVjdC5jb3JlLndlYlNvY2tldFByb3ZpZGVyID0gbmV3IFdlYlNvY2tldFByb3ZpZGVyKCk7CiAKICAgIGNvbmR1aXQub25BbGxVcHN0cmVhbShjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS5icmlkZ2UoKSk7CiAKICAgIC8vIEluaXRpYWxpemUgdGhlIGtlZXBhbGl2ZSBtYW5hZ2VyLgogICAgY29ubmVjdC5jb3JlLmtlZXBhbGl2ZU1hbmFnZXIgPSBuZXcgS2VlcGFsaXZlTWFuYWdlcihjb25kdWl0LAogICAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKSwKICAgICAgcGFyYW1zLmNjcFN5blRpbWVvdXQgfHwgQ0NQX1NZTl9USU1FT1VULAogICAgICBwYXJhbXMuY2NwQWNrVGltZW91dCB8fCBDQ1BfQUNLX1RJTUVPVVQpCiAgICAgIDsKICAgIGNvbm5lY3QuY29yZS5pZnJhbWVSZWZyZXNoVGltZW91dCA9IG51bGw7CiAKICAgIC8vIEFsbG93IDUgc2VjIChkZWZhdWx0KSBiZWZvcmUgcmVjZWl2aW5nIHRoZSBmaXJzdCBBQ0sgZnJvbSB0aGUgQ0NQLgogICAgY29ubmVjdC5jb3JlLmNjcExvYWRUaW1lb3V0SW5zdGFuY2UgPSBnbG9iYWwuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgIGNvbm5lY3QuY29yZS5jY3BMb2FkVGltZW91dEluc3RhbmNlID0gbnVsbDsKICAgICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkudHJpZ2dlcihjb25uZWN0LkV2ZW50VHlwZS5BQ0tfVElNRU9VVCk7CiAgICB9LCBwYXJhbXMuY2NwTG9hZFRpbWVvdXQgfHwgQ0NQX0xPQURfVElNRU9VVCk7CgogICAgY29ubmVjdC5nZXRMb2coKS5zY2hlZHVsZVVwc3RyZWFtT3V0ZXJDb250ZXh0Q0NQTG9nc1B1c2goY29uZHVpdCk7CiAgICBjb25uZWN0LmdldExvZygpLnNjaGVkdWxlVXBzdHJlYW1PdXRlckNvbnRleHRDQ1BzZXJ2ZXJCb3VuZExvZ3NQdXNoKGNvbmR1aXQpOwogCiAgICAvLyBPbmNlIHdlIHJlY2VpdmUgdGhlIGZpcnN0IEFDSywgc2V0dXAgb3VyIHVwc3RyZWFtIEFQSSBjbGllbnQgYW5kIGVzdGFibGlzaAogICAgLy8gdGhlIFNZTi9BQ0sgcmVmcmVzaCBmbG93LgogICAgY29uZHVpdC5vblVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkFDS05PV0xFREdFLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIkFja25vd2xlZGdlZCBieSB0aGUgQ0NQISIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIGNvbm5lY3QuY29yZS5jbGllbnQgPSBuZXcgY29ubmVjdC5VcHN0cmVhbUNvbmR1aXRDbGllbnQoY29uZHVpdCk7CiAgICAgIGNvbm5lY3QuY29yZS5tYXN0ZXJDbGllbnQgPSBuZXcgY29ubmVjdC5VcHN0cmVhbUNvbmR1aXRNYXN0ZXJDbGllbnQoY29uZHVpdCk7CiAgICAgIGNvbm5lY3QuY29yZS5wb3J0U3RyZWFtSWQgPSBkYXRhLmlkOwoKICAgICAgaWYgKHBhcmFtcy5zb2Z0cGhvbmUgfHwgcGFyYW1zLmNoYXQgfHwgcGFyYW1zLnBhZ2VPcHRpb25zKSB7CiAgICAgICAgLy8gU2VuZCBjb25maWd1cmF0aW9uIHVwIHRvIHRoZSBDQ1AuCiAgICAgICAgLy9zZXQgaXQgdG8gZmFsc2UgaWYgc2Vjb25kYXJ5CiAgICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQ09ORklHVVJFLCB7CiAgICAgICAgICBzb2Z0cGhvbmU6IHBhcmFtcy5zb2Z0cGhvbmUsCiAgICAgICAgICBjaGF0OiBwYXJhbXMuY2hhdCwKICAgICAgICAgIHBhZ2VPcHRpb25zOiBwYXJhbXMucGFnZU9wdGlvbnMKICAgICAgICB9KTsKICAgICAgfQogCiAgICAgIC8vIElmIERSIGVuYWJsZWQsIHNldCB0aGlzIENDUCBpbnN0YW5jZSBhcyBwYXJ0IG9mIGEgRGlzYXN0ZXIgUmVjb3ZlcnkgZmxlZXQKICAgICAgaWYgKHBhcmFtcy5kaXNhc3RlclJlY292ZXJ5T24pIHsKICAgICAgICBjb25uZWN0LmNvcmUucmVnaW9uID0gcGFyYW1zLnJlZ2lvbjsKICAgICAgICBjb25uZWN0LmNvcmUuc3VwcHJlc3NDb250YWN0cyA9IHN1cHByZXNzQ29udGFjdHM7CiAgICAgICAgY29ubmVjdC5jb3JlLmZvcmNlT2ZmbGluZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5EaXNhc3RlclJlY292ZXJ5RXZlbnRzLlNFVF9PRkZMSU5FKTsKICAgICAgICB9ICAgICAgIAogICAgICAgIGNvbmR1aXQuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRGlzYXN0ZXJSZWNvdmVyeUV2ZW50cy5JTklUX0RJU0FTVEVSX1JFQ09WRVJZLCBwYXJhbXMpOwogICAgICB9CiAKICAgICAgaWYgKGNvbm5lY3QuY29yZS5jY3BMb2FkVGltZW91dEluc3RhbmNlKSB7CiAgICAgICAgZ2xvYmFsLmNsZWFyVGltZW91dChjb25uZWN0LmNvcmUuY2NwTG9hZFRpbWVvdXRJbnN0YW5jZSk7CiAgICAgICAgY29ubmVjdC5jb3JlLmNjcExvYWRUaW1lb3V0SW5zdGFuY2UgPSBudWxsOwogICAgICB9CgogICAgICBjb25kdWl0LnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5PVVRFUl9DT05URVhUX0lORk8sIHsgc3RyZWFtc1ZlcnNpb246IGNvbm5lY3QudmVyc2lvbiB9KTsKIAogICAgICBjb25uZWN0LmNvcmUua2VlcGFsaXZlTWFuYWdlci5zdGFydCgpOwogICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7CgogICAgICBjb25uZWN0LmNvcmUuaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLklOSVQpOwogICAgICBpZiAoaW5pdFN0YXJ0VGltZSkgewogICAgICAgIHZhciBpbml0VGltZSA9IERhdGUubm93KCkgLSBpbml0U3RhcnRUaW1lOwogICAgICAgIHZhciByZWZyZXNoQXR0ZW1wdHMgPSBjb25uZWN0LmNvcmUuaWZyYW1lUmVmcmVzaEF0dGVtcHQgfHwgMDsKICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oJ0lmcmFtZSBpbml0aWFsaXphdGlvbiBzdWNjZWVkZWQnKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbyhgSWZyYW1lIGluaXRpYWxpemF0aW9uIHRpbWUgJHtpbml0VGltZX1gKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbyhgSWZyYW1lIHJlZnJlc2ggYXR0ZW1wdHMgJHtyZWZyZXNoQXR0ZW1wdHN9YCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgIGNvbm5lY3QucHVibGlzaE1ldHJpYyh7CiAgICAgICAgICAgIG5hbWU6IENTTV9JRlJBTUVfUkVGUkVTSF9BVFRFTVBUUywKICAgICAgICAgICAgZGF0YTogeyBjb3VudDogcmVmcmVzaEF0dGVtcHRzfSAKICAgICAgICAgIH0pOwogICAgICAgICAgY29ubmVjdC5wdWJsaXNoTWV0cmljKHsKICAgICAgICAgICAgbmFtZTogQ1NNX0lGUkFNRV9JTklUSUFMSVpBVElPTl9TVUNDRVNTLAogICAgICAgICAgICBkYXRhOiB7IGNvdW50OiAxfSAKICAgICAgICAgIH0pOwogICAgICAgICAgY29ubmVjdC5wdWJsaXNoTWV0cmljKHsKICAgICAgICAgICAgbmFtZTogQ1NNX0lGUkFNRV9JTklUSUFMSVpBVElPTl9USU1FLAogICAgICAgICAgICBkYXRhOiB7IGNvdW50OiBpbml0VGltZX0gCiAgICAgICAgICB9KTsKICAgICAgICAgIC8vdG8gYXZvaWQgbWV0cmljIGVtaXNzaW9uIGFmdGVyIGluaXRpYWxpemF0aW9uCiAgICAgICAgICBpbml0U3RhcnRUaW1lID0gbnVsbDsKICAgICAgICB9LDEwMDApCiAgICAgIH0KICAgIH0pOwogCiAgICAvLyBBZGQgYW55IGxvZ3MgZnJvbSB0aGUgdXBzdHJlYW0gdG8gb3VyIG93biBsb2dnZXIuCiAgICBjb25kdWl0Lm9uVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuTE9HLCBmdW5jdGlvbiAobG9nRW50cnkpIHsKICAgICAgaWYgKGxvZ0VudHJ5LmxvZ2dlcklkICE9PSBjb25uZWN0LmdldExvZygpLmdldExvZ2dlcklkKCkpIHsKICAgICAgICBjb25uZWN0LmdldExvZygpLmFkZExvZ0VudHJ5KGNvbm5lY3QuTG9nRW50cnkuZnJvbU9iamVjdChsb2dFbnRyeSkpOwogICAgICB9CiAgICB9KTsKIAogICAgLy8gUG9wIGEgbG9naW4gcGFnZSB3aGVuIHdlIGVuY291bnRlciBhbiBBQ0sgdGltZW91dC4KICAgIGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5BQ0tfVElNRU9VVCwgZnVuY3Rpb24gKCkgewogICAgICAvLyBsb2dpblBvcHVwIGlzIHRydWUgYnkgZGVmYXVsdCwgb25seSBmYWxzZSBpZiBleHBsaWNpdGx5IHNldCB0byBmYWxzZS4KICAgICAgaWYgKHBhcmFtcy5sb2dpblBvcHVwICE9PSBmYWxzZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgbG9naW5VcmwgPSBnZXRMb2dpblVybChwYXJhbXMpOwogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJBQ0tfVElNRU9VVCBvY2N1cnJlZCwgYXR0ZW1wdGluZyB0byBwb3AgdGhlIGxvZ2luIHBhZ2UgaWYgbm90IGFscmVhZHkgb3Blbi4iKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgLy8gY2xlYXIgb3V0IGxhc3Qgb3BlbmVkIHRpbWVzdGFtcCBmb3IgU0FNTCBhdXRoZW50aWNhdGlvbiB3aGVuIHRoZXJlIGlzIEFDS19USU1FT1VUCiAgICAgICAgICBpZiAocGFyYW1zLmxvZ2luVXJsKSB7CiAgICAgICAgICAgIGNvbm5lY3QuY29yZS5nZXRQb3B1cE1hbmFnZXIoKS5jbGVhcihjb25uZWN0Lk1hc3RlclRvcGljcy5MT0dJTl9QT1BVUCk7CiAgICAgICAgICB9CiAgICAgICAgICBjb25uZWN0LmNvcmUubG9naW5XaW5kb3cgPSBjb25uZWN0LmNvcmUuZ2V0UG9wdXBNYW5hZ2VyKCkub3Blbihsb2dpblVybCwgY29ubmVjdC5NYXN0ZXJUb3BpY3MuTE9HSU5fUE9QVVAsIHBhcmFtcy5sb2dpbk9wdGlvbnMpOwogCiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiQUNLX1RJTUVPVVQgb2NjdXJyZWQgYnV0IHdlIGFyZSB1bmFibGUgdG8gb3BlbiB0aGUgbG9naW4gcG9wdXAuIikud2l0aEV4Y2VwdGlvbihlKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGNvbm5lY3QuY29yZS5pZnJhbWVSZWZyZXNoVGltZW91dCA9PSBudWxsKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGNvbmR1aXQub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BQ0tOT1dMRURHRSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7CiAgICAgICAgICAgIGdsb2JhbC5jbGVhclRpbWVvdXQoY29ubmVjdC5jb3JlLmlmcmFtZVJlZnJlc2hUaW1lb3V0KTsKICAgICAgICAgICAgY29ubmVjdC5jb3JlLmlmcmFtZVJlZnJlc2hUaW1lb3V0ID0gbnVsbDsKICAgICAgICAgICAgY29ubmVjdC5jb3JlLmdldFBvcHVwTWFuYWdlcigpLmNsZWFyKGNvbm5lY3QuTWFzdGVyVG9waWNzLkxPR0lOX1BPUFVQKTsKICAgICAgICAgICAgaWYgKChwYXJhbXMubG9naW5Qb3B1cEF1dG9DbG9zZSB8fCAocGFyYW1zLmxvZ2luT3B0aW9ucyAmJiBwYXJhbXMubG9naW5PcHRpb25zLmF1dG9DbG9zZSkpICYmIGNvbm5lY3QuY29yZS5sb2dpbldpbmRvdykgewogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5sb2dpbldpbmRvdy5jbG9zZSgpOwogICAgICAgICAgICAgIGNvbm5lY3QuY29yZS5sb2dpbldpbmRvdyA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgICAgY29ubmVjdC5jb3JlLl9yZWZyZXNoSWZyYW1lT25UaW1lb3V0KHBhcmFtcywgY29udGFpbmVyRGl2KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJFcnJvciBvY2N1cnJlZCB3aGlsZSByZWZyZXNoaW5nIGlmcmFtZSIpLndpdGhFeGNlcHRpb24oZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogCiAgICBpZiAocGFyYW1zLm9uVmlld0NvbnRhY3QpIHsKICAgICAgY29ubmVjdC5jb3JlLm9uVmlld0NvbnRhY3QocGFyYW1zLm9uVmlld0NvbnRhY3QpOwogICAgfQoKICAgIGNvbmR1aXQub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5VUERBVEVfQ09OTkVDVEVEX0NDUFMsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGNvbm5lY3QubnVtYmVyT2ZDb25uZWN0ZWRDQ1BzID0gZGF0YS5sZW5ndGg7CiAgICB9KTsKCiAgICBjb25kdWl0Lm9uVXBzdHJlYW0oY29ubmVjdC5Wb2ljZUlkRXZlbnRzLlVQREFURV9ET01BSU5fSUQsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGlmIChkYXRhICYmIGRhdGEuZG9tYWluSWQpIHsKICAgICAgICBjb25uZWN0LmNvcmUudm9pY2VJZERvbWFpbklkID0gZGF0YS5kb21haW5JZDsKICAgICAgfQogICAgfSk7CgogICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkuc3Vic2NyaWJlKGNvbm5lY3QuRXZlbnRUeXBlLklGUkFNRV9SRVRSSUVTX0VYSEFVU1RFRCwgZnVuY3Rpb24gKCkgewogICAgICBpZiAoaW5pdFN0YXJ0VGltZSkgewogICAgICAgIHZhciByZWZyZXNoQXR0ZW1wdHMgPSBjb25uZWN0LmNvcmUuaWZyYW1lUmVmcmVzaEF0dGVtcHQgLSAxOwogICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygnSWZyYW1lIGluaXRpYWxpemF0aW9uIGZhaWxlZCcpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKGBUaW1lIGFmdGVyIGlmcmFtZSBpbml0aWFsaXphdGlvbiBzdGFydGVkICR7RGF0ZS5ub3coKSAtIGluaXRTdGFydFRpbWV9YCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oYElmcmFtZSByZWZyZXNoIGF0dGVtcHRzICR7cmVmcmVzaEF0dGVtcHRzfWApLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgY29ubmVjdC5wdWJsaXNoTWV0cmljKHsKICAgICAgICAgIG5hbWU6IENTTV9JRlJBTUVfUkVGUkVTSF9BVFRFTVBUUywKICAgICAgICAgIGRhdGE6IHsgY291bnQ6IHJlZnJlc2hBdHRlbXB0c30KICAgICAgICB9KTsKICAgICAgICBjb25uZWN0LnB1Ymxpc2hNZXRyaWMoewogICAgICAgICAgbmFtZTogQ1NNX0lGUkFNRV9JTklUSUFMSVpBVElPTl9TVUNDRVNTLAogICAgICAgICAgZGF0YTogeyBjb3VudDogMH0KICAgICAgICB9KTsKICAgICAgICBpbml0U3RhcnRUaW1lID0gbnVsbDsKICAgICAgfQogICAgfSk7CgogICAgLy8ga2VlcCB0aGUgc29mdHBob25lIHBhcmFtcyBmb3IgZXh0ZXJuYWwgdXNlCiAgICBjb25uZWN0LmNvcmUuc29mdHBob25lUGFyYW1zID0gcGFyYW1zLnNvZnRwaG9uZTsKICB9OwoKICBjb25uZWN0LmNvcmUub25JZnJhbWVSZXRyaWVzRXhoYXVzdGVkID0gZnVuY3Rpb24oZikgewogICAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzKCkuc3Vic2NyaWJlKGNvbm5lY3QuRXZlbnRUeXBlLklGUkFNRV9SRVRSSUVTX0VYSEFVU1RFRCwgZik7CiAgfQoKICBjb25uZWN0LmNvcmUuX3JlZnJlc2hJZnJhbWVPblRpbWVvdXQgPSBmdW5jdGlvbihpbml0Q0NQUGFyYW1zLCBjb250YWluZXJEaXYpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChpbml0Q0NQUGFyYW1zLCAnaW5pdENDUFBhcmFtcycpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGNvbnRhaW5lckRpdiwgJ2NvbnRhaW5lckRpdicpOwogICAgdmFyIGNjcElmcmFtZVJlZnJlc2hJbnRlcnZhbCA9IChpbml0Q0NQUGFyYW1zLmRpc2FzdGVyUmVjb3ZlcnlPbikgPyBDQ1BfRFJfSUZSQU1FX1JFRlJFU0hfSU5URVJWQUwgOiBDQ1BfSUZSQU1FX1JFRlJFU0hfSU5URVJWQUw7CiAgICB2YXIgcmV0cnlEZWxheSA9IEFXUy51dGlsLmNhbGN1bGF0ZVJldHJ5RGVsYXkoY29ubmVjdC5jb3JlLmlmcmFtZVJlZnJlc2hBdHRlbXB0IHx8IDAsIHsgYmFzZTogMjAwMCB9KTsKICAgIHZhciB0aW1lb3V0ID0gY2NwSWZyYW1lUmVmcmVzaEludGVydmFsICsgcmV0cnlEZWxheTsKICAgIGdsb2JhbC5jbGVhclRpbWVvdXQoY29ubmVjdC5jb3JlLmlmcmFtZVJlZnJlc2hUaW1lb3V0KTsKICAgIGNvbm5lY3QuY29yZS5pZnJhbWVSZWZyZXNoVGltZW91dCA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICBjb25uZWN0LmNvcmUuaWZyYW1lUmVmcmVzaEF0dGVtcHQgPSAoY29ubmVjdC5jb3JlLmlmcmFtZVJlZnJlc2hBdHRlbXB0IHx8IDApICsgMTsKICAgICAgaWYgKGNvbm5lY3QuY29yZS5pZnJhbWVSZWZyZXNoQXR0ZW1wdCA8PSBDQ1BfSUZSQU1FX1JFRlJFU0hfTElNSVQpIHsKICAgICAgICB0cnkgewogICAgICAgICAgdmFyIGlmcmFtZSA9IGNvbm5lY3QuY29yZS5fZ2V0Q0NQSWZyYW1lKCk7CiAgICAgICAgICBpZiAoaWZyYW1lKSB7CiAgICAgICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7IC8vIFRoZSBvbmx5IHdheSB0byBmb3JjZSBhIHN5bmNocm9ub3VzIHJlbG9hZCBvZiB0aGUgaWZyYW1lIHdpdGhvdXQgdGhlIG9sZCBpZnJhbWUgY29udGludWluZyB0byBmdW5jdGlvbiBpcyB0byByZW1vdmUgdGhlIG9sZCBpZnJhbWUgZW50aXJlbHkuCiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbmV3SWZyYW1lID0gY29ubmVjdC5jb3JlLl9jcmVhdGVDQ1BJZnJhbWUoY29udGFpbmVyRGl2LCBpbml0Q0NQUGFyYW1zKTsKICAgICAgICAgIGNvbm5lY3QuY29yZS51cHN0cmVhbS51cHN0cmVhbS5vdXRwdXQgPSBuZXdJZnJhbWUuY29udGVudFdpbmRvdzsgLy9yZXBsYWNlcyB0aGUgb3V0cHV0IHdpbmRvdyAob2xkIGlmcmFtZSdzIGNvbnRlbnRXaW5kb3cpIG9mIHRoZSBXaW5kb3dJT1N0cmVhbSAod2l0aGluIHRoZSBJRnJhbWVDb25kdWl0KSB3aXRoIHRoZSBuZXcgaWZyYW1lJ3MgY29udGVudFdpbmRvdy4KICAgICAgICAgIGNvbm5lY3QuY29yZS5fc2VuZElmcmFtZVN0eWxlRGF0YVVwc3RyZWFtQWZ0ZXJSZWFzb25hYmxlV2FpdFRpbWUobmV3SWZyYW1lLCBjb25uZWN0LmNvcmUudXBzdHJlYW0pOwogICAgICAgIH0gY2F0Y2goZSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcignRXJyb3Igd2hpbGUgY2hlY2tpbmcgZm9yLCBhbmQgcmVjcmVhdGluZywgdGhlIENDUCBJRnJhbWUnKS53aXRoRXhjZXB0aW9uKGUpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgfQogICAgICAgIGNvbm5lY3QuY29yZS5fcmVmcmVzaElmcmFtZU9uVGltZW91dChpbml0Q0NQUGFyYW1zLCBjb250YWluZXJEaXYpOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpLnRyaWdnZXIoY29ubmVjdC5FdmVudFR5cGUuSUZSQU1FX1JFVFJJRVNfRVhIQVVTVEVEKTsKICAgICAgICBnbG9iYWwuY2xlYXJUaW1lb3V0KGNvbm5lY3QuY29yZS5pZnJhbWVSZWZyZXNoVGltZW91dCk7CiAgICAgIH0KICAgIH0sIHRpbWVvdXQpOwogIH0KCgogIGNvbm5lY3QuY29yZS5fZ2V0Q0NQSWZyYW1lID0gZnVuY3Rpb24oKSB7CiAgICBmb3IgKHZhciBpZnJhbWUgb2Ygd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpZnJhbWUnKSkgewogICAgICBpZiAoaWZyYW1lLm5hbWUgPT09IENDUF9JRlJBTUVfTkFNRSkgewogICAgICAgIHJldHVybiBpZnJhbWU7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwogIH0KCiAgY29ubmVjdC5jb3JlLl9jcmVhdGVDQ1BJZnJhbWUgPSBmdW5jdGlvbihjb250YWluZXJEaXYsIGluaXRDQ1BQYXJhbXMpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChpbml0Q0NQUGFyYW1zLCAnaW5pdENDUFBhcmFtcycpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGNvbnRhaW5lckRpdiwgJ2NvbnRhaW5lckRpdicpOwogICAgdmFyIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogICAgaWZyYW1lLnNyYyA9IGluaXRDQ1BQYXJhbXMuY2NwVXJsOwogICAgaWZyYW1lLmFsbG93ID0gIm1pY3JvcGhvbmU7IGF1dG9wbGF5IjsKICAgIGlmcmFtZS5zdHlsZSA9ICJ3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlIjsKICAgIGlmcmFtZS50aXRsZSA9IGluaXRDQ1BQYXJhbXMuaWZyYW1lVGl0bGUgfHwgQ0NQX0lGUkFNRV9OQU1FOwogICAgaWZyYW1lLm5hbWUgPSBDQ1BfSUZSQU1FX05BTUU7CiAgICBjb250YWluZXJEaXYuYXBwZW5kQ2hpbGQoaWZyYW1lKTsKICAgIHJldHVybiBpZnJhbWU7CiAgfQoKICBjb25uZWN0LmNvcmUuX3NlbmRJZnJhbWVTdHlsZURhdGFVcHN0cmVhbUFmdGVyUmVhc29uYWJsZVdhaXRUaW1lID0gZnVuY3Rpb24oaWZyYW1lLCBjb25kdWl0KSB7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoaWZyYW1lLCAnaWZyYW1lJyk7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoY29uZHVpdCwgJ2NvbmR1aXQnKTsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGlmcmFtZSwgbnVsbCk7CiAgICAgIHZhciBkYXRhID0gewogICAgICAgIGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksCiAgICAgICAgb2Zmc2V0V2lkdGg6IGlmcmFtZS5vZmZzZXRXaWR0aCwKICAgICAgICBvZmZzZXRIZWlnaHQ6IGlmcmFtZS5vZmZzZXRIZWlnaHQsCiAgICAgICAgY2xpZW50UmVjdHNMZW5ndGg6IGlmcmFtZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aAogICAgICB9OwogICAgICBjb25kdWl0LnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5JRlJBTUVfU1RZTEUsIGRhdGEpOwogICAgfSwgMTAwMDApOwogIH0KIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICB2YXIgS2VlcGFsaXZlTWFuYWdlciA9IGZ1bmN0aW9uIChjb25kdWl0LCBldmVudEJ1cywgc3luVGltZW91dCwgYWNrVGltZW91dCkgewogICAgdGhpcy5jb25kdWl0ID0gY29uZHVpdDsKICAgIHRoaXMuZXZlbnRCdXMgPSBldmVudEJ1czsKICAgIHRoaXMuc3luVGltZW91dCA9IHN5blRpbWVvdXQ7CiAgICB0aGlzLmFja1RpbWVvdXQgPSBhY2tUaW1lb3V0OwogICAgdGhpcy5hY2tUaW1lciA9IG51bGw7CiAgICB0aGlzLnN5blRpbWVyID0gbnVsbDsKICAgIHRoaXMuYWNrU3ViID0gbnVsbDsKICB9OwogCiAgS2VlcGFsaXZlTWFuYWdlci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAKICAgIHRoaXMuY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU1lOQ0hST05JWkUpOwogICAgdGhpcy5hY2tTdWIgPSB0aGlzLmNvbmR1aXQub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BQ0tOT1dMRURHRSwgZnVuY3Rpb24gKCkgewogICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7CiAgICAgIGdsb2JhbC5jbGVhclRpbWVvdXQoc2VsZi5hY2tUaW1lcik7CiAgICAgIHNlbGYuX2RlZmVyU3RhcnQoKTsKICAgIH0pOwogICAgdGhpcy5hY2tUaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgc2VsZi5hY2tTdWIudW5zdWJzY3JpYmUoKTsKICAgICAgc2VsZi5ldmVudEJ1cy50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLkFDS19USU1FT1VUKTsKICAgICAgc2VsZi5fZGVmZXJTdGFydCgpOwogICAgfSwgdGhpcy5hY2tUaW1lb3V0KTsKICB9OwoKICAvL0ZpeGVzIHRoZSBrZWVwYWxpdmVtYW5hZ2VyLgogIEtlZXBhbGl2ZU1hbmFnZXIucHJvdG90eXBlLl9kZWZlclN0YXJ0ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5zeW5UaW1lciA9IGdsb2JhbC5zZXRUaW1lb3V0KGNvbm5lY3QuaGl0Y2godGhpcywgdGhpcy5zdGFydCksIHRoaXMuc3luVGltZW91dCk7CiAgfTsKCiAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IG9ubHksIGluIGNhc2UgY3VzdG9tZXJzIGFyZSB1c2luZyB0aGlzIHRvIHN0YXJ0IHRoZSBrZWVwYWxpdmVtYW5hZ2VyIGZvciBzb21lIHJlYXNvbi4KICBLZWVwYWxpdmVNYW5hZ2VyLnByb3RvdHlwZS5kZWZlclN0YXJ0ID0gZnVuY3Rpb24gKCkgewogICAgaWYgKHRoaXMuc3luVGltZXIgPT0gbnVsbCkgewogICAgICB0aGlzLnN5blRpbWVyID0gZ2xvYmFsLnNldFRpbWVvdXQoY29ubmVjdC5oaXRjaCh0aGlzLCB0aGlzLnN0YXJ0KSwgdGhpcy5zeW5UaW1lb3V0KTsKICAgIH0KICB9OwogCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwogCiAgdmFyIFdlYlNvY2tldFByb3ZpZGVyID0gZnVuY3Rpb24gKCkgewogCiAgICB2YXIgY2FsbGJhY2tzID0gewogICAgICBpbml0RmFpbHVyZTogbmV3IFNldCgpLAogICAgICBzdWJzY3JpcHRpb25VcGRhdGU6IG5ldyBTZXQoKSwKICAgICAgc3Vic2NyaXB0aW9uRmFpbHVyZTogbmV3IFNldCgpLAogICAgICB0b3BpYzogbmV3IE1hcCgpLAogICAgICBhbGxNZXNzYWdlOiBuZXcgU2V0KCksCiAgICAgIGNvbm5lY3Rpb25HYWluOiBuZXcgU2V0KCksCiAgICAgIGNvbm5lY3Rpb25Mb3N0OiBuZXcgU2V0KCksCiAgICAgIGNvbm5lY3Rpb25PcGVuOiBuZXcgU2V0KCksCiAgICAgIGNvbm5lY3Rpb25DbG9zZTogbmV3IFNldCgpCiAgICB9OwogCiAgICB2YXIgaW52b2tlQ2FsbGJhY2tzID0gZnVuY3Rpb24gKGNhbGxiYWNrcywgcmVzcG9uc2UpIHsKICAgICAgY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpOwogICAgICB9KTsKICAgIH07CiAKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuSU5JVF9GQUlMVVJFLCBmdW5jdGlvbiAoKSB7CiAgICAgIGludm9rZUNhbGxiYWNrcyhjYWxsYmFja3MuaW5pdEZhaWx1cmUpOwogICAgfSk7CgogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LldlYlNvY2tldEV2ZW50cy5DT05ORUNUSU9OX09QRU4sIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpbnZva2VDYWxsYmFja3MoY2FsbGJhY2tzLmNvbm5lY3Rpb25PcGVuLCByZXNwb25zZSk7CiAgICB9KTsKCiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLkNPTk5FQ1RJT05fQ0xPU0UsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpbnZva2VDYWxsYmFja3MoY2FsbGJhY2tzLmNvbm5lY3Rpb25DbG9zZSwgcmVzcG9uc2UpOwogICAgfSk7CgogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LldlYlNvY2tldEV2ZW50cy5DT05ORUNUSU9OX0dBSU4sIGZ1bmN0aW9uICgpIHsKICAgICAgaW52b2tlQ2FsbGJhY2tzKGNhbGxiYWNrcy5jb25uZWN0aW9uR2Fpbik7CiAgICB9KTsKCiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLkNPTk5FQ1RJT05fTE9TVCwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIGludm9rZUNhbGxiYWNrcyhjYWxsYmFja3MuY29ubmVjdGlvbkxvc3QsIHJlc3BvbnNlKTsKICAgIH0pOwogCiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLlNVQlNDUklQVElPTl9VUERBVEUsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpbnZva2VDYWxsYmFja3MoY2FsbGJhY2tzLnN1YnNjcmlwdGlvblVwZGF0ZSwgcmVzcG9uc2UpOwogICAgfSk7CiAKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuU1VCU0NSSVBUSU9OX0ZBSUxVUkUsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBpbnZva2VDYWxsYmFja3MoY2FsbGJhY2tzLnN1YnNjcmlwdGlvbkZhaWx1cmUsIHJlc3BvbnNlKTsKICAgIH0pOwogCiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLkFMTF9NRVNTQUdFLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaW52b2tlQ2FsbGJhY2tzKGNhbGxiYWNrcy5hbGxNZXNzYWdlLCByZXNwb25zZSk7CiAgICAgIGlmIChjYWxsYmFja3MudG9waWMuaGFzKHJlc3BvbnNlLnRvcGljKSkgewogICAgICAgIGludm9rZUNhbGxiYWNrcyhjYWxsYmFja3MudG9waWMuZ2V0KHJlc3BvbnNlLnRvcGljKSwgcmVzcG9uc2UpOwogICAgICB9CiAgICB9KTsKIAogICAgdGhpcy5zZW5kTWVzc2FnZSA9IGZ1bmN0aW9uICh3ZWJTb2NrZXRQYXlsb2FkKSB7CiAgICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LldlYlNvY2tldEV2ZW50cy5TRU5ELCB3ZWJTb2NrZXRQYXlsb2FkKTsKICAgIH07CiAKICAgIHRoaXMub25Jbml0RmFpbHVyZSA9IGZ1bmN0aW9uIChjYikgewogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgY2FsbGJhY2tzLmluaXRGYWlsdXJlLmFkZChjYik7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5pbml0RmFpbHVyZS5kZWxldGUoY2IpOwogICAgICB9OwogICAgfTsKCiAgICB0aGlzLm9uQ29ubmVjdGlvbk9wZW4gPSBmdW5jdGlvbihjYikgewogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgY2FsbGJhY2tzLmNvbm5lY3Rpb25PcGVuLmFkZChjYik7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5jb25uZWN0aW9uT3Blbi5kZWxldGUoY2IpOwogICAgICB9OwogICAgfTsKCiAgICB0aGlzLm9uQ29ubmVjdGlvbkNsb3NlID0gZnVuY3Rpb24oY2IpIHsKICAgICAgY29ubmVjdC5hc3NlcnRUcnVlKGNvbm5lY3QuaXNGdW5jdGlvbihjYiksICdtZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgICAgIGNhbGxiYWNrcy5jb25uZWN0aW9uQ2xvc2UuYWRkKGNiKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2tzLmNvbm5lY3Rpb25DbG9zZS5kZWxldGUoY2IpOwogICAgICB9OwogICAgfTsKCiAgICB0aGlzLm9uQ29ubmVjdGlvbkdhaW4gPSBmdW5jdGlvbiAoY2IpIHsKICAgICAgY29ubmVjdC5hc3NlcnRUcnVlKGNvbm5lY3QuaXNGdW5jdGlvbihjYiksICdtZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgICAgIGNhbGxiYWNrcy5jb25uZWN0aW9uR2Fpbi5hZGQoY2IpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjYWxsYmFja3MuY29ubmVjdGlvbkdhaW4uZGVsZXRlKGNiKTsKICAgICAgfTsKICAgIH07CiAKICAgIHRoaXMub25Db25uZWN0aW9uTG9zdCA9IGZ1bmN0aW9uIChjYikgewogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgY2FsbGJhY2tzLmNvbm5lY3Rpb25Mb3N0LmFkZChjYik7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5jb25uZWN0aW9uTG9zdC5kZWxldGUoY2IpOwogICAgICB9OwogICAgfTsKIAogICAgdGhpcy5vblN1YnNjcmlwdGlvblVwZGF0ZSA9IGZ1bmN0aW9uIChjYikgewogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgY2FsbGJhY2tzLnN1YnNjcmlwdGlvblVwZGF0ZS5hZGQoY2IpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjYWxsYmFja3Muc3Vic2NyaXB0aW9uVXBkYXRlLmRlbGV0ZShjYik7CiAgICAgIH07CiAgICB9OwogCiAgICB0aGlzLm9uU3Vic2NyaXB0aW9uRmFpbHVyZSA9IGZ1bmN0aW9uIChjYikgewogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgY2FsbGJhY2tzLnN1YnNjcmlwdGlvbkZhaWx1cmUuYWRkKGNiKTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gY2FsbGJhY2tzLnN1YnNjcmlwdGlvbkZhaWx1cmUuZGVsZXRlKGNiKTsKICAgICAgfTsKICAgIH07CiAKICAgIHRoaXMuc3Vic2NyaWJlVG9waWNzID0gZnVuY3Rpb24gKHRvcGljcykgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwodG9waWNzLCAndG9waWNzJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0VHJ1ZShjb25uZWN0LmlzQXJyYXkodG9waWNzKSwgJ3RvcGljcyBtdXN0IGJlIGEgYXJyYXknKTsKICAgICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLlNVQlNDUklCRSwgdG9waWNzKTsKICAgIH07CiAKICAgIHRoaXMub25NZXNzYWdlID0gZnVuY3Rpb24gKHRvcGljTmFtZSwgY2IpIHsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHRvcGljTmFtZSwgJ3RvcGljTmFtZScpOwogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGNiKSwgJ21ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgaWYgKGNhbGxiYWNrcy50b3BpYy5oYXModG9waWNOYW1lKSkgewogICAgICAgIGNhbGxiYWNrcy50b3BpYy5nZXQodG9waWNOYW1lKS5hZGQoY2IpOwogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrcy50b3BpYy5zZXQodG9waWNOYW1lLCBuZXcgU2V0KFtjYl0pKTsKICAgICAgfQogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjYWxsYmFja3MudG9waWMuZ2V0KHRvcGljTmFtZSkuZGVsZXRlKGNiKTsKICAgICAgfTsKICAgIH07CiAKICAgIHRoaXMub25BbGxNZXNzYWdlID0gZnVuY3Rpb24gKGNiKSB7CiAgICAgIGNvbm5lY3QuYXNzZXJ0VHJ1ZShjb25uZWN0LmlzRnVuY3Rpb24oY2IpLCAnbWV0aG9kIG11c3QgYmUgYSBmdW5jdGlvbicpOwogICAgICBjYWxsYmFja3MuYWxsTWVzc2FnZS5hZGQoY2IpOwogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBjYWxsYmFja3MuYWxsTWVzc2FnZS5kZWxldGUoY2IpOwogICAgICB9OwogICAgfTsKIAogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgdmFyIEFnZW50RGF0YVByb3ZpZGVyID0gZnVuY3Rpb24gKGJ1cykgewogICAgdmFyIGFnZW50RGF0YSA9IG51bGw7CiAgICB0aGlzLmJ1cyA9IGJ1czsKICAgIHRoaXMuYnVzLnN1YnNjcmliZShjb25uZWN0LkFnZW50RXZlbnRzLlVQREFURSwgY29ubmVjdC5oaXRjaCh0aGlzLCB0aGlzLnVwZGF0ZUFnZW50RGF0YSkpOwogIH07CiAKICBBZ2VudERhdGFQcm92aWRlci5wcm90b3R5cGUudXBkYXRlQWdlbnREYXRhID0gZnVuY3Rpb24gKGFnZW50RGF0YSkgewogICAgdmFyIG9sZEFnZW50RGF0YSA9IHRoaXMuYWdlbnREYXRhOwogICAgdGhpcy5hZ2VudERhdGEgPSBhZ2VudERhdGE7CiAKICAgIGlmIChvbGRBZ2VudERhdGEgPT0gbnVsbCkgewogICAgICBjb25uZWN0LmFnZW50LmluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgdGhpcy5idXMudHJpZ2dlcihjb25uZWN0LkFnZW50RXZlbnRzLklOSVQsIG5ldyBjb25uZWN0LkFnZW50KCkpOwogICAgfQogCiAgICB0aGlzLmJ1cy50cmlnZ2VyKGNvbm5lY3QuQWdlbnRFdmVudHMuUkVGUkVTSCwgbmV3IGNvbm5lY3QuQWdlbnQoKSk7CiAKICAgIHRoaXMuX2ZpcmVBZ2VudFVwZGF0ZUV2ZW50cyhvbGRBZ2VudERhdGEpOwogIH07CiAKICBBZ2VudERhdGFQcm92aWRlci5wcm90b3R5cGUuZ2V0QWdlbnREYXRhID0gZnVuY3Rpb24gKCkgewogICAgaWYgKHRoaXMuYWdlbnREYXRhID09IG51bGwpIHsKICAgICAgdGhyb3cgbmV3IGNvbm5lY3QuU3RhdGVFcnJvcignTm8gYWdlbnQgZGF0YSBpcyBhdmFpbGFibGUgeWV0IScpOwogICAgfQogCiAgICByZXR1cm4gdGhpcy5hZ2VudERhdGE7CiAgfTsKIAogIEFnZW50RGF0YVByb3ZpZGVyLnByb3RvdHlwZS5nZXRDb250YWN0RGF0YSA9IGZ1bmN0aW9uIChjb250YWN0SWQpIHsKICAgIHZhciBhZ2VudERhdGEgPSB0aGlzLmdldEFnZW50RGF0YSgpOwogICAgdmFyIGNvbnRhY3REYXRhID0gY29ubmVjdC5maW5kKGFnZW50RGF0YS5zbmFwc2hvdC5jb250YWN0cywgZnVuY3Rpb24gKGN0ZGF0YSkgewogICAgICByZXR1cm4gY3RkYXRhLmNvbnRhY3RJZCA9PT0gY29udGFjdElkOwogICAgfSk7CiAKICAgIGlmIChjb250YWN0RGF0YSA9PSBudWxsKSB7CiAgICAgIHRocm93IG5ldyBjb25uZWN0LlN0YXRlRXJyb3IoJ0NvbnRhY3QgJXMgbm8gbG9uZ2VyIGV4aXN0cy4nLCBjb250YWN0SWQpOwogICAgfQogCiAgICByZXR1cm4gY29udGFjdERhdGE7CiAgfTsKIAogIEFnZW50RGF0YVByb3ZpZGVyLnByb3RvdHlwZS5nZXRDb25uZWN0aW9uRGF0YSA9IGZ1bmN0aW9uIChjb250YWN0SWQsIGNvbm5lY3Rpb25JZCkgewogICAgdmFyIGNvbnRhY3REYXRhID0gdGhpcy5nZXRDb250YWN0RGF0YShjb250YWN0SWQpOwogICAgdmFyIGNvbm5lY3Rpb25EYXRhID0gY29ubmVjdC5maW5kKGNvbnRhY3REYXRhLmNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoY2RhdGEpIHsKICAgICAgcmV0dXJuIGNkYXRhLmNvbm5lY3Rpb25JZCA9PT0gY29ubmVjdGlvbklkOwogICAgfSk7CiAKICAgIGlmIChjb25uZWN0aW9uRGF0YSA9PSBudWxsKSB7CiAgICAgIHRocm93IG5ldyBjb25uZWN0LlN0YXRlRXJyb3IoJ0Nvbm5lY3Rpb24gJXMgZm9yIGNvbnRhY3QgJXMgbm8gbG9uZ2VyIGV4aXN0cy4nLCBjb25uZWN0aW9uSWQsIGNvbnRhY3RJZCk7CiAgICB9CiAKICAgIHJldHVybiBjb25uZWN0aW9uRGF0YTsKICB9OwoKICBBZ2VudERhdGFQcm92aWRlci5wcm90b3R5cGUuZ2V0SW5zdGFuY2VJZCA9IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5nZXRBZ2VudERhdGEoKS5jb25maWd1cmF0aW9uLnJvdXRpbmdQcm9maWxlLnJvdXRpbmdQcm9maWxlSWQubWF0Y2goL2luc3RhbmNlXC8oWzAtOWEtZkEtRnwtXSspXC8vKVsxXTsKICB9CgogIEFnZW50RGF0YVByb3ZpZGVyLnByb3RvdHlwZS5nZXRBV1NBY2NvdW50SWQgPSBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuZ2V0QWdlbnREYXRhKCkuY29uZmlndXJhdGlvbi5yb3V0aW5nUHJvZmlsZS5yb3V0aW5nUHJvZmlsZUlkLm1hdGNoKC86KFswLTldKyk6aW5zdGFuY2UvKVsxXTsKICB9CiAKICBBZ2VudERhdGFQcm92aWRlci5wcm90b3R5cGUuX2RpZmZDb250YWN0cyA9IGZ1bmN0aW9uIChvbGRBZ2VudERhdGEpIHsKICAgIHZhciBkaWZmID0gewogICAgICBhZGRlZDoge30sCiAgICAgIHJlbW92ZWQ6IHt9LAogICAgICBjb21tb246IHt9LAogICAgICBvbGRNYXA6IGNvbm5lY3QuaW5kZXgob2xkQWdlbnREYXRhID09IG51bGwgPyBbXSA6IG9sZEFnZW50RGF0YS5zbmFwc2hvdC5jb250YWN0cywgZnVuY3Rpb24gKGNvbnRhY3QpIHsgcmV0dXJuIGNvbnRhY3QuY29udGFjdElkOyB9KSwKICAgICAgbmV3TWFwOiBjb25uZWN0LmluZGV4KHRoaXMuYWdlbnREYXRhLnNuYXBzaG90LmNvbnRhY3RzLCBmdW5jdGlvbiAoY29udGFjdCkgeyByZXR1cm4gY29udGFjdC5jb250YWN0SWQ7IH0pCiAgICB9OwogCiAgICBjb25uZWN0LmtleXMoZGlmZi5vbGRNYXApLmZvckVhY2goZnVuY3Rpb24gKGNvbnRhY3RJZCkgewogICAgICBpZiAoY29ubmVjdC5jb250YWlucyhkaWZmLm5ld01hcCwgY29udGFjdElkKSkgewogICAgICAgIGRpZmYuY29tbW9uW2NvbnRhY3RJZF0gPSBkaWZmLm5ld01hcFtjb250YWN0SWRdOwogICAgICB9IGVsc2UgewogICAgICAgIGRpZmYucmVtb3ZlZFtjb250YWN0SWRdID0gZGlmZi5vbGRNYXBbY29udGFjdElkXTsKICAgICAgfQogICAgfSk7CiAKICAgIGNvbm5lY3Qua2V5cyhkaWZmLm5ld01hcCkuZm9yRWFjaChmdW5jdGlvbiAoY29udGFjdElkKSB7CiAgICAgIGlmICghY29ubmVjdC5jb250YWlucyhkaWZmLm9sZE1hcCwgY29udGFjdElkKSkgewogICAgICAgIGRpZmYuYWRkZWRbY29udGFjdElkXSA9IGRpZmYubmV3TWFwW2NvbnRhY3RJZF07CiAgICAgIH0KICAgIH0pOwogCiAgICByZXR1cm4gZGlmZjsKICB9OwogCiAgQWdlbnREYXRhUHJvdmlkZXIucHJvdG90eXBlLl9maXJlQWdlbnRVcGRhdGVFdmVudHMgPSBmdW5jdGlvbiAob2xkQWdlbnREYXRhKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZGlmZiA9IG51bGw7CiAgICB2YXIgb2xkQWdlbnRTdGF0ZSA9IG9sZEFnZW50RGF0YSA9PSBudWxsID8gY29ubmVjdC5BZ2VudEF2YWlsU3RhdGVzLklOSVQgOiBvbGRBZ2VudERhdGEuc25hcHNob3Quc3RhdGUubmFtZTsKICAgIHZhciBuZXdBZ2VudFN0YXRlID0gdGhpcy5hZ2VudERhdGEuc25hcHNob3Quc3RhdGUubmFtZTsKICAgIHZhciBvbGRSb3V0aW5nU3RhdGUgPSBvbGRBZ2VudERhdGEgPT0gbnVsbCA/IGNvbm5lY3QuQWdlbnRTdGF0ZVR5cGUuSU5JVCA6IG9sZEFnZW50RGF0YS5zbmFwc2hvdC5zdGF0ZS50eXBlOwogICAgdmFyIG5ld1JvdXRpbmdTdGF0ZSA9IHRoaXMuYWdlbnREYXRhLnNuYXBzaG90LnN0YXRlLnR5cGU7CiAKICAgIGlmIChvbGRSb3V0aW5nU3RhdGUgIT09IG5ld1JvdXRpbmdTdGF0ZSkgewogICAgICBjb25uZWN0LmNvcmUuZ2V0QWdlbnRSb3V0aW5nRXZlbnRHcmFwaCgpLmdldEFzc29jaWF0aW9ucyh0aGlzLCBvbGRSb3V0aW5nU3RhdGUsIG5ld1JvdXRpbmdTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBzZWxmLmJ1cy50cmlnZ2VyKGV2ZW50LCBuZXcgY29ubmVjdC5BZ2VudCgpKTsKICAgICAgfSk7CiAgICB9CiAKICAgIGlmIChvbGRBZ2VudFN0YXRlICE9PSBuZXdBZ2VudFN0YXRlKSB7CiAgICAgIHRoaXMuYnVzLnRyaWdnZXIoY29ubmVjdC5BZ2VudEV2ZW50cy5TVEFURV9DSEFOR0UsIHsKICAgICAgICBhZ2VudDogbmV3IGNvbm5lY3QuQWdlbnQoKSwKICAgICAgICBvbGRTdGF0ZTogb2xkQWdlbnRTdGF0ZSwKICAgICAgICBuZXdTdGF0ZTogbmV3QWdlbnRTdGF0ZQogCiAgICAgIH0pOwogICAgICBjb25uZWN0LmNvcmUuZ2V0QWdlbnRTdGF0ZUV2ZW50R3JhcGgoKS5nZXRBc3NvY2lhdGlvbnModGhpcywgb2xkQWdlbnRTdGF0ZSwgbmV3QWdlbnRTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBzZWxmLmJ1cy50cmlnZ2VyKGV2ZW50LCBuZXcgY29ubmVjdC5BZ2VudCgpKTsKICAgICAgfSk7CiAgICB9CgogICAgdmFyIG9sZE5leHRTdGF0ZSA9IG9sZEFnZW50RGF0YSAmJiBvbGRBZ2VudERhdGEuc25hcHNob3QubmV4dFN0YXRlID8gb2xkQWdlbnREYXRhLnNuYXBzaG90Lm5leHRTdGF0ZS5uYW1lIDogbnVsbDsKICAgIHZhciBuZXdOZXh0U3RhdGUgPSB0aGlzLmFnZW50RGF0YS5zbmFwc2hvdC5uZXh0U3RhdGUgPyB0aGlzLmFnZW50RGF0YS5zbmFwc2hvdC5uZXh0U3RhdGUubmFtZSA6IG51bGw7CiAgICBpZiAob2xkTmV4dFN0YXRlICE9PSBuZXdOZXh0U3RhdGUgJiYgbmV3TmV4dFN0YXRlKSB7CiAgICAgIHNlbGYuYnVzLnRyaWdnZXIoY29ubmVjdC5BZ2VudEV2ZW50cy5FTlFVRVVFRF9ORVhUX1NUQVRFLCBuZXcgY29ubmVjdC5BZ2VudCgpKTsKICAgIH0KCiAgICBpZiAob2xkQWdlbnREYXRhICE9PSBudWxsKSB7CiAgICAgIGRpZmYgPSB0aGlzLl9kaWZmQ29udGFjdHMob2xkQWdlbnREYXRhKTsKIAogICAgfSBlbHNlIHsKICAgICAgZGlmZiA9IHsKICAgICAgICBhZGRlZDogY29ubmVjdC5pbmRleCh0aGlzLmFnZW50RGF0YS5zbmFwc2hvdC5jb250YWN0cywgZnVuY3Rpb24gKGNvbnRhY3QpIHsgcmV0dXJuIGNvbnRhY3QuY29udGFjdElkOyB9KSwKICAgICAgICByZW1vdmVkOiB7fSwKICAgICAgICBjb21tb246IHt9LAogICAgICAgIG9sZE1hcDoge30sCiAgICAgICAgbmV3TWFwOiBjb25uZWN0LmluZGV4KHRoaXMuYWdlbnREYXRhLnNuYXBzaG90LmNvbnRhY3RzLCBmdW5jdGlvbiAoY29udGFjdCkgeyByZXR1cm4gY29udGFjdC5jb250YWN0SWQ7IH0pCiAgICAgIH07CiAgICB9CiAKICAgIGNvbm5lY3QudmFsdWVzKGRpZmYuYWRkZWQpLmZvckVhY2goZnVuY3Rpb24gKGNvbnRhY3REYXRhKSB7CiAgICAgIHNlbGYuYnVzLnRyaWdnZXIoY29ubmVjdC5Db250YWN0RXZlbnRzLklOSVQsIG5ldyBjb25uZWN0LkNvbnRhY3QoY29udGFjdERhdGEuY29udGFjdElkKSk7CiAgICAgIHNlbGYuX2ZpcmVDb250YWN0VXBkYXRlRXZlbnRzKGNvbnRhY3REYXRhLmNvbnRhY3RJZCwgY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLklOSVQsIGNvbnRhY3REYXRhLnN0YXRlLnR5cGUpOwogICAgfSk7CiAKICAgIGNvbm5lY3QudmFsdWVzKGRpZmYucmVtb3ZlZCkuZm9yRWFjaChmdW5jdGlvbiAoY29udGFjdERhdGEpIHsKICAgICAgc2VsZi5idXMudHJpZ2dlcihjb25uZWN0LkNvbnRhY3RFdmVudHMuREVTVFJPWUVELCBuZXcgY29ubmVjdC5Db250YWN0U25hcHNob3QoY29udGFjdERhdGEpKTsKICAgICAgc2VsZi5idXMudHJpZ2dlcihjb25uZWN0LmNvcmUuZ2V0Q29udGFjdEV2ZW50TmFtZShjb25uZWN0LkNvbnRhY3RFdmVudHMuREVTVFJPWUVELCBjb250YWN0RGF0YS5jb250YWN0SWQpLCBuZXcgY29ubmVjdC5Db250YWN0U25hcHNob3QoY29udGFjdERhdGEpKTsKICAgICAgc2VsZi5fdW5zdWJBbGxDb250YWN0RXZlbnRzRm9yQ29udGFjdChjb250YWN0RGF0YS5jb250YWN0SWQpOwogICAgfSk7CiAKICAgIGNvbm5lY3Qua2V5cyhkaWZmLmNvbW1vbikuZm9yRWFjaChmdW5jdGlvbiAoY29udGFjdElkKSB7CiAgICAgIHNlbGYuX2ZpcmVDb250YWN0VXBkYXRlRXZlbnRzKGNvbnRhY3RJZCwgZGlmZi5vbGRNYXBbY29udGFjdElkXS5zdGF0ZS50eXBlLCBkaWZmLm5ld01hcFtjb250YWN0SWRdLnN0YXRlLnR5cGUpOwogICAgfSk7CiAgfTsKIAogIEFnZW50RGF0YVByb3ZpZGVyLnByb3RvdHlwZS5fZmlyZUNvbnRhY3RVcGRhdGVFdmVudHMgPSBmdW5jdGlvbiAoY29udGFjdElkLCBvbGRDb250YWN0U3RhdGUsIG5ld0NvbnRhY3RTdGF0ZSkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgaWYgKG9sZENvbnRhY3RTdGF0ZSAhPT0gbmV3Q29udGFjdFN0YXRlKSB7CiAgICAgIGNvbm5lY3QuY29yZS5nZXRDb250YWN0RXZlbnRHcmFwaCgpLmdldEFzc29jaWF0aW9ucyh0aGlzLCBvbGRDb250YWN0U3RhdGUsIG5ld0NvbnRhY3RTdGF0ZSkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBzZWxmLmJ1cy50cmlnZ2VyKGV2ZW50LCBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3RJZCkpOwogICAgICAgIHNlbGYuYnVzLnRyaWdnZXIoY29ubmVjdC5jb3JlLmdldENvbnRhY3RFdmVudE5hbWUoZXZlbnQsIGNvbnRhY3RJZCksIG5ldyBjb25uZWN0LkNvbnRhY3QoY29udGFjdElkKSk7CiAgICAgIH0pOwogICAgfQoKICAgIHNlbGYuYnVzLnRyaWdnZXIoY29ubmVjdC5Db250YWN0RXZlbnRzLlJFRlJFU0gsIG5ldyBjb25uZWN0LkNvbnRhY3QoY29udGFjdElkKSk7CiAgICBzZWxmLmJ1cy50cmlnZ2VyKGNvbm5lY3QuY29yZS5nZXRDb250YWN0RXZlbnROYW1lKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5SRUZSRVNILCBjb250YWN0SWQpLCBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3RJZCkpOwogIH07CiAKICBBZ2VudERhdGFQcm92aWRlci5wcm90b3R5cGUuX3Vuc3ViQWxsQ29udGFjdEV2ZW50c0ZvckNvbnRhY3QgPSBmdW5jdGlvbiAoY29udGFjdElkKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBjb25uZWN0LnZhbHVlcyhjb25uZWN0LkNvbnRhY3RFdmVudHMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkgewogICAgICBzZWxmLmJ1cy5nZXRTdWJzY3JpcHRpb25zKGNvbm5lY3QuY29yZS5nZXRDb250YWN0RXZlbnROYW1lKGV2ZW50TmFtZSwgY29udGFjdElkKSkKICAgICAgICAubWFwKGZ1bmN0aW9uIChzdWIpIHsgc3ViLnVuc3Vic2NyaWJlKCk7IH0pOwogICAgfSk7CiAgfTsKIAogIC8qKiAtLS0tLSBtaW5pbWFsIHZpZXcgbGF5ZXIgZXZlbnQgaGFuZGxpbmcgKiovCiAKICBjb25uZWN0LmNvcmUub25WaWV3Q29udGFjdCA9IGZ1bmN0aW9uIChmKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5WSUVXLCBmKTsKICB9OwogCiAgLyoqCiAgICogVXNlZCBvZiBhZ2VudCBpbnRlcmZhY2UgY29udHJvbC4gCiAgICogY29ubmVjdC5jb3JlLnZpZXdDb250YWN0KCJjb250YWN0SWQiKSAtPiAgdGhpcyBpcyBjdXJlbnRseSBwcm9ncmFtbWVkIHRvIGdldCB0aGUgY29udGFjdCBpbnRvIHZpZXcuCiAgICovCiAgY29ubmVjdC5jb3JlLnZpZXdDb250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3RJZCkgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5Db250YWN0RXZlbnRzLlZJRVcsCiAgICAgIGRhdGE6IHsKICAgICAgICBjb250YWN0SWQ6IGNvbnRhY3RJZAogICAgICB9CiAgICB9KTsKICB9OwoKICAvKiogLS0tLS0gbWluaW1hbCB2aWV3IGxheWVyIGV2ZW50IGhhbmRsaW5nICoqLwogCiAgY29ubmVjdC5jb3JlLm9uQWN0aXZhdGVDaGFubmVsV2l0aFZpZXdUeXBlID0gZnVuY3Rpb24gKGYpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5DaGFubmVsVmlld0V2ZW50cy5BQ1RJVkFURV9DSEFOTkVMX1dJVEhfVklFV19UWVBFLCBmKTsKICB9OwogCiAgLyoqCiAgICogVXNlZCBvZiBhZ2VudCBpbnRlcmZhY2UgY29udHJvbC4gCiAgICogY29ubmVjdC5jb3JlLmFjdGl2YXRlQ2hhbm5lbFdpdGhWaWV3VHlwZSgpIC0+ICB0aGlzIGlzIGN1cmVudGx5IHByb2dyYW1tZWQgdG8gZ2V0IGVpdGhlciB0aGUgbnVtYmVyIHBhZCwgcXVpY2sgY29ubmVjdHMsIG9yIGNyZWF0ZSB0YXNrIGludG8gdmlldy4KICAgKiB0aGUgdmFsaWQgY29tYmluYXRpb25zIGFyZSAoImNyZWF0ZV90YXNrIiwgInRhc2siKSwgKCJudW1iZXJfcGFkIiwgInNvZnRwaG9uZSIpLCAoImNyZWF0ZV90YXNrIiwgInNvZnRwaG9uZSIpLCAoInF1aWNrX2Nvbm5lY3RzIiwgInNvZnRwaG9uZSIpCiAgICogdGhlIHNvZnRwaG9uZSB3aXRoIGNyZWF0ZV90YXNrIGNvbWJvIGlzIGEgc3BlY2lhbCBjYXNlIGluIHRoZSBjaGFubmVsIHZpZXcgdG8gYWxsb3cgYWxsIHRocmVlIHZpZXcgdHlwZSBidXR0b25zIHRvIGFwcGVhciBvbiB0aGUgc29mdHBob25lIHNjcmVlbgogICAqCiAgICogVGhlICdzb3VyY2UnIGlzIGFuIG9wdGlvbmFsIHBhcmFtZXRlciB3aGljaCBpbmRpY2F0ZXMgdGhlIHJlcXVlc3Rlci4gRm9yIGV4YW1wbGUsIGlmIGludm9rZWQgd2l0aCAoImNyZWF0ZV90YXNrIiwgInRhc2siLCAiYWdlbnRhcHAiKSB3ZSB3b3VsZCBrbm93IGFnZW50YXBwIHJlcXVlc3RlZCBvcGVuIHRhc2sgdmlldy4KICAgKi8KICBjb25uZWN0LmNvcmUuYWN0aXZhdGVDaGFubmVsV2l0aFZpZXdUeXBlID0gZnVuY3Rpb24gKHZpZXdUeXBlLCBtZWRpYVR5cGUsIHNvdXJjZSkgewogICAgY29uc3QgZGF0YSA9IHsgdmlld1R5cGUsIG1lZGlhVHlwZSB9OwogICAgaWYgKHNvdXJjZSkgewogICAgICBkYXRhLnNvdXJjZSA9IHNvdXJjZTsKICAgIH0KICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuQ2hhbm5lbFZpZXdFdmVudHMuQUNUSVZBVEVfQ0hBTk5FTF9XSVRIX1ZJRVdfVFlQRSwKICAgICAgZGF0YQogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogVXNlZCB0byBwdWJsaXNoICd0YXNrIGNyZWF0ZWQnIGV2ZW50CiAgICovCiAgY29ubmVjdC5jb3JlLnRyaWdnZXJUYXNrQ3JlYXRlZCA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS51cHN0cmVhbUJ1cy50cmlnZ2VyKGNvbm5lY3QuVGFza0V2ZW50cy5DUkVBVEVELCBkYXRhKTsKICB9OwoKICAvKiogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogCiAgLyoqCiAgKiBUaGlzIHdpbGwgYmUgaGVscGZ1bCBmb3IgdGhlIGN1c3RvbSBhbmQgZW1iZWRkZWQgQ0NQcyAKICAqIHRvIGhhbmRsZSB0aGUgYWNjZXNzIGRlbmllZCB1c2UgY2FzZS4gCiAgKi8KICBjb25uZWN0LmNvcmUub25BY2Nlc3NEZW5pZWQgPSBmdW5jdGlvbiAoZikgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BQ0NFU1NfREVOSUVELCBmKTsKICB9OwogCiAgLyoqCiAgKiBUaGlzIHdpbGwgYmUgaGVscGZ1bCBmb3IgU0FNTCB1c2UgY2FzZXMgdG8gaGFuZGxlIHRoZSBjdXN0b20gbG9naW5zLiAKICAqLwogIGNvbm5lY3QuY29yZS5vbkF1dGhGYWlsID0gZnVuY3Rpb24gKGYpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQVVUSF9GQUlMLCBmKTsKICB9OwoKICBjb25uZWN0LmNvcmUub25BdXRob3JpemVTdWNjZXNzID0gZnVuY3Rpb24gKGYpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLm9uVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQVVUSE9SSVpFX1NVQ0NFU1MsIGYpOwogIH0KCiAgY29ubmVjdC5jb3JlLl9oYW5kbGVBdXRob3JpemVTdWNjZXNzID0gZnVuY3Rpb24oKSB7CiAgICB3aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShjb25uZWN0LlNlc3Npb25TdG9yYWdlS2V5cy5BVVRIT1JJWkVfUkVUUllfQ09VTlQsIDApOwogIH0KCiAgY29ubmVjdC5jb3JlLl9oYW5kbGVBdXRoRmFpbCA9IGZ1bmN0aW9uKGxvZ2luVXJsLCBhdXRob3JpemVFbmRwb2ludCwgYXV0aEZhaWxEYXRhKSB7CiAgICBpZiAoYXV0aEZhaWxEYXRhICYmIGF1dGhGYWlsRGF0YS5hdXRob3JpemUpIHsKICAgICAgY29ubmVjdC5jb3JlLl9oYW5kbGVBdXRob3JpemVGYWlsKGxvZ2luVXJsKTsKICAgIH0KICAgIGVsc2UgewogICAgICBjb25uZWN0LmNvcmUuX2hhbmRsZUNUSUF1dGhGYWlsKGF1dGhvcml6ZUVuZHBvaW50KTsKICAgIH0KICB9CgogIGNvbm5lY3QuY29yZS5faGFuZGxlQXV0aG9yaXplRmFpbCA9IGZ1bmN0aW9uKGxvZ2luVXJsKSB7CiAgICBsZXQgYXV0aFJldHJ5Q291bnQgPSBjb25uZWN0LmNvcmUuX2dldEF1dGhSZXRyeUNvdW50KCkKICAgIGlmICghY29ubmVjdC5jb3JlLmF1dGhvcml6ZVRpbWVvdXRJZCkgewogICAgICBpZiAoYXV0aFJldHJ5Q291bnQgPCBjb25uZWN0LmNvcmUuTUFYX0FVVEhPUklaRV9SRVRSWV9DT1VOVF9GT1JfU0VTU0lPTikgewogICAgICAgIGNvbm5lY3QuY29yZS5faW5jcmVtZW50QXV0aFJldHJ5Q291bnQoKTsKICAgICAgICBsZXQgcmV0cnlEZWxheSA9IEFXUy51dGlsLmNhbGN1bGF0ZVJldHJ5RGVsYXkoYXV0aFJldHJ5Q291bnQgKyAxIHx8IDAsIHsgYmFzZTogMjAwMCB9KTsKICAgICAgICBjb25uZWN0LmNvcmUuYXV0aG9yaXplVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICBjb25uZWN0LmNvcmUuX3JlZGlyZWN0VG9Mb2dpbihsb2dpblVybCk7CiAgICAgICAgfSwgcmV0cnlEZWxheSk7IC8vV2UgZG9uJ3QgaGF2ZSB0byBjbGVhciB0aGUgdGltZW91dElkIGJlY2F1c2Ugd2UgYXJlIHJlZGlyZWN0aW5nIGF3YXkgZnJvbSB0aGlzIG9yaWdpbiBvbmNlIHRoZSB0aW1lb3V0IGNvbXBsZXRlcy4KICAgICAgfQogICAgICBlbHNlICB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJXZSBoYXZlIGV4aGF1c3RlZCBvdXIgYXV0aG9yaXphdGlvbiByZXRyaWVzIGR1ZSB0byA0MDFzIGZyb20gdGhlIGF1dGhvcml6ZSBhcGkuIE5vIG1vcmUgcmV0cmllcyB3aWxsIGJlIGF0dGVtcHRlZCBpbiB0aGlzIHNlc3Npb24gdW50aWwgdGhlIGF1dGhvcml6ZSBhcGkgcmV0dXJucyAyMDAuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLkFVVEhPUklaRV9SRVRSSUVTX0VYSEFVU1RFRCk7CiAgICAgIH0KICAgIH0KICB9CgogIGNvbm5lY3QuY29yZS5fcmVkaXJlY3RUb0xvZ2luID0gZnVuY3Rpb24obG9naW5VcmwpIHsKICAgIGlmICh0eXBlb2YobG9naW5VcmwpID09PSAnc3RyaW5nJykgewogICAgICBsb2NhdGlvbi5hc3NpZ24obG9naW5VcmwpOwogICAgfSBlbHNlIHsKICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICB9CiAgfQoKICBjb25uZWN0LmNvcmUuX2hhbmRsZUNUSUF1dGhGYWlsID0gZnVuY3Rpb24oYXV0aG9yaXplRW5kcG9pbnQpIHsKICAgIGlmICghY29ubmVjdC5jb3JlLmN0aVRpbWVvdXRJZCkgewogICAgICBpZiAoY29ubmVjdC5jb3JlLmN0aUF1dGhSZXRyeUNvdW50IDwgY29ubmVjdC5jb3JlLk1BWF9DVElfQVVUSF9SRVRSWV9DT1VOVCkgewogICAgICAgIGNvbm5lY3QuY29yZS5jdGlBdXRoUmV0cnlDb3VudCsrOwogICAgICAgIGxldCByZXRyeURlbGF5ID0gQVdTLnV0aWwuY2FsY3VsYXRlUmV0cnlEZWxheShjb25uZWN0LmNvcmUuY3RpQXV0aFJldHJ5Q291bnQgfHwgMCwgeyBiYXNlOiA1MDAgfSk7CiAgICAgICAgY29ubmVjdC5jb3JlLmN0aVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgY29ubmVjdC5jb3JlLmF1dGhvcml6ZShhdXRob3JpemVFbmRwb2ludCkudGhlbihjb25uZWN0LmNvcmUuX3RyaWdnZXJBdXRob3JpemVTdWNjZXNzLmJpbmQoY29ubmVjdC5jb3JlKSkuY2F0Y2goY29ubmVjdC5jb3JlLl90cmlnZ2VyQXV0aEZhaWwuYmluZChjb25uZWN0LmNvcmUsIHthdXRob3JpemU6IHRydWV9KSk7CiAgICAgICAgICBjb25uZWN0LmNvcmUuY3RpVGltZW91dElkID0gbnVsbDsKICAgICAgICB9LCByZXRyeURlbGF5KTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjb25uZWN0LmdldExvZygpLndhcm4oIldlIGhhdmUgZXhoYXVzdGVkIG91ciBhdXRob3JpemF0aW9uIHJldHJpZXMgZHVlIHRvIDQwMXMgZnJvbSB0aGUgQ1RJIHNlcnZpY2UuIE5vIG1vcmUgcmV0cmllcyB3aWxsIGJlIGF0dGVtcHRlZCB1bnRpbCB0aGUgcGFnZSBpcyByZWZyZXNoZWQuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLkNUSV9BVVRIT1JJWkVfUkVUUklFU19FWEhBVVNURUQpOwogICAgICB9CiAgICB9CiAgfQoKICBjb25uZWN0LmNvcmUuX3RyaWdnZXJBdXRob3JpemVTdWNjZXNzID0gZnVuY3Rpb24oKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS51cHN0cmVhbUJ1cy50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLkFVVEhPUklaRV9TVUNDRVNTKTsKICB9CgogIGNvbm5lY3QuY29yZS5fdHJpZ2dlckF1dGhGYWlsID0gZnVuY3Rpb24oZGF0YSkgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkudXBzdHJlYW1CdXMudHJpZ2dlcihjb25uZWN0LkV2ZW50VHlwZS5BVVRIX0ZBSUwsIGRhdGEpOwogIH0KCiAgY29ubmVjdC5jb3JlLl9nZXRBdXRoUmV0cnlDb3VudCA9IGZ1bmN0aW9uKCkgewogICAgbGV0IGl0ZW0gPSB3aW5kb3cuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShjb25uZWN0LlNlc3Npb25TdG9yYWdlS2V5cy5BVVRIT1JJWkVfUkVUUllfQ09VTlQpOwogICAgaWYgKGl0ZW0gIT09IG51bGwpIHsKICAgICAgaWYgKCFpc05hTihwYXJzZUludChpdGVtKSkpIHsKICAgICAgICByZXR1cm4gcGFyc2VJbnQoaXRlbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IGNvbm5lY3QuU3RhdGVFcnJvcigiVGhlIHNlc3Npb24gc3RvcmFnZSB2YWx1ZSBmb3IgYXV0aCByZXRyeSBjb3VudCB3YXMgTmFOIik7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGNvbm5lY3QuU2Vzc2lvblN0b3JhZ2VLZXlzLkFVVEhPUklaRV9SRVRSWV9DT1VOVCwgMCk7CiAgICAgIHJldHVybiAwOwogICAgfSAKICB9CgogIGNvbm5lY3QuY29yZS5faW5jcmVtZW50QXV0aFJldHJ5Q291bnQgPSBmdW5jdGlvbigpIHsKICAgIHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGNvbm5lY3QuU2Vzc2lvblN0b3JhZ2VLZXlzLkFVVEhPUklaRV9SRVRSWV9DT1VOVCwgKGNvbm5lY3QuY29yZS5fZ2V0QXV0aFJldHJ5Q291bnQoKSsxKS50b1N0cmluZygpKTsKICB9CgogIGNvbm5lY3QuY29yZS5vbkF1dGhvcml6ZVJldHJpZXNFeGhhdXN0ZWQgPSBmdW5jdGlvbihmKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS5zdWJzY3JpYmUoY29ubmVjdC5FdmVudFR5cGUuQVVUSE9SSVpFX1JFVFJJRVNfRVhIQVVTVEVELCBmKTsKICB9CgogIGNvbm5lY3QuY29yZS5vbkNUSUF1dGhvcml6ZVJldHJpZXNFeGhhdXN0ZWQgPSBmdW5jdGlvbihmKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKS5zdWJzY3JpYmUoY29ubmVjdC5FdmVudFR5cGUuQ1RJX0FVVEhPUklaRV9SRVRSSUVTX0VYSEFVU1RFRCwgZik7CiAgfQogCiAgLyoqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KIAogIC8qKgogICAqIFVzZWQgZm9yIGhhbmRsaW5nIHRoZSBydGMgc2Vzc2lvbiBzdGF0cy4KICAgKiBVc2FnZQogICAqIGNvbm5lY3QuY29yZS5vblNvZnRwaG9uZVNlc3Npb25Jbml0KGZ1bmN0aW9uKHsgY29ubmVjdGlvbklkIH0pIHsKICAgKiAgICAgdmFyIHNvZnRwaG9uZU1hbmFnZXIgPSBjb25uZWN0LmNvcmUuZ2V0U29mdHBob25lTWFuYWdlcigpOwogICAqICAgICBpZihzb2Z0cGhvbmVNYW5hZ2VyKXsKICAgKiAgICAgICAgLy8gYWNjZXNzIHNlc3Npb24KICAgKiAgICAgICAgdmFyIHNlc3Npb24gPSBzb2Z0cGhvbmVNYW5hZ2VyLmdldFNlc3Npb24oY29ubmVjdGlvbklkKTsgCiAgICogICAgICB9CiAgICogfSk7CiAgICovCiAKICBjb25uZWN0LmNvcmUub25Tb2Z0cGhvbmVTZXNzaW9uSW5pdCA9IGZ1bmN0aW9uIChmKSB7CiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5vblVwc3RyZWFtKGNvbm5lY3QuQ29ubmVjdGlvbkV2ZW50cy5TRVNTSU9OX0lOSVQsIGYpOwogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLm9uQ29uZmlndXJlID0gZnVuY3Rpb24oZikgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkub25VcHN0cmVhbShjb25uZWN0LkNvbmZpZ3VyYXRpb25FdmVudHMuQ09ORklHVVJFLCBmKTsKICB9CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgIGNvbm5lY3QuY29yZS5vbkluaXRpYWxpemVkID0gZnVuY3Rpb24oZikgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5JTklULCBmKTsKICB9CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0Q29udGFjdEV2ZW50TmFtZSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNvbnRhY3RJZCkgewogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGV2ZW50TmFtZSwgJ2V2ZW50TmFtZScpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGNvbnRhY3RJZCwgJ2NvbnRhY3RJZCcpOwogICAgaWYgKCFjb25uZWN0LmNvbnRhaW5zKGNvbm5lY3QudmFsdWVzKGNvbm5lY3QuQ29udGFjdEV2ZW50cyksIGV2ZW50TmFtZSkpIHsKICAgICAgdGhyb3cgbmV3IGNvbm5lY3QuVmFsdWVFcnJvcignJXMgaXMgbm90IGEgdmFsaWQgY29udGFjdCBldmVudC4nLCBldmVudE5hbWUpOwogICAgfQogICAgcmV0dXJuIGNvbm5lY3Quc3ByaW50ZignJXM6OiVzJywgZXZlbnROYW1lLCBjb250YWN0SWQpOwogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldEV2ZW50QnVzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5ldmVudEJ1czsKICB9OwogCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwogIGNvbm5lY3QuY29yZS5nZXRXZWJTb2NrZXRNYW5hZ2VyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QuY29yZS53ZWJTb2NrZXRQcm92aWRlcjsKICB9OwogCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwogIGNvbm5lY3QuY29yZS5nZXRBZ2VudERhdGFQcm92aWRlciA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvcmUuYWdlbnREYXRhUHJvdmlkZXI7CiAgfTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0TG9jYWxUaW1lc3RhbXAgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLmdldEFnZW50RGF0YVByb3ZpZGVyKCkuZ2V0QWdlbnREYXRhKCkuc25hcHNob3QubG9jYWxUaW1lc3RhbXA7CiAgfTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0U2tldyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LmNvcmUuZ2V0QWdlbnREYXRhUHJvdmlkZXIoKS5nZXRBZ2VudERhdGEoKS5zbmFwc2hvdC5za2V3OwogIH07CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldEFnZW50Um91dGluZ0V2ZW50R3JhcGggPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLmFnZW50Um91dGluZ0V2ZW50R3JhcGg7CiAgfTsKICBjb25uZWN0LmNvcmUuYWdlbnRSb3V0aW5nRXZlbnRHcmFwaCA9IG5ldyBjb25uZWN0LkV2ZW50R3JhcGgoKQogICAgLmFzc29jKGNvbm5lY3QuRXZlbnRHcmFwaC5BTlksIGNvbm5lY3QuQWdlbnRTdGF0ZVR5cGUuUk9VVEFCTEUsCiAgICAgIGNvbm5lY3QuQWdlbnRFdmVudHMuUk9VVEFCTEUpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwgY29ubmVjdC5BZ2VudFN0YXRlVHlwZS5OT1RfUk9VVEFCTEUsCiAgICAgIGNvbm5lY3QuQWdlbnRFdmVudHMuTk9UX1JPVVRBQkxFKQogICAgLmFzc29jKGNvbm5lY3QuRXZlbnRHcmFwaC5BTlksIGNvbm5lY3QuQWdlbnRTdGF0ZVR5cGUuT0ZGTElORSwKICAgICAgY29ubmVjdC5BZ2VudEV2ZW50cy5PRkZMSU5FKTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0QWdlbnRTdGF0ZUV2ZW50R3JhcGggPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLmFnZW50U3RhdGVFdmVudEdyYXBoOwogIH07CiAgY29ubmVjdC5jb3JlLmFnZW50U3RhdGVFdmVudEdyYXBoID0gbmV3IGNvbm5lY3QuRXZlbnRHcmFwaCgpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwKICAgICAgY29ubmVjdC52YWx1ZXMoY29ubmVjdC5BZ2VudEVycm9yU3RhdGVzKSwKICAgICAgY29ubmVjdC5BZ2VudEV2ZW50cy5FUlJPUikKICAgIC5hc3NvYyhjb25uZWN0LkV2ZW50R3JhcGguQU5ZLCBjb25uZWN0LkFnZW50QXZhaWxTdGF0ZXMuQUZURVJfQ0FMTF9XT1JLLAogICAgICBjb25uZWN0LkFnZW50RXZlbnRzLkFDVyk7CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldENvbnRhY3RFdmVudEdyYXBoID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5jb250YWN0RXZlbnRHcmFwaDsKICB9OwogCiAgY29ubmVjdC5jb3JlLmNvbnRhY3RFdmVudEdyYXBoID0gbmV3IGNvbm5lY3QuRXZlbnRHcmFwaCgpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwKICAgICAgY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLklOQ09NSU5HLAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuSU5DT01JTkcpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwKICAgICAgY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLlBFTkRJTkcsCiAgICAgIGNvbm5lY3QuQ29udGFjdEV2ZW50cy5QRU5ESU5HKQogICAgLmFzc29jKGNvbm5lY3QuRXZlbnRHcmFwaC5BTlksCiAgICAgIGNvbm5lY3QuQ29udGFjdFN0YXRlVHlwZS5DT05ORUNUSU5HLAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuQ09OTkVDVElORykKICAgIC5hc3NvYyhjb25uZWN0LkV2ZW50R3JhcGguQU5ZLAogICAgICBjb25uZWN0LkNvbnRhY3RTdGF0ZVR5cGUuQ09OTkVDVEVELAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuQ09OTkVDVEVEKQogICAgLmFzc29jKGNvbm5lY3QuQ29udGFjdFN0YXRlVHlwZS5DT05ORUNUSU5HLAogICAgICBjb25uZWN0LkNvbnRhY3RTdGF0ZVR5cGUuRVJST1IsCiAgICAgIGNvbm5lY3QuQ29udGFjdEV2ZW50cy5NSVNTRUQpCiAgICAuYXNzb2MoY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLklOQ09NSU5HLAogICAgICBjb25uZWN0LkNvbnRhY3RTdGF0ZVR5cGUuRVJST1IsCiAgICAgIGNvbm5lY3QuQ29udGFjdEV2ZW50cy5NSVNTRUQpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwKICAgICAgY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLkVOREVELAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuQUNXKQogICAgLmFzc29jKGNvbm5lY3QudmFsdWVzKGNvbm5lY3QuQ09OVEFDVF9BQ1RJVkVfU1RBVEVTKSwKICAgICAgY29ubmVjdC52YWx1ZXMoY29ubmVjdC5yZWxhdGl2ZUNvbXBsZW1lbnQoY29ubmVjdC5DT05UQUNUX0FDVElWRV9TVEFURVMsIGNvbm5lY3QuQ29udGFjdFN0YXRlVHlwZSkpLAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuRU5ERUQpCiAgICAuYXNzb2MoY29ubmVjdC5FdmVudEdyYXBoLkFOWSwKICAgICAgY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLkVSUk9SLAogICAgICBjb25uZWN0LkNvbnRhY3RFdmVudHMuRVJST1IpCiAgICAuYXNzb2MoY29ubmVjdC5Db250YWN0U3RhdGVUeXBlLkNPTk5FQ1RJTkcsCiAgICAgIGNvbm5lY3QuQ29udGFjdFN0YXRlVHlwZS5NSVNTRUQsCiAgICAgIGNvbm5lY3QuQ29udGFjdEV2ZW50cy5NSVNTRUQpOwoKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldENsaWVudCA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghY29ubmVjdC5jb3JlLmNsaWVudCkgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5TdGF0ZUVycm9yKCdUaGUgY29ubmVjdCBjb3JlIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCEnKTsKICAgIH0KICAgIHJldHVybiBjb25uZWN0LmNvcmUuY2xpZW50OwogIH07CiAgY29ubmVjdC5jb3JlLmNsaWVudCA9IG51bGw7CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0QWdlbnRBcHBDbGllbnQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIWNvbm5lY3QuY29yZS5hZ2VudEFwcENsaWVudCkgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5TdGF0ZUVycm9yKCdUaGUgY29ubmVjdCBBZ2VudEFwcCBDbGllbnQgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIScpOwogICAgfQogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5hZ2VudEFwcENsaWVudDsKICB9OwogIGNvbm5lY3QuY29yZS5hZ2VudEFwcENsaWVudCA9IG51bGw7CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldE1hc3RlckNsaWVudCA9IGZ1bmN0aW9uICgpIHsKICAgIGlmICghY29ubmVjdC5jb3JlLm1hc3RlckNsaWVudCkgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5TdGF0ZUVycm9yKCdUaGUgY29ubmVjdCBtYXN0ZXIgY2xpZW50IGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCEnKTsKICAgIH0KICAgIHJldHVybiBjb25uZWN0LmNvcmUubWFzdGVyQ2xpZW50OwogIH07CiAgY29ubmVjdC5jb3JlLm1hc3RlckNsaWVudCA9IG51bGw7CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldFNvZnRwaG9uZU1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLnNvZnRwaG9uZU1hbmFnZXI7CiAgfTsKICBjb25uZWN0LmNvcmUuc29mdHBob25lTWFuYWdlciA9IG51bGw7CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLmdldE5vdGlmaWNhdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIWNvbm5lY3QuY29yZS5ub3RpZmljYXRpb25NYW5hZ2VyKSB7CiAgICAgIGNvbm5lY3QuY29yZS5ub3RpZmljYXRpb25NYW5hZ2VyID0gbmV3IGNvbm5lY3QuTm90aWZpY2F0aW9uTWFuYWdlcigpOwogICAgfQogICAgcmV0dXJuIGNvbm5lY3QuY29yZS5ub3RpZmljYXRpb25NYW5hZ2VyOwogIH07CiAgY29ubmVjdC5jb3JlLm5vdGlmaWNhdGlvbk1hbmFnZXIgPSBudWxsOwogCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwogIGNvbm5lY3QuY29yZS5nZXRQb3B1cE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5jb3JlLnBvcHVwTWFuYWdlcjsKICB9OwogIGNvbm5lY3QuY29yZS5wb3B1cE1hbmFnZXIgPSBuZXcgY29ubmVjdC5Qb3B1cE1hbmFnZXIoKTsKIAogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0gPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIWNvbm5lY3QuY29yZS51cHN0cmVhbSkgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5TdGF0ZUVycm9yKCdUaGVyZSBpcyBubyB1cHN0cmVhbSBjb25kdWl0IScpOwogICAgfQogICAgcmV0dXJuIGNvbm5lY3QuY29yZS51cHN0cmVhbTsKICB9OwogIGNvbm5lY3QuY29yZS51cHN0cmVhbSA9IG51bGw7CiAKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCiAgY29ubmVjdC5jb3JlLkFnZW50RGF0YVByb3ZpZGVyID0gQWdlbnREYXRhUHJvdmlkZXI7CiAKfSkoKTsKCi8qKiovIH0pLAoKLyoqKi8gNTkyOgovKioqLyAoKCkgPT4gewoKLyoKICogQ29weXJpZ2h0IDIwMTQtMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8KKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwoKICB2YXIgQUxMX0VWRU5UUyA9ICc8PGFsbD4+JzsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBFdmVudFR5cGUKICAgKi8KICB2YXIgRXZlbnRUeXBlID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAnYWNrbm93bGVkZ2UnLAogICAgJ2Fja190aW1lb3V0JywKICAgICdpbml0JywKICAgICdhcGlfcmVxdWVzdCcsCiAgICAnYXBpX3Jlc3BvbnNlJywKICAgICdhdXRoX2ZhaWwnLAogICAgJ2FjY2Vzc19kZW5pZWQnLAogICAgJ2Nsb3NlJywKICAgICdjb25maWd1cmUnLAogICAgJ2xvZycsCiAgICAnbWFzdGVyX3JlcXVlc3QnLAogICAgJ21hc3Rlcl9yZXNwb25zZScsCiAgICAnc3luY2hyb25pemUnLAogICAgJ3Rlcm1pbmF0ZScsCiAgICAndGVybWluYXRlZCcsCiAgICAnc2VuZF9sb2dzJywKICAgICdyZWxvYWRfYWdlbnRfY29uZmlndXJhdGlvbicsCiAgICAnYnJvYWRjYXN0JywKICAgICdhcGlfbWV0cmljJywKICAgICdjbGllbnRfbWV0cmljJywKICAgICdzb2Z0cGhvbmVfc3RhdHMnLAogICAgJ3NvZnRwaG9uZV9yZXBvcnQnLAogICAgJ2NsaWVudF9zaWRlX2xvZ3MnLAogICAgJ3NlcnZlcl9ib3VuZF9pbnRlcm5hbF9sb2cnLAogICAgJ211dGUnLAogICAgImlmcmFtZV9zdHlsZSIsCiAgICAiaWZyYW1lX3JldHJpZXNfZXhoYXVzdGVkIiwKICAgICJ1cGRhdGVfY29ubmVjdGVkX2NjcHMiLAogICAgIm91dGVyX2NvbnRleHRfaW5mbyIsCiAgICAibWVkaWFfZGV2aWNlX3JlcXVlc3QiLAogICAgIm1lZGlhX2RldmljZV9yZXNwb25zZSIsCiAgICAidGFiX2lkIiwKICAgICdhdXRob3JpemVfc3VjY2VzcycsCiAgICAnYXV0aG9yaXplX3JldHJpZXNfZXhoYXVzdGVkJywKICAgICdjdGlfYXV0aG9yaXplX3JldHJpZXNfZXhoYXVzdGVkJywKICBdKTsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBNYXN0ZXJUb3BpY3MKICAgKi8KICB2YXIgTWFzdGVyVG9waWNzID0gY29ubmVjdC5tYWtlTmFtZXNwYWNlZEVudW0oJ2Nvbm5lY3QnLCBbCiAgICAnbG9naW5Qb3B1cCcsCiAgICAnc2VuZExvZ3MnLAogICAgJ3NvZnRwaG9uZScsCiAgICAncmluZ3RvbmUnLAogICAgJ21ldHJpY3MnCiAgXSk7CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGVudW0gQWdlbnRFdmVudHMKICAgKi8KICB2YXIgQWdlbnRFdmVudHMgPSBjb25uZWN0Lm1ha2VOYW1lc3BhY2VkRW51bSgnYWdlbnQnLCBbCiAgICAnaW5pdCcsCiAgICAndXBkYXRlJywKICAgICdyZWZyZXNoJywKICAgICdyb3V0YWJsZScsCiAgICAnbm90X3JvdXRhYmxlJywKICAgICdwZW5kaW5nJywKICAgICdjb250YWN0X3BlbmRpbmcnLAogICAgJ29mZmxpbmUnLAogICAgJ2Vycm9yJywKICAgICdzb2Z0cGhvbmVfZXJyb3InLAogICAgJ3dlYnNvY2tldF9jb25uZWN0aW9uX2xvc3QnLAogICAgJ3dlYnNvY2tldF9jb25uZWN0aW9uX2dhaW5lZCcsCiAgICAnc3RhdGVfY2hhbmdlJywKICAgICdhY3cnLAogICAgJ211dGVfdG9nZ2xlJywKICAgICdsb2NhbF9tZWRpYV9zdHJlYW1fY3JlYXRlZCcsCiAgICAnZW5xdWV1ZWRfbmV4dF9zdGF0ZScKICBdKTsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKiBlbnVtIFdlYlNvY2tldEV2ZW50cwogICovCiAgdmFyIFdlYlNvY2tldEV2ZW50cyA9IGNvbm5lY3QubWFrZU5hbWVzcGFjZWRFbnVtKCd3ZWJTb2NrZXQnLCBbCiAgICAnaW5pdF9mYWlsdXJlJywKICAgICdjb25uZWN0aW9uX29wZW4nLAogICAgJ2Nvbm5lY3Rpb25fY2xvc2UnLAogICAgJ2Nvbm5lY3Rpb25fZXJyb3InLAogICAgJ2Nvbm5lY3Rpb25fZ2FpbicsCiAgICAnY29ubmVjdGlvbl9sb3N0JywKICAgICdzdWJzY3JpcHRpb25fdXBkYXRlJywKICAgICdzdWJzY3JpcHRpb25fZmFpbHVyZScsCiAgICAnYWxsX21lc3NhZ2UnLAogICAgJ3NlbmQnLAogICAgJ3N1YnNjcmliZScKICBdKTsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGVudW0gQ29udGFjdEV2ZW50cwogICAgKi8KICB2YXIgQ29udGFjdEV2ZW50cyA9IGNvbm5lY3QubWFrZU5hbWVzcGFjZWRFbnVtKCdjb250YWN0JywgWwogICAgJ2luaXQnLAogICAgJ3JlZnJlc2gnLAogICAgJ2Rlc3Ryb3llZCcsCiAgICAnaW5jb21pbmcnLAogICAgJ3BlbmRpbmcnLAogICAgJ2Nvbm5lY3RpbmcnLAogICAgJ2Nvbm5lY3RlZCcsCiAgICAnbWlzc2VkJywKICAgICdhY3cnLAogICAgJ3ZpZXcnLAogICAgJ2VuZGVkJywKICAgICdlcnJvcicsCiAgICAnYWNjZXB0ZWQnCiAgXSk7CgogIHZhciBDaGFubmVsVmlld0V2ZW50cyA9IGNvbm5lY3QubWFrZU5hbWVzcGFjZWRFbnVtKCd0YXNrTGlzdCcsIFsKICAgICdhY3RpdmF0ZV9jaGFubmVsX3dpdGhfdmlld190eXBlJwogIF0pOwogIAogIHZhciBUYXNrRXZlbnRzID0gY29ubmVjdC5tYWtlTmFtZXNwYWNlZEVudW0oJ3Rhc2snLCBbCiAgICAgICdjcmVhdGVkJwogIF0pOwoKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgKiBlbnVtIENvbm5lY3Rpb25FdmVudHMKICAqLwogIHZhciBDb25uZWN0aW9uRXZlbnRzID0gY29ubmVjdC5tYWtlTmFtZXNwYWNlZEVudW0oJ2Nvbm5lY3Rpb24nLCBbCiAgICAnc2Vzc2lvbl9pbml0JywKICAgICdyZWFkeV90b19zdGFydF9zZXNzaW9uJwogIF0pOwoKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBlbnVtIENvbmZpZ3VyYXRpb24gRXZlbnRzCiAgICovCiAgdmFyIENvbmZpZ3VyYXRpb25FdmVudHMgPSBjb25uZWN0Lm1ha2VOYW1lc3BhY2VkRW51bSgnY29uZmlndXJhdGlvbicsIFsKICAgICdjb25maWd1cmUnLAogICAgJ3NldF9zcGVha2VyX2RldmljZScsCiAgICAnc2V0X21pY3JvcGhvbmVfZGV2aWNlJywKICAgICdzZXRfcmluZ2VyX2RldmljZScsCiAgICAnc3BlYWtlcl9kZXZpY2VfY2hhbmdlZCcsCiAgICAnbWljcm9waG9uZV9kZXZpY2VfY2hhbmdlZCcsCiAgICAncmluZ2VyX2RldmljZV9jaGFuZ2VkJwogIF0pOwoKICB2YXIgRGlzYXN0ZXJSZWNvdmVyeUV2ZW50cyA9IGNvbm5lY3QubWFrZU5hbWVzcGFjZWRFbnVtKCdkaXNhc3RlclJlY292ZXJ5JywgWwogICAgJ3N1cHByZXNzJywKICAgICdmb3JjZV9vZmZsaW5lJywgLy8gbGV0dGluZyB0aGUgc2hhcmVkd29ya2VyIGtub3cgdG8gZm9yY2Ugb2ZmbGluZSAKICAgICdzZXRfb2ZmbGluZScsIC8vIGlmcmFtZSBsZXR0aW5nIHRoZSBuYXRpdmUgY2NwIHRvIHNldCBvZmZsaW5lCiAgICAnaW5pdF9kaXNhc3Rlcl9yZWNvdmVyeScsCiAgICAnZmFpbG92ZXInIC8vIHVzZWQgdG8gcHJvcGFnYXRlIGZhaWxvdmVyIHN0YXRlIHRvIG90aGVyIHdpbmRvd3MKICBdKTsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBDb25maWd1cmF0aW9uIEV2ZW50cwogICAqLwogIHZhciBDb25maWd1cmF0aW9uRXZlbnRzID0gY29ubmVjdC5tYWtlTmFtZXNwYWNlZEVudW0oJ2NvbmZpZ3VyYXRpb24nLCBbCiAgICAnY29uZmlndXJlJywKICAgICdzZXRfc3BlYWtlcl9kZXZpY2UnLAogICAgJ3NldF9taWNyb3Bob25lX2RldmljZScsCiAgICAnc2V0X3Jpbmdlcl9kZXZpY2UnLAogICAgJ3NwZWFrZXJfZGV2aWNlX2NoYW5nZWQnLAogICAgJ21pY3JvcGhvbmVfZGV2aWNlX2NoYW5nZWQnLAogICAgJ3Jpbmdlcl9kZXZpY2VfY2hhbmdlZCcKICBdKTsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICogZW51bSBWb2ljZUlkIEV2ZW50cwogICAqLwogICB2YXIgVm9pY2VJZEV2ZW50cyA9IGNvbm5lY3QubWFrZU5hbWVzcGFjZWRFbnVtKCd2b2ljZUlkJywgWwogICAgJ3VwZGF0ZV9kb21haW5faWQnCiAgXSk7CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAqIGNsYXNzIEV2ZW50RmFjdG9yeQogICAqLwogIHZhciBFdmVudEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7IH07CiAgRXZlbnRGYWN0b3J5LmNyZWF0ZVJlcXVlc3QgPSBmdW5jdGlvbiAodHlwZSwgbWV0aG9kLCBwYXJhbXMpIHsKICAgIHJldHVybiB7CiAgICAgIGV2ZW50OiB0eXBlLAogICAgICByZXF1ZXN0SWQ6IGNvbm5lY3QucmFuZG9tSWQoKSwKICAgICAgbWV0aG9kOiBtZXRob2QsCiAgICAgIHBhcmFtczogcGFyYW1zCiAgICB9OwogIH07CgogIEV2ZW50RmFjdG9yeS5jcmVhdGVSZXNwb25zZSA9IGZ1bmN0aW9uICh0eXBlLCByZXF1ZXN0LCBkYXRhLCBlcnIpIHsKICAgIHJldHVybiB7CiAgICAgIGV2ZW50OiB0eXBlLAogICAgICByZXF1ZXN0SWQ6IHJlcXVlc3QucmVxdWVzdElkLAogICAgICBkYXRhOiBkYXRhLAogICAgICBlcnI6IGVyciB8fCBudWxsCiAgICB9OwogIH07CgogIC8qKgogICAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gZXZlbnQgc3Vic2NyaXB0aW9uIGluIGFuIEV2ZW50QnVzLgogICAqLwogIHZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3ViTWFwLCBldmVudE5hbWUsIGYpIHsKICAgIHRoaXMuc3ViTWFwID0gc3ViTWFwOwogICAgdGhpcy5pZCA9IGNvbm5lY3QucmFuZG9tSWQoKTsKICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lOwogICAgdGhpcy5mID0gZjsKICB9OwoKICAvKioKICAgKiBVbnN1YnNjcmliZSB0aGUgaGFuZGxlciBvZiB0aGlzIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBFdmVudEJ1cwogICAqIGZyb20gd2hpY2ggaXQgd2FzIGNyZWF0ZWQuCiAgICovCiAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc3ViTWFwLnVuc3Vic2NyaWJlKHRoaXMuZXZlbnROYW1lLCB0aGlzLmlkKTsKICB9OwoKICAvKioKICAgKiBBIG1hcCBvZiBldmVudCBzdWJzY3JpcHRpb25zLCB1c2VkIGJ5IHRoZSBFdmVudEJ1cy4KICAgKi8KICB2YXIgU3Vic2NyaXB0aW9uTWFwID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5zdWJJZE1hcCA9IHt9OwogICAgdGhpcy5zdWJFdmVudE5hbWVNYXAgPSB7fTsKICB9OwoKICAvKioKICAgKiBBZGQgYSBzdWJzY3JpcHRpb24gZm9yIHRoZSBuYW1lZCBldmVudC4gIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uCiAgICogb2JqZWN0IGFuZCByZXR1cm5zIGl0LiAgVGhpcyBvYmplY3QgY2FuIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUuCiAgICovCiAgU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBmKSB7CiAgICB2YXIgc3ViID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLCBldmVudE5hbWUsIGYpOwoKICAgIHRoaXMuc3ViSWRNYXBbc3ViLmlkXSA9IHN1YjsKICAgIHZhciBzdWJMaXN0ID0gdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSB8fCBbXTsKICAgIHN1Ykxpc3QucHVzaChzdWIpOwogICAgdGhpcy5zdWJFdmVudE5hbWVNYXBbZXZlbnROYW1lXSA9IHN1Ykxpc3Q7CiAgICByZXR1cm4gc3ViOwogIH07CgogIC8qKgogICAqIFVuc3Vic2NyaWJlIGEgc3Vic2NyaXB0aW9uIG1hdGNoaW5nIHRoZSBnaXZlbiBldmVudCBuYW1lIGFuZCBpZC4KICAgKi8KICBTdWJzY3JpcHRpb25NYXAucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgc3ViSWQpIHsKICAgIGlmIChjb25uZWN0LmNvbnRhaW5zKHRoaXMuc3ViRXZlbnROYW1lTWFwLCBldmVudE5hbWUpKSB7CiAgICAgIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gPSB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pZCAhPT0gc3ViSWQ7IH0pOwoKICAgICAgaWYgKHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0ubGVuZ3RoIDwgMSkgewogICAgICAgIGRlbGV0ZSB0aGlzLnN1YkV2ZW50TmFtZU1hcFtldmVudE5hbWVdOwogICAgICB9CiAgICB9CgogICAgaWYgKGNvbm5lY3QuY29udGFpbnModGhpcy5zdWJJZE1hcCwgc3ViSWQpKSB7CiAgICAgIGRlbGV0ZSB0aGlzLnN1YklkTWFwW3N1YklkXTsKICAgIH0KICB9OwoKICAvKioKICAgKiBHZXQgYSBsaXN0IG9mIGFsbCBzdWJzY3JpcHRpb25zIGluIHRoZSBzdWJzY3JpcHRpb24gbWFwLgogICAqLwogIFN1YnNjcmlwdGlvbk1hcC5wcm90b3R5cGUuZ2V0QWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjb25uZWN0LnZhbHVlcyh0aGlzLnN1YkV2ZW50TmFtZU1hcCkucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhLmNvbmNhdChiKTsKICAgIH0sIFtdKTsKICB9OwoKICAvKioKICAgKiBHZXQgYSBsaXN0IG9mIHN1YnNjcmlwdGlvbnMgZm9yIHRoZSBnaXZlbiBldmVudCBuYW1lLCBvciBhbiBlbXB0eQogICAqIGxpc3QgaWYgdGhlcmUgYXJlIG5vIHN1YnNjcmlwdGlvbnMuCiAgICovCiAgU3Vic2NyaXB0aW9uTWFwLnByb3RvdHlwZS5nZXRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkgewogICAgcmV0dXJuIHRoaXMuc3ViRXZlbnROYW1lTWFwW2V2ZW50TmFtZV0gfHwgW107CiAgfTsKCiAgLyoqCiAgICogQW4gb2JqZWN0IHdoaWNoIG1haW50YWlucyBhIG1hcCBvZiBzdWJzY3JpcHRpb25zIGFuZCBzZXJ2ZXMgYXMgdGhlCiAgICogbWVjaGFuaXNtIGZvciB0cmlnZ2VyaW5nIGV2ZW50cyB0byBiZSBoYW5kbGVkIGJ5IHN1YnNjcmliZXJzLgogICAqLwogIHZhciBFdmVudEJ1cyA9IGZ1bmN0aW9uIChwYXJhbXNJbikgewogICAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9OwoKICAgIHRoaXMuc3ViTWFwID0gbmV3IFN1YnNjcmlwdGlvbk1hcCgpOwogICAgdGhpcy5sb2dFdmVudHMgPSBwYXJhbXMubG9nRXZlbnRzIHx8IGZhbHNlOwogIH07CgogIC8qKgogICAqIFN1YnNjcmliZSB0byB0aGUgbmFtZWQgZXZlbnQuICBSZXR1cm5zIGEgbmV3IFN1YnNjcmlwdGlvbiBvYmplY3QKICAgKiB3aGljaCBjYW4gYmUgdXNlZCB0byB1bnN1YnNjcmliZS4KICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZikgewogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGV2ZW50TmFtZSwgJ2V2ZW50TmFtZScpOwogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGYsICdmJyk7CiAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGYpLCAnZiBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgIHJldHVybiB0aGlzLnN1Yk1hcC5zdWJzY3JpYmUoZXZlbnROYW1lLCBmKTsKICB9OwoKICAvKioKICAgKiBTdWJzY3JpYmUgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYWxsIGV2ZW50cy4KICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24gKGYpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChmLCAnZicpOwogICAgY29ubmVjdC5hc3NlcnRUcnVlKGNvbm5lY3QuaXNGdW5jdGlvbihmKSwgJ2YgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgICByZXR1cm4gdGhpcy5zdWJNYXAuc3Vic2NyaWJlKEFMTF9FVkVOVFMsIGYpOwogIH07CgogIC8qKgogICAqIEdldCBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdGhlIGdpdmVuIGV2ZW50IG5hbWUsIG9yIGFuIGVtcHR5CiAgICogbGlzdCBpZiB0aGVyZSBhcmUgbm8gc3Vic2NyaXB0aW9ucy4KICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHsKICAgIHJldHVybiB0aGlzLnN1Yk1hcC5nZXRTdWJzY3JpcHRpb25zKGV2ZW50TmFtZSk7CiAgfTsKCiAgLyoqCiAgICogVHJpZ2dlciB0aGUgZ2l2ZW4gZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gZGF0YS4gIEFsbCBtZXRob2RzIHN1YnNjcmliZWQKICAgKiB0byB0aGlzIGV2ZW50IHdpbGwgYmUgY2FsbGVkIGFuZCBhcmUgcHJvdmlkZWQgd2l0aCB0aGUgZ2l2ZW4gYXJiaXRyYXJ5CiAgICogZGF0YSBvYmplY3QgYW5kIHRoZSBuYW1lIG9mIHRoZSBldmVudCwgaW4gdGhhdCBvcmRlci4KICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGRhdGEpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChldmVudE5hbWUsICdldmVudE5hbWUnKTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBhbGxFdmVudFN1YnMgPSB0aGlzLnN1Yk1hcC5nZXRTdWJzY3JpcHRpb25zKEFMTF9FVkVOVFMpOwogICAgdmFyIGV2ZW50U3VicyA9IHRoaXMuc3ViTWFwLmdldFN1YnNjcmlwdGlvbnMoZXZlbnROYW1lKTsKCiAgICBpZiAodGhpcy5sb2dFdmVudHMgJiYKICAgICAgICBldmVudE5hbWUgIT09IGNvbm5lY3QuRXZlbnRUeXBlLkxPRyAmJgogICAgICAgIGV2ZW50TmFtZSAhPT0gY29ubmVjdC5FdmVudFR5cGUuTUFTVEVSX1JFU1BPTlNFICYmCiAgICAgICAgZXZlbnROYW1lICE9PSBjb25uZWN0LkV2ZW50VHlwZS5BUElfTUVUUklDICYmCiAgICAgICAgZXZlbnROYW1lICE9PSBjb25uZWN0LkV2ZW50VHlwZS5TRVJWRVJfQk9VTkRfSU5URVJOQUxfTE9HCiAgICApIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS50cmFjZSgiUHVibGlzaGluZyBldmVudDogJXMiLCBldmVudE5hbWUpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICB9CgogICAgaWYgKAogICAgICBldmVudE5hbWUuc3RhcnRzV2l0aChjb25uZWN0LkNvbnRhY3RFdmVudHMuQUNDRVBURUQpICYmCiAgICAgIGRhdGEgJiYKICAgICAgZGF0YS5jb250YWN0SWQgJiYKICAgICAgIShkYXRhIGluc3RhbmNlb2YgY29ubmVjdC5Db250YWN0KQogICAgKSB7CiAgICAgIGRhdGEgPSBuZXcgY29ubmVjdC5Db250YWN0KGRhdGEuY29udGFjdElkKTsKICAgIH0KCiAgICBhbGxFdmVudFN1YnMuY29uY2F0KGV2ZW50U3VicykuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7CiAgICAgIHRyeSB7CiAgICAgICAgc3ViLmYoZGF0YSB8fCBudWxsLCBldmVudE5hbWUsIHNlbGYpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiJyVzJyBldmVudCBoYW5kbGVyIGZhaWxlZC4iLCBldmVudE5hbWUpLndpdGhFeGNlcHRpb24oZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgLyoqCiAgICogUmV0dXJucyBhIGNsb3N1cmUgd2hpY2ggYnJpZGdlcyBhbiBldmVudCBmcm9tIGFub3RoZXIgRXZlbnRCdXMgdG8gdGhpcyBidXMuCiAgICoKICAgKiBVc2FnZToKICAgKiBjb25kdWl0Lm9uVXBzdHJlYW0oIk15RXZlbnQiLCBidXMuYnJpZGdlKCkpOwogICAqLwogIEV2ZW50QnVzLnByb3RvdHlwZS5icmlkZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7CiAgICAgIHNlbGYudHJpZ2dlcihldmVudCwgZGF0YSk7CiAgICB9OwogIH07CgogIC8qKgogICAqIFVuc3Vic2NyaWJlIGFsbCBldmVudHMgaW4gdGhlIGV2ZW50IGJ1cy4KICAgKi8KICBFdmVudEJ1cy5wcm90b3R5cGUudW5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnN1Yk1hcC5nZXRBbGxTdWJzY3JpcHRpb25zKCkuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7CiAgICAgIHN1Yi51bnN1YnNjcmliZSgpOwogICAgfSk7CiAgfTsKCiAgY29ubmVjdC5FdmVudEJ1cyA9IEV2ZW50QnVzOwogIGNvbm5lY3QuRXZlbnRGYWN0b3J5ID0gRXZlbnRGYWN0b3J5OwogIGNvbm5lY3QuRXZlbnRUeXBlID0gRXZlbnRUeXBlOwogIGNvbm5lY3QuQWdlbnRFdmVudHMgPSBBZ2VudEV2ZW50czsKICBjb25uZWN0LkNvbmZpZ3VyYXRpb25FdmVudHMgPSBDb25maWd1cmF0aW9uRXZlbnRzOwogIGNvbm5lY3QuQ29ubmVjdGlvbkV2ZW50cyA9IENvbm5lY3Rpb25FdmVudHM7CiAgY29ubmVjdC5Db25ubmVjdGlvbkV2ZW50cyA9IENvbm5lY3Rpb25FdmVudHM7IC8vZGVwcmVjYXRlIG9uIG5leHQgbWFqb3IgdmVyc2lvbiByZWxlYXNlLgogIGNvbm5lY3QuQ29udGFjdEV2ZW50cyA9IENvbnRhY3RFdmVudHM7CiAgY29ubmVjdC5DaGFubmVsVmlld0V2ZW50cyA9IENoYW5uZWxWaWV3RXZlbnRzOwogIGNvbm5lY3QuVGFza0V2ZW50cyA9IFRhc2tFdmVudHM7CiAgY29ubmVjdC5Wb2ljZUlkRXZlbnRzID0gVm9pY2VJZEV2ZW50czsKICBjb25uZWN0LldlYlNvY2tldEV2ZW50cyA9IFdlYlNvY2tldEV2ZW50czsKICBjb25uZWN0Lk1hc3RlclRvcGljcyA9IE1hc3RlclRvcGljczsKICBjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMgPSBEaXNhc3RlclJlY292ZXJ5RXZlbnRzOwp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gMjg2OgovKioqLyAoKCkgPT4gewoKIWZ1bmN0aW9uKGUpe3ZhciBuPXt9O2Z1bmN0aW9uIHQobyl7aWYobltvXSlyZXR1cm4gbltvXS5leHBvcnRzO3ZhciByPW5bb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiBlW29dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLHQpLHIubD0hMCxyLmV4cG9ydHN9dC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixvKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSx0LnI9ZnVuY3Rpb24oZSl7InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZToiTW9kdWxlIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KX0sdC50PWZ1bmN0aW9uKGUsbil7aWYoMSZuJiYoZT10KGUpKSw4Jm4pcmV0dXJuIGU7aWYoNCZuJiYib2JqZWN0Ij09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHQucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobywiZGVmYXVsdCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImbiYmInN0cmluZyIhPXR5cGVvZiBlKWZvcih2YXIgciBpbiBlKXQuZChvLHIsZnVuY3Rpb24obil7cmV0dXJuIGVbbl19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG99LHQubj1mdW5jdGlvbihlKXt2YXIgbj1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gdC5kKG4sImEiLG4pLG59LHQubz1mdW5jdGlvbihlLG4pe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKX0sdC5wPSIiLHQodC5zPTIpfShbZnVuY3Rpb24oZSxuLHQpeyJ1c2Ugc3RyaWN0Ijt2YXIgbz10KDEpLHI9Ik5VTEwiLGk9IkNMSUVOVF9MT0dHRVIiLGM9IkRFQlVHIixzPTJlMyxhPSJhd3Mvc3Vic2NyaWJlIix1PSJhd3MvdW5zdWJzY3JpYmUiLGw9ImF3cy9oZWFydGJlYXQiLGY9ImNvbm5lY3RlZCIscD0iZGlzY29ubmVjdGVkIjtmdW5jdGlvbiBkKGUpe3JldHVybihkPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSkoZSl9dmFyIGI9e2Fzc2VydFRydWU6ZnVuY3Rpb24oZSxuKXtpZighZSl0aHJvdyBuZXcgRXJyb3Iobil9LGFzc2VydE5vdE51bGw6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYi5hc3NlcnRUcnVlKG51bGwhPT1lJiZ2b2lkIDAhPT1kKGUpLE9iamVjdChvLnNwcmludGYpKCIlcyBtdXN0IGJlIHByb3ZpZGVkIixufHwiQSB2YWx1ZSIpKSxlfSxpc05vbkVtcHR5U3RyaW5nOmZ1bmN0aW9uKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZSYmZS5sZW5ndGg+MH0sYXNzZXJ0SXNMaXN0OmZ1bmN0aW9uKGUsbil7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKG4rIiBpcyBub3QgYW4gYXJyYXkiKX0saXNGdW5jdGlvbjpmdW5jdGlvbihlKXtyZXR1cm4hIShlJiZlLmNvbnN0cnVjdG9yJiZlLmNhbGwmJmUuYXBwbHkpfSxpc09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4hKCJvYmplY3QiIT09ZChlKXx8bnVsbD09PWUpfSxpc1N0cmluZzpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV9LGlzTnVtYmVyOmZ1bmN0aW9uKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZX19LGc9bmV3IFJlZ0V4cCgiXih3c3M6Ly8pXFx3KiIpO2IudmFsaWRXU1VybD1mdW5jdGlvbihlKXtyZXR1cm4gZy50ZXN0KGUpfSxiLmdldFN1YnNjcmlwdGlvblJlc3BvbnNlPWZ1bmN0aW9uKGUsbix0KXtyZXR1cm57dG9waWM6ZSxjb250ZW50OntzdGF0dXM6bj8ic3VjY2VzcyI6ImZhaWx1cmUiLHRvcGljczp0fX19LGIuYXNzZXJ0SXNPYmplY3Q9ZnVuY3Rpb24oZSxuKXtpZighYi5pc09iamVjdChlKSl0aHJvdyBuZXcgRXJyb3IobisiIGlzIG5vdCBhbiBvYmplY3QhIil9LGIuYWRkSml0dGVyPWZ1bmN0aW9uKGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxO249TWF0aC5taW4obiwxKTt2YXIgdD1NYXRoLnJhbmRvbSgpPi41PzE6LTE7cmV0dXJuIE1hdGguZmxvb3IoZSt0KmUqTWF0aC5yYW5kb20oKSpuKX0sYi5pc05ldHdvcmtPbmxpbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmF2aWdhdG9yLm9uTGluZX0sYi5pc05ldHdvcmtGYWlsdXJlPWZ1bmN0aW9uKGUpe3JldHVybiEoIWUuX2RlYnVnfHwhZS5fZGVidWcudHlwZSkmJiJOZXR3b3JraW5nRXJyb3IiPT09ZS5fZGVidWcudHlwZX07dmFyIHk9YjtmdW5jdGlvbiBtKGUpe3JldHVybihtPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gUyhlLG4pe3JldHVybiFufHwib2JqZWN0IiE9PW0obikmJiJmdW5jdGlvbiIhPXR5cGVvZiBuP2Z1bmN0aW9uKGUpe2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4gZX0oZSk6bn1mdW5jdGlvbiBrKGUpe3JldHVybihrPU9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19wcm90b19ffHxPYmplY3QuZ2V0UHJvdG90eXBlT2YoZSl9KShlKX1mdW5jdGlvbiBoKGUsbil7cmV0dXJuKGg9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlLG4pe3JldHVybiBlLl9fcHJvdG9fXz1uLGV9KShlLG4pfWZ1bmN0aW9uIHYoZSxuKXtpZighKGUgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiB3KGUsbil7Zm9yKHZhciB0PTA7dDxuLmxlbmd0aDt0Kyspe3ZhciBvPW5bdF07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsInZhbHVlImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19ZnVuY3Rpb24gQyhlLG4sdCl7cmV0dXJuIG4mJncoZS5wcm90b3R5cGUsbiksdCYmdyhlLHQpLGV9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dih0aGlzLGUpfXJldHVybiBDKGUsW3trZXk6ImRlYnVnIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OiJpbmZvIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OiJ3YXJuIix2YWx1ZTpmdW5jdGlvbihlKXt9fSx7a2V5OiJlcnJvciIsdmFsdWU6ZnVuY3Rpb24oZSl7fX1dKSxlfSgpLE89e0RFQlVHOjEwLElORk86MjAsV0FSTjozMCxFUlJPUjo0MH0sST1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2KHRoaXMsZSksdGhpcy51cGRhdGVMb2dnZXJDb25maWcoKSx0aGlzLmNvbnNvbGVMb2dnZXJXcmFwcGVyPV8oKX1yZXR1cm4gQyhlLFt7a2V5OiJ3cml0ZVRvQ2xpZW50TG9nZ2VyIix2YWx1ZTpmdW5jdGlvbihlLG4pe2lmKHRoaXMuaGFzQ2xpZW50TG9nZ2VyKCkpc3dpdGNoKGUpe2Nhc2UgTy5ERUJVRzpyZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLmRlYnVnKG4pO2Nhc2UgTy5JTkZPOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuaW5mbyhuKTtjYXNlIE8uV0FSTjpyZXR1cm4gdGhpcy5fY2xpZW50TG9nZ2VyLndhcm4obik7Y2FzZSBPLkVSUk9SOnJldHVybiB0aGlzLl9jbGllbnRMb2dnZXIuZXJyb3Iobil9fX0se2tleToiaXNMZXZlbEVuYWJsZWQiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlPj10aGlzLl9sZXZlbH19LHtrZXk6Imhhc0NsaWVudExvZ2dlciIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXRoaXMuX2NsaWVudExvZ2dlcn19LHtrZXk6ImdldExvZ2dlciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49ZS5wcmVmaXh8fCIiO3JldHVybiB0aGlzLl9sb2dzRGVzdGluYXRpb249PT1jP3RoaXMuY29uc29sZUxvZ2dlcldyYXBwZXI6bmV3IE4obil9fSx7a2V5OiJ1cGRhdGVMb2dnZXJDb25maWciLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBuPWV8fHt9O3RoaXMuX2xldmVsPW4ubGV2ZWx8fE8uREVCVUcsdGhpcy5fY2xpZW50TG9nZ2VyPW4ubG9nZ2VyfHxudWxsLHRoaXMuX2xvZ3NEZXN0aW5hdGlvbj1yLG4uZGVidWcmJih0aGlzLl9sb2dzRGVzdGluYXRpb249Yyksbi5sb2dnZXImJih0aGlzLl9sb2dzRGVzdGluYXRpb249aSl9fV0pLGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt2KHRoaXMsZSl9cmV0dXJuIEMoZSxbe2tleToiZGVidWciLHZhbHVlOmZ1bmN0aW9uKCl7fX0se2tleToiaW5mbyIsdmFsdWU6ZnVuY3Rpb24oKXt9fSx7a2V5OiJ3YXJuIix2YWx1ZTpmdW5jdGlvbigpe319LHtrZXk6ImVycm9yIix2YWx1ZTpmdW5jdGlvbigpe319XSksZX0oKSxOPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIG4oZSl7dmFyIHQ7cmV0dXJuIHYodGhpcyxuKSwodD1TKHRoaXMsayhuKS5jYWxsKHRoaXMpKSkucHJlZml4PWV8fCIiLHR9cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuJiZuLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLG4mJmgoZSxuKX0obixXKSxDKG4sW3trZXk6ImRlYnVnIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3JldHVybiB0aGlzLl9sb2coTy5ERUJVRyxuKX19LHtrZXk6ImluZm8iLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoZSksdD0wO3Q8ZTt0Kyspblt0XT1hcmd1bWVudHNbdF07cmV0dXJuIHRoaXMuX2xvZyhPLklORk8sbil9fSx7a2V5OiJ3YXJuIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLHQ9MDt0PGU7dCsrKW5bdF09YXJndW1lbnRzW3RdO3JldHVybiB0aGlzLl9sb2coTy5XQVJOLG4pfX0se2tleToiZXJyb3IiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoZSksdD0wO3Q8ZTt0Kyspblt0XT1hcmd1bWVudHNbdF07cmV0dXJuIHRoaXMuX2xvZyhPLkVSUk9SLG4pfX0se2tleToiX3Nob3VsZExvZyIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIEUuaGFzQ2xpZW50TG9nZ2VyKCkmJkUuaXNMZXZlbEVuYWJsZWQoZSl9fSx7a2V5OiJfd3JpdGVUb0NsaWVudExvZ2dlciIsdmFsdWU6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gRS53cml0ZVRvQ2xpZW50TG9nZ2VyKGUsbil9fSx7a2V5OiJfbG9nIix2YWx1ZTpmdW5jdGlvbihlLG4pe2lmKHRoaXMuX3Nob3VsZExvZyhlKSl7dmFyIHQ9dGhpcy5fY29udmVydFRvU2luZ2xlU3RhdGVtZW50KG4pO3JldHVybiB0aGlzLl93cml0ZVRvQ2xpZW50TG9nZ2VyKGUsdCl9fX0se2tleToiX2NvbnZlcnRUb1NpbmdsZVN0YXRlbWVudCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49IiI7dGhpcy5wcmVmaXgmJihuKz10aGlzLnByZWZpeCsiICIpO2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCsrKXt2YXIgbz1lW3RdO24rPXRoaXMuX2NvbnZlcnRUb1N0cmluZyhvKSsiICJ9cmV0dXJuIG59fSx7a2V5OiJfY29udmVydFRvU3RyaW5nIix2YWx1ZTpmdW5jdGlvbihlKXt0cnl7aWYoIWUpcmV0dXJuIiI7aWYoeS5pc1N0cmluZyhlKSlyZXR1cm4gZTtpZih5LmlzT2JqZWN0KGUpJiZ5LmlzRnVuY3Rpb24oZS50b1N0cmluZykpe3ZhciBuPWUudG9TdHJpbmcoKTtpZigiW29iamVjdCBPYmplY3RdIiE9PW4pcmV0dXJuIG59cmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpfWNhdGNoKG4pe3JldHVybiBjb25zb2xlLmVycm9yKCJFcnJvciB3aGlsZSBjb252ZXJ0aW5nIGFyZ3VtZW50IHRvIHN0cmluZyIsZSxuKSwiIn19fV0pLG59KCksXz1mdW5jdGlvbigpe3ZhciBlPW5ldyBXO3JldHVybiBlLmRlYnVnPWNvbnNvbGUuZGVidWcsZS5pbmZvPWNvbnNvbGUuaW5mbyxlLndhcm49Y29uc29sZS53YXJuLGUuZXJyb3I9Y29uc29sZS5lcnJvcixlfSxFPW5ldyBJO2Z1bmN0aW9uIEYoZSxuKXtmb3IodmFyIHQ9MDt0PG4ubGVuZ3RoO3QrKyl7dmFyIG89blt0XTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX12YXIgTD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobil7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnM7IWZ1bmN0aW9uKGUsbil7aWYoIShlIGluc3RhbmNlb2YgbikpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksdGhpcy5udW1BdHRlbXB0cz0wLHRoaXMuZXhlY3V0b3I9bix0aGlzLmhhc0FjdGl2ZVJlY29ubmVjdGlvbj0hMSx0aGlzLmRlZmF1bHRSZXRyeT10fXZhciBuLHQsbztyZXR1cm4gbj1lLCh0PVt7a2V5OiJyZXRyeSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuaGFzQWN0aXZlUmVjb25uZWN0aW9ufHwodGhpcy5oYXNBY3RpdmVSZWNvbm5lY3Rpb249ITAsc2V0VGltZW91dChmdW5jdGlvbigpe2UuX2V4ZWN1dGUoKX0sdGhpcy5fZ2V0RGVsYXkoKSkpfX0se2tleToiX2V4ZWN1dGUiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5oYXNBY3RpdmVSZWNvbm5lY3Rpb249ITEsdGhpcy5leGVjdXRvcigpLHRoaXMubnVtQXR0ZW1wdHMrK319LHtrZXk6ImNvbm5lY3RlZCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm51bUF0dGVtcHRzPTB9fSx7a2V5OiJfZ2V0RGVsYXkiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9TWF0aC5wb3coMix0aGlzLm51bUF0dGVtcHRzKSp0aGlzLmRlZmF1bHRSZXRyeTtyZXR1cm4gZTw9M2U0P2U6M2U0fX1dKSYmRihuLnByb3RvdHlwZSx0KSxvJiZGKG4sbyksZX0oKTt0LmQobiwiYSIsZnVuY3Rpb24oKXtyZXR1cm4gUn0pO3ZhciB4PWZ1bmN0aW9uKCl7dmFyIGU9RS5nZXRMb2dnZXIoe30pLG49eS5pc05ldHdvcmtPbmxpbmUoKSx0PXtwcmltYXJ5Om51bGwsc2Vjb25kYXJ5Om51bGx9LG89e3JlY29ubmVjdFdlYlNvY2tldDohMCx3ZWJzb2NrZXRJbml0RmFpbGVkOiExLGV4cG9uZW50aWFsQmFja09mZlRpbWU6MWUzLGV4cG9uZW50aWFsVGltZW91dEhhbmRsZTpudWxsLGxpZmVUaW1lVGltZW91dEhhbmRsZTpudWxsLHdlYlNvY2tldEluaXRDaGVja2VyVGltZW91dElkOm51bGwsY29ublN0YXRlOm51bGx9LHI9e2Nvbm5lY3RXZWJTb2NrZXRSZXRyeUNvdW50OjAsY29ubmVjdGlvbkF0dGVtcHRTdGFydFRpbWU6bnVsbCxub09wZW5Db25uZWN0aW9uc1RpbWVzdGFtcDpudWxsfSxpPXtwZW5kaW5nUmVzcG9uc2U6ITEsaW50ZXJ2YWxIYW5kbGU6bnVsbH0sYz17aW5pdEZhaWx1cmU6bmV3IFNldCxnZXRXZWJTb2NrZXRUcmFuc3BvcnQ6bnVsbCxzdWJzY3JpcHRpb25VcGRhdGU6bmV3IFNldCxzdWJzY3JpcHRpb25GYWlsdXJlOm5ldyBTZXQsdG9waWM6bmV3IE1hcCxhbGxNZXNzYWdlOm5ldyBTZXQsY29ubmVjdGlvbkdhaW46bmV3IFNldCxjb25uZWN0aW9uTG9zdDpuZXcgU2V0LGNvbm5lY3Rpb25PcGVuOm5ldyBTZXQsY29ubmVjdGlvbkNsb3NlOm5ldyBTZXR9LHM9e2Nvbm5Db25maWc6bnVsbCxwcm9taXNlSGFuZGxlOm51bGwscHJvbWlzZUNvbXBsZXRlZDohMH0sZD17c3Vic2NyaWJlZDpuZXcgU2V0LHBlbmRpbmc6bmV3IFNldCxzdWJzY3JpcHRpb25IaXN0b3J5Om5ldyBTZXR9LGI9e3Jlc3BvbnNlQ2hlY2tJbnRlcnZhbElkOm51bGwscmVxdWVzdENvbXBsZXRlZDohMCxyZVN1YnNjcmliZUludGVydmFsSWQ6bnVsbCxjb25zZWN1dGl2ZUZhaWxlZFN1YnNjcmliZUF0dGVtcHRzOjAsY29uc2VjdXRpdmVOb1Jlc3BvbnNlUmVxdWVzdDowfSxnPW5ldyBMKGZ1bmN0aW9uKCl7VSgpfSksbT1uZXcgU2V0KFthLHUsbF0pLFM9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZihuIT09eS5pc05ldHdvcmtPbmxpbmUoKSl7aWYoIShuPXkuaXNOZXR3b3JrT25saW5lKCkpKXJldHVybiB2b2lkIEooZS5pbmZvKCJOZXR3b3JrIG9mZmxpbmUiKSk7dmFyIHQ9TygpO24mJighdHx8dyh0LFdlYlNvY2tldC5DTE9TSU5HKXx8dyh0LFdlYlNvY2tldC5DTE9TRUQpKSYmKEooZS5pbmZvKCJOZXR3b3JrIG9ubGluZSwgY29ubmVjdGluZyB0byBXZWJTb2NrZXQgc2VydmVyIikpLFUoKSl9fSwyNTApLGs9ZnVuY3Rpb24obix0KXtuLmZvckVhY2goZnVuY3Rpb24obil7dHJ5e24odCl9Y2F0Y2gobil7SihlLmVycm9yKCJFcnJvciBleGVjdXRpbmcgY2FsbGJhY2siLG4pKX19KX0saD1mdW5jdGlvbihlKXtpZihudWxsPT09ZSlyZXR1cm4iTlVMTCI7c3dpdGNoKGUucmVhZHlTdGF0ZSl7Y2FzZSBXZWJTb2NrZXQuQ09OTkVDVElORzpyZXR1cm4iQ09OTkVDVElORyI7Y2FzZSBXZWJTb2NrZXQuT1BFTjpyZXR1cm4iT1BFTiI7Y2FzZSBXZWJTb2NrZXQuQ0xPU0lORzpyZXR1cm4iQ0xPU0lORyI7Y2FzZSBXZWJTb2NrZXQuQ0xPU0VEOnJldHVybiJDTE9TRUQiO2RlZmF1bHQ6cmV0dXJuIlVOREVGSU5FRCJ9fSx2PWZ1bmN0aW9uKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOiIiO0ooZS5kZWJ1ZygiWyIrbisiXSBQcmltYXJ5IFdlYlNvY2tldDogIitoKHQucHJpbWFyeSkrIiB8IFNlY29uZGFyeSBXZWJTb2NrZXQ6ICIraCh0LnNlY29uZGFyeSkpKX0sdz1mdW5jdGlvbihlLG4pe3JldHVybiBlJiZlLnJlYWR5U3RhdGU9PT1ufSxDPWZ1bmN0aW9uKGUpe3JldHVybiB3KGUsV2ViU29ja2V0Lk9QRU4pfSxUPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT09ZXx8dm9pZCAwPT09ZS5yZWFkeVN0YXRlfHx3KGUsV2ViU29ja2V0LkNMT1NFRCl9LE89ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbCE9PXQuc2Vjb25kYXJ5P3Quc2Vjb25kYXJ5OnQucHJpbWFyeX0sST1mdW5jdGlvbigpe3JldHVybiBDKE8oKSl9LFc9ZnVuY3Rpb24oKXtpZihpLnBlbmRpbmdSZXNwb25zZSlyZXR1cm4gSihlLndhcm4oIkhlYXJ0YmVhdCByZXNwb25zZSBub3QgcmVjZWl2ZWQiKSksY2xlYXJJbnRlcnZhbChpLmludGVydmFsSGFuZGxlKSxpLnBlbmRpbmdSZXNwb25zZT0hMSx2b2lkIFUoKTtJKCk/KEooZS5kZWJ1ZygiU2VuZGluZyBoZWFydGJlYXQiKSksTygpLnNlbmQoRyhsKSksaS5wZW5kaW5nUmVzcG9uc2U9ITApOihKKGUud2FybigiRmFpbGVkIHRvIHNlbmQgaGVhcnRiZWF0IHNpbmNlIFdlYlNvY2tldCBpcyBub3Qgb3BlbiIpKSx2KCJzZW5kSGVhcnRCZWF0IiksVSgpKX0sTj1mdW5jdGlvbigpe28uZXhwb25lbnRpYWxCYWNrT2ZmVGltZT0xZTMsaS5wZW5kaW5nUmVzcG9uc2U9ITEsby5yZWNvbm5lY3RXZWJTb2NrZXQ9ITAsY2xlYXJUaW1lb3V0KG8ubGlmZVRpbWVUaW1lb3V0SGFuZGxlKSxjbGVhckludGVydmFsKGkuaW50ZXJ2YWxIYW5kbGUpLGNsZWFyVGltZW91dChvLmV4cG9uZW50aWFsVGltZW91dEhhbmRsZSksY2xlYXJUaW1lb3V0KG8ud2ViU29ja2V0SW5pdENoZWNrZXJUaW1lb3V0SWQpfSxfPWZ1bmN0aW9uKCl7Yi5jb25zZWN1dGl2ZUZhaWxlZFN1YnNjcmliZUF0dGVtcHRzPTAsYi5jb25zZWN1dGl2ZU5vUmVzcG9uc2VSZXF1ZXN0PTAsY2xlYXJJbnRlcnZhbChiLnJlc3BvbnNlQ2hlY2tJbnRlcnZhbElkKSxjbGVhckludGVydmFsKGIucmVTdWJzY3JpYmVJbnRlcnZhbElkKX0sRj1mdW5jdGlvbigpe3IuY29ubmVjdFdlYlNvY2tldFJldHJ5Q291bnQ9MCxyLmNvbm5lY3Rpb25BdHRlbXB0U3RhcnRUaW1lPW51bGwsci5ub09wZW5Db25uZWN0aW9uc1RpbWVzdGFtcD1udWxsfSx4PWZ1bmN0aW9uKCl7dHJ5e0ooZS5pbmZvKCJXZWJTb2NrZXQgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCEiKSksdigid2ViU29ja2V0T25PcGVuIiksbnVsbCE9PW8uY29ublN0YXRlJiZvLmNvbm5TdGF0ZSE9PXB8fGsoYy5jb25uZWN0aW9uR2Fpbiksby5jb25uU3RhdGU9Zjt2YXIgbj1EYXRlLm5vdygpO2soYy5jb25uZWN0aW9uT3Blbix7Y29ubmVjdFdlYlNvY2tldFJldHJ5Q291bnQ6ci5jb25uZWN0V2ViU29ja2V0UmV0cnlDb3VudCxjb25uZWN0aW9uQXR0ZW1wdFN0YXJ0VGltZTpyLmNvbm5lY3Rpb25BdHRlbXB0U3RhcnRUaW1lLG5vT3BlbkNvbm5lY3Rpb25zVGltZXN0YW1wOnIubm9PcGVuQ29ubmVjdGlvbnNUaW1lc3RhbXAsY29ubmVjdGlvbkVzdGFibGlzaGVkVGltZTpuLHRpbWVUb0Nvbm5lY3Q6bi1yLmNvbm5lY3Rpb25BdHRlbXB0U3RhcnRUaW1lLHRpbWVXaXRob3V0Q29ubmVjdGlvbjpyLm5vT3BlbkNvbm5lY3Rpb25zVGltZXN0YW1wP24tci5ub09wZW5Db25uZWN0aW9uc1RpbWVzdGFtcDpudWxsfSksRigpLE4oKSxPKCkub3BlblRpbWVzdGFtcD1EYXRlLm5vdygpLDA9PT1kLnN1YnNjcmliZWQuc2l6ZSYmQyh0LnNlY29uZGFyeSkmJkQodC5wcmltYXJ5LCJbUHJpbWFyeSBXZWJTb2NrZXRdIENsb3NpbmcgV2ViU29ja2V0IiksKGQuc3Vic2NyaWJlZC5zaXplPjB8fGQucGVuZGluZy5zaXplPjApJiYoQyh0LnNlY29uZGFyeSkmJkooZS5pbmZvKCJTdWJzY3JpYmluZyBzZWNvbmRhcnkgd2Vic29ja2V0IHRvIHRvcGljcyBvZiBwcmltYXJ5IHdlYnNvY2tldCIpKSxkLnN1YnNjcmliZWQuZm9yRWFjaChmdW5jdGlvbihlKXtkLnN1YnNjcmlwdGlvbkhpc3RvcnkuYWRkKGUpLGQucGVuZGluZy5hZGQoZSl9KSxkLnN1YnNjcmliZWQuY2xlYXIoKSxBKCkpLFcoKSxpLmludGVydmFsSGFuZGxlPXNldEludGVydmFsKFcsMWU0KTt2YXIgYT0xZTMqcy5jb25uQ29uZmlnLndlYlNvY2tldFRyYW5zcG9ydC50cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kcztKKGUuZGVidWcoIlNjaGVkdWxpbmcgV2ViU29ja2V0IG1hbmFnZXIgcmVjb25uZWN0aW9uLCBhZnRlciBkZWxheSAiK2ErIiBtcyIpKSxvLmxpZmVUaW1lVGltZW91dEhhbmRsZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SihlLmRlYnVnKCJTdGFydGluZyBzY2hlZHVsZWQgV2ViU29ja2V0IG1hbmFnZXIgcmVjb25uZWN0aW9uIikpLFUoKX0sYSl9Y2F0Y2gobil7SihlLmVycm9yKCJFcnJvciBhZnRlciBlc3RhYmxpc2hpbmcgV2ViU29ja2V0IGNvbm5lY3Rpb24iLG4pKX19LFI9ZnVuY3Rpb24obil7digid2ViU29ja2V0T25FcnJvciIpLEooZS5lcnJvcigiV2ViU29ja2V0TWFuYWdlciBFcnJvciwgZXJyb3JfZXZlbnQ6ICIsSlNPTi5zdHJpbmdpZnkobikpKSxVKCl9LGo9ZnVuY3Rpb24obil7dmFyIG89SlNPTi5wYXJzZShuLmRhdGEpO3N3aXRjaChvLnRvcGljKXtjYXNlIGE6aWYoSihlLmRlYnVnKCJTdWJzY3JpcHRpb24gTWVzc2FnZSByZWNlaXZlZCBmcm9tIHdlYlNvY2tldCBzZXJ2ZXIiLG4uZGF0YSkpLGIucmVxdWVzdENvbXBsZXRlZD0hMCxiLmNvbnNlY3V0aXZlTm9SZXNwb25zZVJlcXVlc3Q9MCwic3VjY2VzcyI9PT1vLmNvbnRlbnQuc3RhdHVzKWIuY29uc2VjdXRpdmVGYWlsZWRTdWJzY3JpYmVBdHRlbXB0cz0wLG8uY29udGVudC50b3BpY3MuZm9yRWFjaChmdW5jdGlvbihlKXtkLnN1YnNjcmlwdGlvbkhpc3RvcnkuZGVsZXRlKGUpLGQucGVuZGluZy5kZWxldGUoZSksZC5zdWJzY3JpYmVkLmFkZChlKX0pLDA9PT1kLnN1YnNjcmlwdGlvbkhpc3Rvcnkuc2l6ZT9DKHQuc2Vjb25kYXJ5KSYmKEooZS5pbmZvKCJTdWNjZXNzZnVsbHkgc3Vic2NyaWJlZCBzZWNvbmRhcnkgd2Vic29ja2V0IHRvIGFsbCB0b3BpY3Mgb2YgcHJpbWFyeSB3ZWJzb2NrZXQiKSksRCh0LnByaW1hcnksIltQcmltYXJ5IFdlYlNvY2tldF0gQ2xvc2luZyBXZWJTb2NrZXQiKSk6QSgpLGsoYy5zdWJzY3JpcHRpb25VcGRhdGUsbyk7ZWxzZXtpZihjbGVhckludGVydmFsKGIucmVTdWJzY3JpYmVJbnRlcnZhbElkKSwrK2IuY29uc2VjdXRpdmVGYWlsZWRTdWJzY3JpYmVBdHRlbXB0cyw1PT09Yi5jb25zZWN1dGl2ZUZhaWxlZFN1YnNjcmliZUF0dGVtcHRzKXJldHVybiBrKGMuc3Vic2NyaXB0aW9uRmFpbHVyZSxvKSx2b2lkKGIuY29uc2VjdXRpdmVGYWlsZWRTdWJzY3JpYmVBdHRlbXB0cz0wKTtiLnJlU3Vic2NyaWJlSW50ZXJ2YWxJZD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe0EoKX0sNTAwKX1icmVhaztjYXNlIGw6SihlLmRlYnVnKCJIZWFydGJlYXQgcmVzcG9uc2UgcmVjZWl2ZWQiKSksaS5wZW5kaW5nUmVzcG9uc2U9ITE7YnJlYWs7ZGVmYXVsdDppZihvLnRvcGljKXtpZihKKGUuZGVidWcoIk1lc3NhZ2UgcmVjZWl2ZWQgZm9yIHRvcGljICIrby50b3BpYykpLEModC5wcmltYXJ5KSYmQyh0LnNlY29uZGFyeSkmJjA9PT1kLnN1YnNjcmlwdGlvbkhpc3Rvcnkuc2l6ZSYmdGhpcz09PXQucHJpbWFyeSlyZXR1cm4gdm9pZCBKKGUud2FybigiSWdub3JpbmcgTWVzc2FnZSBmb3IgVG9waWMgIitvLnRvcGljKyIsIHRvIGF2b2lkIGR1cGxpY2F0ZXMiKSk7aWYoMD09PWMuYWxsTWVzc2FnZS5zaXplJiYwPT09Yy50b3BpYy5zaXplKXJldHVybiB2b2lkIEooZS53YXJuKCJObyByZWdpc3RlcmVkIGNhbGxiYWNrIGxpc3RlbmVyIGZvciBUb3BpYyIsby50b3BpYykpO2soYy5hbGxNZXNzYWdlLG8pLGMudG9waWMuaGFzKG8udG9waWMpJiZrKGMudG9waWMuZ2V0KG8udG9waWMpLG8pfWVsc2Ugby5tZXNzYWdlP0ooZS53YXJuKCJXZWJTb2NrZXRNYW5hZ2VyIE1lc3NhZ2UgRXJyb3IiLG8pKTpKKGUud2FybigiSW52YWxpZCBpbmNvbWluZyBtZXNzYWdlIixvKSl9fSxBPWZ1bmN0aW9uIG4oKXtpZihiLmNvbnNlY3V0aXZlTm9SZXNwb25zZVJlcXVlc3Q+MylyZXR1cm4gSihlLndhcm4oIklnbm9yaW5nIHN1YnNjcmliZVBlbmRpbmdUb3BpY3Mgc2luY2Ugd2UgaGF2ZSBleGhhdXN0ZWQgbWF4IHN1YnNjcmlwdGlvbiByZXRyaWVzIHdpdGggbm8gcmVzcG9uc2UiKSksdm9pZCBrKGMuc3Vic2NyaXB0aW9uRmFpbHVyZSx5LmdldFN1YnNjcmlwdGlvblJlc3BvbnNlKGEsITEsQXJyYXkuZnJvbShkLnBlbmRpbmcpKSk7SSgpPyhjbGVhckludGVydmFsKGIucmVzcG9uc2VDaGVja0ludGVydmFsSWQpLE8oKS5zZW5kKEcoYSx7dG9waWNzOkFycmF5LmZyb20oZC5wZW5kaW5nKX0pKSxiLnJlcXVlc3RDb21wbGV0ZWQ9ITEsYi5yZXNwb25zZUNoZWNrSW50ZXJ2YWxJZD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2IucmVxdWVzdENvbXBsZXRlZHx8KCsrYi5jb25zZWN1dGl2ZU5vUmVzcG9uc2VSZXF1ZXN0LG4oKSl9LDFlMykpOkooZS53YXJuKCJJZ25vcmluZyBzdWJzY3JpYmVQZW5kaW5nVG9waWNzIGNhbGwgc2luY2UgRGVmYXVsdCBXZWJTb2NrZXQgaXMgbm90IG9wZW4iKSl9LEQ9ZnVuY3Rpb24obix0KXt3KG4sV2ViU29ja2V0LkNPTk5FQ1RJTkcpfHx3KG4sV2ViU29ja2V0Lk9QRU4pP24uY2xvc2UoMWUzLHQpOkooZS53YXJuKCJJZ25vcmluZyBXZWJTb2NrZXQgQ2xvc2UgcmVxdWVzdCwgV2ViU29ja2V0IFN0YXRlOiAiK2gobikpKX0sTT1mdW5jdGlvbihlKXtEKHQucHJpbWFyeSwiW1ByaW1hcnldIFdlYlNvY2tldCAiK2UpLEQodC5zZWNvbmRhcnksIltTZWNvbmRhcnldIFdlYlNvY2tldCAiK2UpfSxQPWZ1bmN0aW9uKCl7ci5jb25uZWN0V2ViU29ja2V0UmV0cnlDb3VudCsrO3ZhciBuPXkuYWRkSml0dGVyKG8uZXhwb25lbnRpYWxCYWNrT2ZmVGltZSwuMyk7RGF0ZS5ub3coKStuPD1zLmNvbm5Db25maWcudXJsQ29ublZhbGlkVGltZT8oSihlLmRlYnVnKCJTY2hlZHVsaW5nIFdlYlNvY2tldCByZWluaXRpYWxpemF0aW9uLCBhZnRlciBkZWxheSAiK24rIiBtcyIpKSxvLmV4cG9uZW50aWFsVGltZW91dEhhbmRsZT1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIHEoKX0sbiksby5leHBvbmVudGlhbEJhY2tPZmZUaW1lKj0yKTooSihlLndhcm4oIldlYlNvY2tldCBVUkwgY2Fubm90IGJlIHVzZWQgdG8gZXN0YWJsaXNoIGNvbm5lY3Rpb24iKSksVSgpKX0sSD1mdW5jdGlvbihuKXtOKCksXygpLEooZS5lcnJvcigiV2ViU29ja2V0IEluaXRpYWxpemF0aW9uIGZhaWxlZCIpKSxvLndlYnNvY2tldEluaXRGYWlsZWQ9ITAsTSgiVGVybWluYXRpbmcgV2ViU29ja2V0IE1hbmFnZXIiKSxjbGVhckludGVydmFsKFMpLGsoYy5pbml0RmFpbHVyZSx7Y29ubmVjdFdlYlNvY2tldFJldHJ5Q291bnQ6ci5jb25uZWN0V2ViU29ja2V0UmV0cnlDb3VudCxjb25uZWN0aW9uQXR0ZW1wdFN0YXJ0VGltZTpyLmNvbm5lY3Rpb25BdHRlbXB0U3RhcnRUaW1lLHJlYXNvbjpufSksRigpfSxHPWZ1bmN0aW9uKGUsbil7cmV0dXJuIEpTT04uc3RyaW5naWZ5KHt0b3BpYzplLGNvbnRlbnQ6bn0pfSx6PWZ1bmN0aW9uKG4pe3JldHVybiEhKHkuaXNPYmplY3QobikmJnkuaXNPYmplY3Qobi53ZWJTb2NrZXRUcmFuc3BvcnQpJiZ5LmlzTm9uRW1wdHlTdHJpbmcobi53ZWJTb2NrZXRUcmFuc3BvcnQudXJsKSYmeS52YWxpZFdTVXJsKG4ud2ViU29ja2V0VHJhbnNwb3J0LnVybCkmJjFlMypuLndlYlNvY2tldFRyYW5zcG9ydC50cmFuc3BvcnRMaWZlVGltZUluU2Vjb25kcz49M2U1KXx8KEooZS5lcnJvcigiSW52YWxpZCBXZWJTb2NrZXQgQ29ubmVjdGlvbiBDb25maWd1cmF0aW9uIixuKSksITEpfSxVPWZ1bmN0aW9uKCl7aWYoeS5pc05ldHdvcmtPbmxpbmUoKSlpZihvLndlYnNvY2tldEluaXRGYWlsZWQpSihlLmRlYnVnKCJXZWJTb2NrZXQgSW5pdCBoYWQgZmFpbGVkLCBpZ25vcmluZyB0aGlzIGdldFdlYlNvY2tldENvbm5Db25maWcgcmVxdWVzdCIpKTtlbHNle2lmKHMucHJvbWlzZUNvbXBsZXRlZClyZXR1cm4gTigpLEooZS5pbmZvKCJGZXRjaGluZyBuZXcgV2ViU29ja2V0IGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbiIpKSxyLmNvbm5lY3Rpb25BdHRlbXB0U3RhcnRUaW1lPXIuY29ubmVjdGlvbkF0dGVtcHRTdGFydFRpbWV8fERhdGUubm93KCkscy5wcm9taXNlQ29tcGxldGVkPSExLHMucHJvbWlzZUhhbmRsZT1jLmdldFdlYlNvY2tldFRyYW5zcG9ydCgpLHMucHJvbWlzZUhhbmRsZS50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiBzLnByb21pc2VDb21wbGV0ZWQ9ITAsSihlLmRlYnVnKCJTdWNjZXNzZnVsbHkgZmV0Y2hlZCB3ZWJTb2NrZXQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uIixuKSkseihuKT8ocy5jb25uQ29uZmlnPW4scy5jb25uQ29uZmlnLnVybENvbm5WYWxpZFRpbWU9RGF0ZS5ub3coKSs4NWUzLGcuY29ubmVjdGVkKCkscSgpKTooSCgiSW52YWxpZCBXZWJTb2NrZXQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uOiAiK24pLHt3ZWJTb2NrZXRDb25uZWN0aW9uRmFpbGVkOiEwfSl9LGZ1bmN0aW9uKG4pe3JldHVybiBzLnByb21pc2VDb21wbGV0ZWQ9ITAsSihlLmVycm9yKCJGYWlsZWQgdG8gZmV0Y2ggd2ViU29ja2V0IGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbiIsbikpLHkuaXNOZXR3b3JrRmFpbHVyZShuKT8oSihlLmluZm8oIlJldHJ5aW5nIGZldGNoaW5nIG5ldyBXZWJTb2NrZXQgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uIikpLGcucmV0cnkoKSk6SCgiRmFpbGVkIHRvIGZldGNoIHdlYlNvY2tldCBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb246ICIrSlNPTi5zdHJpbmdpZnkobikpLHt3ZWJTb2NrZXRDb25uZWN0aW9uRmFpbGVkOiEwfX0pO0ooZS5kZWJ1ZygiVGhlcmUgaXMgYW4gb25nb2luZyBnZXRXZWJTb2NrZXRDb25uQ29uZmlnIHJlcXVlc3QsIHRoaXMgcmVxdWVzdCB3aWxsIGJlIGlnbm9yZWQiKSl9ZWxzZSBKKGUuaW5mbygiTmV0d29yayBvZmZsaW5lLCBpZ25vcmluZyB0aGlzIGdldFdlYlNvY2tldENvbm5Db25maWcgcmVxdWVzdCIpKX0scT1mdW5jdGlvbigpe2lmKG8ud2Vic29ja2V0SW5pdEZhaWxlZClyZXR1cm4gSihlLmluZm8oIndlYi1zb2NrZXQgaW5pdGlhbGl6aW5nIGhhZCBmYWlsZWQsIGFib3J0aW5nIHJlLWluaXQiKSkse3dlYlNvY2tldENvbm5lY3Rpb25GYWlsZWQ6ITB9O2lmKCF5LmlzTmV0d29ya09ubGluZSgpKXJldHVybiBKKGUud2FybigiU3lzdGVtIGlzIG9mZmxpbmUgYWJvcnRpbmcgd2ViLXNvY2tldCBpbml0IikpLHt3ZWJTb2NrZXRDb25uZWN0aW9uRmFpbGVkOiEwfTtKKGUuaW5mbygiSW5pdGlhbGl6aW5nIFdlYnNvY2tldCBNYW5hZ2VyIikpLHYoImluaXRXZWJTb2NrZXQiKTt0cnl7aWYoeihzLmNvbm5Db25maWcpKXt2YXIgbj1udWxsO3JldHVybiBDKHQucHJpbWFyeSk/KEooZS5kZWJ1ZygiUHJpbWFyeSBTb2NrZXQgY29ubmVjdGlvbiBpcyBhbHJlYWR5IG9wZW4iKSksdyh0LnNlY29uZGFyeSxXZWJTb2NrZXQuQ09OTkVDVElORyl8fChKKGUuZGVidWcoIkVzdGFibGlzaGluZyBhIHNlY29uZGFyeSB3ZWItc29ja2V0IGNvbm5lY3Rpb24iKSksdC5zZWNvbmRhcnk9QigpKSxuPXQuc2Vjb25kYXJ5KToodyh0LnByaW1hcnksV2ViU29ja2V0LkNPTk5FQ1RJTkcpfHwoSihlLmRlYnVnKCJFc3RhYmxpc2hpbmcgYSBwcmltYXJ5IHdlYi1zb2NrZXQgY29ubmVjdGlvbiIpKSx0LnByaW1hcnk9QigpKSxuPXQucHJpbWFyeSksby53ZWJTb2NrZXRJbml0Q2hlY2tlclRpbWVvdXRJZD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7QyhuKXx8UCgpfSwxZTMpLHt3ZWJTb2NrZXRDb25uZWN0aW9uRmFpbGVkOiExfX19Y2F0Y2gobil7cmV0dXJuIEooZS5lcnJvcigiRXJyb3IgSW5pdGlhbGl6aW5nIHdlYi1zb2NrZXQtbWFuYWdlciIsbikpLEgoIkZhaWxlZCB0byBpbml0aWFsaXplIG5ldyBXZWJTb2NrZXQ6ICIrbi5tZXNzYWdlKSx7d2ViU29ja2V0Q29ubmVjdGlvbkZhaWxlZDohMH19fSxCPWZ1bmN0aW9uKCl7dmFyIG49bmV3IFdlYlNvY2tldChzLmNvbm5Db25maWcud2ViU29ja2V0VHJhbnNwb3J0LnVybCk7cmV0dXJuIG4uYWRkRXZlbnRMaXN0ZW5lcigib3BlbiIseCksbi5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIixqKSxuLmFkZEV2ZW50TGlzdGVuZXIoImVycm9yIixSKSxuLmFkZEV2ZW50TGlzdGVuZXIoImNsb3NlIixmdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24obixpKXtKKGUuaW5mbygiU29ja2V0IGNvbm5lY3Rpb24gaXMgY2xvc2VkIixuKSksdigid2ViU29ja2V0T25DbG9zZSBiZWZvcmUtY2xlYW51cCIpLGsoYy5jb25uZWN0aW9uQ2xvc2Use29wZW5UaW1lc3RhbXA6aS5vcGVuVGltZXN0YW1wLGNsb3NlVGltZXN0YW1wOkRhdGUubm93KCksY29ubmVjdGlvbkR1cmF0aW9uOkRhdGUubm93KCktaS5vcGVuVGltZXN0YW1wLGNvZGU6bi5jb2RlLHJlYXNvbjpuLnJlYXNvbn0pLFQodC5wcmltYXJ5KSYmKHQucHJpbWFyeT1udWxsKSxUKHQuc2Vjb25kYXJ5KSYmKHQuc2Vjb25kYXJ5PW51bGwpLG8ucmVjb25uZWN0V2ViU29ja2V0JiYoQyh0LnByaW1hcnkpfHxDKHQuc2Vjb25kYXJ5KT9UKHQucHJpbWFyeSkmJkModC5zZWNvbmRhcnkpJiYoSihlLmluZm8oIltQcmltYXJ5XSBXZWJTb2NrZXQgQ2xlYW5seSBDbG9zZWQiKSksdC5wcmltYXJ5PXQuc2Vjb25kYXJ5LHQuc2Vjb25kYXJ5PW51bGwpOihKKGUud2FybigiTmVpdGhlciBwcmltYXJ5IHdlYnNvY2tldCBhbmQgbm9yIHNlY29uZGFyeSB3ZWJzb2NrZXQgaGF2ZSBvcGVuIGNvbm5lY3Rpb25zLCBhdHRlbXB0aW5nIHRvIHJlLWVzdGFibGlzaCBjb25uZWN0aW9uIikpLG8uY29ublN0YXRlPT09cD9KKGUuaW5mbygiSWdub3JpbmcgY29ubmVjdGlvbkxvc3QgY2FsbGJhY2sgaW52b2NhdGlvbiIpKTooayhjLmNvbm5lY3Rpb25Mb3N0LHtvcGVuVGltZXN0YW1wOmkub3BlblRpbWVzdGFtcCxjbG9zZVRpbWVzdGFtcDpEYXRlLm5vdygpLGNvbm5lY3Rpb25EdXJhdGlvbjpEYXRlLm5vdygpLWkub3BlblRpbWVzdGFtcCxjb2RlOm4uY29kZSxyZWFzb246bi5yZWFzb259KSxyLm5vT3BlbkNvbm5lY3Rpb25zVGltZXN0YW1wPURhdGUubm93KCkpLG8uY29ublN0YXRlPXAsVSgpKSx2KCJ3ZWJTb2NrZXRPbkNsb3NlIGFmdGVyLWNsZWFudXAiKSl9KGksbil9KSxufSxKPWZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgZS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlciYmZS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpLGV9O3RoaXMuaW5pdD1mdW5jdGlvbihuKXtpZih5LmFzc2VydFRydWUoeS5pc0Z1bmN0aW9uKG4pLCJ0cmFuc3BvcnRIYW5kbGUgbXVzdCBiZSBhIGZ1bmN0aW9uIiksbnVsbD09PWMuZ2V0V2ViU29ja2V0VHJhbnNwb3J0KXJldHVybiBjLmdldFdlYlNvY2tldFRyYW5zcG9ydD1uLFUoKTtKKGUud2FybigiV2ViIFNvY2tldCBNYW5hZ2VyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkIikpfSx0aGlzLm9uSW5pdEZhaWx1cmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24oZSksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMuaW5pdEZhaWx1cmUuYWRkKGUpLG8ud2Vic29ja2V0SW5pdEZhaWxlZCYmZSgpLGZ1bmN0aW9uKCl7cmV0dXJuIGMuaW5pdEZhaWx1cmUuZGVsZXRlKGUpfX0sdGhpcy5vbkNvbm5lY3Rpb25PcGVuPWZ1bmN0aW9uKGUpe3JldHVybiB5LmFzc2VydFRydWUoeS5pc0Z1bmN0aW9uKGUpLCJjYiBtdXN0IGJlIGEgZnVuY3Rpb24iKSxjLmNvbm5lY3Rpb25PcGVuLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBjLmNvbm5lY3Rpb25PcGVuLmRlbGV0ZShlKX19LHRoaXMub25Db25uZWN0aW9uQ2xvc2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24oZSksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMuY29ubmVjdGlvbkNsb3NlLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBjLmNvbm5lY3Rpb25DbG9zZS5kZWxldGUoZSl9fSx0aGlzLm9uQ29ubmVjdGlvbkdhaW49ZnVuY3Rpb24oZSl7cmV0dXJuIHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24oZSksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMuY29ubmVjdGlvbkdhaW4uYWRkKGUpLEkoKSYmZSgpLGZ1bmN0aW9uKCl7cmV0dXJuIGMuY29ubmVjdGlvbkdhaW4uZGVsZXRlKGUpfX0sdGhpcy5vbkNvbm5lY3Rpb25Mb3N0PWZ1bmN0aW9uKGUpe3JldHVybiB5LmFzc2VydFRydWUoeS5pc0Z1bmN0aW9uKGUpLCJjYiBtdXN0IGJlIGEgZnVuY3Rpb24iKSxjLmNvbm5lY3Rpb25Mb3N0LmFkZChlKSxvLmNvbm5TdGF0ZT09PXAmJmUoKSxmdW5jdGlvbigpe3JldHVybiBjLmNvbm5lY3Rpb25Mb3N0LmRlbGV0ZShlKX19LHRoaXMub25TdWJzY3JpcHRpb25VcGRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24oZSksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMuc3Vic2NyaXB0aW9uVXBkYXRlLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBjLnN1YnNjcmlwdGlvblVwZGF0ZS5kZWxldGUoZSl9fSx0aGlzLm9uU3Vic2NyaXB0aW9uRmFpbHVyZT1mdW5jdGlvbihlKXtyZXR1cm4geS5hc3NlcnRUcnVlKHkuaXNGdW5jdGlvbihlKSwiY2IgbXVzdCBiZSBhIGZ1bmN0aW9uIiksYy5zdWJzY3JpcHRpb25GYWlsdXJlLmFkZChlKSxmdW5jdGlvbigpe3JldHVybiBjLnN1YnNjcmlwdGlvbkZhaWx1cmUuZGVsZXRlKGUpfX0sdGhpcy5vbk1lc3NhZ2U9ZnVuY3Rpb24oZSxuKXtyZXR1cm4geS5hc3NlcnROb3ROdWxsKGUsInRvcGljTmFtZSIpLHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24obiksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMudG9waWMuaGFzKGUpP2MudG9waWMuZ2V0KGUpLmFkZChuKTpjLnRvcGljLnNldChlLG5ldyBTZXQoW25dKSksZnVuY3Rpb24oKXtyZXR1cm4gYy50b3BpYy5nZXQoZSkuZGVsZXRlKG4pfX0sdGhpcy5vbkFsbE1lc3NhZ2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHkuYXNzZXJ0VHJ1ZSh5LmlzRnVuY3Rpb24oZSksImNiIG11c3QgYmUgYSBmdW5jdGlvbiIpLGMuYWxsTWVzc2FnZS5hZGQoZSksZnVuY3Rpb24oKXtyZXR1cm4gYy5hbGxNZXNzYWdlLmRlbGV0ZShlKX19LHRoaXMuc3Vic2NyaWJlVG9waWNzPWZ1bmN0aW9uKGUpe3kuYXNzZXJ0Tm90TnVsbChlLCJ0b3BpY3MiKSx5LmFzc2VydElzTGlzdChlKSxlLmZvckVhY2goZnVuY3Rpb24oZSl7ZC5zdWJzY3JpYmVkLmhhcyhlKXx8ZC5wZW5kaW5nLmFkZChlKX0pLGIuY29uc2VjdXRpdmVOb1Jlc3BvbnNlUmVxdWVzdD0wLEEoKX0sdGhpcy5zZW5kTWVzc2FnZT1mdW5jdGlvbihuKXtpZih5LmFzc2VydElzT2JqZWN0KG4sInBheWxvYWQiKSx2b2lkIDA9PT1uLnRvcGljfHxtLmhhcyhuLnRvcGljKSlKKGUud2FybigiQ2Fubm90IHNlbmQgbWVzc2FnZSwgSW52YWxpZCB0b3BpYyIsbikpO2Vsc2V7dHJ5e249SlNPTi5zdHJpbmdpZnkobil9Y2F0Y2godCl7cmV0dXJuIHZvaWQgSihlLndhcm4oIkVycm9yIHN0cmluZ2lmeSBtZXNzYWdlIixuKSl9SSgpP08oKS5zZW5kKG4pOkooZS53YXJuKCJDYW5ub3Qgc2VuZCBtZXNzYWdlLCB3ZWIgc29ja2V0IGNvbm5lY3Rpb24gaXMgbm90IG9wZW4iKSl9fSx0aGlzLmNsb3NlV2ViU29ja2V0PWZ1bmN0aW9uKCl7TigpLF8oKSxvLnJlY29ubmVjdFdlYlNvY2tldD0hMSxjbGVhckludGVydmFsKFMpLE0oIlVzZXIgcmVxdWVzdCB0byBjbG9zZSBXZWJTb2NrZXQiKX0sdGhpcy50ZXJtaW5hdGVXZWJTb2NrZXRNYW5hZ2VyPUh9LFI9e2NyZWF0ZTpmdW5jdGlvbigpe3JldHVybiBuZXcgeH0sc2V0R2xvYmFsQ29uZmlnOmZ1bmN0aW9uKGUpe3ZhciBuPWUubG9nZ2VyQ29uZmlnO0UudXBkYXRlTG9nZ2VyQ29uZmlnKG4pfSxMb2dMZXZlbDpPLExvZ2dlcjpUfX0sZnVuY3Rpb24oZSxuLHQpe3ZhciBvOyFmdW5jdGlvbigpeyJ1c2Ugc3RyaWN0Ijt2YXIgcj17bm90X3N0cmluZzovW15zXS8sbm90X2Jvb2w6L1tedF0vLG5vdF90eXBlOi9bXlRdLyxub3RfcHJpbWl0aXZlOi9bXnZdLyxudW1iZXI6L1tkaWVmZ10vLG51bWVyaWNfYXJnOi9bYmNkaWVmZ3V4WF0vLGpzb246L1tqXS8sbm90X2pzb246L1teal0vLHRleHQ6L15bXlx4MjVdKy8sbW9kdWxvOi9eXHgyNXsyfS8scGxhY2Vob2xkZXI6L15ceDI1KD86KFsxLTldXGQqKVwkfFwoKFteKV0rKVwpKT8oXCspPygwfCdbXiRdKT8oLSk/KFxkKyk/KD86XC4oXGQrKSk/KFtiLWdpam9zdFR1dnhYXSkvLGtleTovXihbYS16X11bYS16X1xkXSopL2ksa2V5X2FjY2VzczovXlwuKFthLXpfXVthLXpfXGRdKikvaSxpbmRleF9hY2Nlc3M6L15cWyhcZCspXF0vLHNpZ246L15bKy1dL307ZnVuY3Rpb24gaShlKXtyZXR1cm4gZnVuY3Rpb24oZSxuKXt2YXIgdCxvLGMscyxhLHUsbCxmLHAsZD0xLGI9ZS5sZW5ndGgsZz0iIjtmb3Iobz0wO288YjtvKyspaWYoInN0cmluZyI9PXR5cGVvZiBlW29dKWcrPWVbb107ZWxzZSBpZigib2JqZWN0Ij09dHlwZW9mIGVbb10pe2lmKChzPWVbb10pLmtleXMpZm9yKHQ9bltkXSxjPTA7YzxzLmtleXMubGVuZ3RoO2MrKyl7aWYobnVsbD09dCl0aHJvdyBuZXcgRXJyb3IoaSgnW3NwcmludGZdIENhbm5vdCBhY2Nlc3MgcHJvcGVydHkgIiVzIiBvZiB1bmRlZmluZWQgdmFsdWUgIiVzIicscy5rZXlzW2NdLHMua2V5c1tjLTFdKSk7dD10W3Mua2V5c1tjXV19ZWxzZSB0PXMucGFyYW1fbm8/bltzLnBhcmFtX25vXTpuW2QrK107aWYoci5ub3RfdHlwZS50ZXN0KHMudHlwZSkmJnIubm90X3ByaW1pdGl2ZS50ZXN0KHMudHlwZSkmJnQgaW5zdGFuY2VvZiBGdW5jdGlvbiYmKHQ9dCgpKSxyLm51bWVyaWNfYXJnLnRlc3Qocy50eXBlKSYmIm51bWJlciIhPXR5cGVvZiB0JiZpc05hTih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKGkoIltzcHJpbnRmXSBleHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAlVCIsdCkpO3N3aXRjaChyLm51bWJlci50ZXN0KHMudHlwZSkmJihmPXQ+PTApLHMudHlwZSl7Y2FzZSJiIjp0PXBhcnNlSW50KHQsMTApLnRvU3RyaW5nKDIpO2JyZWFrO2Nhc2UiYyI6dD1TdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHQsMTApKTticmVhaztjYXNlImQiOmNhc2UiaSI6dD1wYXJzZUludCh0LDEwKTticmVhaztjYXNlImoiOnQ9SlNPTi5zdHJpbmdpZnkodCxudWxsLHMud2lkdGg/cGFyc2VJbnQocy53aWR0aCk6MCk7YnJlYWs7Y2FzZSJlIjp0PXMucHJlY2lzaW9uP3BhcnNlRmxvYXQodCkudG9FeHBvbmVudGlhbChzLnByZWNpc2lvbik6cGFyc2VGbG9hdCh0KS50b0V4cG9uZW50aWFsKCk7YnJlYWs7Y2FzZSJmIjp0PXMucHJlY2lzaW9uP3BhcnNlRmxvYXQodCkudG9GaXhlZChzLnByZWNpc2lvbik6cGFyc2VGbG9hdCh0KTticmVhaztjYXNlImciOnQ9cy5wcmVjaXNpb24/U3RyaW5nKE51bWJlcih0LnRvUHJlY2lzaW9uKHMucHJlY2lzaW9uKSkpOnBhcnNlRmxvYXQodCk7YnJlYWs7Y2FzZSJvIjp0PShwYXJzZUludCh0LDEwKT4+PjApLnRvU3RyaW5nKDgpO2JyZWFrO2Nhc2UicyI6dD1TdHJpbmcodCksdD1zLnByZWNpc2lvbj90LnN1YnN0cmluZygwLHMucHJlY2lzaW9uKTp0O2JyZWFrO2Nhc2UidCI6dD1TdHJpbmcoISF0KSx0PXMucHJlY2lzaW9uP3Quc3Vic3RyaW5nKDAscy5wcmVjaXNpb24pOnQ7YnJlYWs7Y2FzZSJUIjp0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKS50b0xvd2VyQ2FzZSgpLHQ9cy5wcmVjaXNpb24/dC5zdWJzdHJpbmcoMCxzLnByZWNpc2lvbik6dDticmVhaztjYXNlInUiOnQ9cGFyc2VJbnQodCwxMCk+Pj4wO2JyZWFrO2Nhc2UidiI6dD10LnZhbHVlT2YoKSx0PXMucHJlY2lzaW9uP3Quc3Vic3RyaW5nKDAscy5wcmVjaXNpb24pOnQ7YnJlYWs7Y2FzZSJ4Ijp0PShwYXJzZUludCh0LDEwKT4+PjApLnRvU3RyaW5nKDE2KTticmVhaztjYXNlIlgiOnQ9KHBhcnNlSW50KHQsMTApPj4+MCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCl9ci5qc29uLnRlc3Qocy50eXBlKT9nKz10Oighci5udW1iZXIudGVzdChzLnR5cGUpfHxmJiYhcy5zaWduP3A9IiI6KHA9Zj8iKyI6Ii0iLHQ9dC50b1N0cmluZygpLnJlcGxhY2Uoci5zaWduLCIiKSksdT1zLnBhZF9jaGFyPyIwIj09PXMucGFkX2NoYXI/IjAiOnMucGFkX2NoYXIuY2hhckF0KDEpOiIgIixsPXMud2lkdGgtKHArdCkubGVuZ3RoLGE9cy53aWR0aCYmbD4wP3UucmVwZWF0KGwpOiIiLGcrPXMuYWxpZ24/cCt0K2E6IjAiPT09dT9wK2ErdDphK3ArdCl9cmV0dXJuIGd9KGZ1bmN0aW9uKGUpe2lmKHNbZV0pcmV0dXJuIHNbZV07dmFyIG4sdD1lLG89W10saT0wO2Zvcig7dDspe2lmKG51bGwhPT0obj1yLnRleHQuZXhlYyh0KSkpby5wdXNoKG5bMF0pO2Vsc2UgaWYobnVsbCE9PShuPXIubW9kdWxvLmV4ZWModCkpKW8ucHVzaCgiJSIpO2Vsc2V7aWYobnVsbD09PShuPXIucGxhY2Vob2xkZXIuZXhlYyh0KSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKCJbc3ByaW50Zl0gdW5leHBlY3RlZCBwbGFjZWhvbGRlciIpO2lmKG5bMl0pe2l8PTE7dmFyIGM9W10sYT1uWzJdLHU9W107aWYobnVsbD09PSh1PXIua2V5LmV4ZWMoYSkpKXRocm93IG5ldyBTeW50YXhFcnJvcigiW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXkiKTtmb3IoYy5wdXNoKHVbMV0pOyIiIT09KGE9YS5zdWJzdHJpbmcodVswXS5sZW5ndGgpKTspaWYobnVsbCE9PSh1PXIua2V5X2FjY2Vzcy5leGVjKGEpKSljLnB1c2godVsxXSk7ZWxzZXtpZihudWxsPT09KHU9ci5pbmRleF9hY2Nlc3MuZXhlYyhhKSkpdGhyb3cgbmV3IFN5bnRheEVycm9yKCJbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleSIpO2MucHVzaCh1WzFdKX1uWzJdPWN9ZWxzZSBpfD0yO2lmKDM9PT1pKXRocm93IG5ldyBFcnJvcigiW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCIpO28ucHVzaCh7cGxhY2Vob2xkZXI6blswXSxwYXJhbV9ubzpuWzFdLGtleXM6blsyXSxzaWduOm5bM10scGFkX2NoYXI6bls0XSxhbGlnbjpuWzVdLHdpZHRoOm5bNl0scHJlY2lzaW9uOm5bN10sdHlwZTpuWzhdfSl9dD10LnN1YnN0cmluZyhuWzBdLmxlbmd0aCl9cmV0dXJuIHNbZV09b30oZSksYXJndW1lbnRzKX1mdW5jdGlvbiBjKGUsbil7cmV0dXJuIGkuYXBwbHkobnVsbCxbZV0uY29uY2F0KG58fFtdKSl9dmFyIHM9T2JqZWN0LmNyZWF0ZShudWxsKTtuLnNwcmludGY9aSxuLnZzcHJpbnRmPWMsInVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3cmJih3aW5kb3cuc3ByaW50Zj1pLHdpbmRvdy52c3ByaW50Zj1jLHZvaWQgMD09PShvPWZ1bmN0aW9uKCl7cmV0dXJue3NwcmludGY6aSx2c3ByaW50ZjpjfX0uY2FsbChuLHQsbixlKSl8fChlLmV4cG9ydHM9bykpfSgpfSxmdW5jdGlvbihlLG4sdCl7InVzZSBzdHJpY3QiO3QucihuKSxmdW5jdGlvbihlKXt0LmQobiwiV2ViU29ja2V0TWFuYWdlciIsZnVuY3Rpb24oKXtyZXR1cm4gcn0pO3ZhciBvPXQoMCk7ZS5jb25uZWN0PWUuY29ubmVjdHx8e30sY29ubmVjdC5XZWJTb2NrZXRNYW5hZ2VyPW8uYTt2YXIgcj1vLmF9LmNhbGwodGhpcyx0KDMpKX0sZnVuY3Rpb24oZSxuKXt2YXIgdDt0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e3Q9dHx8bmV3IEZ1bmN0aW9uKCJyZXR1cm4gdGhpcyIpKCl9Y2F0Y2goZSl7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJih0PXdpbmRvdyl9ZS5leHBvcnRzPXR9XSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWFtYXpvbi1jb25uZWN0LXdlYnNvY2tldC1tYW5hZ2VyLmpzLm1hcAoKCi8qKiovIH0pLAoKLyoqKi8gMTUxOgovKioqLyAoKCkgPT4gewoKLyoKICogQ29weXJpZ2h0IDIwMTQtMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8KKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwogIGdsb2JhbC5saWx5ID0gY29ubmVjdDsKCiAgLy8gSG93IGZyZXF1ZW50bHkgc29mdHBob25lIGxvZ3Mgc2hvdWxkIGJlIGNvbGxlY3RlZCBhbmQgcmVwb3J0ZWQgdG8gc2hhcmVkIHdvcmtlci4KICB2YXIgU09GVFBIT05FX0xPR19SRVBPUlRfSU5URVJWQUxfTUlMTElTID0gNTAwMDsKCiAgLy8gSG93IGZyZXF1ZW50bHkgbG9ncyBzaG91bGQgYmUgY29sbGVjdGVkIGFuZCBzZW50IGRvd25zdHJlYW0KICB2YXIgTE9HU19SRVBPUlRfSU5URVJWQUxfTUlMTElTID0gNTAwMDsKCiAgLy8gVGhlIGRlZmF1bHQgbG9nIHJvbGwgaW50ZXJ2YWwgKDMwbWluKQogIHZhciBERUZBVUxUX0xPR19ST0xMX0lOVEVSVkFMID0gMTgwMDAwMDsKCiAgLyoqCiAgICogQW4gZW51bWVyYXRpb24gb2YgY29tbW9uIGxvZ2dpbmcgbGV2ZWxzLgogICAqLwogIHZhciBMb2dMZXZlbCA9IHsKICAgIFRFU1Q6ICJURVNUIiwKICAgIFRSQUNFOiAiVFJBQ0UiLAogICAgREVCVUc6ICJERUJVRyIsCiAgICBJTkZPOiAiSU5GTyIsCiAgICBMT0c6ICJMT0ciLAogICAgV0FSTjogIldBUk4iLAogICAgRVJST1I6ICJFUlJPUiIsCiAgICBDUklUSUNBTDogIkNSSVRJQ0FMIgogIH07CgogIC8qKgogICAqIEFuIGVudW1lcmF0aW9uIG9mIGNvbW1vbiBsb2dnaW5nIGNvbXBvbmVudHMuCiAgICovCiAgdmFyIExvZ0NvbXBvbmVudCA9IHsKICAgIENDUDogImNjcCIsCiAgICBTT0ZUUEhPTkU6ICJzb2Z0cGhvbmUiLAogICAgQ0hBVDogImNoYXQiLAogICAgVEFTSzogInRhc2siCiAgfTsKCiAgLyoqCiAgICogVGhlIG51bWVyaWMgb3JkZXIgb2YgdGhlIGxvZ2dpbmcgbGV2ZWxzIGFib3ZlLgogICAqIFRoZXkgYXJlIHNwYWNlZCB0byBhbGxvdyB0aGUgYWRkaXRpb24gb2Ygb3RoZXIgbG9nCiAgICogbGV2ZWxzIGF0IGEgbGF0ZXIgdGltZS4KICAgKi8KICB2YXIgTG9nTGV2ZWxPcmRlciA9IHsKICAgIFRFU1Q6IDAsCiAgICBUUkFDRTogMTAsCiAgICBERUJVRzogMjAsCiAgICBJTkZPOiAzMCwKICAgIExPRzogNDAsCiAgICBXQVJOOiA1MCwKICAgIEVSUk9SOiAxMDAsCiAgICBDUklUSUNBTDogMjAwCgogIH07CgogIC8qKgogICAqIEEgbWFwIGZyb20gbG9nIGxldmVsIHRvIGNvbnNvbGUgbG9nZ2VyIGZ1bmN0aW9uLgogICAqLwogIHZhciBDT05TT0xFX0xPR0dFUl9NQVAgPSB7CiAgICBUUkFDRTogZnVuY3Rpb24gKHRleHQpIHsgY29uc29sZS5pbmZvKHRleHQpOyB9LAogICAgREVCVUc6IGZ1bmN0aW9uICh0ZXh0KSB7IGNvbnNvbGUuaW5mbyh0ZXh0KTsgfSwKICAgIElORk86IGZ1bmN0aW9uICh0ZXh0KSB7IGNvbnNvbGUuaW5mbyh0ZXh0KTsgfSwKICAgIExPRzogZnVuY3Rpb24gKHRleHQpIHsgY29uc29sZS5sb2codGV4dCk7IH0sCiAgICBURVNUOiBmdW5jdGlvbiAodGV4dCkgeyBjb25zb2xlLmxvZyh0ZXh0KTsgfSwKICAgIFdBUk46IGZ1bmN0aW9uICh0ZXh0KSB7IGNvbnNvbGUud2Fybih0ZXh0KTsgfSwKICAgIEVSUk9SOiBmdW5jdGlvbiAodGV4dCkgeyBjb25zb2xlLmVycm9yKHRleHQpOyB9LAogICAgQ1JJVElDQUw6IGZ1bmN0aW9uICh0ZXh0KSB7IGNvbnNvbGUuZXJyb3IodGV4dCk7IH0KICB9OwoKICAvKioKICAqIENoZWNrcyBpZiBpdCBpcyBhIHZhbGlkIGxvZyBjb21wb25lbnQgZW51bQogICovCgogIHZhciBpc1ZhbGlkTG9nQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkgewogICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoTG9nQ29tcG9uZW50KS5pbmRleE9mKGNvbXBvbmVudCkgIT09IC0xOwogIH07CgogIC8qKgogICogRXh0cmFjdCB0aGUgY3VzdG9tIGFyZ3VtZW50cyBhcyByZXF1aXJlZCBieSB0aGUgbG9nZ2VyCiAgKi8KICB2YXIgZXh0cmFjdExvZ2dlckFyZ3MgPSBmdW5jdGlvbiAobG9nZ2VyQXJncykgewogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChsb2dnZXJBcmdzLCAwKTsKICAgIHZhciBmaXJzdEFyZyA9IGFyZ3Muc2hpZnQoKTsKICAgIHZhciBmb3JtYXQ7CiAgICB2YXIgY29tcG9uZW50OwoKICAgIGlmIChpc1ZhbGlkTG9nQ29tcG9uZW50KGZpcnN0QXJnKSkgewogICAgICBjb21wb25lbnQgPSBmaXJzdEFyZzsKICAgICAgZm9ybWF0ID0gYXJncy5zaGlmdCgpOwogICAgfSBlbHNlIHsKICAgICAgLy9kZWZhdWx0IHRvIENDUCBjb21wb25lbnQKICAgICAgZm9ybWF0ID0gZmlyc3RBcmc7CiAgICAgIGNvbXBvbmVudCA9IExvZ0NvbXBvbmVudC5DQ1A7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgZm9ybWF0OiBmb3JtYXQsCiAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LAogICAgICBhcmdzOiBhcmdzCiAgICB9OwogIH07CgogIC8qKgogICAqIEEgbG9nIGVudHJ5LgogICAqCiAgICogQHBhcmFtIGNvbXBvbmVudCBUaGUgbG9nZ2luZyBjb21wb25lbnQuCiAgICogQHBhcmFtIGxldmVsIFRoZSBsb2cgbGV2ZWwgb2YgdGhpcyBsb2cgZW50cnkuCiAgICogQHBhcmFtIHRleHQgVGhlIHRleHQgY29udGFpbmVkIGluIHRoZSBsb2cgZW50cnkuCiAgICogQHBhcmFtIGxvZ2dlcklkIFRoZSByb290IGxvZ2dlciBpZC4KICAgKgogICAqIExvZyBlbnRyaWVzIGFyZSBhd2FyZSBvZiB0aGVpciB0aW1lc3RhbXAsIG9yZGVyLAogICAqIGFuZCBjYW4gY29udGFpbiBvYmplY3RzIGFuZCBleGNlcHRpb24gc3RhY2sgdHJhY2VzLgogICAqLwogIHZhciBMb2dFbnRyeSA9IGZ1bmN0aW9uIChjb21wb25lbnQsIGxldmVsLCB0ZXh0LCBsb2dnZXJJZCkgewogICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7CiAgICB0aGlzLmxldmVsID0gbGV2ZWw7CiAgICB0aGlzLnRleHQgPSB0ZXh0OwogICAgdGhpcy50aW1lID0gbmV3IERhdGUoKTsKICAgIHRoaXMuZXhjZXB0aW9uID0gbnVsbDsKICAgIHRoaXMub2JqZWN0cyA9IFtdOwogICAgdGhpcy5saW5lID0gMDsKICAgIHRoaXMuYWdlbnRSZXNvdXJjZUlkID0gbnVsbDsKICAgIHRyeSB7CiAgICAgIGlmIChjb25uZWN0LmFnZW50LmluaXRpYWxpemVkKXsKICAgICAgICB0aGlzLmFnZW50UmVzb3VyY2VJZCA9IG5ldyBjb25uZWN0LkFnZW50KCkuX2dldFJlc291cmNlSWQoKTsKICAgICAgfQogICAgfSBjYXRjaChlKSB7CiAgICAgIGNvbnNvbGUubG9nKCJJc3N1ZSBmaW5kaW5nIGFnZW50UmVzb3VyY2VJZDogIiwgZSk7IC8vY2FuJ3QgdXNlIG91ciBsb2dnZXIgaGVyZSBhcyB3ZSBtaWdodCBpbmZpbml0ZWx5IGF0dGVtcHQgdG8gbG9nIHRoaXMgZXJyb3IuCiAgICB9CiAgICB0aGlzLmxvZ2dlcklkID0gbG9nZ2VySWQ7CiAgfTsKCiAgTG9nRW50cnkuZnJvbU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHZhciBlbnRyeSA9IG5ldyBMb2dFbnRyeShMb2dDb21wb25lbnQuQ0NQLCBvYmoubGV2ZWwsIG9iai50ZXh0LCBvYmoubG9nZ2VySWQpOwoKICAgIC8vIFJlcXVpcmVkIHRvIGNoZWNrIGZvciBEYXRlIG9iamVjdHMgc2VudCBhY3Jvc3MgZnJhbWUgYm91bmRhcmllcwogICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmoudGltZSkgPT09ICdbb2JqZWN0IERhdGVdJykgewogICAgICBlbnRyeS50aW1lID0gbmV3IERhdGUob2JqLnRpbWUuZ2V0VGltZSgpKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iai50aW1lID09PSAnbnVtYmVyJykgewogICAgICBlbnRyeS50aW1lID0gbmV3IERhdGUob2JqLnRpbWUpOwogICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqLnRpbWUgPT09ICdzdHJpbmcnKSB7CiAgICAgIGVudHJ5LnRpbWUgPSBEYXRlLnBhcnNlKG9iai50aW1lKTsKICAgIH0gZWxzZSB7CiAgICAgIGVudHJ5LnRpbWUgPSBuZXcgRGF0ZSgpOwogICAgfQogICAgZW50cnkuZXhjZXB0aW9uID0gb2JqLmV4Y2VwdGlvbjsKICAgIGVudHJ5Lm9iamVjdHMgPSBvYmoub2JqZWN0czsKICAgIHJldHVybiBlbnRyeTsKICB9OwoKICAvKioKICAgKiBQcml2YXRlIG1ldGhvZCB0byByZW1vdmUgc2Vuc2l0aXZlIGluZm8gZnJvbSBjbGllbnQgbG9nCiAgICovCiAgdmFyIHJlZGFjdFNlbnNpdGl2ZUluZm8gPSBmdW5jdGlvbihkYXRhKSB7CiAgICB2YXIgcmVnZXggPSAvQXV0aFRva2VuLipcPS9nOwogICAgaWYoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHsKICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgICBpZiAodHlwZW9mIGRhdGFba2V5XSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgIHJlZGFjdFNlbnNpdGl2ZUluZm8oZGF0YVtrZXldKQogICAgICAgIH0gZWxzZSBpZih0eXBlb2YgZGF0YVtrZXldID09PSAnc3RyaW5nJykgewogICAgICAgICAgaWYgKGtleSA9PT0gInVybCIgfHwga2V5ID09PSAidGV4dCIpIHsKICAgICAgICAgICAgZGF0YVtrZXldID0gZGF0YVtrZXldLnJlcGxhY2UocmVnZXgsICJbcmVkYWN0ZWRdIik7CiAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gInF1aWNrQ29ubmVjdE5hbWUiKSB7CiAgICAgICAgICAgIGRhdGFba2V5XSA9ICJbcmVkYWN0ZWRdIjsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOyAKICAgIH0KICB9CgogIC8qKgogICAqIFB1bGxzIHRoZSB0eXBlLCBtZXNzYWdlLCBhbmQgc3RhY2sgdHJhY2UKICAgKiBvdXQgb2YgdGhlIGdpdmVuIGV4Y2VwdGlvbiBmb3IgSlNPTiBzZXJpYWxpemF0aW9uLgogICAqLwogIHZhciBMb2dnZWRFeGNlcHRpb24gPSBmdW5jdGlvbiAoZSkgewogICAgdGhpcy50eXBlID0gKGUgaW5zdGFuY2VvZiBFcnJvcikgPyBlLm5hbWUgOiBlLmNvZGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpOwogICAgdGhpcy5tZXNzYWdlID0gZS5tZXNzYWdlOwogICAgdGhpcy5zdGFjayA9IGUuc3RhY2sgPyBlLnN0YWNrLnNwbGl0KCdcbicpIDogW107CiAgfTsKCiAgLyoqCiAgICogTWluaW1hbGx5IHN0cmluZ2lmeSB0aGlzIGxvZyBlbnRyeSBmb3IgcHJpbnRpbmcKICAgKiB0byB0aGUgY29uc29sZS4KICAgKi8KICBMb2dFbnRyeS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY29ubmVjdC5zcHJpbnRmKCJbJXNdIFslc10gWyVzXTogJXMiLAogICAgICB0aGlzLmdldFRpbWUoKSAmJiB0aGlzLmdldFRpbWUoKS50b0lTT1N0cmluZyA/IHRoaXMuZ2V0VGltZSgpLnRvSVNPU3RyaW5nKCkgOiAiPz8/IiwKICAgICAgdGhpcy5nZXRMZXZlbCgpLAogICAgICB0aGlzLmdldEFnZW50UmVzb3VyY2VJZCgpLAogICAgICB0aGlzLmdldFRleHQoKSk7CiAgfTsKCiAgLyoqCiAgICogR2V0IHRoZSBsb2cgZW50cnkgdGltZXN0YW1wLgogICAqLwogIExvZ0VudHJ5LnByb3RvdHlwZS5nZXRUaW1lID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMudGltZTsKICB9OwoKICBMb2dFbnRyeS5wcm90b3R5cGUuZ2V0QWdlbnRSZXNvdXJjZUlkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuYWdlbnRSZXNvdXJjZUlkOwogIH0KCiAgLyoqCiAgICogR2V0IHRoZSBsZXZlbCBvZiB0aGUgbG9nIGVudHJ5LgogICAqLwogIExvZ0VudHJ5LnByb3RvdHlwZS5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLmxldmVsOwogIH07CgogIC8qKgogICAqIEdldCB0aGUgbG9nIGVudHJ5IHRleHQuCiAgICovCiAgTG9nRW50cnkucHJvdG90eXBlLmdldFRleHQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy50ZXh0OwogIH07CgogIC8qKgogICAqIEdldCB0aGUgbG9nIGVudHJ5IGNvbXBvbmVudC4KICAgKi8KICBMb2dFbnRyeS5wcm90b3R5cGUuZ2V0Q29tcG9uZW50ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuY29tcG9uZW50OwogIH07CgogIC8qKgogICAqIEFkZCBhbiBleGNlcHRpb24gc3RhY2sgdHJhY2UgdG8gdGhpcyBsb2cgZW50cnkuCiAgICogQSBsb2cgZW50cnkgbWF5IGNvbnRhaW4gb25seSBvbmUgZXhjZXB0aW9uIHN0YWNrIHRyYWNlLgogICAqLwogIExvZ0VudHJ5LnByb3RvdHlwZS53aXRoRXhjZXB0aW9uID0gZnVuY3Rpb24gKGUpIHsKICAgIHRoaXMuZXhjZXB0aW9uID0gbmV3IExvZ2dlZEV4Y2VwdGlvbihlKTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8qKgogICAqIEFkZCBhbiBhcmJpdHJhcnkgb2JqZWN0IHRvIHRoZSBsb2cgZW50cnkuICBBIGxvZyBlbnRyeQogICAqIG1heSBjb250YWluIGFueSBudW1iZXIgb2Ygb2JqZWN0cy4KICAgKi8KICBMb2dFbnRyeS5wcm90b3R5cGUud2l0aE9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHZhciBjb3BpZWRPYmogPSBjb25uZWN0LmRlZXBjb3B5KG9iaik7CiAgICByZWRhY3RTZW5zaXRpdmVJbmZvKGNvcGllZE9iaik7CiAgICB0aGlzLm9iamVjdHMucHVzaChjb3BpZWRPYmopOwogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgLyoqCiAgICogQWRkIGEgY3Jvc3Mgb3JpZ2luIGV2ZW50IG9iamVjdCB0byB0aGUgbG9nIGVudHJ5LiAgQSBsb2cgZW50cnkKICAgKiBtYXkgY29udGFpbiBhbnkgbnVtYmVyIG9mIG9iamVjdHMuCiAgICovCiAgIExvZ0VudHJ5LnByb3RvdHlwZS53aXRoQ3Jvc3NPcmlnaW5FdmVudE9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHZhciBjb3BpZWRPYmogPSBjb25uZWN0LmRlZXBjb3B5Q3Jvc3NPcmlnaW5FdmVudChvYmopOwogICAgcmVkYWN0U2Vuc2l0aXZlSW5mbyhjb3BpZWRPYmopOwogICAgdGhpcy5vYmplY3RzLnB1c2goY29waWVkT2JqKTsKICAgIHJldHVybiB0aGlzOwogIH07CgogIC8qKgogICAqIEluZGljYXRlIHRoYXQgdGhpcyBsb2cgZW50cnkgc2hvdWxkIGJlIHNlbnQgdG8gdGhlIHNlcnZlcgogICAqIE5PVEU6IFRoaXMgc2hvdWxkIGJlIHVzZWQgZm9yIGludGVybmFsIGxvZ3Mgb25seQogICAqLwogIExvZ0VudHJ5LnByb3RvdHlwZS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlciA9IGZ1bmN0aW9uICgpIHsKICAgIGNvbm5lY3QuZ2V0TG9nKCkuX3NlcnZlckJvdW5kSW50ZXJuYWxMb2dzLnB1c2godGhpcyk7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICAvKioKICAgKiBUaGUgbG9nZ2VyIGluc3RhbmNlLgogICAqLwogIHZhciBMb2dnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLl9sb2dzID0gW107CiAgICB0aGlzLl9yb2xsZWRMb2dzID0gW107CiAgICB0aGlzLl9sb2dzVG9QdXNoID0gW107CiAgICB0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9ncyA9IFtdOwogICAgdGhpcy5fZWNob0xldmVsID0gTG9nTGV2ZWxPcmRlci5JTkZPOwogICAgdGhpcy5fbG9nTGV2ZWwgPSBMb2dMZXZlbE9yZGVyLklORk87CiAgICB0aGlzLl9saW5lQ291bnQgPSAwOwogICAgdGhpcy5fbG9nUm9sbEludGVydmFsID0gMDsKICAgIHRoaXMuX2xvZ1JvbGxUaW1lciA9IG51bGw7CiAgICB0aGlzLl9sb2dnZXJJZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgIi0iICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7CiAgICB0aGlzLnNldExvZ1JvbGxJbnRlcnZhbChERUZBVUxUX0xPR19ST0xMX0lOVEVSVkFMKTsKICAgIHRoaXMuX3N0YXJ0TG9nSW5kZXhUb1B1c2ggPSAwOwogIH07CgogIC8qKgogICAqIFNldHMgdGhlIGludGVydmFsIGluIG1pbGxpc2Vjb25kcyB0aGF0IHRoZSBsb2dzIHdpbGwgYmUgcm90YXRlZC4KICAgKiBMb2dzIGFyZSByb3RhdGVkIG91dCBjb21wbGV0ZWx5IGF0IHRoZSBlbmQgb2YgdGhlIHNlY29uZCByb2xsCiAgICogYW5kIHdpbGwgZXZlbnR1YWxseSBiZSBnYXJiYWdlIGNvbGxlY3RlZC4KICAgKi8KICBMb2dnZXIucHJvdG90eXBlLnNldExvZ1JvbGxJbnRlcnZhbCA9IGZ1bmN0aW9uIChpbnRlcnZhbCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIGlmICghKHRoaXMuX2xvZ1JvbGxUaW1lcikgfHwgaW50ZXJ2YWwgIT09IHRoaXMuX2xvZ1JvbGxJbnRlcnZhbCkgewogICAgICBpZiAodGhpcy5fbG9nUm9sbFRpbWVyKSB7CiAgICAgICAgZ2xvYmFsLmNsZWFySW50ZXJ2YWwodGhpcy5fbG9nUm9sbFRpbWVyKTsKICAgICAgfQogICAgICB0aGlzLl9sb2dSb2xsSW50ZXJ2YWwgPSBpbnRlcnZhbDsKICAgICAgdGhpcy5fbG9nUm9sbFRpbWVyID0gZ2xvYmFsLnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLl9yb2xsZWRMb2dzID0gdGhpcy5fbG9nczsKICAgICAgICB0aGlzLl9sb2dzID0gW107CiAgICAgICAgdGhpcy5fc3RhcnRMb2dJbmRleFRvUHVzaCA9IDA7CiAgICAgICAgc2VsZi5pbmZvKCJMb2cgcm9sbCBpbnRlcnZhbCBvY2N1cnJlZC4iKTsKICAgICAgfSwgdGhpcy5fbG9nUm9sbEludGVydmFsKTsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMud2FybigiTG9nZ2VyIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBnaXZlbiBpbnRlcnZhbDogJWQiLCB0aGlzLl9sb2dSb2xsSW50ZXJ2YWwpOwogICAgfQogIH07CgogIC8qKgogICAqIFNldCB0aGUgbG9nIGxldmVsLiAgVGhpcyBpcyB0aGUgbWluaW11bSBsZXZlbCBhdCB3aGljaCBsb2dzIHdpbGwKICAgKiBiZSBrZXB0IGZvciBsYXRlciBhcmNoaXZpbmcuCiAgICovCiAgTG9nZ2VyLnByb3RvdHlwZS5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkgewogICAgaWYgKGxldmVsIGluIExvZ0xldmVsT3JkZXIpIHsKICAgICAgdGhpcy5fbG9nTGV2ZWwgPSBMb2dMZXZlbE9yZGVyW2xldmVsXTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBsb2dnaW5nIGxldmVsOiAiICsgbGV2ZWwpOwogICAgfQogIH07CgogIC8qKgogICAqIFNldCB0aGUgZWNobyBsZXZlbC4gIFRoaXMgaXMgdGhlIG1pbmltdW0gbGV2ZWwgYXQgd2hpY2ggbG9ncyB3aWxsCiAgICogYmUgcHJpbnRlZCB0byB0aGUgamF2YXNjcmlwdCBjb25zb2xlLgogICAqLwogIExvZ2dlci5wcm90b3R5cGUuc2V0RWNob0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7CiAgICBpZiAobGV2ZWwgaW4gTG9nTGV2ZWxPcmRlcikgewogICAgICB0aGlzLl9lY2hvTGV2ZWwgPSBMb2dMZXZlbE9yZGVyW2xldmVsXTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBsb2dnaW5nIGxldmVsOiAiICsgbGV2ZWwpOwogICAgfQogIH07CgogIC8qKgogICAqIFdyaXRlIGEgcGFydGljdWxhciBsb2cgZW50cnkuCiAgICoKICAgKiBAcGFyYW0gbGV2ZWwgVGhlIGxvZ2dpbmcgbGV2ZWwgb2YgdGhlIGVudHJ5LgogICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IGNvbnRlbnRzIG9mIHRoZSBlbnRyeS4KICAgKgogICAqIEByZXR1cm5zIFRoZSBuZXcgbG9nIGVudHJ5LgogICAqLwogIExvZ2dlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBsZXZlbCwgdGV4dCkgewogICAgdmFyIGxvZ0VudHJ5ID0gbmV3IExvZ0VudHJ5KGNvbXBvbmVudCwgbGV2ZWwsIHRleHQsIHRoaXMuZ2V0TG9nZ2VySWQoKSk7CiAgICByZWRhY3RTZW5zaXRpdmVJbmZvKGxvZ0VudHJ5KTsKICAgIHRoaXMuYWRkTG9nRW50cnkobG9nRW50cnkpOwogICAgcmV0dXJuIGxvZ0VudHJ5OwogIH07CgogIExvZ2dlci5wcm90b3R5cGUuYWRkTG9nRW50cnkgPSBmdW5jdGlvbiAobG9nRW50cnkpIHsKICAgIC8vIENhbGwgdGhpcyBzZWNvbmQgdGltZSBhcyBpbiBzb21lIHBsYWNlcyB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBkaXJlY3RseQogICAgcmVkYWN0U2Vuc2l0aXZlSW5mbyhsb2dFbnRyeSk7CiAgICB0aGlzLl9sb2dzLnB1c2gobG9nRW50cnkpOwoKICAgIC8vRm9yIG5vdyBvbmx5IHNlbmQgc29mdHBob25lIGxvZ3Mgb25seS4KICAgIC8vVE9ETyBhZGQgQ0NQIGxvZ3Mgb25jZSB3ZSBhcmUgc3VyZSB0aGF0IG5vIHNlbnNpdGl2ZSBkYXRhIGlzIGJlaW5nIGxvZ2dlZC4KICAgIGlmIChMb2dDb21wb25lbnQuU09GVFBIT05FID09PSBsb2dFbnRyeS5jb21wb25lbnQpIHsKICAgICAgdGhpcy5fbG9nc1RvUHVzaC5wdXNoKGxvZ0VudHJ5KTsKICAgIH0KCiAgICBpZiAobG9nRW50cnkubGV2ZWwgaW4gTG9nTGV2ZWxPcmRlciAmJgogICAgICBMb2dMZXZlbE9yZGVyW2xvZ0VudHJ5LmxldmVsXSA+PSB0aGlzLl9sb2dMZXZlbCkgewoKICAgICAgaWYgKExvZ0xldmVsT3JkZXJbbG9nRW50cnkubGV2ZWxdID49IHRoaXMuX2VjaG9MZXZlbCkgewogICAgICAgIENPTlNPTEVfTE9HR0VSX01BUFtsb2dFbnRyeS5nZXRMZXZlbCgpXShsb2dFbnRyeS50b1N0cmluZygpKTsKICAgICAgfQoKICAgICAgbG9nRW50cnkubGluZSA9IHRoaXMuX2xpbmVDb3VudCsrOwogICAgfQogIH07CgogIExvZ2dlci5wcm90b3R5cGUuc2VuZEludGVybmFsTG9nRW50cnlUb1NlcnZlciA9IGZ1bmN0aW9uIChsb2dFbnRyeSkgewogICAgdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3MucHVzaChsb2dFbnRyeSk7CgogICAgaWYgKGxvZ0VudHJ5LmxldmVsIGluIExvZ0xldmVsT3JkZXIgJiYKICAgICAgTG9nTGV2ZWxPcmRlcltsb2dFbnRyeS5sZXZlbF0gPj0gdGhpcy5fbG9nTGV2ZWwpIHsKCiAgICAgIGlmIChMb2dMZXZlbE9yZGVyW2xvZ0VudHJ5LmxldmVsXSA+PSB0aGlzLl9lY2hvTGV2ZWwpIHsKICAgICAgICBDT05TT0xFX0xPR0dFUl9NQVBbbG9nRW50cnkuZ2V0TGV2ZWwoKV0obG9nRW50cnkudG9TdHJpbmcoKSk7CiAgICAgIH0KCiAgICAgIGxvZ0VudHJ5LmxpbmUgPSB0aGlzLl9saW5lQ291bnQrKzsKICAgIH0KICB9OwoKICAvKioKICAgKiBSZW1vdmUgYWxsIG9iamVjdHMgZnJvbSBhbGwgbG9nIGVudHJpZXMuCiAgICovCiAgTG9nZ2VyLnByb3RvdHlwZS5jbGVhck9iamVjdHMgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuX2xvZ3MubGVuZ3RoOyB4KyspIHsKICAgICAgaWYgKHRoaXMuX2xvZ3NbeF0ub2JqZWN0cykgewogICAgICAgIGRlbGV0ZSB0aGlzLl9sb2dzW3hdLm9iamVjdHM7CiAgICAgIH0KICAgIH0KICB9OwoKICAvKioKICAgKiBSZW1vdmUgYWxsIGV4Y2VwdGlvbiBzdGFjayB0cmFjZXMgZnJvbSB0aGUgbG9nIGVudHJpZXMuCiAgICovCiAgTG9nZ2VyLnByb3RvdHlwZS5jbGVhckV4Y2VwdGlvbnMgPSBmdW5jdGlvbiAoKSB7CiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuX2xvZ3MubGVuZ3RoOyB4KyspIHsKICAgICAgaWYgKHRoaXMuX2xvZ3NbeF0uZXhjZXB0aW9uKSB7CiAgICAgICAgZGVsZXRlIHRoaXMuX2xvZ3NbeF0uZXhjZXB0aW9uOwogICAgICB9CiAgICB9CiAgfTsKCiAgTG9nZ2VyLnByb3RvdHlwZS50cmFjZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBsb2dBcmdzID0gZXh0cmFjdExvZ2dlckFyZ3MoYXJndW1lbnRzKTsKICAgIHJldHVybiB0aGlzLndyaXRlKGxvZ0FyZ3MuY29tcG9uZW50LCBMb2dMZXZlbC5UUkFDRSwgY29ubmVjdC52c3ByaW50Zihsb2dBcmdzLmZvcm1hdCwgbG9nQXJncy5hcmdzKSk7CiAgfTsKCiAgTG9nZ2VyLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBsb2dBcmdzID0gZXh0cmFjdExvZ2dlckFyZ3MoYXJndW1lbnRzKTsKICAgIHJldHVybiB0aGlzLndyaXRlKGxvZ0FyZ3MuY29tcG9uZW50LCBMb2dMZXZlbC5ERUJVRywgY29ubmVjdC52c3ByaW50Zihsb2dBcmdzLmZvcm1hdCwgbG9nQXJncy5hcmdzKSk7CiAgfTsKCiAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvZ0FyZ3MgPSBleHRyYWN0TG9nZ2VyQXJncyhhcmd1bWVudHMpOwogICAgcmV0dXJuIHRoaXMud3JpdGUobG9nQXJncy5jb21wb25lbnQsIExvZ0xldmVsLklORk8sIGNvbm5lY3QudnNwcmludGYobG9nQXJncy5mb3JtYXQsIGxvZ0FyZ3MuYXJncykpOwogIH07CgogIExvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvZ0FyZ3MgPSBleHRyYWN0TG9nZ2VyQXJncyhhcmd1bWVudHMpOwogICAgcmV0dXJuIHRoaXMud3JpdGUobG9nQXJncy5jb21wb25lbnQsIExvZ0xldmVsLkxPRywgY29ubmVjdC52c3ByaW50Zihsb2dBcmdzLmZvcm1hdCwgbG9nQXJncy5hcmdzKSk7CiAgfTsKCiAgTG9nZ2VyLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvZ0FyZ3MgPSBleHRyYWN0TG9nZ2VyQXJncyhhcmd1bWVudHMpOwogICAgcmV0dXJuIHRoaXMud3JpdGUobG9nQXJncy5jb21wb25lbnQsIExvZ0xldmVsLlRFU1QsIGNvbm5lY3QudnNwcmludGYobG9nQXJncy5mb3JtYXQsIGxvZ0FyZ3MuYXJncykpOwogIH07CgogIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBsb2dBcmdzID0gZXh0cmFjdExvZ2dlckFyZ3MoYXJndW1lbnRzKTsKICAgIHJldHVybiB0aGlzLndyaXRlKGxvZ0FyZ3MuY29tcG9uZW50LCBMb2dMZXZlbC5XQVJOLCBjb25uZWN0LnZzcHJpbnRmKGxvZ0FyZ3MuZm9ybWF0LCBsb2dBcmdzLmFyZ3MpKTsKICB9OwoKICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvZ0FyZ3MgPSBleHRyYWN0TG9nZ2VyQXJncyhhcmd1bWVudHMpOwogICAgcmV0dXJuIHRoaXMud3JpdGUobG9nQXJncy5jb21wb25lbnQsIExvZ0xldmVsLkVSUk9SLCBjb25uZWN0LnZzcHJpbnRmKGxvZ0FyZ3MuZm9ybWF0LCBsb2dBcmdzLmFyZ3MpKTsKICB9OwoKICBMb2dnZXIucHJvdG90eXBlLmNyaXRpY2FsID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvZ0FyZ3MgPSBleHRyYWN0TG9nZ2VyQXJncyhhcmd1bWVudHMpOwogICAgcmV0dXJuIHRoaXMud3JpdGUobG9nQXJncy5jb21wb25lbnQsIExvZ0xldmVsLkVSUk9SLCBjb25uZWN0LnZzcHJpbnRmKGxvZ0FyZ3MuZm9ybWF0LCBsb2dBcmdzLmFyZ3MpKTsKICB9OwoKICAvKioKICAgKiBDcmVhdGUgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGxvZ2dlciBjb250ZW50cy4KICAgKi8KICBMb2dnZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxpbmVzID0gW107CiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuX2xvZ3MubGVuZ3RoOyB4KyspIHsKICAgICAgbGluZXMucHVzaCh0aGlzLl9sb2dzW3hdLnRvU3RyaW5nKCkpOwogICAgfQoKICAgIHJldHVybiBsaW5lcy5qb2luKCJcbiIpOwogIH07CiAgCiAgLyoqCiAgICogRG93bmxvYWQvQXJjaGl2ZSBsb2dzIHRvIGEgZmlsZSwgCiAgICogQnkgZGVmYXVsdCwgaXQgcmV0dXJucyBhbGwgbG9ncy4KICAgKiBUbyBmaWx0ZXIgbG9ncyBieSB0aGUgbWluaW11bSBsb2cgbGV2ZWwgc2V0IGJ5IHNldExvZ0xldmVsIG9yIHRoZSBkZWZhdWx0IHNldCBpbiBfbG9nTGV2ZWwsIAogICAqIHBhc3MgaW4gZmlsdGVyQnlMb2dMZXZlbCB0byB0cnVlIGluIG9wdGlvbnMKICAgKiAKICAgKiBAcGFyYW0gb3B0aW9ucyBkb3dubG9hZCBvcHRpb25zIFtPYmplY3R8U3RyaW5nXS4gCiAgICogLSBvZiB0eXBlIE9iamVjdDogCiAgICogICB7IGxvZ05hbWU6ICdteS1sb2ctbmFtZScsCiAgICogICAgIGZpbHRlckJ5TG9nTGV2ZWw6IGZhbHNlLCAvL2Rvd25sb2FkIGFsbCBsb2dzCiAgICogICB9CiAgICogLSBvZiB0eXBlIFN0cmluZyAoZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkpLCB0aGUgZmlsZSdzIG5hbWUKICAgKi8KICBMb2dnZXIucHJvdG90eXBlLmRvd25sb2FkID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgdmFyIGxvZ05hbWUgPSAnYWdlbnQtbG9nJzsKICAgIHZhciBmaWx0ZXJCeUxvZ0xldmVsID0gZmFsc2U7CgogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JykgewogICAgICBsb2dOYW1lID0gb3B0aW9ucy5sb2dOYW1lIHx8IGxvZ05hbWU7CiAgICAgIGZpbHRlckJ5TG9nTGV2ZWwgPSBvcHRpb25zLmZpbHRlckJ5TG9nTGV2ZWwgfHwgZmlsdGVyQnlMb2dMZXZlbDsKICAgIH0KICAgIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgewogICAgICBsb2dOYW1lID0gb3B0aW9ucyB8fCBsb2dOYW1lOwogICAgfQoKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBsb2dzID0gdGhpcy5fcm9sbGVkTG9ncy5jb25jYXQodGhpcy5fbG9ncyk7CiAgICBpZiAoZmlsdGVyQnlMb2dMZXZlbCkgewogICAgICBsb2dzID0gbG9ncy5maWx0ZXIoZnVuY3Rpb24oZW50cnkpIHsKICAgICAgICByZXR1cm4gTG9nTGV2ZWxPcmRlcltlbnRyeS5sZXZlbF0gPj0gc2VsZi5fbG9nTGV2ZWw7CiAgICAgIH0pOwogICAgfQoKICAgIHZhciBsb2dCbG9iID0gbmV3IGdsb2JhbC5CbG9iKFtKU09OLnN0cmluZ2lmeShsb2dzLCB1bmRlZmluZWQsIDQpXSwgWyd0ZXh0L3BsYWluJ10pOwogICAgdmFyIGRvd25sb2FkTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIHZhciBsb2dOYW1lID0gbG9nTmFtZSB8fCAnYWdlbnQtbG9nJzsKICAgIGRvd25sb2FkTGluay5ocmVmID0gZ2xvYmFsLlVSTC5jcmVhdGVPYmplY3RVUkwobG9nQmxvYik7CiAgICBkb3dubG9hZExpbmsuZG93bmxvYWQgPSBsb2dOYW1lICsgJy50eHQnOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb3dubG9hZExpbmspOwogICAgZG93bmxvYWRMaW5rLmNsaWNrKCk7CiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGRvd25sb2FkTGluayk7CiAgfTsKCiAgTG9nZ2VyLnByb3RvdHlwZS5zY2hlZHVsZVVwc3RyZWFtTG9nUHVzaCA9IGZ1bmN0aW9uIChjb25kdWl0KSB7CiAgICBpZiAoIWNvbm5lY3QudXBzdHJlYW1Mb2dQdXNoU2NoZWR1bGVkKSB7CiAgICAgIGNvbm5lY3QudXBzdHJlYW1Mb2dQdXNoU2NoZWR1bGVkID0gdHJ1ZTsKICAgICAgLyoqIFNjaGVkdWxlIHB1c2hpbmcgbG9ncyBmcmVxdWVudGx5IHRvIHNoYXJlZHdvcmtlciB1cHN0cmVhbSwgc2hhcmVkd29ya2VyIHdpbGwgcmVwb3J0IHRvIHRoZSBDVEkgYmFja2VuZCovCiAgICAgIGdsb2JhbC5zZXRJbnRlcnZhbChjb25uZWN0LmhpdGNoKHRoaXMsIHRoaXMucmVwb3J0TWFzdGVyTG9nc1VwU3RyZWFtLCBjb25kdWl0KSwgU09GVFBIT05FX0xPR19SRVBPUlRfSU5URVJWQUxfTUlMTElTKTsKICAgIH0KICB9OwoKICBMb2dnZXIucHJvdG90eXBlLnJlcG9ydE1hc3RlckxvZ3NVcFN0cmVhbSA9IGZ1bmN0aW9uIChjb25kdWl0KSB7CiAgICB2YXIgbG9nc1RvUHVzaCA9IHRoaXMuX2xvZ3NUb1B1c2guc2xpY2UoKTsKICAgIHRoaXMuX2xvZ3NUb1B1c2ggPSBbXTsKICAgIGNvbm5lY3QuaWZNYXN0ZXIoY29ubmVjdC5NYXN0ZXJUb3BpY3MuU0VORF9MT0dTLCBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChsb2dzVG9QdXNoLmxlbmd0aCA+IDApIHsKICAgICAgICBjb25kdWl0LnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5TRU5EX0xPR1MsIGxvZ3NUb1B1c2gpOwogICAgICB9CiAgICB9KTsKICB9OwoKICBMb2dnZXIucHJvdG90eXBlLnNjaGVkdWxlVXBzdHJlYW1PdXRlckNvbnRleHRDQ1BzZXJ2ZXJCb3VuZExvZ3NQdXNoID0gZnVuY3Rpb24oY29uZHVpdCkgewogICAgZ2xvYmFsLnNldEludGVydmFsKGNvbm5lY3QuaGl0Y2godGhpcywgdGhpcy5wdXNoT3V0ZXJDb250ZXh0Q0NQc2VydmVyQm91bmRMb2dzVXBzdHJlYW0sIGNvbmR1aXQpLCAxMDAwKTsKICB9CgogIExvZ2dlci5wcm90b3R5cGUuc2NoZWR1bGVVcHN0cmVhbU91dGVyQ29udGV4dENDUExvZ3NQdXNoID0gZnVuY3Rpb24oY29uZHVpdCkgewogICAgZ2xvYmFsLnNldEludGVydmFsKGNvbm5lY3QuaGl0Y2godGhpcywgdGhpcy5wdXNoT3V0ZXJDb250ZXh0Q0NQTG9nc1Vwc3RyZWFtLCBjb25kdWl0KSwgMTAwMCk7CiAgfQoKICBMb2dnZXIucHJvdG90eXBlLnB1c2hPdXRlckNvbnRleHRDQ1BzZXJ2ZXJCb3VuZExvZ3NVcHN0cmVhbSA9IGZ1bmN0aW9uKGNvbmR1aXQpIHsKICAgIGlmICh0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9ncy5sZW5ndGggPiAwKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3MubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9nc1tpXS50ZXh0ID0gdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3NbaV0udGV4dDsKICAgICAgfQoKICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU0VSVkVSX0JPVU5EX0lOVEVSTkFMX0xPRywgdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3MpOwogICAgICB0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9ncyA9IFtdOwogICAgfQogIH0KCiAgTG9nZ2VyLnByb3RvdHlwZS5wdXNoT3V0ZXJDb250ZXh0Q0NQTG9nc1Vwc3RyZWFtID0gZnVuY3Rpb24oY29uZHVpdCkgewogICAgZm9yICh2YXIgaSA9IHRoaXMuX3N0YXJ0TG9nSW5kZXhUb1B1c2g7IGkgPCB0aGlzLl9sb2dzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmICh0aGlzLl9sb2dzW2ldLmxvZ2dlcklkICE9PSB0aGlzLl9sb2dnZXJJZCkgewogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGNvbmR1aXQuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkxPRywgdGhpcy5fbG9nc1tpXSk7CiAgICB9CiAgICB0aGlzLl9zdGFydExvZ0luZGV4VG9QdXNoID0gdGhpcy5fbG9ncy5sZW5ndGg7CiAgfQoKICBMb2dnZXIucHJvdG90eXBlLmdldExvZ2dlcklkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX2xvZ2dlcklkOwogIH07CgogIExvZ2dlci5wcm90b3R5cGUuc2NoZWR1bGVEb3duc3RyZWFtQ2xpZW50U2lkZUxvZ3NQdXNoID0gZnVuY3Rpb24gKCkgewogICAgZ2xvYmFsLnNldEludGVydmFsKGNvbm5lY3QuaGl0Y2godGhpcywgdGhpcy5wdXNoQ2xpZW50U2lkZUxvZ3NEb3duc3RyZWFtKSwgTE9HU19SRVBPUlRfSU5URVJWQUxfTUlMTElTKTsKICB9CgogIExvZ2dlci5wcm90b3R5cGUucHVzaENsaWVudFNpZGVMb2dzRG93bnN0cmVhbSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBsb2dzID0gW107CgogICAgLy8gV2UgZG8gbm90IHNlbmQgYSByZXF1ZXN0IGlmIHdlIGhhdmUgbGVzcyB0aGFuIDUwIHJlY29yZHMgc28gdGhhdCB3ZSBtaW5pbWl6ZSB0aGUgbnVtYmVyIG9mCiAgICAvLyByZXF1ZXN0cyBwZXIgc2Vjb25kLiAKICAgIC8vIDUwMCBpcyB0aGUgbWF4IHdlIGFjY2VwdCBvbiB0aGUgc2VydmVyLiAKICAgIC8vIFdlIGNob3NlIDUwMCBiZWNhdXNlIHRoaXMgaXMgdGhlIGxpbWl0IGltcG9zZWQgYnkgRmlyZWhvc2UgZm9yIGEgcHV0IGJhdGNoIHJlcXVlc3QKICAgIGlmICh0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9ncy5sZW5ndGggPCA1MCkgewogICAgICByZXR1cm47CiAgICB9IGVsc2UgaWYgKHRoaXMuX3NlcnZlckJvdW5kSW50ZXJuYWxMb2dzLmxlbmd0aCA+IDUwMCkgewogICAgICBsb2dzID0gdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3Muc3BsaWNlKDAsIDUwMCk7CiAgICB9IGVsc2UgewogICAgICBsb2dzID0gdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3M7CiAgICAgIHRoaXMuX3NlcnZlckJvdW5kSW50ZXJuYWxMb2dzID0gW107CiAgICB9CgogICAgY29ubmVjdC5wdWJsaXNoQ2xpZW50U2lkZUxvZ3MobG9ncyk7CiAgfQoKICB2YXIgRG93bnN0cmVhbUNvbmR1aXRMb2dnZXIgPSBmdW5jdGlvbiAoY29uZHVpdCkgewogICAgTG9nZ2VyLmNhbGwodGhpcyk7CiAgICB0aGlzLmNvbmR1aXQgPSBjb25kdWl0OwogICAgCiAgICBnbG9iYWwuc2V0SW50ZXJ2YWwoY29ubmVjdC5oaXRjaCh0aGlzLCB0aGlzLl9wdXNoTG9nc0Rvd25zdHJlYW0pLAogICAgICBEb3duc3RyZWFtQ29uZHVpdExvZ2dlci5MT0dfUFVTSF9JTlRFUlZBTCk7CgogICAgLy8gRGlzYWJsZSBsb2cgcm9sbGluZywgd2Ugd2lsbCBwdXJnZSBvdXIgb3duIGxvZ3Mgb25jZSB0aGV5IGhhdmUKICAgIC8vIGJlZW4gcHVzaGVkIGRvd25zdHJlYW0uCiAgICBnbG9iYWwuY2xlYXJJbnRlcnZhbCh0aGlzLl9sb2dSb2xsVGltZXIpOwogICAgdGhpcy5fbG9nUm9sbFRpbWVyID0gbnVsbDsKICB9OwogIC8vIEhvdyBmcmVxdWVudGx5IGxvZ3Mgc2hvdWxkIGJlIGNvbGxlY3RlZCBhbmQgZGVsaXZlcmVkIGRvd25zdHJlYW0uCiAgRG93bnN0cmVhbUNvbmR1aXRMb2dnZXIuTE9HX1BVU0hfSU5URVJWQUwgPSAxMDAwOwogIERvd25zdHJlYW1Db25kdWl0TG9nZ2VyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTG9nZ2VyLnByb3RvdHlwZSk7CiAgRG93bnN0cmVhbUNvbmR1aXRMb2dnZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG93bnN0cmVhbUNvbmR1aXRMb2dnZXI7CgogIERvd25zdHJlYW1Db25kdWl0TG9nZ2VyLnByb3RvdHlwZS5wdXNoTG9nc0Rvd25zdHJlYW0gPSBmdW5jdGlvbiAobG9ncykgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgbG9ncy5mb3JFYWNoKGZ1bmN0aW9uIChsb2cpIHsKICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkxPRywgbG9nKTsKICAgIH0pOwogIH07CgogIERvd25zdHJlYW1Db25kdWl0TG9nZ2VyLnByb3RvdHlwZS5fcHVzaExvZ3NEb3duc3RyZWFtID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgCiAgICB0aGlzLl9sb2dzLmZvckVhY2goZnVuY3Rpb24gKGxvZykgewogICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuTE9HLCBsb2cpOwogICAgfSk7CiAgICB0aGlzLl9sb2dzID0gW107CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZXJ2ZXJCb3VuZEludGVybmFsTG9ncy5sZW5ndGg7IGkrKykgewogICAgICB0aGlzLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU0VSVkVSX0JPVU5EX0lOVEVSTkFMX0xPRywgdGhpcy5fc2VydmVyQm91bmRJbnRlcm5hbExvZ3NbaV0pOwogICAgfQoKICAgIHRoaXMuX3NlcnZlckJvdW5kSW50ZXJuYWxMb2dzID0gW107CiAgfTsKCiAgLyoqCiAgICogV3JhcCBhIGZ1bmN0aW9uIHdpdGggdHJ5IGNhdGNoIGJsb2NrCiAgICovCiAgdmFyIHRyeUNhdGNoV3JhcHBlck1ldGhvZCA9IGZ1bmN0aW9uIChmbikgewogICAgdmFyIHdyYXBwZWRmdW5jdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICB0cnkgewogICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgLy8gU2luY2UgdGhpcyB3cmFwcyBMb2dnZXIgY2xhc3MsIHdlIGNhbiBvbmx5IHByaW50IGl0IGluIHRoZSBjb25zb2xlIGFuZCBlYXQgaXQuCiAgICAgICAgQ09OU09MRV9MT0dHRVJfTUFQLkVSUk9SKGUpOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gd3JhcHBlZGZ1bmN0aW9uOwogIH0KICAvKioKICAgKiBUaGlzIGlzIGEgd3JhcHBlciBtZXRob2QgdG8gd3JhcCBlYWNoIGZ1bmN0aW9uCiAgICogaW4gYW4gb2JqZWN0IHdpdGggdHJ5IGNhdGNoIGJsb2NrLgogICAqLwogIHZhciB0cnlDYXRjaFdyYXBwZXJPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7CiAgICBmb3IgKHZhciBtZXRob2QgaW4gb2JqKSB7CiAgICAgIGlmICh0eXBlb2Yob2JqW21ldGhvZF0pID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgb2JqW21ldGhvZF0gPSB0cnlDYXRjaFdyYXBwZXJNZXRob2Qob2JqW21ldGhvZF0pOwogICAgICB9CiAgICB9CiAgfQoKICAvKiogQ3JlYXRlIHRoZSBzaW5nbGV0b24gbG9nZ2VyIGluc3RhbmNlLiAqLwogIGNvbm5lY3Qucm9vdExvZ2dlciA9IG5ldyBMb2dnZXIoKTsKICB0cnlDYXRjaFdyYXBwZXJPYmplY3QoY29ubmVjdC5yb290TG9nZ2VyKTsKCgogIC8qKiBGZXRjaCB0aGUgc2luZ2xldG9uIGxvZ2dlciBpbnN0YW5jZS4gKi8KICB2YXIgZ2V0TG9nID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3Qucm9vdExvZ2dlcjsKICB9OwoKICBjb25uZWN0ID0gY29ubmVjdCB8fCB7fTsKICBjb25uZWN0LmdldExvZyA9IGdldExvZzsKICBjb25uZWN0LkxvZ0VudHJ5ID0gTG9nRW50cnk7CiAgY29ubmVjdC5Mb2dnZXIgPSBMb2dnZXI7CiAgY29ubmVjdC5Mb2dMZXZlbCA9IExvZ0xldmVsOwogIGNvbm5lY3QuTG9nQ29tcG9uZW50ID0gTG9nQ29tcG9uZW50OwogIGNvbm5lY3QuRG93bnN0cmVhbUNvbmR1aXRMb2dnZXIgPSBEb3duc3RyZWFtQ29uZHVpdExvZ2dlcjsKfSkoKTsKCgovKioqLyB9KSwKCi8qKiovIDQzOToKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFtYXpvbiBTb2Z0d2FyZSBMaWNlbnNlICh0aGUgIkxpY2Vuc2UiKS4gWW91IG1heSBub3QgdXNlCiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMKICogbG9jYXRlZCBhdAogKgogKiAgICBodHRwOi8vYXdzLmFtYXpvbi5jb20vYXNsLwogKgogKiBvciBpbiB0aGUgImxpY2Vuc2UiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkCiAqIG9uIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzCiAqIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucwogKiBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwoKICBjb25uZWN0LkNoYXRNZWRpYUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAobWVkaWFJbmZvLCBtZXRhZGF0YSkgewogICAgdmFyIGxvZ2dlciA9IGNvbm5lY3QuZ2V0TG9nKCk7CiAgICB2YXIgbG9nQ29tcG9uZW50ID0gY29ubmVjdC5Mb2dDb21wb25lbnQuQ0hBVDsKCiAgICB2YXIgY3JlYXRlTWVkaWFJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJDaGF0IG1lZGlhIGNvbnRyb2xsZXIgaW5pdCIsIG1lZGlhSW5mby5jb250YWN0SWQpOwogICAgICBsb2dnZXIuaW5mbyhsb2dDb21wb25lbnQsICJDaGF0IG1lZGlhIGNvbnRyb2xsZXIgaW5pdCIpCiAgICAgICAgLndpdGhPYmplY3QobWVkaWFJbmZvKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwoKICAgICAgY29ubmVjdC5DaGF0U2Vzc2lvbi5zZXRHbG9iYWxDb25maWcoewogICAgICAgIGxvZ2dlckNvbmZpZzogewogICAgICAgICAgbG9nZ2VyOiBsb2dnZXIKICAgICAgICB9LAogICAgICAgIHJlZ2lvbjogbWV0YWRhdGEucmVnaW9uCiAgICAgIH0pOwoKICAgICAgLyoqIENvdWxkIGJlIGFsc28gQ1VTVE9NRVIgLSAgRm9yIG5vdyB3ZSBhcmUgY3JlYXRpbmcgb25seSBBZ2VudCBjb25uZWN0aW9uIG1lZGlhIG9iamVjdCAqLwogICAgICB2YXIgY29udHJvbGxlciA9IGNvbm5lY3QuQ2hhdFNlc3Npb24uY3JlYXRlKHsKICAgICAgICBjaGF0RGV0YWlsczogbWVkaWFJbmZvLAogICAgICAgIHR5cGU6ICJBR0VOVCIsCiAgICAgICAgd2Vic29ja2V0TWFuYWdlcjogY29ubmVjdC5jb3JlLmdldFdlYlNvY2tldE1hbmFnZXIoKQogICAgICB9KTsKICAgICAgCiAgICAgIHRyYWNrQ2hhdENvbm5lY3Rpb25TdGF0dXMoY29udHJvbGxlcik7CiAgICAgIHJldHVybiBjb250cm9sbGVyCiAgICAgICAgLmNvbm5lY3QoKQogICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBsb2dnZXIuaW5mbyhsb2dDb21wb25lbnQsICJDaGF0IFNlc3Npb24gU3VjY2Vzc2Z1bGx5IGVzdGFibGlzaGVkIGZvciBjb250YWN0SWQgJXMiLCBtZWRpYUluZm8uY29udGFjdElkKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiQ2hhdCBTZXNzaW9uIFN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCIsIG1lZGlhSW5mby5jb250YWN0SWQpOwogICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBsb2dnZXIuZXJyb3IobG9nQ29tcG9uZW50LCAiQ2hhdCBTZXNzaW9uIGVzdGFibGlzaGVtZW50IGZhaWxlZCBmb3IgY29udGFjdCAlcyIsIG1lZGlhSW5mby5jb250YWN0SWQpCiAgICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGVycm9yKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJDaGF0IFNlc3Npb24gZXN0YWJsaXNoZW1lbnQgZmFpbGVkIiwgbWVkaWFJbmZvLmNvbnRhY3RJZCwgZXJyb3IpOwogICAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgICAgfSk7CiAgICB9OwoKICAgIHZhciBwdWJsaXNoVGVsZW1ldHJ5RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhKSB7CiAgICAgIGNvbm5lY3QucHVibGlzaE1ldHJpYyh7CiAgICAgICAgbmFtZTogZXZlbnROYW1lLAogICAgICAgIGNvbnRhY3RJZDogbWVkaWFJbmZvLmNvbnRhY3RJZCwKICAgICAgICBkYXRhOiBkYXRhIHx8IG1lZGlhSW5mbwogICAgICB9KTsKICAgIH07CgogICAgdmFyIHRyYWNrQ2hhdENvbm5lY3Rpb25TdGF0dXMgPSBmdW5jdGlvbiAoY29udHJvbGxlcikgewogICAgICBjb250cm9sbGVyLm9uQ29ubmVjdGlvbkJyb2tlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGxvZ2dlci5lcnJvcihsb2dDb21wb25lbnQsICJDaGF0IFNlc3Npb24gY29ubmVjdGlvbiBicm9rZW4iKQogICAgICAgICAgLndpdGhFeGNlcHRpb24oZGF0YSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICBwdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIkNoYXQgU2Vzc2lvbiBjb25uZWN0aW9uIGJyb2tlbiIsIGRhdGEpOwogICAgICB9KTsKCiAgICAgIGNvbnRyb2xsZXIub25Db25uZWN0aW9uRXN0YWJsaXNoZWQoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBsb2dnZXIuaW5mbyhsb2dDb21wb25lbnQsICJDaGF0IFNlc3Npb24gY29ubmVjdGlvbiBlc3RhYmxpc2hlZCIpCiAgICAgICAgICAud2l0aE9iamVjdChkYXRhKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiQ2hhdCBTZXNzaW9uIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQiLCBkYXRhKTsKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNyZWF0ZU1lZGlhSW5zdGFuY2UoKTsKICAgICAgfQogICAgfQogIH0KfSkoKTsKCgovKioqLyB9KSwKCi8qKiovIDI3OToKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFtYXpvbiBTb2Z0d2FyZSBMaWNlbnNlICh0aGUgIkxpY2Vuc2UiKS4gWW91IG1heSBub3QgdXNlCiAqIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMKICogbG9jYXRlZCBhdAogKgogKiAgICBodHRwOi8vYXdzLmFtYXpvbi5jb20vYXNsLwogKgogKiBvciBpbiB0aGUgImxpY2Vuc2UiIGZpbGUgYWNjb21wYW55aW5nIHRoaXMgZmlsZS4gVGhpcyBmaWxlIGlzIGRpc3RyaWJ1dGVkCiAqIG9uIGFuICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBleHByZXNzCiAqIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucwogKiBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwoKICBjb25uZWN0Lk1lZGlhRmFjdG9yeSA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgIC8qKiBjb250cm9sbGVyIGhvbGRlciAqLwogICAgdmFyIG1lZGlhQ29udHJvbGxlcnMgPSB7fTsKICAgIHZhciB0b0JlRGVzdHJveWVkID0gbmV3IFNldCgpOwoKICAgIHZhciBsb2dnZXIgPSBjb25uZWN0LmdldExvZygpOwogICAgdmFyIGxvZ0NvbXBvbmVudCA9IGNvbm5lY3QuTG9nQ29tcG9uZW50LkNIQVQ7CgogICAgdmFyIG1ldGFkYXRhID0gY29ubmVjdC5tZXJnZSh7fSwgcGFyYW1zKSB8fCB7fTsKICAgIG1ldGFkYXRhLnJlZ2lvbiA9ICBtZXRhZGF0YS5yZWdpb24gfHwgInVzLXdlc3QtMiI7IC8vIERlZmF1bHQgaXQgdG8gdXMtd2VzdC0yCgogICAgdmFyIGdldE1lZGlhQ29udHJvbGxlciA9IGZ1bmN0aW9uIChjb25uZWN0aW9uT2JqKSB7CiAgICAgIHZhciBjb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uT2JqLmdldENvbm5lY3Rpb25JZCgpOwogICAgICB2YXIgbWVkaWFJbmZvID0gY29ubmVjdGlvbk9iai5nZXRNZWRpYUluZm8oKTsKICAgICAgLyoqIGlmIHdlIGRvIG5vdCBoYXZlIHRoZSBtZWRpYSBpbmZvIHRoZW4ganVzdCByZWplY3QgdGhlIHJlcXVlc3QgKi8KICAgICAgaWYgKCFtZWRpYUluZm8pIHsKICAgICAgICBsb2dnZXIuZXJyb3IobG9nQ29tcG9uZW50LCAiTWVkaWEgaW5mbyBkb2VzIG5vdCBleGlzdCBmb3IgYSBtZWRpYSB0eXBlICVzIiwgY29ubmVjdGlvbk9iai5nZXRNZWRpYVR5cGUoKSkKICAgICAgICAgIC53aXRoT2JqZWN0KGNvbm5lY3Rpb25PYmopLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCJNZWRpYSBpbmZvIGRvZXMgbm90IGV4aXN0IGZvciB0aGlzIGNvbm5lY3Rpb24iKTsKICAgICAgfQoKICAgICAgaWYgKCFtZWRpYUNvbnRyb2xsZXJzW2Nvbm5lY3Rpb25JZF0pIHsKICAgICAgICBsb2dnZXIuaW5mbyhsb2dDb21wb25lbnQsICJtZWRpYSBjb250cm9sbGVyIG9mIHR5cGUgJXMgaW5pdCIsIGNvbm5lY3Rpb25PYmouZ2V0TWVkaWFUeXBlKCkpCiAgICAgICAgICAud2l0aE9iamVjdChjb25uZWN0aW9uT2JqKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgIHN3aXRjaCAoY29ubmVjdGlvbk9iai5nZXRNZWRpYVR5cGUoKSkgewogICAgICAgICAgY2FzZSBjb25uZWN0Lk1lZGlhVHlwZS5DSEFUOgogICAgICAgICAgICByZXR1cm4gbWVkaWFDb250cm9sbGVyc1tjb25uZWN0aW9uSWRdID0gbmV3IGNvbm5lY3QuQ2hhdE1lZGlhQ29udHJvbGxlcihjb25uZWN0aW9uT2JqLmdldE1lZGlhSW5mbygpLCBtZXRhZGF0YSkuZ2V0KCk7CiAgICAgICAgICBjYXNlIGNvbm5lY3QuTWVkaWFUeXBlLlNPRlRQSE9ORToKICAgICAgICAgICAgcmV0dXJuIG1lZGlhQ29udHJvbGxlcnNbY29ubmVjdGlvbklkXSA9IG5ldyBjb25uZWN0LlNvZnRwaG9uZU1lZGlhQ29udHJvbGxlcihjb25uZWN0aW9uT2JqLmdldE1lZGlhSW5mbygpKS5nZXQoKTsKICAgICAgICAgIGNhc2UgY29ubmVjdC5NZWRpYVR5cGUuVEFTSzoKICAgICAgICAgICAgcmV0dXJuIG1lZGlhQ29udHJvbGxlcnNbY29ubmVjdGlvbklkXSA9IG5ldyBjb25uZWN0LlRhc2tNZWRpYUNvbnRyb2xsZXIoY29ubmVjdGlvbk9iai5nZXRNZWRpYUluZm8oKSkuZ2V0KCk7CiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBsb2dnZXIuZXJyb3IobG9nQ29tcG9uZW50LCAiVW5yZWNvZ25pemVkIG1lZGlhIHR5cGUgJXMgIiwgY29ubmVjdGlvbk9iai5nZXRNZWRpYVR5cGUoKSkKICAgICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBtZWRpYUNvbnRyb2xsZXJzW2Nvbm5lY3Rpb25JZF07CiAgICAgIH0KICAgIH07CgogICAgLyoqIENoZWNrIGFsbCB0aGUgYWN0aXZlIHN0YXRlcyBmb3IgdGhlIGNvbm5lY3Rpb24gKi8KICAgIHZhciBpZkNvbm5lY3Rpb25BY3RpdmUgPSBmdW5jdGlvbiAoY29ubmVjdGlvbk9iaikgewogICAgICByZXR1cm4gY29ubmVjdGlvbk9iai5pc0FjdGl2ZSgpOwogICAgfTsKCiAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKGNvbm5lY3Rpb25PYmopIHsKICAgICAgaWYgKGlmQ29ubmVjdGlvbkFjdGl2ZShjb25uZWN0aW9uT2JqKSkgewogICAgICAgIHJldHVybiBnZXRNZWRpYUNvbnRyb2xsZXIoY29ubmVjdGlvbk9iaik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZGVzdHJveShjb25uZWN0aW9uT2JqLmdldENvbm5lY3Rpb25JZCgpKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoIk1lZGlhIENvbnRyb2xsZXIgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZSBmb3IgdGhpcyBjb25uZWN0aW9uIik7CiAgICAgIH0KICAgIH07CgogICAgdmFyIGRlc3Ryb3kgPSBmdW5jdGlvbiAoY29ubmVjdGlvbklkKSB7CiAgICAgIGlmIChtZWRpYUNvbnRyb2xsZXJzW2Nvbm5lY3Rpb25JZF0gJiYgIXRvQmVEZXN0cm95ZWQuaGFzKGNvbm5lY3Rpb25JZCkpIHsKICAgICAgICBsb2dnZXIuaW5mbygKICAgICAgICAgIGxvZ0NvbXBvbmVudCwKICAgICAgICAgICJEZXN0cm95aW5nIG1lZGlhQ29udHJvbGxlciBmb3IgJXMiLAogICAgICAgICAgY29ubmVjdGlvbklkCiAgICAgICAgKTsKICAgICAgICB0b0JlRGVzdHJveWVkLmFkZChjb25uZWN0aW9uSWQpOwogICAgICAgIG1lZGlhQ29udHJvbGxlcnNbY29ubmVjdGlvbklkXQogICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udHJvbGxlci5jbGVhblVwID09PSAiZnVuY3Rpb24iKSBjb250cm9sbGVyLmNsZWFuVXAoKTsKICAgICAgICAgICAgZGVsZXRlIG1lZGlhQ29udHJvbGxlcnNbY29ubmVjdGlvbklkXTsKICAgICAgICAgICAgdG9CZURlc3Ryb3llZC5kZWxldGUoY29ubmVjdGlvbklkKTsKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGRlbGV0ZSBtZWRpYUNvbnRyb2xsZXJzW2Nvbm5lY3Rpb25JZF07CiAgICAgICAgICAgIHRvQmVEZXN0cm95ZWQuZGVsZXRlKGNvbm5lY3Rpb25JZCk7CiAgICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gewogICAgICBnZXQ6IGdldCwKICAgICAgZGVzdHJveTogZGVzdHJveQogICAgfTsKICB9Cn0pKCk7CgoKLyoqKi8gfSksCgovKioqLyA0MTg6Ci8qKiovICgoKSA9PiB7CgovKgogKiBDb3B5cmlnaHQgMjAxNC0yMDE3IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBbWF6b24gU29mdHdhcmUgTGljZW5zZSAodGhlICJMaWNlbnNlIikuIFlvdSBtYXkgbm90IHVzZQogKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzCiAqIGxvY2F0ZWQgYXQKICoKICogICAgaHR0cDovL2F3cy5hbWF6b24uY29tL2FzbC8KICoKICogb3IgaW4gdGhlICJsaWNlbnNlIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZAogKiBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcwogKiBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMKICogYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCihmdW5jdGlvbiAoKSB7CiAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogIGdsb2JhbC5jb25uZWN0ID0gY29ubmVjdDsKCiAgLy8gVE9ETyBtb3ZlIHNvZnRwaG9uZSBpbXBsZW1lbnRhdGlvbnMgaGVyZSAtIFdpbCBkbyB0aGlzIGZvciBHQQogIGNvbm5lY3QuU29mdHBob25lTWVkaWFDb250cm9sbGVyID0gZnVuY3Rpb24gKG1lZGlhSW5mbykgewogICAgcmV0dXJuIHsKICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtZWRpYUluZm8pCiAgICAgIH0KICAgIH0KICB9Cn0pKCk7CgoKLyoqKi8gfSksCgovKioqLyAxODc6Ci8qKiovICgoKSA9PiB7CgovKgogKiBDb3B5cmlnaHQgMjAxNC0yMDE3IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBbWF6b24gU29mdHdhcmUgTGljZW5zZSAodGhlICJMaWNlbnNlIikuIFlvdSBtYXkgbm90IHVzZQogKiB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gQSBjb3B5IG9mIHRoZSBMaWNlbnNlIGlzCiAqIGxvY2F0ZWQgYXQKICoKICogICAgaHR0cDovL2F3cy5hbWF6b24uY29tL2FzbC8KICoKICogb3IgaW4gdGhlICJsaWNlbnNlIiBmaWxlIGFjY29tcGFueWluZyB0aGlzIGZpbGUuIFRoaXMgZmlsZSBpcyBkaXN0cmlidXRlZAogKiBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcwogKiBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMKICogYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCihmdW5jdGlvbiAoKSB7CiAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogIGdsb2JhbC5jb25uZWN0ID0gY29ubmVjdDsKCiAgY29ubmVjdC5UYXNrTWVkaWFDb250cm9sbGVyID0gZnVuY3Rpb24gKG1lZGlhSW5mbykgewogICAgdmFyIGxvZ2dlciA9IGNvbm5lY3QuZ2V0TG9nKCk7CiAgICB2YXIgbG9nQ29tcG9uZW50ID0gY29ubmVjdC5Mb2dDb21wb25lbnQuVEFTSzsKCiAgICB2YXIgY3JlYXRlTWVkaWFJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJUYXNrIG1lZGlhIGNvbnRyb2xsZXIgaW5pdCIsIG1lZGlhSW5mby5jb250YWN0SWQpOwogICAgICBsb2dnZXIKICAgICAgICAuaW5mbyhsb2dDb21wb25lbnQsICJUYXNrIG1lZGlhIGNvbnRyb2xsZXIgaW5pdCIpCiAgICAgICAgLndpdGhPYmplY3QobWVkaWFJbmZvKTsKCiAgICAgIHZhciBjb250cm9sbGVyID0gY29ubmVjdC5UYXNrU2Vzc2lvbi5jcmVhdGUoewogICAgICAgIGNvbnRhY3RJZDogbWVkaWFJbmZvLmNvbnRhY3RJZCwKICAgICAgICBpbml0aWFsQ29udGFjdElkOiBtZWRpYUluZm8uaW5pdGlhbENvbnRhY3RJZCwKICAgICAgICB3ZWJzb2NrZXRNYW5hZ2VyOiBjb25uZWN0LmNvcmUuZ2V0V2ViU29ja2V0TWFuYWdlcigpLAogICAgICB9KTsKCiAgICAgIHRyYWNrVGFza0Nvbm5lY3Rpb25TdGF0dXMoY29udHJvbGxlcik7CgogICAgICByZXR1cm4gY29udHJvbGxlcgogICAgICAgIC5jb25uZWN0KCkKICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICBsb2dnZXIuaW5mbygKICAgICAgICAgICAgbG9nQ29tcG9uZW50LAogICAgICAgICAgICAiVGFzayBTZXNzaW9uIFN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCBmb3IgY29udGFjdElkICVzIiwKICAgICAgICAgICAgbWVkaWFJbmZvLmNvbnRhY3RJZAogICAgICAgICAgKTsKICAgICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgKICAgICAgICAgICAgIlRhc2sgU2Vzc2lvbiBTdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQiLAogICAgICAgICAgICBtZWRpYUluZm8uY29udGFjdElkCiAgICAgICAgICApOwogICAgICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7CiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICBsb2dnZXIKICAgICAgICAgICAgLmVycm9yKAogICAgICAgICAgICAgIGxvZ0NvbXBvbmVudCwKICAgICAgICAgICAgICAiVGFzayBTZXNzaW9uIGVzdGFibGlzaGVtZW50IGZhaWxlZCBmb3IgY29udGFjdCAlcyIsCiAgICAgICAgICAgICAgbWVkaWFJbmZvLmNvbnRhY3RJZAogICAgICAgICAgICApCiAgICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGVycm9yKTsKICAgICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgKICAgICAgICAgICAgIkNoYXQgU2Vzc2lvbiBlc3RhYmxpc2hlbWVudCBmYWlsZWQiLAogICAgICAgICAgICBtZWRpYUluZm8uY29udGFjdElkLAogICAgICAgICAgICBlcnJvcgogICAgICAgICAgKTsKICAgICAgICAgIHRocm93IGVycm9yOwogICAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgcHVibGlzaFRlbGVtZXRyeUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSkgewogICAgICBjb25uZWN0LnB1Ymxpc2hNZXRyaWMoewogICAgICAgIG5hbWU6IGV2ZW50TmFtZSwKICAgICAgICBjb250YWN0SWQ6IG1lZGlhSW5mby5jb250YWN0SWQsCiAgICAgICAgZGF0YTogZGF0YSB8fCBtZWRpYUluZm8sCiAgICAgIH0pOwogICAgfTsKCiAgICB2YXIgdHJhY2tUYXNrQ29ubmVjdGlvblN0YXR1cyA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7CiAgICAgIGNvbnRyb2xsZXIub25Db25uZWN0aW9uQnJva2VuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgbG9nZ2VyCiAgICAgICAgICAuZXJyb3IobG9nQ29tcG9uZW50LCAiVGFzayBTZXNzaW9uIGNvbm5lY3Rpb24gYnJva2VuIikKICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGRhdGEpOwogICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiVGFzayBTZXNzaW9uIGNvbm5lY3Rpb24gYnJva2VuIiwgZGF0YSk7CiAgICAgIH0pOwoKICAgICAgY29udHJvbGxlci5vbkNvbm5lY3Rpb25Fc3RhYmxpc2hlZChmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGxvZ2dlcgogICAgICAgICAgLmluZm8obG9nQ29tcG9uZW50LCAiVGFzayBTZXNzaW9uIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQiKQogICAgICAgICAgLndpdGhPYmplY3QoZGF0YSk7CiAgICAgICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJUYXNrIFNlc3Npb24gY29ubmVjdGlvbiBlc3RhYmxpc2hlZCIsIGRhdGEpOwogICAgICB9KTsKICAgIH07CgogICAgcmV0dXJuIHsKICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGNyZWF0ZU1lZGlhSW5zdGFuY2UoKTsKICAgICAgfSwKICAgIH07CiAgfTsKfSkoKTsKCgovKioqLyB9KSwKCi8qKiovIDc0MzoKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKICovCihmdW5jdGlvbiAoKSB7CiAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgdmFyIGNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTsKICBnbG9iYWwuY29ubmVjdCA9IGNvbm5lY3Q7CiAgZ2xvYmFsLmxpbHkgPSBjb25uZWN0OwoKICB2YXIgUmluZ3RvbmVFbmdpbmVCYXNlID0gZnVuY3Rpb24gKHJpbmd0b25lQ29uZmlnKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB0aGlzLl9wcmV2Q29udGFjdElkID0gbnVsbDsKCiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwocmluZ3RvbmVDb25maWcsICJyaW5ndG9uZUNvbmZpZyIpOwogICAgaWYgKCFyaW5ndG9uZUNvbmZpZy5yaW5ndG9uZVVybCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoInJpbmd0b25lVXJsIGlzIHJlcXVpcmVkISIpOwogICAgfQoKICAgIGlmIChnbG9iYWwuQXVkaW8gJiYgdHlwZW9mIGdsb2JhbC5Qcm9taXNlICE9PSAidW5kZWZpbmVkIikgewogICAgICB0aGlzLl9wbGF5YWJsZUF1ZGlvUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBzZWxmLl9hdWRpbyA9IG5ldyBBdWRpbyhyaW5ndG9uZUNvbmZpZy5yaW5ndG9uZVVybCk7CiAgICAgICAgc2VsZi5fYXVkaW8ubG9vcCA9IHRydWU7CiAgICAgICAgc2VsZi5fYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcigiY2FucGxheSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNlbGYuX2F1ZGlvUGxheWFibGUgPSB0cnVlOwogICAgICAgICAgcmVzb2x2ZShzZWxmLl9hdWRpbyk7CiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuX2F1ZGlvID0gbnVsbDsKICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiVW5hYmxlIHRvIHByb3ZpZGUgYSByaW5ndG9uZS4iKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgfQoKICAgIHNlbGYuX2RyaXZlUmluZ3RvbmUoKTsKICB9OwoKICBSaW5ndG9uZUVuZ2luZUJhc2UucHJvdG90eXBlLl9kcml2ZVJpbmd0b25lID0gZnVuY3Rpb24gKCkgewogICAgdGhyb3cgbmV3IEVycm9yKCJOb3QgaW1wbGVtZW50ZWQuIik7CiAgfTsKCiAgUmluZ3RvbmVFbmdpbmVCYXNlLnByb3RvdHlwZS5fc3RhcnRSaW5ndG9uZSA9IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBpZiAodGhpcy5fYXVkaW8pIHsKICAgICAgdGhpcy5fYXVkaW8ucGxheSgpCiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgIHNlbGYuX3B1Ymxpc2hUZWxlbWV0cnlFdmVudCgiUmluZ3RvbmUgUGxheWJhY2sgRmFpbHVyZSIsIGNvbnRhY3QpOwogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiUmluZ3RvbmUgUGxheWJhY2sgRmFpbHVyZSIpLndpdGhFeGNlcHRpb24oZSkud2l0aE9iamVjdCh7Y3VycmVudFNyYzogc2VsZi5fYXVkaW8uY3VycmVudFNyYywgc2lua0lkOiBzZWxmLl9hdWRpby5zaW5rSWQsIHZvbHVtZTogc2VsZi5fYXVkaW8udm9sdW1lfSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICB9KTsKICAgICAgc2VsZi5fcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJSaW5ndG9uZSBTdGFydCIsIGNvbnRhY3QpOwogICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIlJpbmd0b25lIFN0YXJ0Iikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KICB9OwoKICBSaW5ndG9uZUVuZ2luZUJhc2UucHJvdG90eXBlLl9zdG9wUmluZ3RvbmUgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgaWYgKHRoaXMuX2F1ZGlvKSB7CiAgICAgIHRoaXMuX2F1ZGlvLnBhdXNlKCk7CiAgICAgIHRoaXMuX2F1ZGlvLmN1cnJlbnRUaW1lID0gMDsKICAgICAgdGhpcy5fcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJSaW5ndG9uZSBTdG9wIiwgY29udGFjdCk7CiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiUmluZ3RvbmUgU3RvcCIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogU3RvcCByaW5ndG9uZS4KICAgKi8KICBSaW5ndG9uZUVuZ2luZUJhc2UucHJvdG90eXBlLnN0b3BSaW5ndG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuX3N0b3BSaW5ndG9uZSgpOwogIH07CgogIFJpbmd0b25lRW5naW5lQmFzZS5wcm90b3R5cGUuX3Jpbmd0b25lU2V0dXAgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgY29ubmVjdC5pZk1hc3Rlcihjb25uZWN0Lk1hc3RlclRvcGljcy5SSU5HVE9ORSwgZnVuY3Rpb24gKCkgewogICAgICBzZWxmLl9zdGFydFJpbmd0b25lKGNvbnRhY3QpOwogICAgICBzZWxmLl9wcmV2Q29udGFjdElkID0gY29udGFjdC5nZXRDb250YWN0SWQoKTsKCiAgICAgIGNvbnRhY3Qub25Db25uZWN0ZWQobGlseS5oaXRjaChzZWxmLCBzZWxmLl9zdG9wUmluZ3RvbmUpKTsKICAgICAgY29udGFjdC5vbkFjY2VwdGVkKGxpbHkuaGl0Y2goc2VsZiwgc2VsZi5fc3RvcFJpbmd0b25lKSk7CiAgICAgIGNvbnRhY3Qub25FbmRlZChsaWx5LmhpdGNoKHNlbGYsIHNlbGYuX3N0b3BSaW5ndG9uZSkpOwogICAgICAvLyBKdXN0IHRvIG1ha2Ugc3VyZSB0byBzdG9wIHRoZSByaW5ndG9uZSBpbiBjYXNlIG9mIHRoZSBmYWlsdXJlcyBvZiBzcGVjaWZpYyBjYWxsYmFja3Mob25BY2NlcHRlZCxvbkNvbm5lY3RlZCk7CiAgICAgIGNvbnRhY3Qub25SZWZyZXNoKGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgICAgaWYgKGNvbnRhY3QuZ2V0U3RhdHVzKCkudHlwZSAhPT0gY29ubmVjdC5Db250YWN0U3RhdHVzVHlwZS5DT05ORUNUSU5HICYmCiAgICAgICAgICBjb250YWN0LmdldFN0YXR1cygpLnR5cGUgIT09IGNvbm5lY3QuQ29udGFjdFN0YXR1c1R5cGUuSU5DT01JTkcpIHsKICAgICAgICAgIHNlbGYuX3N0b3BSaW5ndG9uZSgpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICB9OwoKICBSaW5ndG9uZUVuZ2luZUJhc2UucHJvdG90eXBlLl9wdWJsaXNoVGVsZW1ldHJ5RXZlbnQgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBjb250YWN0KSB7CiAgICBpZiAoY29udGFjdCAmJiBjb250YWN0LmdldENvbnRhY3RJZCgpKSB7CiAgICAgIGNvbm5lY3QucHVibGlzaE1ldHJpYyh7CiAgICAgICAgbmFtZTogZXZlbnROYW1lLAogICAgICAgIGNvbnRhY3RJZDogY29udGFjdC5nZXRDb250YWN0SWQoKQogICAgICB9KTsKICAgIH0KICB9OwoKICAvKioKICAgKiBDaGFuZ2UgdGhlIGF1ZGlvIGRldmljZSB1c2VkIHRvIHBsYXkgcmluZ3RvbmUuCiAgICogSWYgYXVkaW8gZWxlbWVudCBpcyBub3QgZnVsbHkgaW5pdGlhbGl6ZWQsIHRoZSBBUEkgd2lsbCB3YWl0IF9hdWRpb1BsYXlhYmxlUHJvbWlzZSBmb3IgMyBzZWNvbmRzIGFuZCBmYWlsIG9uIHRpbWVvdXQuCiAgICogVGhpcyBBUEkgaXMgc3VwcG9ydGVkIG9ubHkgYnkgYnJvd3NlcnMgdGhhdCBpbXBsZW1lbnRlZCBFUzYgUHJvbWlzZSBhbmQgaHR0cDovL3d3dy53My5vcmcvVFIvYXVkaW8tb3V0cHV0LwogICAqIFJldHVybiBhIFByb21pc2UgdGhhdCBpbmRpY2F0ZXMgdGhlIHJlc3VsdCBvZiBjaGFuZ2luZyBvdXRwdXQgZGV2aWNlLgogICAqLwogIFJpbmd0b25lRW5naW5lQmFzZS5wcm90b3R5cGUuc2V0T3V0cHV0RGV2aWNlID0gZnVuY3Rpb24gKGRldmljZUlkKSB7CiAgICBpZiAodGhpcy5fcGxheWFibGVBdWRpb1Byb21pc2UpIHsKICAgICAgdmFyIHBsYXlhYmxlQXVkaW9XaXRoVGltZW91dCA9IFByb21pc2UucmFjZShbCiAgICAgICAgdGhpcy5fcGxheWFibGVBdWRpb1Byb21pc2UsCiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgZ2xvYmFsLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZWplY3QoIlRpbWVkIG91dCB3YWl0aW5nIGZvciBwbGF5YWJsZSBhdWRpbyIpOyB9LCAzMDAwLyptcyovKTsKICAgICAgICB9KQogICAgICBdKTsKICAgICAgcmV0dXJuIHBsYXlhYmxlQXVkaW9XaXRoVGltZW91dC50aGVuKGZ1bmN0aW9uIChhdWRpbykgewogICAgICAgIGlmIChhdWRpbykgewogICAgICAgICAgaWYgKGF1ZGlvLnNldFNpbmtJZCkgewogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGF1ZGlvLnNldFNpbmtJZChkZXZpY2VJZCkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCJOb3Qgc3VwcG9ydGVkIik7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgiTm8gYXVkaW8gZm91bmQiKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIGlmIChnbG9iYWwuUHJvbWlzZSkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoIk5vdCBlbGlnaWJsZSByaW5ndG9uZSBvd25lciIpOwogICAgfQogIH07CgogIHZhciBWb2ljZVJpbmd0b25lRW5naW5lID0gZnVuY3Rpb24gKHJpbmd0b25lQ29uZmlnKSB7CiAgICBSaW5ndG9uZUVuZ2luZUJhc2UuY2FsbCh0aGlzLCByaW5ndG9uZUNvbmZpZyk7CiAgfTsKICBWb2ljZVJpbmd0b25lRW5naW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmluZ3RvbmVFbmdpbmVCYXNlLnByb3RvdHlwZSk7CiAgVm9pY2VSaW5ndG9uZUVuZ2luZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWb2ljZVJpbmd0b25lRW5naW5lOwoKICBWb2ljZVJpbmd0b25lRW5naW5lLnByb3RvdHlwZS5fZHJpdmVSaW5ndG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICB2YXIgb25Db250YWN0Q29ubmVjdCA9IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgIGlmIChjb250YWN0LmdldFR5cGUoKSA9PT0gbGlseS5Db250YWN0VHlwZS5WT0lDRSAmJgogICAgICAgIGNvbnRhY3QuaXNTb2Z0cGhvbmVDYWxsKCkgJiYgY29udGFjdC5pc0luYm91bmQoKSkgewogICAgICAgIHNlbGYuX3Jpbmd0b25lU2V0dXAoY29udGFjdCk7CiAgICAgICAgc2VsZi5fcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJSaW5ndG9uZSBDb25uZWN0aW5nIiwgY29udGFjdCk7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJSaW5ndG9uZSBDb25uZWN0aW5nIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgfQogICAgfTsKCiAgICBjb25uZWN0LmNvbnRhY3QoZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgY29udGFjdC5vbkNvbm5lY3Rpbmcob25Db250YWN0Q29ubmVjdCk7CiAgICB9KTsKCiAgICBuZXcgY29ubmVjdC5BZ2VudCgpLmdldENvbnRhY3RzKCkuZm9yRWFjaChmdW5jdGlvbiAoY29udGFjdCkgewogICAgICBpZiAoY29udGFjdC5nZXRTdGF0dXMoKS50eXBlID09PSBjb25uZWN0LkNvbnRhY3RTdGF0dXNUeXBlLkNPTk5FQ1RJTkcpIHsKICAgICAgICBvbkNvbnRhY3RDb25uZWN0KGNvbnRhY3QpOwogICAgICB9CiAgICB9KTsKICB9OwoKCiAgdmFyIENoYXRSaW5ndG9uZUVuZ2luZSA9IGZ1bmN0aW9uIChyaW5ndG9uZUNvbmZpZykgewogICAgUmluZ3RvbmVFbmdpbmVCYXNlLmNhbGwodGhpcywgcmluZ3RvbmVDb25maWcpOwogIH07CiAgQ2hhdFJpbmd0b25lRW5naW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmluZ3RvbmVFbmdpbmVCYXNlLnByb3RvdHlwZSk7CiAgQ2hhdFJpbmd0b25lRW5naW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENoYXRSaW5ndG9uZUVuZ2luZTsKCiAgQ2hhdFJpbmd0b25lRW5naW5lLnByb3RvdHlwZS5fZHJpdmVSaW5ndG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICB2YXIgb25Db250YWN0Q29ubmVjdCA9IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICAgIGlmIChjb250YWN0LmdldFR5cGUoKSA9PT0gbGlseS5Db250YWN0VHlwZS5DSEFUICYmIGNvbnRhY3QuaXNJbmJvdW5kKCkpIHsKICAgICAgICBzZWxmLl9yaW5ndG9uZVNldHVwKGNvbnRhY3QpOwogICAgICAgIHNlbGYuX3B1Ymxpc2hUZWxlbWV0cnlFdmVudCgiQ2hhdCBSaW5ndG9uZSBDb25uZWN0aW5nIiwgY29udGFjdCk7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJDaGF0IFJpbmd0b25lIENvbm5lY3RpbmciKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9CiAgICB9OwoKICAgIGNvbm5lY3QuY29udGFjdChmdW5jdGlvbiAoY29udGFjdCkgewogICAgICBjb250YWN0Lm9uQ29ubmVjdGluZyhvbkNvbnRhY3RDb25uZWN0KTsKICAgIH0pOwogIH07CgogIHZhciBUYXNrUmluZ3RvbmVFbmdpbmUgPSBmdW5jdGlvbiAocmluZ3RvbmVDb25maWcpIHsKICAgIFJpbmd0b25lRW5naW5lQmFzZS5jYWxsKHRoaXMsIHJpbmd0b25lQ29uZmlnKTsKICB9OwogIFRhc2tSaW5ndG9uZUVuZ2luZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJpbmd0b25lRW5naW5lQmFzZS5wcm90b3R5cGUpOwogIFRhc2tSaW5ndG9uZUVuZ2luZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUYXNrUmluZ3RvbmVFbmdpbmU7CgogIFRhc2tSaW5ndG9uZUVuZ2luZS5wcm90b3R5cGUuX2RyaXZlUmluZ3RvbmUgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgdmFyIG9uQ29udGFjdENvbm5lY3QgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICBpZiAoY29udGFjdC5nZXRUeXBlKCkgPT09IGxpbHkuQ29udGFjdFR5cGUuVEFTSyAmJiBjb250YWN0LmlzSW5ib3VuZCgpKSB7CiAgICAgICAgc2VsZi5fcmluZ3RvbmVTZXR1cChjb250YWN0KTsKICAgICAgICBzZWxmLl9wdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIlRhc2sgUmluZ3RvbmUgQ29ubmVjdGluZyIsIGNvbnRhY3QpOwogICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiVGFzayBSaW5ndG9uZSBDb25uZWN0aW5nIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgfQogICAgfTsKCiAgICBjb25uZWN0LmNvbnRhY3QoZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgY29udGFjdC5vbkNvbm5lY3Rpbmcob25Db250YWN0Q29ubmVjdCk7CiAgICB9KTsKICB9OwoKCiAgdmFyIFF1ZXVlQ2FsbGJhY2tSaW5ndG9uZUVuZ2luZSA9IGZ1bmN0aW9uIChyaW5ndG9uZUNvbmZpZykgewogICAgUmluZ3RvbmVFbmdpbmVCYXNlLmNhbGwodGhpcywgcmluZ3RvbmVDb25maWcpOwogIH07CiAgUXVldWVDYWxsYmFja1Jpbmd0b25lRW5naW5lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmluZ3RvbmVFbmdpbmVCYXNlLnByb3RvdHlwZSk7CiAgUXVldWVDYWxsYmFja1Jpbmd0b25lRW5naW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFF1ZXVlQ2FsbGJhY2tSaW5ndG9uZUVuZ2luZTsKCiAgUXVldWVDYWxsYmFja1Jpbmd0b25lRW5naW5lLnByb3RvdHlwZS5fZHJpdmVSaW5ndG9uZSA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICBjb25uZWN0LmNvbnRhY3QoZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgY29udGFjdC5vbkluY29taW5nKGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoY29udGFjdC5nZXRUeXBlKCkgPT09IGxpbHkuQ29udGFjdFR5cGUuUVVFVUVfQ0FMTEJBQ0spIHsKICAgICAgICAgIHNlbGYuX3Jpbmd0b25lU2V0dXAoY29udGFjdCk7CiAgICAgICAgICBzZWxmLl9wdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIkNhbGxiYWNrIFJpbmd0b25lIENvbm5lY3RpbmciLCBjb250YWN0KTsKICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiQ2FsbGJhY2sgUmluZ3RvbmUgQ29ubmVjdGluZyIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0pOwogIH07CgogIC8qIGV4cG9ydCBjb25uZWN0LlJpbmd0b25lRW5naW5lICovCiAgY29ubmVjdC5Wb2ljZVJpbmd0b25lRW5naW5lID0gVm9pY2VSaW5ndG9uZUVuZ2luZTsKICBjb25uZWN0LkNoYXRSaW5ndG9uZUVuZ2luZSA9IENoYXRSaW5ndG9uZUVuZ2luZTsKICBjb25uZWN0LlRhc2tSaW5ndG9uZUVuZ2luZSA9IFRhc2tSaW5ndG9uZUVuZ2luZTsKICBjb25uZWN0LlF1ZXVlQ2FsbGJhY2tSaW5ndG9uZUVuZ2luZSA9IFF1ZXVlQ2FsbGJhY2tSaW5ndG9uZUVuZ2luZTsKfSkoKTsKCgovKioqLyB9KSwKCi8qKiovIDY0MjoKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKICovCihmdW5jdGlvbiAoKSB7CiAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogIGdsb2JhbC5jb25uZWN0ID0gY29ubmVjdDsKICBnbG9iYWwubGlseSA9IGNvbm5lY3Q7CiAgZ2xvYmFsLmNjcFZlcnNpb24gPSAiVjIiOwoKICB2YXIgUlRQSm9iSW50ZXJ2YWxNcyA9IDEwMDA7CiAgdmFyIHN0YXRzUmVwb3J0aW5nSm9iSW50ZXJ2YWxNcyA9IDMwMDAwOwogIHZhciBzdHJlYW1CdWZmZXJTaXplID0gNTAwOwogIHZhciBDYWxsVHlwZU1hcCA9IHt9OwogIENhbGxUeXBlTWFwW2Nvbm5lY3QuU29mdHBob25lQ2FsbFR5cGUuQVVESU9fT05MWV0gPSAnQXVkaW8nOwogIENhbGxUeXBlTWFwW2Nvbm5lY3QuU29mdHBob25lQ2FsbFR5cGUuVklERU9fT05MWV0gPSAnVmlkZW8nOwogIENhbGxUeXBlTWFwW2Nvbm5lY3QuU29mdHBob25lQ2FsbFR5cGUuQVVESU9fVklERU9dID0gJ0F1ZGlvVmlkZW8nOwogIENhbGxUeXBlTWFwW2Nvbm5lY3QuU29mdHBob25lQ2FsbFR5cGUuTk9ORV0gPSAnTm9uZSc7CiAgdmFyIEFVRElPX0lOUFVUID0gJ2F1ZGlvX2lucHV0JzsKICB2YXIgQVVESU9fT1VUUFVUID0gJ2F1ZGlvX291dHB1dCc7CgogIHZhciBNZWRpYVR5cGVNYXAgPSB7fTsKICBNZWRpYVR5cGVNYXBbY29ubmVjdC5Db250YWN0VHlwZS5WT0lDRV0gPSAiVm9pY2UiOwogIHZhciBVTktOT1dOX01FRElBX1RZUEUgPSAiVW5rbm93biI7CgogIHZhciB0aW1lU2VyaWVzU3RyZWFtU3RhdHNCdWZmZXIgPSBbXTsKICB2YXIgYWdncmVnYXRlZFVzZXJBdWRpb1N0YXRzID0ge307CiAgdmFyIGFnZ3JlZ2F0ZWRSZW1vdGVBdWRpb1N0YXRzID0ge307CiAgdmFyIHJ0cFN0YXRzSm9iID0gbnVsbDsKICB2YXIgcmVwb3J0U3RhdHNKb2IgPSBudWxsOwogIC8vTG9nZ2VyIHNwZWNpZmljIHRvIHNvZnRwaG9uZS4KICB2YXIgbG9nZ2VyID0gbnVsbDsKICB2YXIgU29mdHBob25lRXJyb3JUeXBlcyA9IGNvbm5lY3QuU29mdHBob25lRXJyb3JUeXBlczsKICB2YXIgSEFOR19VUF9NVUxUSVBMRV9TRVNTSU9OU19FVkVOVCA9ICJNdWx0aVNlc3Npb25IYW5nVXAiOwogIHZhciBNVUxUSVBMRV9TRVNTSU9OU19FVkVOVCA9ICJNdWx0aVNlc3Npb25zIjsKCiAgdmFyIGxvY2FsTWVkaWFTdHJlYW0gPSB7fTsKCiAgdmFyIHNvZnRwaG9uZUNsaWVudElkID0gY29ubmVjdC5yYW5kb21JZCgpOwoKICB2YXIgcmVxdWVzdEljZUFjY2VzcyA9IGZ1bmN0aW9uICh0cmFuc3BvcnQpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIGNvbm5lY3QuY29yZS5nZXRDbGllbnQoKS5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5DUkVBVEVfVFJBTlNQT1JULCB0cmFuc3BvcnQsIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgcmVzb2x2ZShkYXRhLnNvZnRwaG9uZVRyYW5zcG9ydC5zb2Z0cGhvbmVNZWRpYUNvbm5lY3Rpb25zKTsKICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGlmIChyZWFzb24ubWVzc2FnZSAmJiByZWFzb24ubWVzc2FnZS5pbmNsdWRlcygiU29mdHBob25lQ29ubmVjdGlvbkxpbWl0QnJlYWNoZWRFeGNlcHRpb24iKSkgewogICAgICAgICAgICBwdWJsaXNoRXJyb3IoIm11bHRpcGxlX3NvZnRwaG9uZV9hY3RpdmVfc2Vzc2lvbnMiLCAiTnVtYmVyIG9mIGFjdGl2ZSBzZXNzaW9ucyBhcmUgbW9yZSB0aGVuIGFsbG93ZWQgbGltaXQuIiwgIiIpOwogICAgICAgICAgfQogICAgICAgICAgcmVqZWN0KEVycm9yKCJyZXF1ZXN0SWNlQWNjZXNzIGZhaWxlZCIpKTsKICAgICAgICB9LAogICAgICAgIGF1dGhGYWlsdXJlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZWplY3QoRXJyb3IoIkF1dGhlbnRpY2F0aW9uIGZhaWxlZCB3aGlsZSByZXF1ZXN0SWNlQWNjZXNzIikpOwogICAgICAgIH0sCiAgICAgICAgYWNjZXNzRGVuaWVkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZWplY3QoRXJyb3IoIkFjY2VzcyBEZW5pZWQgd2hpbGUgcmVxdWVzdEljZUFjY2VzcyIpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgdmFyIFNvZnRwaG9uZU1hbmFnZXIgPSBmdW5jdGlvbiAoc29mdHBob25lUGFyYW1zKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICBsb2dnZXIgPSBuZXcgU29mdHBob25lTG9nZ2VyKGNvbm5lY3QuZ2V0TG9nKCkpOwogICAgbG9nZ2VyLmluZm8oIltTb2Z0cGhvbmUgTWFuYWdlcl0gc29mdHBob25lIG1hbmFnZXIgaW5pdGlhbGl6YXRpb24gaGFzIGJlZ3VuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIHZhciBydGNQZWVyQ29ubmVjdGlvbkZhY3Rvcnk7CiAgICBpZiAoY29ubmVjdC5SdGNQZWVyQ29ubmVjdGlvbkZhY3RvcnkpIHsKICAgICAgcnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5ID0gbmV3IGNvbm5lY3QuUnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5KGxvZ2dlciwKICAgICAgICBjb25uZWN0LmNvcmUuZ2V0V2ViU29ja2V0TWFuYWdlcigpLAogICAgICAgIHNvZnRwaG9uZUNsaWVudElkLAogICAgICAgIGNvbm5lY3QuaGl0Y2goc2VsZiwgcmVxdWVzdEljZUFjY2VzcywgewogICAgICAgICAgdHJhbnNwb3J0VHlwZTogInNvZnRwaG9uZSIsCiAgICAgICAgICBzb2Z0cGhvbmVDbGllbnRJZDogc29mdHBob25lQ2xpZW50SWQKICAgICAgICB9KSwKICAgICAgICBjb25uZWN0LmhpdGNoKHNlbGYsIHB1Ymxpc2hFcnJvcikpOwogICAgfQogICAgaWYgKCFpc0Jyb3dzZXJTb2Z0UGhvbmVTdXBwb3J0ZWQoKSkgewogICAgICBwdWJsaXNoRXJyb3IoU29mdHBob25lRXJyb3JUeXBlcy5VTlNVUFBPUlRFRF9CUk9XU0VSLAogICAgICAgICJDb25uZWN0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBicm93c2VyLiBTb21lIGZ1bmN0aW9uYWxpdHkgbWF5IG5vdCB3b3JrLiAiLAogICAgICAgICIiKTsKICAgIH0KICAgIHZhciBndW1Qcm9taXNlID0gZmV0Y2hVc2VyTWVkaWEoewogICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoc3RyZWFtKSB7CiAgICAgICAgY29ubmVjdC5jb3JlLnNldFNvZnRwaG9uZVVzZXJNZWRpYVN0cmVhbShzdHJlYW0pOwogICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiQ29ubmVjdGl2aXR5Q2hlY2tSZXN1bHQiLCBudWxsLCAKICAgICAgICB7CiAgICAgICAgICBjb25uZWN0aXZpdHlDaGVja1R5cGU6ICJNaWNyb3Bob25lUGVybWlzc2lvbiIsCiAgICAgICAgICBzdGF0dXM6ICJncmFudGVkIgogICAgICAgIH0pOwogICAgICB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgcHVibGlzaEVycm9yKGVyciwgIllvdXIgbWljcm9waG9uZSBpcyBub3QgZW5hYmxlZCBpbiB5b3VyIGJyb3dzZXIuICIsICIiKTsKICAgICAgICBwdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIkNvbm5lY3Rpdml0eUNoZWNrUmVzdWx0IiwgbnVsbCwgCiAgICAgICAgewogICAgICAgICAgY29ubmVjdGl2aXR5Q2hlY2tUeXBlOiAiTWljcm9waG9uZVBlcm1pc3Npb24iLAogICAgICAgICAgc3RhdHVzOiAiZGVuaWVkIgogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICAgIAogICAgaGFuZGxlU29mdFBob25lTXV0ZVRvZ2dsZSgpOwogICAgaGFuZGxlU3BlYWtlckRldmljZUNoYW5nZSgpOwogICAgaGFuZGxlTWljcm9waG9uZURldmljZUNoYW5nZSgpOwogICAgbW9uaXRvck1pY3JvcGhvbmVQZXJtaXNzaW9uKCk7CgogICAgdGhpcy5yaW5ndG9uZUVuZ2luZSA9IG51bGw7CiAgICB2YXIgcnRjU2Vzc2lvbnMgPSB7fTsKICAgIC8vIFRyYWNrcyB0aGUgYWdlbnQgY29ubmVjdGlvbiBJRCwgc28gdGhhdCBpZiB0aGUgc2FtZSBjb250YWN0IGdldHMgcmUtcm91dGVkIHRvIHRoZSBzYW1lIGFnZW50LCBpdCdsbCBzdGlsbCBzZXQgdXAgc29mdHBob25lCiAgICB2YXIgY2FsbHNEZXRlY3RlZCA9IHt9OwogICAgdGhpcy5vbkluaXRDb250YWN0U3ViID0ge307CiAgICB0aGlzLm9uSW5pdENvbnRhY3RTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbigpIHt9OwoKICAgIC8vIHZhcmlhYmxlcyBmb3IgZmlyZWZveCBtdWx0aXRhYgogICAgdmFyIGlzU2Vzc2lvblBlbmRpbmcgPSBmYWxzZTsKICAgIHZhciBwZW5kaW5nQ29udGFjdCA9IG51bGw7CiAgICB2YXIgcGVuZGluZ0FnZW50Q29ubmVjdGlvbklkID0gbnVsbDsKICAgIHZhciBwb3N0cG9uZVN0YXJ0aW5nU2Vzc2lvbiA9IGZ1bmN0aW9uIChjb250YWN0LCBhZ2VudENvbm5lY3Rpb25JZCkgewogICAgICBpc1Nlc3Npb25QZW5kaW5nID0gdHJ1ZTsKICAgICAgcGVuZGluZ0NvbnRhY3QgPSBjb250YWN0OwogICAgICBwZW5kaW5nQWdlbnRDb25uZWN0aW9uSWQgPSBhZ2VudENvbm5lY3Rpb25JZDsKICAgIH0KICAgIHZhciBjYW5jZWxQZW5kaW5nU2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgaXNTZXNzaW9uUGVuZGluZyA9IGZhbHNlOwogICAgICBwZW5kaW5nQ29udGFjdCA9IG51bGw7CiAgICAgIHBlbmRpbmdBZ2VudENvbm5lY3Rpb25JZCA9IG51bGw7CiAgICB9CgogICAgLy8gaGVscGVyIG1ldGhvZCB0byBwcm92aWRlIGFjY2VzcyB0byBydGMgc2Vzc2lvbnMKICAgIHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uIChjb25uZWN0aW9uSWQpIHsKICAgICAgcmV0dXJuIHJ0Y1Nlc3Npb25zW2Nvbm5lY3Rpb25JZF07CiAgICB9CgogICAgdGhpcy5yZXBsYWNlTG9jYWxNZWRpYVRyYWNrID0gZnVuY3Rpb24oY29ubmVjdGlvbklkLCB0cmFjaykgewogICAgICB2YXIgc3RyZWFtID0gbG9jYWxNZWRpYVN0cmVhbVtjb25uZWN0aW9uSWRdLnN0cmVhbTsKICAgICAgaWYoc3RyZWFtKXsKICAgICAgICB2YXIgb2xkVHJhY2sgPSBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXTsKICAgICAgICB0cmFjay5lbmFibGVkID0gb2xkVHJhY2suZW5hYmxlZDsKICAgICAgICBvbGRUcmFjay5lbmFibGVkID0gZmFsc2U7CiAgICAgICAgc3RyZWFtLnJlbW92ZVRyYWNrKG9sZFRyYWNrKTsKICAgICAgICBzdHJlYW0uYWRkVHJhY2sodHJhY2spOwogICAgICB9CiAgICB9OwoKICAgIHZhciBpc0NvbnRhY3RUZXJtaW5hdGVkID0gZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgcmV0dXJuIGNvbnRhY3QuZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db250YWN0U3RhdHVzVHlwZS5FTkRFRCB8fAogICAgICAgIGNvbnRhY3QuZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db250YWN0U3RhdHVzVHlwZS5FUlJPUiB8fAogICAgICAgIGNvbnRhY3QuZ2V0U3RhdHVzKCkudHlwZSA9PT0gY29ubmVjdC5Db250YWN0U3RhdHVzVHlwZS5NSVNTRUQ7CiAgICB9OwoKICAgIHZhciBkZXN0cm95U2Vzc2lvbiA9IGZ1bmN0aW9uIChhZ2VudENvbm5lY3Rpb25JZCkgewogICAgICBpZiAocnRjU2Vzc2lvbnMuaGFzT3duUHJvcGVydHkoYWdlbnRDb25uZWN0aW9uSWQpKSB7CiAgICAgICAgdmFyIHNlc3Npb24gPSBydGNTZXNzaW9uc1thZ2VudENvbm5lY3Rpb25JZF07CiAgICAgICAgLy8gQ3VycmVudGx5IHRoZSBhc3N1bXB0aW9uIGlzIGl0IHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIG9ubHkgYW5kIGlmIG9ubHkgaXQgYWxyZWFkeSBoYXMgYmVlbiBodW5nIHVwLgogICAgICAgIC8vIFRPRE86IFVwZGF0ZSBvbmNlIHRoZSBoYW5ndXAgQVBJIGRvZXMgbm90IHRocm93IGV4Y2VwdGlvbnMKICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICBkZWxldGUgcnRjU2Vzc2lvbnNbYWdlbnRDb25uZWN0aW9uSWRdOwogICAgICAgICAgZGVsZXRlIGNhbGxzRGV0ZWN0ZWRbYWdlbnRDb25uZWN0aW9uSWRdOwogICAgICAgICAgc2Vzc2lvbi5oYW5ndXAoKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBsaWx5LmdldExvZygpLndhcm4oIkNsZWFuIHVwIHRoZSBzZXNzaW9uIGxvY2FsbHkgIiArIGFnZW50Q29ubmVjdGlvbklkLCBlcnIubWVzc2FnZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfTsKCiAgICAvLyBXaGVuIG11bHRpcGxlIFJUQyBzZXNzaW9ucyBkZXRlY3RlZCwgaWdub3JlIHRoZSBuZXcgY2FsbCBhbmQgaGFuZyB1cCB0aGUgcHJldmlvdXMgc2Vzc2lvbnMuCiAgICAvLyBUT0RPOiBVcGRhdGUgd2hlbiBjb25uZWN0LXJ0YyBleHBvc2VzIGFuIEFQSSB0byBkZXRlY3Qgc2Vzc2lvbiBzdGF0dXMuCiAgICB2YXIgc2FuaXR5Q2hlY2tBY3RpdmVTZXNzaW9ucyA9IGZ1bmN0aW9uIChydGNTZXNzaW9ucykgewogICAgICBpZiAoT2JqZWN0LmtleXMocnRjU2Vzc2lvbnMpLmxlbmd0aCA+IDApIHsKICAgICAgICAvLyBFcnJvciEgb3VyIHN0YXRlIGRvZXNuJ3QgbWF0Y2gsIHRlYXIgaXQgYWxsIGRvd24uCiAgICAgICAgZm9yICh2YXIgY29ubmVjdGlvbklkIGluIHJ0Y1Nlc3Npb25zKSB7CiAgICAgICAgICBpZiAocnRjU2Vzc2lvbnMuaGFzT3duUHJvcGVydHkoY29ubmVjdGlvbklkKSkgewogICAgICAgICAgICAvLyBMb2cgYW4gZXJyb3IgZm9yIHRoZSBzZXNzaW9uIHdlIGFyZSBhYm91dCB0byBlbmQuCiAgICAgICAgICAgIHB1Ymxpc2hNdWx0aXBsZVNlc3Npb25zRXZlbnQoSEFOR19VUF9NVUxUSVBMRV9TRVNTSU9OU19FVkVOVCwgcnRjU2Vzc2lvbnNbY29ubmVjdGlvbklkXS5jYWxsSWQsIGNvbm5lY3Rpb25JZCk7CiAgICAgICAgICAgIGRlc3Ryb3lTZXNzaW9uKGNvbm5lY3Rpb25JZCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRocm93IG5ldyBFcnJvcigiZHVwbGljYXRlIHNlc3Npb24gZGV0ZWN0ZWQsIHJlZnVzaW5nIHRvIHNldHVwIG5ldyBjb25uZWN0aW9uIik7CiAgICAgIH0KICAgIH07CgogICAgdGhpcy5zdGFydFNlc3Npb24gPSBmdW5jdGlvbiAoX2NvbnRhY3QsIF9hZ2VudENvbm5lY3Rpb25JZCkgewogICAgICB2YXIgY29udGFjdCA9IGlzU2Vzc2lvblBlbmRpbmcgPyBwZW5kaW5nQ29udGFjdCA6IF9jb250YWN0OwogICAgICB2YXIgYWdlbnRDb25uZWN0aW9uSWQgPSBpc1Nlc3Npb25QZW5kaW5nID8gcGVuZGluZ0FnZW50Q29ubmVjdGlvbklkIDogX2FnZW50Q29ubmVjdGlvbklkOwogICAgICBpZiAoIWNvbnRhY3QgfHwgIWFnZW50Q29ubmVjdGlvbklkKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGNhbmNlbFBlbmRpbmdTZXNzaW9uKCk7CiAgICAgIAogICAgICAvLyBTZXQgdG8gdHJ1ZSwgdGhpcyB3aWxsIGJsb2NrIHN1YnNlcXVlbnQgaW52b2tlcyBmcm9tIGVudGVyaW5nLgogICAgICBjYWxsc0RldGVjdGVkW2FnZW50Q29ubmVjdGlvbklkXSA9IHRydWU7CiAgICAgIGxvZ2dlci5pbmZvKCJTb2Z0cGhvbmUgY2FsbCBkZXRlY3RlZDoiLCAiY29udGFjdElkICIgKyBjb250YWN0LmdldENvbnRhY3RJZCgpLCAiYWdlbnQgY29ubmVjdGlvbklkICIgKyBhZ2VudENvbm5lY3Rpb25JZCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKCiAgICAgIC8vIEVuc3VyZSBvdXIgc2Vzc2lvbiBzdGF0ZSBtYXRjaGVzIG91ciBjb250YWN0IHN0YXRlIHRvIHByZXZlbnQgaXNzdWVzIHNob3VsZCB3ZSBsb3NlIHRyYWNrIG9mIGEgY29udGFjdC4KICAgICAgc2FuaXR5Q2hlY2tBY3RpdmVTZXNzaW9ucyhydGNTZXNzaW9ucyk7CgogICAgICBpZiAoY29udGFjdC5nZXRTdGF0dXMoKS50eXBlID09PSBjb25uZWN0LkNvbnRhY3RTdGF0dXNUeXBlLkNPTk5FQ1RJTkcpIHsKICAgICAgICBwdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIlNvZnRwaG9uZSBDb25uZWN0aW5nIiwgY29udGFjdC5nZXRDb250YWN0SWQoKSk7CiAgICAgIH0KCiAgICAgIGluaXRpYWxpemVQYXJhbXMoKTsKICAgICAgdmFyIHNvZnRwaG9uZUluZm8gPSBjb250YWN0LmdldEFnZW50Q29ubmVjdGlvbigpLmdldFNvZnRwaG9uZU1lZGlhSW5mbygpOwogICAgICB2YXIgY2FsbENvbmZpZyA9IHBhcnNlQ2FsbENvbmZpZyhzb2Z0cGhvbmVJbmZvLmNhbGxDb25maWdKc29uKTsKICAgICAgdmFyIHdlYlNvY2tldFByb3ZpZGVyOwogICAgICBpZiAoY2FsbENvbmZpZy51c2VXZWJTb2NrZXRQcm92aWRlcikgewogICAgICAgIHdlYlNvY2tldFByb3ZpZGVyID0gY29ubmVjdC5jb3JlLmdldFdlYlNvY2tldE1hbmFnZXIoKTsKICAgICAgfQogICAgICB2YXIgc2Vzc2lvbiA9IG5ldyBjb25uZWN0LlJUQ1Nlc3Npb24oCiAgICAgICAgY2FsbENvbmZpZy5zaWduYWxpbmdFbmRwb2ludCwKICAgICAgICBjYWxsQ29uZmlnLmljZVNlcnZlcnMsCiAgICAgICAgc29mdHBob25lSW5mby5jYWxsQ29udGV4dFRva2VuLAogICAgICAgIGxvZ2dlciwKICAgICAgICBjb250YWN0LmdldENvbnRhY3RJZCgpLAogICAgICAgIGFnZW50Q29ubmVjdGlvbklkLAogICAgICAgIHdlYlNvY2tldFByb3ZpZGVyKTsKCiAgICAgIHJ0Y1Nlc3Npb25zW2FnZW50Q29ubmVjdGlvbklkXSA9IHNlc3Npb247CgogICAgICBpZiAoY29ubmVjdC5jb3JlLmdldFNvZnRwaG9uZVVzZXJNZWRpYVN0cmVhbSgpKSB7CiAgICAgICAgc2Vzc2lvbi5tZWRpYVN0cmVhbSA9IGNvbm5lY3QuY29yZS5nZXRTb2Z0cGhvbmVVc2VyTWVkaWFTdHJlYW0oKTsKICAgICAgfQoKICAgICAgLy8gQ3VzdG9tIEV2ZW50IHRvIGluZGljYXRlIHRoZSBzZXNzaW9uIGluaXQgb3BlcmF0aW9ucwogICAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgICAgZXZlbnQ6IGNvbm5lY3QuQ29ubmVjdGlvbkV2ZW50cy5TRVNTSU9OX0lOSVQsCiAgICAgICAgZGF0YTogewogICAgICAgICAgY29ubmVjdGlvbklkOiBhZ2VudENvbm5lY3Rpb25JZAogICAgICAgIH0KICAgICAgfSk7CgogICAgICBzZXNzaW9uLm9uU2Vzc2lvbkZhaWxlZCA9IGZ1bmN0aW9uIChydGNTZXNzaW9uLCByZWFzb24pIHsKICAgICAgICBkZWxldGUgcnRjU2Vzc2lvbnNbYWdlbnRDb25uZWN0aW9uSWRdOwogICAgICAgIGRlbGV0ZSBjYWxsc0RldGVjdGVkW2FnZW50Q29ubmVjdGlvbklkXTsKICAgICAgICBwdWJsaXNoU29mdHBob25lRmFpbHVyZUxvZ3MocnRjU2Vzc2lvbiwgcmVhc29uKTsKICAgICAgICBwdWJsaXNoU2Vzc2lvbkZhaWx1cmVUZWxlbWV0cnlFdmVudChjb250YWN0LmdldENvbnRhY3RJZCgpLCByZWFzb24pOwogICAgICAgIHN0b3BKb2JzQW5kUmVwb3J0KGNvbnRhY3QsIHJ0Y1Nlc3Npb24uc2Vzc2lvblJlcG9ydCk7CiAgICAgIH07CiAgICAgIHNlc3Npb24ub25TZXNzaW9uQ29ubmVjdGVkID0gZnVuY3Rpb24gKHJ0Y1Nlc3Npb24pIHsKICAgICAgICBwdWJsaXNoVGVsZW1ldHJ5RXZlbnQoIlNvZnRwaG9uZSBTZXNzaW9uIENvbm5lY3RlZCIsIGNvbnRhY3QuZ2V0Q29udGFjdElkKCkpOwogICAgICAgIC8vIEJlY29tZSBtYXN0ZXIgdG8gc2VuZCBsb2dzLCBzaW5jZSB3ZSBuZWVkIGxvZ3MgZnJvbSBzb2Z0cGhvbmUgdGFiLgogICAgICAgIGNvbm5lY3QuYmVjb21lTWFzdGVyKGNvbm5lY3QuTWFzdGVyVG9waWNzLlNFTkRfTE9HUyk7CiAgICAgICAgLy9zdGFydCBzdGF0cyBjb2xsZWN0aW9uIGFuZCByZXBvcnRpbmcgam9icwogICAgICAgIHN0YXJ0U3RhdHNDb2xsZWN0aW9uSm9iKHJ0Y1Nlc3Npb24pOwogICAgICAgIHN0YXJ0U3RhdHNSZXBvcnRpbmdKb2IoY29udGFjdCk7CiAgICAgICAgZmlyZUNvbnRhY3RBY2NlcHRlZEV2ZW50KGNvbnRhY3QpOwogICAgICB9OwoKICAgICAgc2Vzc2lvbi5vblNlc3Npb25Db21wbGV0ZWQgPSBmdW5jdGlvbiAocnRjU2Vzc2lvbikgewogICAgICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiU29mdHBob25lIFNlc3Npb24gQ29tcGxldGVkIiwgY29udGFjdC5nZXRDb250YWN0SWQoKSk7CgogICAgICAgIGRlbGV0ZSBydGNTZXNzaW9uc1thZ2VudENvbm5lY3Rpb25JZF07CiAgICAgICAgZGVsZXRlIGNhbGxzRGV0ZWN0ZWRbYWdlbnRDb25uZWN0aW9uSWRdOwogICAgICAgIC8vIFN0b3AgYWxsIGpvYnMgYW5kIHBlcmZvcm0gb25lIGxhc3Qgam9iLgogICAgICAgIHN0b3BKb2JzQW5kUmVwb3J0KGNvbnRhY3QsIHJ0Y1Nlc3Npb24uc2Vzc2lvblJlcG9ydCk7CgogICAgICAgIC8vIENsZWFudXAgdGhlIGNhY2hlZCBzdHJlYW1zCiAgICAgICAgZGVsZXRlTG9jYWxNZWRpYVN0cmVhbShhZ2VudENvbm5lY3Rpb25JZCk7CiAgICAgIH07CgogICAgICBzZXNzaW9uLm9uTG9jYWxTdHJlYW1BZGRlZCA9IGZ1bmN0aW9uIChydGNTZXNzaW9uLCBzdHJlYW0pIHsKICAgICAgICAvLyBDYWNoZSB0aGUgc3RyZWFtcyBmb3IgbXV0ZS91bm11dGUKICAgICAgICBsb2NhbE1lZGlhU3RyZWFtW2FnZW50Q29ubmVjdGlvbklkXSA9IHsKICAgICAgICAgIHN0cmVhbTogc3RyZWFtCiAgICAgICAgfTsKICAgICAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgICAgICBldmVudDogY29ubmVjdC5BZ2VudEV2ZW50cy5MT0NBTF9NRURJQV9TVFJFQU1fQ1JFQVRFRCwKICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgY29ubmVjdGlvbklkOiBhZ2VudENvbm5lY3Rpb25JZAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgc2Vzc2lvbi5yZW1vdGVBdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVtb3RlLWF1ZGlvJyk7CiAgICAgIGlmIChydGNQZWVyQ29ubmVjdGlvbkZhY3RvcnkpIHsKICAgICAgICBzZXNzaW9uLmNvbm5lY3QocnRjUGVlckNvbm5lY3Rpb25GYWN0b3J5LmdldChjYWxsQ29uZmlnLmljZVNlcnZlcnMpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXNzaW9uLmNvbm5lY3QoKTsKICAgICAgfQogICAgfQoKICAgIHZhciBvblJlZnJlc2hDb250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3QsIGFnZW50Q29ubmVjdGlvbklkKSB7CiAgICAgIGlmIChydGNTZXNzaW9uc1thZ2VudENvbm5lY3Rpb25JZF0gJiYgaXNDb250YWN0VGVybWluYXRlZChjb250YWN0KSkgewogICAgICAgIGRlc3Ryb3lTZXNzaW9uKGFnZW50Q29ubmVjdGlvbklkKTsKICAgICAgICBjYW5jZWxQZW5kaW5nU2Vzc2lvbigpOwogICAgICB9CiAgICAgIGlmIChjb250YWN0LmlzU29mdHBob25lQ2FsbCgpICYmICFjYWxsc0RldGVjdGVkW2FnZW50Q29ubmVjdGlvbklkXSAmJiAoCiAgICAgICAgY29udGFjdC5nZXRTdGF0dXMoKS50eXBlID09PSBjb25uZWN0LkNvbnRhY3RTdGF0dXNUeXBlLkNPTk5FQ1RJTkcgfHwKICAgICAgICBjb250YWN0LmdldFN0YXR1cygpLnR5cGUgPT09IGNvbm5lY3QuQ29udGFjdFN0YXR1c1R5cGUuSU5DT01JTkcpKSB7CiAgICAgICAgICBpZiAoY29ubmVjdC5pc0ZpcmVmb3hCcm93c2VyKCkgJiYgY29ubmVjdC5oYXNPdGhlckNvbm5lY3RlZENDUHMoKSkgewogICAgICAgICAgICBwb3N0cG9uZVN0YXJ0aW5nU2Vzc2lvbihjb250YWN0LCBhZ2VudENvbm5lY3Rpb25JZCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLnN0YXJ0U2Vzc2lvbihjb250YWN0LCBhZ2VudENvbm5lY3Rpb25JZCk7CiAgICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgdmFyIG9uSW5pdENvbnRhY3QgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgICB2YXIgYWdlbnRDb25uZWN0aW9uSWQgPSBjb250YWN0LmdldEFnZW50Q29ubmVjdGlvbigpLmNvbm5lY3Rpb25JZDsKICAgICAgbG9nZ2VyLmluZm8oIkNvbnRhY3QgZGV0ZWN0ZWQ6IiwgImNvbnRhY3RJZCAiICsgY29udGFjdC5nZXRDb250YWN0SWQoKSwgImFnZW50IGNvbm5lY3Rpb25JZCAiICsgYWdlbnRDb25uZWN0aW9uSWQpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CgogICAgICBpZiAoIWNhbGxzRGV0ZWN0ZWRbYWdlbnRDb25uZWN0aW9uSWRdKSB7CiAgICAgICAgY29udGFjdC5vblJlZnJlc2goZnVuY3Rpb24gKCkgewogICAgICAgICAgb25SZWZyZXNoQ29udGFjdChjb250YWN0LCBhZ2VudENvbm5lY3Rpb25JZCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CgogICAgc2VsZi5vbkluaXRDb250YWN0U3ViID0gY29ubmVjdC5jb250YWN0KG9uSW5pdENvbnRhY3QpOwoKICAgIC8vIENvbnRhY3QgYWxyZWFkeSBpbiBjb25uZWN0aW5nIHN0YXRlIHNjZW5hcmlvIC0gSW4gdGhpcyBjYXNlIGNvbnRhY3QgSU5JVCBpcyBtaXNzZWQgaGVuY2UgdGhlIE9uUmVmcmVzaCBjYWxsYmFjayBpcyBtaXNzZWQuIAogICAgbmV3IGNvbm5lY3QuQWdlbnQoKS5nZXRDb250YWN0cygpLmZvckVhY2goZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgdmFyIGFnZW50Q29ubmVjdGlvbklkID0gY29udGFjdC5nZXRBZ2VudENvbm5lY3Rpb24oKS5jb25uZWN0aW9uSWQ7CiAgICAgIGxvZ2dlci5pbmZvKCJDb250YWN0IGV4aXN0IGluIHRoZSBzbmFwc2hvdC4gUmVpbml0aWF0ZSB0aGUgQ29udGFjdCBhbmQgUlRDIHNlc3Npb24gY3JlYXRpb24gZm9yIGNvbnRhY3RJZCIgKyBjb250YWN0LmdldENvbnRhY3RJZCgpLCAiYWdlbnQgY29ubmVjdGlvbklkICIgKyBhZ2VudENvbm5lY3Rpb25JZCkKICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgb25Jbml0Q29udGFjdChjb250YWN0KTsKICAgICAgb25SZWZyZXNoQ29udGFjdChjb250YWN0LCBhZ2VudENvbm5lY3Rpb25JZCk7CiAgICB9KTsKICB9OwoKICB2YXIgZmlyZUNvbnRhY3RBY2NlcHRlZEV2ZW50ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgIHZhciBjb25kdWl0ID0gY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCk7CiAgICB2YXIgYWdlbnRDb25uZWN0aW9uID0gY29udGFjdC5nZXRBZ2VudENvbm5lY3Rpb24oKTsKICAgIGlmICghYWdlbnRDb25uZWN0aW9uKSB7CiAgICAgIGxvZ2dlci5pbmZvKCJOb3QgYWJsZSB0byByZXRyaWV2ZSB0aGUgYXV0by1hY2NlcHQgc2V0dGluZyBmcm9tIG51bGwgQWdlbnRDb25uZWN0aW9uLCBpZ25vcmluZyBldmVudCBwdWJsaXNoLi4iKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgc29mdHBob25lTWVkaWFJbmZvID0gYWdlbnRDb25uZWN0aW9uLmdldFNvZnRwaG9uZU1lZGlhSW5mbygpOwogICAgaWYgKCFzb2Z0cGhvbmVNZWRpYUluZm8pIHsKICAgICAgbG9nZ2VyLmluZm8oIk5vdCBhYmxlIHRvIHJldHJpZXZlIHRoZSBhdXRvLWFjY2VwdCBzZXR0aW5nIGZyb20gbnVsbCBTb2Z0cGhvbmVNZWRpYUluZm8sIGlnbm9yaW5nIGV2ZW50IHB1Ymxpc2guLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmIChzb2Z0cGhvbmVNZWRpYUluZm8uYXV0b0FjY2VwdCA9PT0gdHJ1ZSkgewogICAgICBsb2dnZXIuaW5mbygiQXV0by1hY2NlcHQgaXMgZW5hYmxlZCwgc2VuZGluZyBvdXQgQWNjZXB0ZWQgZXZlbnQgdG8gc3RvcCByaW5ndG9uZS4uIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgICAgZXZlbnQ6IGNvbm5lY3QuQ29udGFjdEV2ZW50cy5BQ0NFUFRFRCwKICAgICAgICBkYXRhOiBuZXcgY29ubmVjdC5Db250YWN0KGNvbnRhY3QuY29udGFjdElkKQogICAgICB9KTsKICAgICAgY29uZHVpdC5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgICAgZXZlbnQ6IGNvbm5lY3QuY29yZS5nZXRDb250YWN0RXZlbnROYW1lKGNvbm5lY3QuQ29udGFjdEV2ZW50cy5BQ0NFUFRFRCwgY29udGFjdC5jb250YWN0SWQpLAogICAgICAgIGRhdGE6IG5ldyBjb25uZWN0LkNvbnRhY3QoY29udGFjdC5jb250YWN0SWQpCiAgICAgIH0pOwogICAgfSBlbHNlIHsKICAgICAgbG9nZ2VyLmluZm8oIkF1dG8tYWNjZXB0IGlzIGRpc2FibGVkLCByaW5ndG9uZSB3aWxsIGJlIHN0b3BwZWQgYnkgdXNlciBhY3Rpb24uIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KICB9OwoKICAvLyBCaW5kIGV2ZW50cyBmb3IgbXV0ZQogIHZhciBoYW5kbGVTb2Z0UGhvbmVNdXRlVG9nZ2xlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkV2ZW50VHlwZS5NVVRFLCBtdXRlVG9nZ2xlKTsKICB9OwoKICB2YXIgaGFuZGxlU3BlYWtlckRldmljZUNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkNvbmZpZ3VyYXRpb25FdmVudHMuU0VUX1NQRUFLRVJfREVWSUNFLCBzZXRTcGVha2VyRGV2aWNlKTsKICB9CgogIHZhciBoYW5kbGVNaWNyb3Bob25lRGV2aWNlQ2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGJ1cyA9IGNvbm5lY3QuY29yZS5nZXRFdmVudEJ1cygpOwogICAgYnVzLnN1YnNjcmliZShjb25uZWN0LkNvbmZpZ3VyYXRpb25FdmVudHMuU0VUX01JQ1JPUEhPTkVfREVWSUNFLCBzZXRNaWNyb3Bob25lRGV2aWNlKTsKICB9CgogIHZhciBtb25pdG9yTWljcm9waG9uZVBlcm1pc3Npb24gPSBmdW5jdGlvbiAoKSB7CiAgICB0cnkgewogICAgICBpZiAoY29ubmVjdC5pc0Nocm9tZUJyb3dzZXIoKSAmJiBjb25uZWN0LmdldENocm9tZUJyb3dzZXJWZXJzaW9uKCkgPiA0Myl7CiAgICAgICAgbmF2aWdhdG9yLnBlcm1pc3Npb25zLnF1ZXJ5KHtuYW1lOiAnbWljcm9waG9uZSd9KQogICAgICAgIC50aGVuKGZ1bmN0aW9uKHBlcm1pc3Npb25TdGF0dXMpewogICAgICAgICAgcGVybWlzc2lvblN0YXR1cy5vbmNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJNaWNyb3Bob25lIFBlcm1pc3Npb246ICIgKyBwZXJtaXNzaW9uU3RhdHVzLnN0YXRlKTsKICAgICAgICAgICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KCJDb25uZWN0aXZpdHlDaGVja1Jlc3VsdCIsIG51bGwsIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgY29ubmVjdGl2aXR5Q2hlY2tUeXBlOiAiTWljcm9waG9uZVBlcm1pc3Npb24iLAogICAgICAgICAgICAgIHN0YXR1czogcGVybWlzc2lvblN0YXR1cy5zdGF0ZQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYocGVybWlzc2lvblN0YXR1cy5zdGF0ZSA9PT0gJ2RlbmllZCcpewogICAgICAgICAgICAgIHB1Ymxpc2hFcnJvcihTb2Z0cGhvbmVFcnJvclR5cGVzLk1JQ1JPUEhPTkVfTk9UX1NIQVJFRCwKICAgICAgICAgICAgICAgICJZb3VyIG1pY3JvcGhvbmUgaXMgbm90IGVuYWJsZWQgaW4geW91ciBicm93c2VyLiAiLAogICAgICAgICAgICAgICAgIiIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICBsb2dnZXIuZXJyb3IoIkZhaWxlZCBpbiBkZXRlY3RpbmcgbWljcm9waG9uZSBwZXJtaXNzaW9uIHN0YXR1czogIiArIGUpOwogICAgfQogIH0KCiAgLy8gTWFrZSBzdXJlIG9uY2Ugd2UgZGlzY29ubmVjdGVkIHdlIGdldCB0aGUgbXV0ZSBzdGF0ZSBiYWNrIHRvIG5vcm1hbAogIHZhciBkZWxldGVMb2NhbE1lZGlhU3RyZWFtID0gZnVuY3Rpb24gKGNvbm5lY3Rpb25JZCkgewogICAgZGVsZXRlIGxvY2FsTWVkaWFTdHJlYW1bY29ubmVjdGlvbklkXTsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuQWdlbnRFdmVudHMuTVVURV9UT0dHTEUsCiAgICAgIGRhdGE6IHsgbXV0ZWQ6IGZhbHNlIH0KICAgIH0pOwogIH07CgogIC8vIENoZWNrIGZvciB0aGUgbG9jYWwgc3RyZWFtcyBpZiBleGlzdHMgIC0gIHJldmVydCBpdAogIC8vIEFuZCBpbmZvcm0gb3RoZXIgY2xpZW50cyBhYm91dCB0aGUgY2hhbmdlIAogIHZhciBtdXRlVG9nZ2xlID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBzdGF0dXM7CiAgICBpZiAoY29ubmVjdC5rZXlzKGxvY2FsTWVkaWFTdHJlYW0pLmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGRhdGEgJiYgZGF0YS5tdXRlICE9PSB1bmRlZmluZWQpIHsKICAgICAgc3RhdHVzID0gZGF0YS5tdXRlOwogICAgfQoKICAgIGZvciAodmFyIGNvbm5lY3Rpb25JZCBpbiBsb2NhbE1lZGlhU3RyZWFtKSB7CiAgICAgIGlmIChsb2NhbE1lZGlhU3RyZWFtLmhhc093blByb3BlcnR5KGNvbm5lY3Rpb25JZCkpIHsKICAgICAgICB2YXIgbG9jYWxNZWRpYSA9IGxvY2FsTWVkaWFTdHJlYW1bY29ubmVjdGlvbklkXS5zdHJlYW07CiAgICAgICAgaWYgKGxvY2FsTWVkaWEpIHsKICAgICAgICAgIHZhciBhdWRpb1RyYWNrcyA9IGxvY2FsTWVkaWEuZ2V0QXVkaW9UcmFja3MoKVswXTsKICAgICAgICAgIGlmIChzdGF0dXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBhdWRpb1RyYWNrcy5lbmFibGVkID0gIXN0YXR1czsKICAgICAgICAgICAgbG9jYWxNZWRpYVN0cmVhbVtjb25uZWN0aW9uSWRdLm11dGVkID0gc3RhdHVzOwoKICAgICAgICAgICAgaWYgKHN0YXR1cykgewogICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJBZ2VudCBoYXMgbXV0ZWQgdGhlIGNvbnRhY3QsIGNvbm5lY3Rpb25JZCAtICAiICsgY29ubmVjdGlvbklkKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJBZ2VudCBoYXMgdW5tdXRlZCB0aGUgY29udGFjdCwgY29ubmVjdGlvbklkIC0gIiArIGNvbm5lY3Rpb25JZCkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXR1cyA9IGxvY2FsTWVkaWFTdHJlYW1bY29ubmVjdGlvbklkXS5tdXRlZCB8fCBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBjb25uZWN0LmNvcmUuZ2V0VXBzdHJlYW0oKS5zZW5kVXBzdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuQlJPQURDQVNULCB7CiAgICAgIGV2ZW50OiBjb25uZWN0LkFnZW50RXZlbnRzLk1VVEVfVE9HR0xFLAogICAgICBkYXRhOiB7IG11dGVkOiBzdGF0dXMgfQogICAgfSk7CiAgfTsKCiAgdmFyIHNldFNwZWFrZXJEZXZpY2UgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgaWYgKGNvbm5lY3Qua2V5cyhsb2NhbE1lZGlhU3RyZWFtKS5sZW5ndGggPT09IDAgfHwgIWRhdGEgfHwgIWRhdGEuZGV2aWNlSWQpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgdmFyIGRldmljZUlkID0gZGF0YS5kZXZpY2VJZDsKICAgIHZhciByZW1vdGVBdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVtb3RlLWF1ZGlvJyk7CiAgICB0cnkgewogICAgICBsb2dnZXIuaW5mbygiVHJ5aW5nIHRvIHNldCBzcGVha2VyIHRvIGRldmljZSAiICsgZGV2aWNlSWQpOwogICAgICBpZiAocmVtb3RlQXVkaW9FbGVtZW50ICYmIHR5cGVvZiByZW1vdGVBdWRpb0VsZW1lbnQuc2V0U2lua0lkID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgcmVtb3RlQXVkaW9FbGVtZW50LnNldFNpbmtJZChkZXZpY2VJZCk7CiAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgbG9nZ2VyLmVycm9yKCJGYWlsZWQgdG8gc2V0IHNwZWFrZXIgdG8gZGV2aWNlICIgKyBkZXZpY2VJZCk7CiAgICB9CgogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5Db25maWd1cmF0aW9uRXZlbnRzLlNQRUFLRVJfREVWSUNFX0NIQU5HRUQsCiAgICAgIGRhdGE6IHsgZGV2aWNlSWQ6IGRldmljZUlkIH0KICAgIH0pOwogIH0KCiAgdmFyIHNldE1pY3JvcGhvbmVEZXZpY2UgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgaWYgKGNvbm5lY3Qua2V5cyhsb2NhbE1lZGlhU3RyZWFtKS5sZW5ndGggPT09IDAgIHx8ICFkYXRhIHx8ICFkYXRhLmRldmljZUlkKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciBkZXZpY2VJZCA9IGRhdGEuZGV2aWNlSWQ7CiAgICB2YXIgc29mdHBob25lTWFuYWdlciA9IGNvbm5lY3QuY29yZS5nZXRTb2Z0cGhvbmVNYW5hZ2VyKCk7CiAgICB0cnkgewogICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IGF1ZGlvOiB7IGRldmljZUlkOiB7IGV4YWN0OiBkZXZpY2VJZCB9IH0gfSkKICAgICAgICAudGhlbihmdW5jdGlvbiAobmV3TWljcm9waG9uZVN0cmVhbSkgewogICAgICAgICAgdmFyIG5ld01pY3JvcGhvbmVUcmFjayA9IG5ld01pY3JvcGhvbmVTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXTsKICAgICAgICAgIGZvciAodmFyIGNvbm5lY3Rpb25JZCBpbiBsb2NhbE1lZGlhU3RyZWFtKSB7CiAgICAgICAgICAgIGlmIChsb2NhbE1lZGlhU3RyZWFtLmhhc093blByb3BlcnR5KGNvbm5lY3Rpb25JZCkpIHsKICAgICAgICAgICAgICB2YXIgbG9jYWxNZWRpYSA9IGxvY2FsTWVkaWFTdHJlYW1bY29ubmVjdGlvbklkXS5zdHJlYW07CiAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBzb2Z0cGhvbmVNYW5hZ2VyLmdldFNlc3Npb24oY29ubmVjdGlvbklkKTsKICAgICAgICAgICAgICAvL1JlcGxhY2UgdGhlIGF1ZGlvIHRyYWNrIGluIHRoZSBSdGNQZWVyQ29ubmVjdGlvbgogICAgICAgICAgICAgIHNlc3Npb24uX3BjLmdldFNlbmRlcnMoKVswXS5yZXBsYWNlVHJhY2sobmV3TWljcm9waG9uZVRyYWNrKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIC8vUmVwbGFjZSB0aGUgYXVkaW8gdHJhY2sgaW4gdGhlIGxvY2FsIG1lZGlhIHN0cmVhbSAoZm9yIG11dGUgLyB1bm11dGUpCiAgICAgICAgICAgICAgICBzb2Z0cGhvbmVNYW5hZ2VyLnJlcGxhY2VMb2NhbE1lZGlhVHJhY2soY29ubmVjdGlvbklkLCBuZXdNaWNyb3Bob25lVHJhY2spOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICB9IGNhdGNoKGUpIHsKICAgICAgbG9nZ2VyLmVycm9yKCJGYWlsZWQgdG8gc2V0IG1pY3JvcGhvbmUgZGV2aWNlICIgKyBkZXZpY2VJZCk7CiAgICB9CgogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5Db25maWd1cmF0aW9uRXZlbnRzLk1JQ1JPUEhPTkVfREVWSUNFX0NIQU5HRUQsCiAgICAgIGRhdGE6IHsgZGV2aWNlSWQ6IGRldmljZUlkIH0KICAgIH0pOwogIH0KCiAgdmFyIHB1Ymxpc2hTb2Z0cGhvbmVGYWlsdXJlTG9ncyA9IGZ1bmN0aW9uIChydGNTZXNzaW9uLCByZWFzb24pIHsKICAgIGlmIChyZWFzb24gPT09IGNvbm5lY3QuUlRDRXJyb3JzLklDRV9DT0xMRUNUSU9OX1RJTUVPVVQpIHsKICAgICAgdmFyIGVuZFBvaW50VXJsID0gIlxuIjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydGNTZXNzaW9uLl9pY2VTZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBydGNTZXNzaW9uLl9pY2VTZXJ2ZXJzW2ldLnVybHMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGVuZFBvaW50VXJsID0gZW5kUG9pbnRVcmwgKyBydGNTZXNzaW9uLl9pY2VTZXJ2ZXJzW2ldLnVybHNbal0gKyAiXG4iOwogICAgICAgIH0KICAgICAgfQogICAgICBwdWJsaXNoRXJyb3IoU29mdHBob25lRXJyb3JUeXBlcy5JQ0VfQ09MTEVDVElPTl9USU1FT1VULCAiSWNlIGNvbGxlY3Rpb24gdGltZWRvdXQuICIsIGVuZFBvaW50VXJsKTsKICAgIH0gZWxzZSBpZiAocmVhc29uID09PSBjb25uZWN0LlJUQ0Vycm9ycy5VU0VSX0JVU1kpIHsKICAgICAgcHVibGlzaEVycm9yKFNvZnRwaG9uZUVycm9yVHlwZXMuVVNFUl9CVVNZX0VSUk9SLAogICAgICAgICJTb2Z0cGhvbmUgY2FsbCBVc2VyQnVzeSBlcnJvci4gIiwKICAgICAgICAiIik7CiAgICB9IGVsc2UgaWYgKHJlYXNvbiA9PT0gY29ubmVjdC5SVENFcnJvcnMuU0lHTkFMTElOR19IQU5EU0hBS0VfRkFJTFVSRSkgewogICAgICBwdWJsaXNoRXJyb3IoU29mdHBob25lRXJyb3JUeXBlcy5TSUdOQUxMSU5HX0hBTkRTSEFLRV9GQUlMVVJFLAogICAgICAgICJIYW5kc2hha2luZyB3aXRoIFNpZ25hbGxpbmcgU2VydmVyICIgKyBydGNTZXNzaW9uLl9zaWduYWxpbmdVcmkgKyAiIGZhaWxlZC4gIiwKICAgICAgICBydGNTZXNzaW9uLl9zaWduYWxpbmdVcmkpOwogICAgfSBlbHNlIGlmIChyZWFzb24gPT09IGNvbm5lY3QuUlRDRXJyb3JzLkdVTV9USU1FT1VUX0ZBSUxVUkUgfHwgcmVhc29uID09PSBjb25uZWN0LlJUQ0Vycm9ycy5HVU1fT1RIRVJfRkFJTFVSRSkgewogICAgICBwdWJsaXNoRXJyb3IoU29mdHBob25lRXJyb3JUeXBlcy5NSUNST1BIT05FX05PVF9TSEFSRUQsCiAgICAgICAgIllvdXIgbWljcm9waG9uZSBpcyBub3QgZW5hYmxlZCBpbiB5b3VyIGJyb3dzZXIuICIsCiAgICAgICAgIiIpOwogICAgfSBlbHNlIGlmIChyZWFzb24gPT09IGNvbm5lY3QuUlRDRXJyb3JzLlNJR05BTExJTkdfQ09OTkVDVElPTl9GQUlMVVJFKSB7CiAgICAgIHB1Ymxpc2hFcnJvcihTb2Z0cGhvbmVFcnJvclR5cGVzLlNJR05BTExJTkdfQ09OTkVDVElPTl9GQUlMVVJFLAogICAgICAgICJVUkwgIiArIHJ0Y1Nlc3Npb24uX3NpZ25hbGluZ1VyaSArICIgY2Fubm90IGJlIHJlYWNoZWQuICIsCiAgICAgICAgcnRjU2Vzc2lvbi5fc2lnbmFsaW5nVXJpKTsKICAgIH0gZWxzZSBpZiAocmVhc29uID09PSBjb25uZWN0LlJUQ0Vycm9ycy5DQUxMX05PVF9GT1VORCkgewogICAgICAvLyBObyBuZWVkIHRvIHB1Ymxpc2ggYW55IHNvZnRwaG9uZSBlcnJvciBmb3IgdGhpcyBjYXNlLiBDQ1AgVVggd2lsbCBoYW5kbGUgdGhpcyBjYXNlLgogICAgICBsb2dnZXIuZXJyb3IoIlNvZnRwaG9uZSBjYWxsIGZhaWxlZCBkdWUgdG8gQ2FsbE5vdEZvdW5kRXhjZXB0aW9uLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICB9IGVsc2UgewogICAgICBwdWJsaXNoRXJyb3IoU29mdHBob25lRXJyb3JUeXBlcy5XRUJSVENfRVJST1IsCiAgICAgICAgIndlYnJ0YyBzeXN0ZW0gZXJyb3IuICIsCiAgICAgICAgIiIpOwogICAgfQogIH07CgogIC8qKiBQYXJzZSB0aGUgSlNPTiBlbmNvZGVkIHdlYiBjYWxsIGNvbmZpZyBpbnRvIHRoZSBkYXRhIGl0IHJlcHJlc2VudHMuICovCiAgdmFyIHBhcnNlQ2FsbENvbmZpZyA9IGZ1bmN0aW9uIChzZXJpYWxpemVkQ29uZmlnKSB7CiAgICAvLyBPdXIgdW5kZXJzY29yZSBpcyB0b28gb2xkIGZvciB1bmVzY2FwZQogICAgLy8gaHR0cHM6Ly9pc3N1ZXMuYW1hem9uLmNvbS9pc3N1ZXMvQ1NXRi0xNDY3CiAgICB2YXIgZGVjb2RlZEpTT04gPSBzZXJpYWxpemVkQ29uZmlnLnJlcGxhY2UoLyZxdW90Oy9nLCAnIicpOwogICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZEpTT04pOwogIH07CgogIHZhciBmZXRjaFVzZXJNZWRpYSA9IGZ1bmN0aW9uIChjYWxsYmFja3NJbikgewogICAgdmFyIGNhbGxiYWNrcyA9IGNhbGxiYWNrc0luIHx8IHt9OwogICAgY2FsbGJhY2tzLnN1Y2Nlc3MgPSBjYWxsYmFja3Muc3VjY2VzcyB8fCBmdW5jdGlvbiAoKSB7IH07CiAgICBjYWxsYmFja3MuZmFpbHVyZSA9IGNhbGxiYWNrcy5mYWlsdXJlIHx8IGZ1bmN0aW9uICgpIHsgfTsKCiAgICB2YXIgQ09OU1RSQUlOVCA9IHsKICAgICAgYXVkaW86IHRydWUKICAgIH07CgogICAgdmFyIHByb21pc2UgPSBudWxsOwoKICAgIGlmICh0eXBlb2YgUHJvbWlzZSAhPT0gImZ1bmN0aW9uIikgewogICAgICBjYWxsYmFja3MuZmFpbHVyZShTb2Z0cGhvbmVFcnJvclR5cGVzLlVOU1VQUE9SVEVEX0JST1dTRVIpOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzID09PSAib2JqZWN0IiAmJiB0eXBlb2YgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgcHJvbWlzZSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKENPTlNUUkFJTlQpOwoKICAgIH0gZWxzZSBpZiAodHlwZW9mIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhKENPTlNUUkFJTlQsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgIH0pOwoKICAgIH0gZWxzZSB7CiAgICAgIGNhbGxiYWNrcy5mYWlsdXJlKFNvZnRwaG9uZUVycm9yVHlwZXMuVU5TVVBQT1JURURfQlJPV1NFUik7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHN0cmVhbSkgewogICAgICB2YXIgYXVkaW9UcmFja3MgPSBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKTsKICAgICAgaWYgKGF1ZGlvVHJhY2tzICYmIGF1ZGlvVHJhY2tzLmxlbmd0aCA+IDApIHsKICAgICAgICBjYWxsYmFja3Muc3VjY2VzcyhzdHJlYW0pOwogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrcy5mYWlsdXJlKFNvZnRwaG9uZUVycm9yVHlwZXMuTUlDUk9QSE9ORV9OT1RfU0hBUkVEKTsKICAgICAgfQogICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICBjYWxsYmFja3MuZmFpbHVyZShTb2Z0cGhvbmVFcnJvclR5cGVzLk1JQ1JPUEhPTkVfTk9UX1NIQVJFRCk7CiAgICB9KTsKICAgIHJldHVybiBwcm9taXNlOwogIH07CgogIHZhciBwdWJsaXNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JUeXBlLCBtZXNzYWdlLCBlbmRQb2ludFVybCkgewogICAgbG9nZ2VyLmVycm9yKCJTb2Z0cGhvbmUgZXJyb3Igb2NjdXJyZWQgOiAiLCBlcnJvclR5cGUsCiAgICAgIG1lc3NhZ2UgfHwgIiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CgogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5BZ2VudEV2ZW50cy5TT0ZUUEhPTkVfRVJST1IsCiAgICAgIGRhdGE6IG5ldyBjb25uZWN0LlNvZnRwaG9uZUVycm9yKGVycm9yVHlwZSwgbWVzc2FnZSwgZW5kUG9pbnRVcmwpCiAgICB9KTsKICB9OwoKICB2YXIgcHVibGlzaFNlc3Npb25GYWlsdXJlVGVsZW1ldHJ5RXZlbnQgPSBmdW5jdGlvbiAoY29udGFjdElkLCByZWFzb24pIHsKICAgIHB1Ymxpc2hUZWxlbWV0cnlFdmVudCgiU29mdHBob25lIFNlc3Npb24gRmFpbGVkIiwgY29udGFjdElkLCB7CiAgICAgIGZhaWxlZFJlYXNvbjogcmVhc29uCiAgICB9KTsKICB9OwoKICB2YXIgcHVibGlzaFRlbGVtZXRyeUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY29udGFjdElkLCBkYXRhKSB7CiAgICBjb25uZWN0LnB1Ymxpc2hNZXRyaWMoewogICAgICBuYW1lOiBldmVudE5hbWUsCiAgICAgIGNvbnRhY3RJZDogY29udGFjdElkLAogICAgICBkYXRhOiBkYXRhCiAgICB9KTsKICB9OwoKICAvLyBQdWJsaXNoIHRoZSBjb250YWN0IGFuZCBhZ2VudCBpbmZvcm1hdGlvbiBpbiBhIG11bHRpcGxlIHNlc3Npb25zIHNjZW5hcmlvcwogIHZhciBwdWJsaXNoTXVsdGlwbGVTZXNzaW9uc0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgY29udGFjdElkLCBhZ2VudENvbm5lY3Rpb25JZCkgewogICAgcHVibGlzaFRlbGVtZXRyeUV2ZW50KGV2ZW50TmFtZSwgY29udGFjdElkLCBbewogICAgICBuYW1lOiAiQWdlbnRDb25uZWN0aW9uSWQiLAogICAgICB2YWx1ZTogYWdlbnRDb25uZWN0aW9uSWQKICAgIH1dKTsKICAgIGxvZ2dlci5pbmZvKCJQdWJsaXNoIG11bHRpcGxlIHNlc3Npb24gZXJyb3IgbWV0cmljcyIsIGV2ZW50TmFtZSwgImNvbnRhY3RJZCAiICsgY29udGFjdElkLCAiYWdlbnQgY29ubmVjdGlvbklkICIgKyBhZ2VudENvbm5lY3Rpb25JZCkKICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgfTsKCiAgdmFyIGlzQnJvd3NlclNvZnRQaG9uZVN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHsKICAgIC8vIEluIE9wZXJhLCB0aGUgdHJ1ZSB2ZXJzaW9uIGlzIGFmdGVyICJPcGVyYSIgb3IgYWZ0ZXIgIlZlcnNpb24iCiAgICBpZiAoY29ubmVjdC5pc09wZXJhQnJvd3NlcigpICYmIGNvbm5lY3QuZ2V0T3BlcmFCcm93c2VyVmVyc2lvbigpID4gMTcpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvLyBJbiBDaHJvbWUsIHRoZSB0cnVlIHZlcnNpb24gaXMgYWZ0ZXIgIkNocm9tZSIKICAgIGVsc2UgaWYgKGNvbm5lY3QuaXNDaHJvbWVCcm93c2VyKCkgJiYgY29ubmVjdC5nZXRDaHJvbWVCcm93c2VyVmVyc2lvbigpID4gMjIpIHsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICAvLyBJbiBGaXJlZm94LCB0aGUgdHJ1ZSB2ZXJzaW9uIGlzIGFmdGVyICJGaXJlZm94IgogICAgZWxzZSBpZiAoY29ubmVjdC5pc0ZpcmVmb3hCcm93c2VyKCkgJiYgY29ubmVjdC5nZXRGaXJlZm94QnJvd3NlclZlcnNpb24oKSA+IDIxKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH07CgogIHZhciBzZW5kU29mdHBob25lTWV0cmljcyA9IGZ1bmN0aW9uIChjb250YWN0KSB7CiAgICB2YXIgc3RyZWFtU3RhdHMgPSB0aW1lU2VyaWVzU3RyZWFtU3RhdHNCdWZmZXIuc2xpY2UoKTsKICAgIHRpbWVTZXJpZXNTdHJlYW1TdGF0c0J1ZmZlciA9IFtdOwogICAgaWYgKHN0cmVhbVN0YXRzLmxlbmd0aCA+IDApIHsKICAgICAgY29udGFjdC5zZW5kU29mdHBob25lTWV0cmljcyhzdHJlYW1TdGF0cywgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGxvZ2dlci5pbmZvKCJzZW5kU29mdHBob25lTWV0cmljcyBzdWNjZXNzIiArIEpTT04uc3RyaW5naWZ5KHN0cmVhbVN0YXRzKSkKICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgfSwKICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgbG9nZ2VyLmVycm9yKCJzZW5kU29mdHBob25lTWV0cmljcyBmYWlsZWQuIikKICAgICAgICAgICAgLndpdGhPYmplY3QoZGF0YSkKICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9OwoKICB2YXIgc2VuZFNvZnRwaG9uZVJlcG9ydCA9IGZ1bmN0aW9uIChjb250YWN0LCByZXBvcnQsIHVzZXJBdWRpb1N0YXRzLCByZW1vdGVBdWRpb1N0YXRzKSB7CiAgICByZXBvcnQuc3RyZWFtU3RhdHMgPSBbYWRkU3RyZWFtVHlwZVRvU3RhdHModXNlckF1ZGlvU3RhdHMsIEFVRElPX0lOUFVUKSwKICAgIGFkZFN0cmVhbVR5cGVUb1N0YXRzKHJlbW90ZUF1ZGlvU3RhdHMsIEFVRElPX09VVFBVVCldOwogICAgdmFyIGNhbGxSZXBvcnQgPSB7CiAgICAgIGNhbGxTdGFydFRpbWU6IHJlcG9ydC5zZXNzaW9uU3RhcnRUaW1lLAogICAgICBjYWxsRW5kVGltZTogcmVwb3J0LnNlc3Npb25FbmRUaW1lLAogICAgICBndW1UaW1lTWlsbGlzOiByZXBvcnQuZ3VtVGltZU1pbGxpcywKICAgICAgaW5pdGlhbGl6YXRpb25UaW1lTWlsbGlzOiByZXBvcnQuaW5pdGlhbGl6YXRpb25UaW1lTWlsbGlzLAogICAgICBpY2VDb2xsZWN0aW9uVGltZU1pbGxpczogcmVwb3J0LmljZUNvbGxlY3Rpb25UaW1lTWlsbGlzLAogICAgICBzaWduYWxsaW5nQ29ubmVjdFRpbWVNaWxsaXM6IHJlcG9ydC5zaWduYWxsaW5nQ29ubmVjdFRpbWVNaWxsaXMsCiAgICAgIGhhbmRzaGFraW5nVGltZU1pbGxpczogcmVwb3J0LmhhbmRzaGFraW5nVGltZU1pbGxpcywKICAgICAgcHJlVGFsa2luZ1RpbWVNaWxsaXM6IHJlcG9ydC5wcmVUYWxraW5nVGltZU1pbGxpcywKICAgICAgdGFsa2luZ1RpbWVNaWxsaXM6IHJlcG9ydC50YWxraW5nVGltZU1pbGxpcywKICAgICAgY2xlYW51cFRpbWVNaWxsaXM6IHJlcG9ydC5jbGVhbnVwVGltZU1pbGxpcywKICAgICAgaWNlQ29sbGVjdGlvbkZhaWx1cmU6IHJlcG9ydC5pY2VDb2xsZWN0aW9uRmFpbHVyZSwKICAgICAgc2lnbmFsbGluZ0Nvbm5lY3Rpb25GYWlsdXJlOiByZXBvcnQuc2lnbmFsbGluZ0Nvbm5lY3Rpb25GYWlsdXJlLAogICAgICBoYW5kc2hha2luZ0ZhaWx1cmU6IHJlcG9ydC5oYW5kc2hha2luZ0ZhaWx1cmUsCiAgICAgIGd1bU90aGVyRmFpbHVyZTogcmVwb3J0Lmd1bU90aGVyRmFpbHVyZSwKICAgICAgZ3VtVGltZW91dEZhaWx1cmU6IHJlcG9ydC5ndW1UaW1lb3V0RmFpbHVyZSwKICAgICAgY3JlYXRlT2ZmZXJGYWlsdXJlOiByZXBvcnQuY3JlYXRlT2ZmZXJGYWlsdXJlLAogICAgICBzZXRMb2NhbERlc2NyaXB0aW9uRmFpbHVyZTogcmVwb3J0LnNldExvY2FsRGVzY3JpcHRpb25GYWlsdXJlLAogICAgICB1c2VyQnVzeUZhaWx1cmU6IHJlcG9ydC51c2VyQnVzeUZhaWx1cmUsCiAgICAgIGludmFsaWRSZW1vdGVTRFBGYWlsdXJlOiByZXBvcnQuaW52YWxpZFJlbW90ZVNEUEZhaWx1cmUsCiAgICAgIG5vUmVtb3RlSWNlQ2FuZGlkYXRlRmFpbHVyZTogcmVwb3J0Lm5vUmVtb3RlSWNlQ2FuZGlkYXRlRmFpbHVyZSwKICAgICAgc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlOiByZXBvcnQuc2V0UmVtb3RlRGVzY3JpcHRpb25GYWlsdXJlLAogICAgICBzb2Z0cGhvbmVTdHJlYW1TdGF0aXN0aWNzOiByZXBvcnQuc3RyZWFtU3RhdHMKICAgIH07CiAgICBjb250YWN0LnNlbmRTb2Z0cGhvbmVSZXBvcnQoY2FsbFJlcG9ydCwgewogICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgbG9nZ2VyLmluZm8oInNlbmRTb2Z0cGhvbmVSZXBvcnQgc3VjY2VzcyIgKyBKU09OLnN0cmluZ2lmeShjYWxsUmVwb3J0KSkKICAgICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGxvZ2dlci5lcnJvcigic2VuZFNvZnRwaG9uZVJlcG9ydCBmYWlsZWQuIikKICAgICAgICAgIC53aXRoT2JqZWN0KGRhdGEpCiAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgfQogICAgfSk7CiAgfTsKCiAgdmFyIHN0YXJ0U3RhdHNDb2xsZWN0aW9uSm9iID0gZnVuY3Rpb24gKHJ0Y1Nlc3Npb24pIHsKICAgIHJ0cFN0YXRzSm9iID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgcnRjU2Vzc2lvbi5nZXRVc2VyQXVkaW9TdGF0cygpLnRoZW4oZnVuY3Rpb24gKHN0YXRzKSB7CiAgICAgICAgdmFyIHByZXZpb3VzVXNlclN0YXRzID0gYWdncmVnYXRlZFVzZXJBdWRpb1N0YXRzOwogICAgICAgIGFnZ3JlZ2F0ZWRVc2VyQXVkaW9TdGF0cyA9IHN0YXRzOwogICAgICAgIHRpbWVTZXJpZXNTdHJlYW1TdGF0c0J1ZmZlci5wdXNoKGdldFRpbWVTZXJpZXNTdGF0cyhhZ2dyZWdhdGVkVXNlckF1ZGlvU3RhdHMsIHByZXZpb3VzVXNlclN0YXRzLCBBVURJT19JTlBVVCkpOwogICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBsb2dnZXIuZGVidWcoIkZhaWxlZCB0byBnZXQgdXNlciBhdWRpbyBzdGF0cy4iLCBlcnJvcikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgfSk7CiAgICAgIHJ0Y1Nlc3Npb24uZ2V0UmVtb3RlQXVkaW9TdGF0cygpLnRoZW4oZnVuY3Rpb24gKHN0YXRzKSB7CiAgICAgICAgdmFyIHByZXZpb3VzUmVtb3RlU3RhdHMgPSBhZ2dyZWdhdGVkUmVtb3RlQXVkaW9TdGF0czsKICAgICAgICBhZ2dyZWdhdGVkUmVtb3RlQXVkaW9TdGF0cyA9IHN0YXRzOwogICAgICAgIHRpbWVTZXJpZXNTdHJlYW1TdGF0c0J1ZmZlci5wdXNoKGdldFRpbWVTZXJpZXNTdGF0cyhhZ2dyZWdhdGVkUmVtb3RlQXVkaW9TdGF0cywgcHJldmlvdXNSZW1vdGVTdGF0cywgQVVESU9fT1VUUFVUKSk7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIGxvZ2dlci5kZWJ1ZygiRmFpbGVkIHRvIGdldCByZW1vdGUgYXVkaW8gc3RhdHMuIiwgZXJyb3IpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIH0pOwogICAgfSwgMTAwMCk7CiAgfTsKCiAgdmFyIHN0YXJ0U3RhdHNSZXBvcnRpbmdKb2IgPSBmdW5jdGlvbiAoY29udGFjdCkgewogICAgcmVwb3J0U3RhdHNKb2IgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICBzZW5kU29mdHBob25lTWV0cmljcyhjb250YWN0KTsKICAgIH0sIHN0YXRzUmVwb3J0aW5nSm9iSW50ZXJ2YWxNcyk7CiAgfTsKCiAgdmFyIGluaXRpYWxpemVQYXJhbXMgPSBmdW5jdGlvbiAoKSB7CiAgICBhZ2dyZWdhdGVkVXNlckF1ZGlvU3RhdHMgPSBudWxsOwogICAgYWdncmVnYXRlZFJlbW90ZUF1ZGlvU3RhdHMgPSBudWxsOwogICAgdGltZVNlcmllc1N0cmVhbVN0YXRzQnVmZmVyID0gW107CiAgICBydHBTdGF0c0pvYiA9IG51bGw7CiAgICByZXBvcnRTdGF0c0pvYiA9IG51bGw7CiAgfTsKCiAgdmFyIGdldFRpbWVTZXJpZXNTdGF0cyA9IGZ1bmN0aW9uIChjdXJyZW50U3RhdHMsIHByZXZpb3VzU3RhdHMsIHN0cmVhbVR5cGUpIHsKICAgIGlmIChwcmV2aW91c1N0YXRzICYmIGN1cnJlbnRTdGF0cykgewogICAgICB2YXIgcGFja2V0c0xvc3QgPSBjdXJyZW50U3RhdHMucGFja2V0c0xvc3QgPiBwcmV2aW91c1N0YXRzLnBhY2tldHNMb3N0ID8gY3VycmVudFN0YXRzLnBhY2tldHNMb3N0IC0gcHJldmlvdXNTdGF0cy5wYWNrZXRzTG9zdCA6IDA7CiAgICAgIHZhciBwYWNrZXRzQ291bnQgPSBjdXJyZW50U3RhdHMucGFja2V0c0NvdW50ID4gcHJldmlvdXNTdGF0cy5wYWNrZXRzQ291bnQgPyBjdXJyZW50U3RhdHMucGFja2V0c0NvdW50IC0gcHJldmlvdXNTdGF0cy5wYWNrZXRzQ291bnQgOiAwOwogICAgICByZXR1cm4gbmV3IFJUUFN0cmVhbVN0YXRzKGN1cnJlbnRTdGF0cy50aW1lc3RhbXAsCiAgICAgICAgcGFja2V0c0xvc3QsCiAgICAgICAgcGFja2V0c0NvdW50LAogICAgICAgIHN0cmVhbVR5cGUsCiAgICAgICAgY3VycmVudFN0YXRzLmF1ZGlvTGV2ZWwsCiAgICAgICAgY3VycmVudFN0YXRzLmpiTWlsbGlzZWNvbmRzLAogICAgICAgIGN1cnJlbnRTdGF0cy5ydHRNaWxsaXNlY29uZHMpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIG5ldyBSVFBTdHJlYW1TdGF0cyhjdXJyZW50U3RhdHMudGltZXN0YW1wLAogICAgICAgIGN1cnJlbnRTdGF0cy5wYWNrZXRzTG9zdCwKICAgICAgICBjdXJyZW50U3RhdHMucGFja2V0c0NvdW50LAogICAgICAgIHN0cmVhbVR5cGUsCiAgICAgICAgY3VycmVudFN0YXRzLmF1ZGlvTGV2ZWwsCiAgICAgICAgY3VycmVudFN0YXRzLmpiTWlsbGlzZWNvbmRzLAogICAgICAgIGN1cnJlbnRTdGF0cy5ydHRNaWxsaXNlY29uZHMpOwogICAgfQogIH07CgogIHZhciBzdG9wSm9iID0gZnVuY3Rpb24gKHRhc2spIHsKICAgIGlmICh0YXNrICE9PSBudWxsKSB7CiAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRhc2spOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfTsKCiAgdmFyIHN0b3BKb2JzQW5kUmVwb3J0ID0gZnVuY3Rpb24gKGNvbnRhY3QsIHNlc3Npb25SZXBvcnQpIHsKICAgIHJ0cFN0YXRzSm9iID0gc3RvcEpvYihydHBTdGF0c0pvYik7CiAgICByZXBvcnRTdGF0c0pvYiA9IHN0b3BKb2IocmVwb3J0U3RhdHNKb2IpOwogICAgc2VuZFNvZnRwaG9uZVJlcG9ydChjb250YWN0LCBzZXNzaW9uUmVwb3J0LCBhZGRTdHJlYW1UeXBlVG9TdGF0cyhhZ2dyZWdhdGVkVXNlckF1ZGlvU3RhdHMsIEFVRElPX0lOUFVUKSwgYWRkU3RyZWFtVHlwZVRvU3RhdHMoYWdncmVnYXRlZFJlbW90ZUF1ZGlvU3RhdHMsIEFVRElPX09VVFBVVCkpOwogICAgc2VuZFNvZnRwaG9uZU1ldHJpY3MoY29udGFjdCk7CiAgfTsKCiAgLyoqCiAgKiAgIEFkZGluZyBzdHJlYW10eXBlIHBhcmFtZXRlciBvbiB0b3Agb2YgUlRDSlMgUlRTdGF0cyBvYmplY3QuCiAgKi8KICB2YXIgUlRQU3RyZWFtU3RhdHMgPSBmdW5jdGlvbiAodGltZXN0YW1wLCBwYWNrZXRzTG9zdCwgcGFja2V0c0NvdW50LCBzdHJlYW1UeXBlLCBhdWRpb0xldmVsLCBqaXR0ZXJCdWZmZXJNaWxsaXMsIHJvdW5kVHJpcFRpbWVNaWxsaXMpIHsKICAgIHRoaXMuc29mdHBob25lU3RyZWFtVHlwZSA9IHN0cmVhbVR5cGU7CiAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDsKICAgIHRoaXMucGFja2V0c0xvc3QgPSBwYWNrZXRzTG9zdDsKICAgIHRoaXMucGFja2V0c0NvdW50ID0gcGFja2V0c0NvdW50OwogICAgdGhpcy5hdWRpb0xldmVsID0gYXVkaW9MZXZlbDsKICAgIHRoaXMuaml0dGVyQnVmZmVyTWlsbGlzID0gaml0dGVyQnVmZmVyTWlsbGlzOwogICAgdGhpcy5yb3VuZFRyaXBUaW1lTWlsbGlzID0gcm91bmRUcmlwVGltZU1pbGxpczsKICB9OwoKICB2YXIgYWRkU3RyZWFtVHlwZVRvU3RhdHMgPSBmdW5jdGlvbiAoc3RhdHMsIHN0cmVhbVR5cGUpIHsKICAgIHN0YXRzID0gc3RhdHMgfHwge307CiAgICByZXR1cm4gbmV3IFJUUFN0cmVhbVN0YXRzKHN0YXRzLnRpbWVzdGFtcCwgc3RhdHMucGFja2V0c0xvc3QsIHN0YXRzLnBhY2tldHNDb3VudCwgc3RyZWFtVHlwZSwgc3RhdHMuYXVkaW9MZXZlbCk7CiAgfTsKCiAgdmFyIFNvZnRwaG9uZUxvZ2dlciA9IGZ1bmN0aW9uIChsb2dnZXIpIHsKICAgIHRoaXMuX29yaWdpbmFsTG9nZ2VyID0gbG9nZ2VyOwogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdGhpcy5fdGVlID0gZnVuY3Rpb24gKGxldmVsLCBtZXRob2QpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBjYWxsIHRoZSBvcmlnaW5hbCBsb2dnZXIgb2JqZWN0IHRvIG91dHB1dCB0byBicm93c2VyCiAgICAgICAgLy9Db25uZWN0IGxvZ2dlciBmb2xsb3dzICVzIGZvcm1hdCB0byBwcmludCBvYmplY3RzIHRvIGNvbnNvbGUuCiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHNbMF0pOwogICAgICAgIHZhciBmb3JtYXQgPSAiIjsKICAgICAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgZm9ybWF0ID0gZm9ybWF0ICsgIiAlcyI7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseShzZWxmLl9vcmlnaW5hbExvZ2dlciwgW2Nvbm5lY3QuTG9nQ29tcG9uZW50LlNPRlRQSE9ORSwgZm9ybWF0XS5jb25jYXQoYXJncykpOwogICAgICB9OwogICAgfTsKICB9OwoKICBTb2Z0cGhvbmVMb2dnZXIucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX3RlZSgxLCB0aGlzLl9vcmlnaW5hbExvZ2dlci5kZWJ1ZykoYXJndW1lbnRzKTsKICB9OwogIFNvZnRwaG9uZUxvZ2dlci5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl90ZWUoMiwgdGhpcy5fb3JpZ2luYWxMb2dnZXIuaW5mbykoYXJndW1lbnRzKTsKICB9OwogIFNvZnRwaG9uZUxvZ2dlci5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX3RlZSgzLCB0aGlzLl9vcmlnaW5hbExvZ2dlci5sb2cpKGFyZ3VtZW50cyk7CiAgfTsKICBTb2Z0cGhvbmVMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5fdGVlKDQsIHRoaXMuX29yaWdpbmFsTG9nZ2VyLndhcm4pKGFyZ3VtZW50cyk7CiAgfTsKICBTb2Z0cGhvbmVMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuX3RlZSg1LCB0aGlzLl9vcmlnaW5hbExvZ2dlci5lcnJvcikoYXJndW1lbnRzKTsKICB9OwoKICBjb25uZWN0LlNvZnRwaG9uZU1hbmFnZXIgPSBTb2Z0cGhvbmVNYW5hZ2VyOwp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gOTQ0OgovKioqLyAoKCkgPT4gewoKLyohIEBsaWNlbnNlIHNwcmludGYuanMgfCBDb3B5cmlnaHQgKGMpIDIwMDctMjAxMyBBbGV4YW5kcnUgTWFyYXN0ZWFudSA8aGVsbG8gYXQgYWxleGVpIGRvdCBybz4gfCAzIGNsYXVzZSBCU0QgbGljZW5zZSAqLwoKKGZ1bmN0aW9uKCkgewogICB2YXIgY3R4ID0gdGhpczsKCgl2YXIgc3ByaW50ZiA9IGZ1bmN0aW9uKCkgewoJCWlmICghc3ByaW50Zi5jYWNoZS5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHNbMF0pKSB7CgkJCXNwcmludGYuY2FjaGVbYXJndW1lbnRzWzBdXSA9IHNwcmludGYucGFyc2UoYXJndW1lbnRzWzBdKTsKCQl9CgkJcmV0dXJuIHNwcmludGYuZm9ybWF0LmNhbGwobnVsbCwgc3ByaW50Zi5jYWNoZVthcmd1bWVudHNbMF1dLCBhcmd1bWVudHMpOwoJfTsKCglzcHJpbnRmLmZvcm1hdCA9IGZ1bmN0aW9uKHBhcnNlX3RyZWUsIGFyZ3YpIHsKCQl2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgbm9kZV90eXBlID0gJycsIGFyZywgb3V0cHV0ID0gW10sIGksIGssIG1hdGNoLCBwYWQsIHBhZF9jaGFyYWN0ZXIsIHBhZF9sZW5ndGg7CgkJZm9yIChpID0gMDsgaSA8IHRyZWVfbGVuZ3RoOyBpKyspIHsKCQkJbm9kZV90eXBlID0gZ2V0X3R5cGUocGFyc2VfdHJlZVtpXSk7CgkJCWlmIChub2RlX3R5cGUgPT09ICdzdHJpbmcnKSB7CgkJCQlvdXRwdXQucHVzaChwYXJzZV90cmVlW2ldKTsKCQkJfQoJCQllbHNlIGlmIChub2RlX3R5cGUgPT09ICdhcnJheScpIHsKCQkJCW1hdGNoID0gcGFyc2VfdHJlZVtpXTsgLy8gY29udmVuaWVuY2UgcHVycG9zZXMgb25seQoJCQkJaWYgKG1hdGNoWzJdKSB7IC8vIGtleXdvcmQgYXJndW1lbnQKCQkJCQlhcmcgPSBhcmd2W2N1cnNvcl07CgkJCQkJZm9yIChrID0gMDsgayA8IG1hdGNoWzJdLmxlbmd0aDsgaysrKSB7CgkJCQkJCWlmICghYXJnLmhhc093blByb3BlcnR5KG1hdGNoWzJdW2tdKSkgewoJCQkJCQkJdGhyb3coc3ByaW50ZignW3NwcmludGZdIHByb3BlcnR5ICIlcyIgZG9lcyBub3QgZXhpc3QnLCBtYXRjaFsyXVtrXSkpOwoJCQkJCQl9CgkJCQkJCWFyZyA9IGFyZ1ttYXRjaFsyXVtrXV07CgkJCQkJfQoJCQkJfQoJCQkJZWxzZSBpZiAobWF0Y2hbMV0pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpCgkJCQkJYXJnID0gYXJndlttYXRjaFsxXV07CgkJCQl9CgkJCQllbHNlIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoaW1wbGljaXQpCgkJCQkJYXJnID0gYXJndltjdXJzb3IrK107CgkJCQl9CgoJCQkJaWYgKC9bXnNdLy50ZXN0KG1hdGNoWzhdKSAmJiAoZ2V0X3R5cGUoYXJnKSAhPSAnbnVtYmVyJykpIHsKCQkJCQl0aHJvdyhzcHJpbnRmKCdbc3ByaW50Zl0gZXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgJXMnLCBnZXRfdHlwZShhcmcpKSk7CgkJCQl9CgkJCQlzd2l0Y2ggKG1hdGNoWzhdKSB7CgkJCQkJY2FzZSAnYic6IGFyZyA9IGFyZy50b1N0cmluZygyKTsgYnJlYWs7CgkJCQkJY2FzZSAnYyc6IGFyZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJnKTsgYnJlYWs7CgkJCQkJY2FzZSAnZCc6IGFyZyA9IHBhcnNlSW50KGFyZywgMTApOyBicmVhazsKCQkJCQljYXNlICdlJzogYXJnID0gbWF0Y2hbN10gPyBhcmcudG9FeHBvbmVudGlhbChtYXRjaFs3XSkgOiBhcmcudG9FeHBvbmVudGlhbCgpOyBicmVhazsKCQkJCQljYXNlICdmJzogYXJnID0gbWF0Y2hbN10gPyBwYXJzZUZsb2F0KGFyZykudG9GaXhlZChtYXRjaFs3XSkgOiBwYXJzZUZsb2F0KGFyZyk7IGJyZWFrOwoJCQkJCWNhc2UgJ28nOiBhcmcgPSBhcmcudG9TdHJpbmcoOCk7IGJyZWFrOwoJCQkJCWNhc2UgJ3MnOiBhcmcgPSAoKGFyZyA9IFN0cmluZyhhcmcpKSAmJiBtYXRjaFs3XSA/IGFyZy5zdWJzdHJpbmcoMCwgbWF0Y2hbN10pIDogYXJnKTsgYnJlYWs7CgkJCQkJY2FzZSAndSc6IGFyZyA9IGFyZyA+Pj4gMDsgYnJlYWs7CgkJCQkJY2FzZSAneCc6IGFyZyA9IGFyZy50b1N0cmluZygxNik7IGJyZWFrOwoJCQkJCWNhc2UgJ1gnOiBhcmcgPSBhcmcudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IGJyZWFrOwoJCQkJfQoJCQkJYXJnID0gKC9bZGVmXS8udGVzdChtYXRjaFs4XSkgJiYgbWF0Y2hbM10gJiYgYXJnID49IDAgPyAnKycrIGFyZyA6IGFyZyk7CgkJCQlwYWRfY2hhcmFjdGVyID0gbWF0Y2hbNF0gPyBtYXRjaFs0XSA9PSAnMCcgPyAnMCcgOiBtYXRjaFs0XS5jaGFyQXQoMSkgOiAnICc7CgkJCQlwYWRfbGVuZ3RoID0gbWF0Y2hbNl0gLSBTdHJpbmcoYXJnKS5sZW5ndGg7CgkJCQlwYWQgPSBtYXRjaFs2XSA/IHN0cl9yZXBlYXQocGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCkgOiAnJzsKCQkJCW91dHB1dC5wdXNoKG1hdGNoWzVdID8gYXJnICsgcGFkIDogcGFkICsgYXJnKTsKCQkJfQoJCX0KCQlyZXR1cm4gb3V0cHV0LmpvaW4oJycpOwoJfTsKCglzcHJpbnRmLmNhY2hlID0ge307CgoJc3ByaW50Zi5wYXJzZSA9IGZ1bmN0aW9uKGZtdCkgewoJCXZhciBfZm10ID0gZm10LCBtYXRjaCA9IFtdLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lcyA9IDA7CgkJd2hpbGUgKF9mbXQpIHsKCQkJaWYgKChtYXRjaCA9IC9eW15ceDI1XSsvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7CgkJCQlwYXJzZV90cmVlLnB1c2gobWF0Y2hbMF0pOwoJCQl9CgkJCWVsc2UgaWYgKChtYXRjaCA9IC9eXHgyNXsyfS8uZXhlYyhfZm10KSkgIT09IG51bGwpIHsKCQkJCXBhcnNlX3RyZWUucHVzaCgnJScpOwoJCQl9CgkJCWVsc2UgaWYgKChtYXRjaCA9IC9eXHgyNSg/OihbMS05XVxkKilcJHxcKChbXlwpXSspXCkpPyhcKyk/KDB8J1teJF0pPygtKT8oXGQrKT8oPzpcLihcZCspKT8oW2ItZm9zdXhYXSkvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7CgkJCQlpZiAobWF0Y2hbMl0pIHsKCQkJCQlhcmdfbmFtZXMgfD0gMTsKCQkJCQl2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdOwoJCQkJCWlmICgoZmllbGRfbWF0Y2ggPSAvXihbYS16X11bYS16X1xkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7CgkJCQkJCWZpZWxkX2xpc3QucHVzaChmaWVsZF9tYXRjaFsxXSk7CgkJCQkJCXdoaWxlICgocmVwbGFjZW1lbnRfZmllbGQgPSByZXBsYWNlbWVudF9maWVsZC5zdWJzdHJpbmcoZmllbGRfbWF0Y2hbMF0ubGVuZ3RoKSkgIT09ICcnKSB7CgkJCQkJCQlpZiAoKGZpZWxkX21hdGNoID0gL15cLihbYS16X11bYS16X1xkXSopL2kuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7CgkJCQkJCQkJZmllbGRfbGlzdC5wdXNoKGZpZWxkX21hdGNoWzFdKTsKCQkJCQkJCX0KCQkJCQkJCWVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IC9eXFsoXGQrKVxdLy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHsKCQkJCQkJCQlmaWVsZF9saXN0LnB1c2goZmllbGRfbWF0Y2hbMV0pOwoJCQkJCQkJfQoJCQkJCQkJZWxzZSB7CgkJCQkJCQkJdGhyb3coJ1tzcHJpbnRmXSBodWg/Jyk7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQkJZWxzZSB7CgkJCQkJCXRocm93KCdbc3ByaW50Zl0gaHVoPycpOwoJCQkJCX0KCQkJCQltYXRjaFsyXSA9IGZpZWxkX2xpc3Q7CgkJCQl9CgkJCQllbHNlIHsKCQkJCQlhcmdfbmFtZXMgfD0gMjsKCQkJCX0KCQkJCWlmIChhcmdfbmFtZXMgPT09IDMpIHsKCQkJCQl0aHJvdygnW3NwcmludGZdIG1peGluZyBwb3NpdGlvbmFsIGFuZCBuYW1lZCBwbGFjZWhvbGRlcnMgaXMgbm90ICh5ZXQpIHN1cHBvcnRlZCcpOwoJCQkJfQoJCQkJcGFyc2VfdHJlZS5wdXNoKG1hdGNoKTsKCQkJfQoJCQllbHNlIHsKCQkJCXRocm93KCdbc3ByaW50Zl0gaHVoPycpOwoJCQl9CgkJCV9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpOwoJCX0KCQlyZXR1cm4gcGFyc2VfdHJlZTsKCX07CgoJdmFyIHZzcHJpbnRmID0gZnVuY3Rpb24oZm10LCBhcmd2LCBfYXJndikgewoJCV9hcmd2ID0gYXJndi5zbGljZSgwKTsKCQlfYXJndi5zcGxpY2UoMCwgMCwgZm10KTsKCQlyZXR1cm4gc3ByaW50Zi5hcHBseShudWxsLCBfYXJndik7Cgl9OwoKCS8qKgoJICogaGVscGVycwoJICovCglmdW5jdGlvbiBnZXRfdHlwZSh2YXJpYWJsZSkgewoJCXJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFyaWFibGUpLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpOwoJfQoKCWZ1bmN0aW9uIHN0cl9yZXBlYXQoaW5wdXQsIG11bHRpcGxpZXIpIHsKCQlmb3IgKHZhciBvdXRwdXQgPSBbXTsgbXVsdGlwbGllciA+IDA7IG91dHB1dFstLW11bHRpcGxpZXJdID0gaW5wdXQpIHsvKiBkbyBub3RoaW5nICovfQoJCXJldHVybiBvdXRwdXQuam9pbignJyk7Cgl9CgoJLyoqCgkgKiBleHBvcnQgdG8gZWl0aGVyIGJyb3dzZXIgb3Igbm9kZS5qcwoJICovCgljdHguc3ByaW50ZiA9IHNwcmludGY7CgljdHgudnNwcmludGYgPSB2c3ByaW50ZjsKfSkoKTsKCgoKLyoqKi8gfSksCgovKioqLyA4MjoKLyoqKi8gKCgpID0+IHsKCi8qCiAqIENvcHlyaWdodCAyMDE0LTIwMTcgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KICoKICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAKICovCihmdW5jdGlvbigpIHsKICAgdmFyIGdsb2JhbCA9IHRoaXM7CiAgIGNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTsKICAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwogICBnbG9iYWwubGlseSA9IGNvbm5lY3Q7CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgU3RyZWFtCiAgICAqCiAgICAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IGZyb20gd2hpY2ggbWVzc2FnZXMgY2FuIGJlIHJlYWQgYW5kIHRvIHdoaWNoCiAgICAqIG1lc3NhZ2VzIGNhbiBiZSBzZW50LgogICAgKi8KICAgdmFyIFN0cmVhbSA9IGZ1bmN0aW9uKCkge307CgogICAvKioKICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHN0cmVhbS4gIFRoaXMgbWV0aG9kIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3Nlcy4KICAgICovCiAgIFN0cmVhbS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgdGhyb3cgbmV3IGNvbm5lY3QuTm90SW1wbGVtZW50ZWRFcnJvcigpOwogICB9OwoKICAgLyoqCiAgICAqIFByb3ZpZGUgYSBtZXRob2QgdG8gYmUgY2FsbGVkIHdoZW4gbWVzc2FnZXMgYXJlIHJlY2VpdmVkIGZyb20gdGhpcyBzdHJlYW0uCiAgICAqIFRoaXMgbWV0aG9kIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3Nlcy4KICAgICovCiAgIFN0cmVhbS5wcm90b3R5cGUub25NZXNzYWdlID0gZnVuY3Rpb24oZikgewogICAgICB0aHJvdyBuZXcgY29ubmVjdC5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7CiAgIH07CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgTnVsbFN0cmVhbSBleHRlbmRzIFN0cmVhbQogICAgKgogICAgKiBBIG51bGwgc3RyZWFtIHdoaWNoIHByb3ZpZGVzIG5vIG1lc3NhZ2Ugc2VuZGluZyBvciByZWNlaXZpbmcgZmFjaWxpdGllcy4KICAgICovCiAgIHZhciBOdWxsU3RyZWFtID0gZnVuY3Rpb24oKSB7CiAgICAgIFN0cmVhbS5jYWxsKHRoaXMpOwogICB9OwogICBOdWxsU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3RyZWFtLnByb3RvdHlwZSk7CiAgIE51bGxTdHJlYW0ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVsbFN0cmVhbTsKCiAgIE51bGxTdHJlYW0ucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uKGYpIHt9OwogICBOdWxsU3RyZWFtLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge307CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgV2luZG93U3RyZWFtIGV4dGVuZHMgU3RyZWFtCiAgICAqCiAgICAqIEEgc3RyZWFtIGZvciBjb21tdW5pY2F0aW5nIHdpdGggYSB3aW5kb3cgb2JqZWN0LiAgVGhlIGRvbWFpbiBwcm92aWRlZAogICAgKiBtdXN0IG1hdGNoIHRoZSBhbGxvd2VkIG1lc3NhZ2UgZG9tYWlucyBvZiB0aGUgZG93bnN0cmVhbSByZWNlaXZlcgogICAgKiBvciBtZXNzYWdlcyB3aWxsIGJlIHJlamVjdGVkLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3N0TWVzc2FnZQogICAgKiBmb3IgbW9yZSBpbmZvLgogICAgKi8KICAgdmFyIFdpbmRvd1N0cmVhbSA9IGZ1bmN0aW9uKHdpbiwgZG9tYWluKSB7CiAgICAgIFN0cmVhbS5jYWxsKHRoaXMpOwogICAgICB0aGlzLndpbmRvdyA9IHdpbjsKICAgICAgdGhpcy5kb21haW4gPSBkb21haW4gfHwgJyonOwogICB9OwogICBXaW5kb3dTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJlYW0ucHJvdG90eXBlKTsKICAgV2luZG93U3RyZWFtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpbmRvd1N0cmVhbTsKCiAgIFdpbmRvd1N0cmVhbS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgdGhpcy53aW5kb3cucG9zdE1lc3NhZ2UobWVzc2FnZSwgdGhpcy5kb21haW4pOwogICB9OwoKICAgV2luZG93U3RyZWFtLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbihmKSB7CiAgICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCBmKTsKICAgfTsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgKiBjbGFzcyBXaW5kb3dJT1N0cmVhbSBleHRlbmRzIFN0cmVhbQogICAgKgogICAgKiBBIHN0cmVhbSB1c2VkIGJ5IElGcmFtZS9wb3B1cCB3aW5kb3dzIHRvIGNvbW11bmljYXRlIHdpdGggdGhlaXIgcGFyZW50cwogICAgKiBhbmQgdmlzZSB2ZXJzYS4KICAgICoKICAgICogVGhpcyBvYmplY3QgZW5jYXBzdWxhdGVzIHRoZSBmYWN0IHRoYXQgaW5jb21pbmcgYW5kIG91dGdvaW5nIG1lc3NhZ2VzCiAgICAqIGFycml2ZSBvbiBkaWZmZXJlbnQgd2luZG93cyBhbmQgYWxsb3dzIHRoaXMgdG8gYmUgbWFuYWdlZCBhcyBhIHNpbmdsZQogICAgKiBTdHJlYW0gb2JqZWN0LgogICAgKi8KICAgdmFyIFdpbmRvd0lPU3RyZWFtID0gZnVuY3Rpb24oaW5wdXR3aW4sIG91dHB1dHdpbiwgZG9tYWluKSB7CiAgICAgIFN0cmVhbS5jYWxsKHRoaXMpOwogICAgICB0aGlzLmlucHV0ID0gaW5wdXR3aW47CiAgICAgIHRoaXMub3V0cHV0ID0gb3V0cHV0d2luOwogICAgICB0aGlzLmRvbWFpbiA9IGRvbWFpbiB8fCAnKic7CiAgIH07CiAgIFdpbmRvd0lPU3RyZWFtLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3RyZWFtLnByb3RvdHlwZSk7CiAgIFdpbmRvd0lPU3RyZWFtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpbmRvd0lPU3RyZWFtOwoKICAgV2luZG93SU9TdHJlYW0ucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbihtZXNzYWdlKSB7CiAgICAgIHRoaXMub3V0cHV0LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRoaXMuZG9tYWluKTsKICAgfTsKCiAgIFdpbmRvd0lPU3RyZWFtLnByb3RvdHlwZS5vbk1lc3NhZ2UgPSBmdW5jdGlvbihmKSB7CiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChtZXNzYWdlKSA9PiB7CiAgICAgICAgIGlmIChtZXNzYWdlLnNvdXJjZSA9PT0gdGhpcy5vdXRwdXQpIHsKICAgICAgICAgICAgZihtZXNzYWdlKTsKICAgICAgICAgfQogICAgICB9KTsKICAgfTsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgKiBjbGFzcyBQb3J0U3RyZWFtIGV4dGVuZHMgU3RyZWFtCiAgICAqCiAgICAqIEEgc3RyZWFtIHdyYXBwaW5nIGFuIEhUTUw1IFdvcmtlciBwb3J0LiAgVGhpcyBjb3VsZCBiZSB0aGUgcG9ydAogICAgKiB1c2VkIHRvIGNvbm5lY3QgdG8gYSBXb3JrZXIgb3Igb25lIG9mIHRoZSBtdWx0aXR1ZGUgb2YgcG9ydHMKICAgICogbWFkZSBhdmFpbGFibGUgdG8gYSBTaGFyZWRXb3JrZXIgZm9yIGNvbW11bmljYXRpb24gYmFjayB0bwogICAgKiBpdHMgY29ubmVjdGVkIGNsaWVudHMuCiAgICAqLwogICB2YXIgUG9ydFN0cmVhbSA9IGZ1bmN0aW9uKHBvcnQpIHsKICAgICAgU3RyZWFtLmNhbGwodGhpcyk7CiAgICAgIHRoaXMucG9ydCA9IHBvcnQ7CiAgICAgIHRoaXMuaWQgPSBjb25uZWN0LnJhbmRvbUlkKCk7CiAgIH07CiAgIFBvcnRTdHJlYW0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJlYW0ucHJvdG90eXBlKTsKICAgUG9ydFN0cmVhbS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQb3J0U3RyZWFtOwoKICAgUG9ydFN0cmVhbS5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHsKICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwogICB9OwoKICAgUG9ydFN0cmVhbS5wcm90b3R5cGUub25NZXNzYWdlID0gZnVuY3Rpb24oZikgewogICAgICB0aGlzLnBvcnQuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIGYpOwogICB9OwoKICAgUG9ydFN0cmVhbS5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuaWQ7CiAgIH07CgogICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogY2xhc3MgU3RyZWFtTXVsdGlwbGV4ZXIgZXh0ZW5kcyBTdHJlYW0KICAgICoKICAgICogQSB3cmFwcGVyIGZvciBtdWx0aXBsZXhlZCBkb3duc3RyZWFtIGNvbW11bmljYXRpb24gd2l0aAogICAgKiBtdWx0aXBsZSBzdHJlYW1zIGF0IG9uY2UuICBNYWlubHkgdXNlZnVsIGZvciB0aGUgU2hhcmVkV29ya2VyIHRvCiAgICAqIGJyb2FkY2FzdCBldmVudHMgdG8gbWFueSBQb3J0U3RyZWFtIG9iamVjdHMgYXQgb25jZS4KICAgICovCiAgIHZhciBTdHJlYW1NdWx0aXBsZXhlciA9IGZ1bmN0aW9uKHN0cmVhbXMpIHsKICAgICAgU3RyZWFtLmNhbGwodGhpcyk7CiAgICAgIHRoaXMuc3RyZWFtTWFwID0gc3RyZWFtcyA/CiAgICAgICAgIGNvbm5lY3QuaW5kZXgoc3RyZWFtcywgZnVuY3Rpb24ocykgeyByZXR1cm4gcy5nZXRJZCgpOyB9KSA6IHt9OwogICAgICB0aGlzLm1lc3NhZ2VMaXN0ZW5lcnMgPSBbXTsKICAgfTsKICAgU3RyZWFtTXVsdGlwbGV4ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdHJlYW0ucHJvdG90eXBlKTsKICAgU3RyZWFtTXVsdGlwbGV4ZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3RyZWFtTXVsdGlwbGV4ZXI7CgogICAvKioKICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gYWxsIHBvcnRzIGluIHRoZSBtdWx0aXBsZXhlci4KICAgICovCiAgIFN0cmVhbU11bHRpcGxleGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkgewogICAgICB0aGlzLmdldFN0cmVhbXMoKS5mb3JFYWNoKGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICB0cnkgewogICAgICAgICAgICBzdHJlYW0uc2VuZChtZXNzYWdlKTsKCiAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgLy8gQ291bGRuJ3Qgc2VuZCBtZXNzYWdlIHRvIG9uZSBvZiB0aGUgZG93bnN0cmVhbXMgZm9yIHNvbWUgcmVhc29uLi4uCiAgICAgICAgICAgIC8vIE5vIHJlbGlhYmxlIGxvZ2dpbmcgcG9zc2libGUgd2l0aG91dCBmdXJ0aGVyIGZhaWx1cmVzLAogICAgICAgICAgICAvLyBubyByZWNvdmVyeSwganVzdCBlYXQgaXQuCiAgICAgICAgIH0KICAgICAgfSk7CiAgIH07CgogICAvKioKICAgICogUmVnaXN0ZXIgYSBtZXRob2Qgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZnJvbQogICAgKiBhbnkgb2YgdGhlIGRvd25zdHJlYW1zLgogICAgKi8KICAgU3RyZWFtTXVsdGlwbGV4ZXIucHJvdG90eXBlLm9uTWVzc2FnZSA9IGZ1bmN0aW9uKGYpIHsKICAgICAgdGhpcy5tZXNzYWdlTGlzdGVuZXJzLnB1c2goZik7CgogICAgICAvLyBVcGRhdGUgZXhpc3Rpbmcgc3RyZWFtcyB3aXRoIHRoZSBuZXcgbGlzdGVuZXIuCiAgICAgIHRoaXMuZ2V0U3RyZWFtcygpLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgIHN0cmVhbS5vbk1lc3NhZ2UoZik7CiAgICAgIH0pOwogICB9OwoKICAgLyoqCiAgICAqIEFkZCBhIHN0cmVhbSB0byB0aGUgbXVsdGlwbGV4ZXIuCiAgICAqLwogICBTdHJlYW1NdWx0aXBsZXhlci5wcm90b3R5cGUuYWRkU3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdGhpcy5zdHJlYW1NYXBbc3RyZWFtLmdldElkKCldID0gc3RyZWFtOwoKICAgICAgLy8gVXBkYXRlIHN0cmVhbSB3aXRoIGV4aXN0aW5nIGxpc3RlbmVycy4KICAgICAgdGhpcy5tZXNzYWdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24obWVzc2FnZUxpc3RlbmVyKSB7CiAgICAgICAgIHN0cmVhbS5vbk1lc3NhZ2UobWVzc2FnZUxpc3RlbmVyKTsKICAgICAgfSk7CiAgIH07CgogICAvKioKICAgICogUmVtb3ZlIHRoZSBnaXZlbiBkb3duc3RyZWFtLiAgVGhpcyBpcyB0eXBpY2FsbHkgdXNlZCBpbiByZXNwb25zZQogICAgKiB0byB0aGUgU2hhcmVkV29ya2VyJ3Mgb25jbG9zZSBldmVudCwgaW5kaWNhdGluZyB0aGF0IGEgY29uc3VtZXIKICAgICogdGFiIGhhcyBiZWVuIGNsb3NlZC4KICAgICovCiAgIFN0cmVhbU11bHRpcGxleGVyLnByb3RvdHlwZS5yZW1vdmVTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtTWFwW3N0cmVhbS5nZXRJZCgpXTsKICAgfTsKCiAgIC8qKgogICAgKiBHZXQgYSBsaXN0IG9mIHN0cmVhbXMgaW4gdGhlIG11bHRpcGxleGVyLgogICAgKi8KICAgU3RyZWFtTXVsdGlwbGV4ZXIucHJvdG90eXBlLmdldFN0cmVhbXMgPSBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgcmV0dXJuIGNvbm5lY3QudmFsdWVzKHRoaXMuc3RyZWFtTWFwKTsKICAgfTsKCiAgIC8qKgogICAgKiBHZXQgdGhlIHN0cmVhbSBtYXRjaGluZyB0aGUgZ2l2ZW4gcG9ydC4KICAgICovCiAgIFN0cmVhbU11bHRpcGxleGVyLnByb3RvdHlwZS5nZXRTdHJlYW1Gb3JQb3J0ID0gZnVuY3Rpb24ocG9ydCkgewogICAgICByZXR1cm4gY29ubmVjdC5maW5kKHRoaXMuZ2V0U3RyZWFtcygpLCBmdW5jdGlvbihzKSB7CiAgICAgICAgIHJldHVybiBzLnBvcnQgPT09IHBvcnQ7CiAgICAgIH0pOwogICB9OwoKICAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAqIGNsYXNzIENvbmR1aXQKICAgICoKICAgICogQW4gb2JqZWN0IHdoaWNoIGJyaWRnZXMgYW4gdXBzdHJlYW0gYW5kIGEgZG93bnN0cmVhbSwgYWxsb3dpbmcgbWVzc2FnZXMKICAgICogdG8gYmUgcGFzc2VkIHRvIGFuZCBmcm9tIGVhY2ggYW5kIHByb3ZpZGluZyBhbiBldmVudCBidXMgZm9yIGV2ZW50CiAgICAqIHN1YnNjcmlwdGlvbnMgdG8gYmUgbWFkZSB1cHN0cmVhbSBhbmQgZG93bnN0cmVhbS4KICAgICovCiAgIHZhciBDb25kdWl0ID0gZnVuY3Rpb24obmFtZSwgdXBzdHJlYW0sIGRvd25zdHJlYW0pIHsKICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgdGhpcy51cHN0cmVhbSA9IHVwc3RyZWFtIHx8IG5ldyBOdWxsU3RyZWFtKCk7CiAgICAgIHRoaXMuZG93bnN0cmVhbSA9IGRvd25zdHJlYW0gfHwgbmV3IE51bGxTdHJlYW0oKTsKICAgICAgdGhpcy5kb3duc3RyZWFtQnVzID0gbmV3IGNvbm5lY3QuRXZlbnRCdXMoKTsKICAgICAgdGhpcy51cHN0cmVhbUJ1cyA9IG5ldyBjb25uZWN0LkV2ZW50QnVzKCk7CgogICAgICB0aGlzLnVwc3RyZWFtLm9uTWVzc2FnZShjb25uZWN0LmhpdGNoKHRoaXMsIHRoaXMuX2Rpc3BhdGNoRXZlbnQsIHRoaXMudXBzdHJlYW1CdXMpKTsKICAgICAgdGhpcy5kb3duc3RyZWFtLm9uTWVzc2FnZShjb25uZWN0LmhpdGNoKHRoaXMsIHRoaXMuX2Rpc3BhdGNoRXZlbnQsIHRoaXMuZG93bnN0cmVhbUJ1cykpOwogICB9OwoKICAgQ29uZHVpdC5wcm90b3R5cGUub25VcHN0cmVhbSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZikgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZXZlbnROYW1lLCAnZXZlbnROYW1lJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChmLCAnZicpOwogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGYpLCAnZiBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgcmV0dXJuIHRoaXMudXBzdHJlYW1CdXMuc3Vic2NyaWJlKGV2ZW50TmFtZSwgZik7CiAgIH07CgogICBDb25kdWl0LnByb3RvdHlwZS5vbkFsbFVwc3RyZWFtID0gZnVuY3Rpb24oZikgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZiwgJ2YnKTsKICAgICAgY29ubmVjdC5hc3NlcnRUcnVlKGNvbm5lY3QuaXNGdW5jdGlvbihmKSwgJ2YgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgICAgIHJldHVybiB0aGlzLnVwc3RyZWFtQnVzLnN1YnNjcmliZUFsbChmKTsKICAgfTsKCiAgIENvbmR1aXQucHJvdG90eXBlLm9uRG93bnN0cmVhbSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZikgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZXZlbnROYW1lLCAnZXZlbnROYW1lJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChmLCAnZicpOwogICAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGYpLCAnZiBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgcmV0dXJuIHRoaXMuZG93bnN0cmVhbUJ1cy5zdWJzY3JpYmUoZXZlbnROYW1lLCBmKTsKICAgfTsKCiAgIENvbmR1aXQucHJvdG90eXBlLm9uQWxsRG93bnN0cmVhbSA9IGZ1bmN0aW9uKGYpIHsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGYsICdmJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0VHJ1ZShjb25uZWN0LmlzRnVuY3Rpb24oZiksICdmIG11c3QgYmUgYSBmdW5jdGlvbicpOwogICAgICByZXR1cm4gdGhpcy5kb3duc3RyZWFtQnVzLnN1YnNjcmliZUFsbChmKTsKICAgfTsKCiAgIENvbmR1aXQucHJvdG90eXBlLnNlbmRVcHN0cmVhbSA9IGZ1bmN0aW9uKGV2ZW50TmFtZSwgZGF0YSkgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZXZlbnROYW1lLCAnZXZlbnROYW1lJyk7CiAgICAgIHRoaXMudXBzdHJlYW0uc2VuZCh7ZXZlbnQ6IGV2ZW50TmFtZSwgZGF0YTogZGF0YX0pOwogICB9OwoKICAgQ29uZHVpdC5wcm90b3R5cGUuc2VuZERvd25zdHJlYW0gPSBmdW5jdGlvbihldmVudE5hbWUsIGRhdGEpIHsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGV2ZW50TmFtZSwgJ2V2ZW50TmFtZScpOwogICAgICB0aGlzLmRvd25zdHJlYW0uc2VuZCh7ZXZlbnQ6IGV2ZW50TmFtZSwgZGF0YTogZGF0YX0pOwogICB9OwoKICAgQ29uZHVpdC5wcm90b3R5cGUuX2Rpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihidXMsIG1lc3NhZ2VFdmVudCkgewogICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VFdmVudC5kYXRhOwogICAgICBpZiAobWVzc2FnZS5ldmVudCkgewogICAgICAgICBidXMudHJpZ2dlcihtZXNzYWdlLmV2ZW50LCBtZXNzYWdlLmRhdGEpOwogICAgICB9CiAgIH07CgogICAvKioKICAgICogUmV0dXJucyBhIGNsb3N1cmUgd2hpY2ggcGFzc2VzIGV2ZW50cyB1cHN0cmVhbS4KICAgICoKICAgICogVXNhZ2U6CiAgICAqIGNvbmR1aXQub25Eb3duc3RyZWFtKCJNeUV2ZW50IiwgY29uZHVpdC5wYXNzVXBzdHJlYW0oKSk7CiAgICAqLwogICBDb25kdWl0LnByb3RvdHlwZS5wYXNzVXBzdHJlYW0gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSwgZXZlbnROYW1lKSB7CiAgICAgICAgIHNlbGYudXBzdHJlYW0uc2VuZCh7ZXZlbnQ6IGV2ZW50TmFtZSwgZGF0YTogZGF0YX0pOwogICAgICB9OwogICB9OwoKICAgLyoqCiAgICAqIFJldHVybnMgYSBjbG9zdXJlIHdoaWNoIHBhc3NlcyBldmVudHMgZG93bnN0cmVhbS4KICAgICoKICAgICogVXNhZ2U6CiAgICAqIGNvbmR1aXQub25VcHN0cmVhbSgiTXlFdmVudCIsIGNvbmR1aXQucGFzc0Rvd25zdHJlYW0oKSk7CiAgICAqLwogICBDb25kdWl0LnByb3RvdHlwZS5wYXNzRG93bnN0cmVhbSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhLCBldmVudE5hbWUpIHsKICAgICAgICAgc2VsZi5kb3duc3RyZWFtLnNlbmQoe2V2ZW50OiBldmVudE5hbWUsIGRhdGE6IGRhdGF9KTsKICAgICAgfTsKICAgfTsKCiAgIC8qKgogICAgKiBTaHV0ZG93biB0aGUgY29uZHVpdCdzIGV2ZW50IGJ1c3NlcyBhbmQgcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zLgogICAgKi8KICAgQ29uZHVpdC5wcm90b3R5cGUuc2h1dGRvd24gPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy51cHN0cmVhbUJ1cy51bnN1YnNjcmliZUFsbCgpOwogICAgICB0aGlzLmRvd25zdHJlYW1CdXMudW5zdWJzY3JpYmVBbGwoKTsKICAgfTsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgKiBjbGFzcyBJRnJhbWVDb25kdWl0IGV4dGVuZHMgQ29uZHVpdAogICAgKgogICAgKiBDcmVhdGVzIGEgY29uZHVpdCBmb3IgdGhlIGdpdmVuIElGcmFtZSBlbGVtZW50LgogICAgKi8KICAgdmFyIElGcmFtZUNvbmR1aXQgPSBmdW5jdGlvbihuYW1lLCB3aW5kb3csIGlmcmFtZSwgZG9tYWluKSB7CiAgICAgIENvbmR1aXQuY2FsbCh0aGlzLCBuYW1lLCBuZXcgV2luZG93SU9TdHJlYW0od2luZG93LCBpZnJhbWUuY29udGVudFdpbmRvdywgZG9tYWluIHx8ICcqJyksIG51bGwpOwogICB9OwogICBJRnJhbWVDb25kdWl0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29uZHVpdC5wcm90b3R5cGUpOwogICBJRnJhbWVDb25kdWl0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IElGcmFtZUNvbmR1aXQ7CgogICBjb25uZWN0LlN0cmVhbSA9IFN0cmVhbTsKICAgY29ubmVjdC5OdWxsU3RyZWFtID0gTnVsbFN0cmVhbTsKICAgY29ubmVjdC5XaW5kb3dTdHJlYW0gPSBXaW5kb3dTdHJlYW07CiAgIGNvbm5lY3QuV2luZG93SU9TdHJlYW0gPSBXaW5kb3dJT1N0cmVhbTsKICAgY29ubmVjdC5Qb3J0U3RyZWFtID0gUG9ydFN0cmVhbTsKICAgY29ubmVjdC5TdHJlYW1NdWx0aXBsZXhlciA9IFN0cmVhbU11bHRpcGxleGVyOwogICBjb25uZWN0LkNvbmR1aXQgPSBDb25kdWl0OwogICBjb25uZWN0LklGcmFtZUNvbmR1aXQgPSBJRnJhbWVDb25kdWl0Owp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gODMzOgovKioqLyAoKCkgPT4gewoKLyoKICogQ29weXJpZ2h0IDIwMTQtMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8KKGZ1bmN0aW9uKCkgewogICB2YXIgZ2xvYmFsID0gdGhpczsKICAgY29ubmVjdCA9IGdsb2JhbC5jb25uZWN0IHx8IHt9OwogICBnbG9iYWwuY29ubmVjdCA9IGNvbm5lY3Q7CiAgIGdsb2JhbC5saWx5ID0gY29ubmVjdDsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogR3JhcGhMaW5rIDw8YWJzdHJhY3QgY2xhc3M+PgogICAgKgogICAgKiBSZXByZXNlbnRzIHRoZSBhc3NvY2lhdGlvbiBvZiBvbmUgb3IgbW9yZSBhdHRyaWJ1dGVzIHRvIGEgc3RhdGUgdHJhbnNpdGlvbi4KICAgICovCiAgIHZhciBHcmFwaExpbmsgPSBmdW5jdGlvbihmcm9tU3RhdGUsIHRvU3RhdGUpIHsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKGZyb21TdGF0ZSwgJ2Zyb21TdGF0ZScpOwogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwodG9TdGF0ZSwgJ3RvU3RhdGUnKTsKICAgICAgdGhpcy5mcm9tU3RhdGUgPSBmcm9tU3RhdGU7CiAgICAgIHRoaXMudG9TdGF0ZSA9IHRvU3RhdGU7CiAgIH07CgogICBHcmFwaExpbmsucHJvdG90eXBlLmdldEFzc29jaWF0aW9ucyA9IGZ1bmN0aW9uKGNvbnRleHQpIHsKICAgICAgdGhyb3cgY29ubmVjdC5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7CiAgIH07CgogICBHcmFwaExpbmsucHJvdG90eXBlLmdldEZyb21TdGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5mcm9tU3RhdGU7CiAgIH07CgogICBHcmFwaExpbmsucHJvdG90eXBlLmdldFRvU3RhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMudG9TdGF0ZTsKICAgfTsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogRGlyZWN0R3JhcGhMaW5rIDw8Y29uY3JldGUgY2xhc3M+PiBleHRlbmRzIEdyYXBoTGluawogICAgKgogICAgKiBSZXByZXNlbnRzIHRoZSBieS12YWx1ZSByZXByZXNlbnRhdGlvbiBvZiBvbmUgb3IgbW9yZSBhdHRyaWJ1dGVzIHRvIGEKICAgICogc3RhdGUgdHJhbnNpdGlvbi4KICAgICovCiAgIHZhciBEaXJlY3RHcmFwaExpbmsgPSBmdW5jdGlvbihmcm9tU3RhdGUsIHRvU3RhdGUsIGFzc29jaWF0aW9ucykgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZnJvbVN0YXRlLCAnZnJvbVN0YXRlJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbCh0b1N0YXRlLCAndG9TdGF0ZScpOwogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoYXNzb2NpYXRpb25zLCAnYXNzb2NpYXRpb25zJyk7CiAgICAgIEdyYXBoTGluay5jYWxsKHRoaXMsIGZyb21TdGF0ZSwgdG9TdGF0ZSk7CiAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gYXNzb2NpYXRpb25zOwogICB9OwogICBEaXJlY3RHcmFwaExpbmsucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcmFwaExpbmsucHJvdG90eXBlKTsKICAgRGlyZWN0R3JhcGhMaW5rLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpcmVjdEdyYXBoTGluazsKCiAgIERpcmVjdEdyYXBoTGluay5wcm90b3R5cGUuZ2V0QXNzb2NpYXRpb25zID0gZnVuY3Rpb24oY29udGV4dCkgewogICAgICByZXR1cm4gdGhpcy5hc3NvY2lhdGlvbnM7CiAgIH07CgogICAvKioKICAgICogRnVuY3Rpb25hbEdyYXBoTGluayA8PGNvbmNyZXRlIGNsYXNzPj4gZXh0ZW5kcyBHcmFwaExpbmsKICAgICoKICAgICogUmVwcmVzZW50cyBhIGZ1bmN0aW9uYWwgYXNzb2NpYXRpb24gb2Ygb25lIG9yIG1vcmUgYXR0cmlidXRlcyB0byBhCiAgICAqIHN0YXRlIHRyYW5zaXRpb24uCiAgICAqLwogICB2YXIgRnVuY3Rpb25hbEdyYXBoTGluayA9IGZ1bmN0aW9uKGZyb21TdGF0ZSwgdG9TdGF0ZSwgY2xvc3VyZSkgewogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoZnJvbVN0YXRlLCAnZnJvbVN0YXRlJyk7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbCh0b1N0YXRlLCAndG9TdGF0ZScpOwogICAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoY2xvc3VyZSwgJ2Nsb3N1cmUnKTsKICAgICAgY29ubmVjdC5hc3NlcnRUcnVlKGNvbm5lY3QuaXNGdW5jdGlvbihjbG9zdXJlKSwgJ2Nsb3N1cmUgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgICAgIEdyYXBoTGluay5jYWxsKHRoaXMsIGZyb21TdGF0ZSwgdG9TdGF0ZSk7CiAgICAgIHRoaXMuY2xvc3VyZSA9IGNsb3N1cmU7CiAgIH07CiAgIEZ1bmN0aW9uYWxHcmFwaExpbmsucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcmFwaExpbmsucHJvdG90eXBlKTsKICAgRnVuY3Rpb25hbEdyYXBoTGluay5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGdW5jdGlvbmFsR3JhcGhMaW5rOwoKICAgRnVuY3Rpb25hbEdyYXBoTGluay5wcm90b3R5cGUuZ2V0QXNzb2NpYXRpb25zID0gZnVuY3Rpb24oY29udGV4dCkgewogICAgICByZXR1cm4gdGhpcy5jbG9zdXJlKGNvbnRleHQsIHRoaXMuZ2V0RnJvbVN0YXRlKCksIHRoaXMuZ2V0VG9TdGF0ZSgpKTsKICAgfTsKCiAgIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICogRXZlbnRHcmFwaCA8PGNsYXNzPj4KICAgICoKICAgICogQnVpbGRzIGEgbWFwIG9mIGFzc29jaWF0aW9ucyBmcm9tIG9uZSBzdGF0ZSB0byBhbm90aGVyIGluIGNvbnRleHQgb2YgYQogICAgKiBwYXJ0aWN1bGFyIG9iamVjdC4gIFRoZSBhc3NvY2lhdGlvbnMgY2FuIGJlIGRpcmVjdCAob25lIG9yIG1vcmUgdmFsdWVzKQogICAgKiBvciBmdW5jdGlvbmFsIChhIG1ldGhvZCByZXR1cm5pbmcgb25lIG9yIG1vcmUgdmFsdWVzKSwgYW5kIGFyZSB1c2VkIHRvCiAgICAqIHByb3ZpZGUgYWRkaXRpb25hbCBjb250ZXh0dWFsIGV2ZW50IGhvb2tzIGZvciB0aGUgVUkgdG8gY29uc3VtZS4KICAgICovCiAgIHZhciBFdmVudEdyYXBoID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuZnJvbU1hcCA9IHt9OwogICB9OwogICBFdmVudEdyYXBoLkFOWSA9ICI8PGFueT4+IjsKCiAgIEV2ZW50R3JhcGgucHJvdG90eXBlLmFzc29jID0gZnVuY3Rpb24oZnJvbVN0YXRlT2JqLCB0b1N0YXRlT2JqLCBhc3NvY09iaikgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgICBpZiAoISBmcm9tU3RhdGVPYmopIHsKICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJmcm9tU3RhdGVPYmogaXMgbm90IGRlZmluZWQuIik7CiAgICAgIH0KCiAgICAgIGlmICghIHRvU3RhdGVPYmopIHsKICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJ0b1N0YXRlT2JqIGlzIG5vdCBkZWZpbmVkLiIpOwogICAgICB9CgogICAgICBpZiAoISBhc3NvY09iaikgewogICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImFzc29jT2JqIGlzIG5vdCBkZWZpbmVkLiIpOwogICAgICB9CgogICAgICBpZiAoZnJvbVN0YXRlT2JqIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgZnJvbVN0YXRlT2JqLmZvckVhY2goZnVuY3Rpb24oZnJvbVN0YXRlKSB7CiAgICAgICAgICAgIHNlbGYuYXNzb2MoZnJvbVN0YXRlLCB0b1N0YXRlT2JqLCBhc3NvY09iaik7CiAgICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHRvU3RhdGVPYmogaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgICB0b1N0YXRlT2JqLmZvckVhY2goZnVuY3Rpb24odG9TdGF0ZSkgewogICAgICAgICAgICBzZWxmLmFzc29jKGZyb21TdGF0ZU9iaiwgdG9TdGF0ZSwgYXNzb2NPYmopOwogICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICAgaWYgKHR5cGVvZiBhc3NvY09iaiA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICB0aGlzLl9hZGRBc3NvY2lhdGlvbihuZXcgRnVuY3Rpb25hbEdyYXBoTGluayhmcm9tU3RhdGVPYmosIHRvU3RhdGVPYmosIGFzc29jT2JqKSk7CiAgICAgICAgIH0gZWxzZSBpZiAoYXNzb2NPYmogaW5zdGFuY2VvZiBBcnJheSkgewogICAgICAgICAgICB0aGlzLl9hZGRBc3NvY2lhdGlvbihuZXcgRGlyZWN0R3JhcGhMaW5rKGZyb21TdGF0ZU9iaiwgdG9TdGF0ZU9iaiwgYXNzb2NPYmopKTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5fYWRkQXNzb2NpYXRpb24obmV3IERpcmVjdEdyYXBoTGluayhmcm9tU3RhdGVPYmosIHRvU3RhdGVPYmosIFthc3NvY09ial0pKTsKICAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0aGlzOwogICB9OwoKICAgRXZlbnRHcmFwaC5wcm90b3R5cGUuZ2V0QXNzb2NpYXRpb25zID0gZnVuY3Rpb24oY29udGV4dCwgZnJvbVN0YXRlLCB0b1N0YXRlKSB7CiAgICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChmcm9tU3RhdGUsICdmcm9tU3RhdGUnKTsKICAgICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHRvU3RhdGUsICd0b1N0YXRlJyk7CiAgICAgIHZhciBhc3NvY2lhdGlvbnMgPSBbXTsKCiAgICAgIHZhciB0b01hcEZyb21BbnkgPSB0aGlzLmZyb21NYXBbRXZlbnRHcmFwaC5BTlldIHx8IHt9OwogICAgICB2YXIgdG9NYXAgPSB0aGlzLmZyb21NYXBbZnJvbVN0YXRlXSB8fCB7fTsKCiAgICAgIGFzc29jaWF0aW9ucyA9IGFzc29jaWF0aW9ucy5jb25jYXQodGhpcy5fZ2V0QXNzb2NpYXRpb25zRnJvbU1hcCgKICAgICAgICAgICAgICAgdG9NYXBGcm9tQW55LCBjb250ZXh0LCBmcm9tU3RhdGUsIHRvU3RhdGUpKTsKICAgICAgYXNzb2NpYXRpb25zID0gYXNzb2NpYXRpb25zLmNvbmNhdCh0aGlzLl9nZXRBc3NvY2lhdGlvbnNGcm9tTWFwKAogICAgICAgICAgICAgICB0b01hcCwgY29udGV4dCwgZnJvbVN0YXRlLCB0b1N0YXRlKSk7CgogICAgICByZXR1cm4gYXNzb2NpYXRpb25zOwogICB9OwoKICAgRXZlbnRHcmFwaC5wcm90b3R5cGUuX2FkZEFzc29jaWF0aW9uID0gZnVuY3Rpb24oYXNzb2MpIHsKICAgICAgdmFyIHRvTWFwID0gdGhpcy5mcm9tTWFwW2Fzc29jLmdldEZyb21TdGF0ZSgpXTsKCiAgICAgIGlmICghIHRvTWFwKSB7CiAgICAgICAgIHRvTWFwID0gdGhpcy5mcm9tTWFwW2Fzc29jLmdldEZyb21TdGF0ZSgpXSA9IHt9OwogICAgICB9CgogICAgICB2YXIgYXNzb2NMaXN0ID0gdG9NYXBbYXNzb2MuZ2V0VG9TdGF0ZSgpXTsKCiAgICAgIGlmICghIGFzc29jTGlzdCkgewogICAgICAgICBhc3NvY0xpc3QgPSB0b01hcFthc3NvYy5nZXRUb1N0YXRlKCldID0gW107CiAgICAgIH0KCiAgICAgIGFzc29jTGlzdC5wdXNoKGFzc29jKTsKICAgfTsKCiAgIEV2ZW50R3JhcGgucHJvdG90eXBlLl9nZXRBc3NvY2lhdGlvbnNGcm9tTWFwID0gZnVuY3Rpb24obWFwLCBjb250ZXh0LCBmcm9tU3RhdGUsIHRvU3RhdGUpIHsKICAgICAgdmFyIGFzc29jTGlzdCA9IChtYXBbRXZlbnRHcmFwaC5BTlldIHx8IFtdKS5jb25jYXQobWFwW3RvU3RhdGVdIHx8IFtdKTsKICAgICAgcmV0dXJuIGFzc29jTGlzdC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgYXNzb2MpIHsKICAgICAgICAgcmV0dXJuIHByZXYuY29uY2F0KGFzc29jLmdldEFzc29jaWF0aW9ucyhjb250ZXh0KSk7CiAgICAgIH0sIFtdKTsKICAgfTsKCiAgIGNvbm5lY3QuRXZlbnRHcmFwaCA9IEV2ZW50R3JhcGg7Cgp9KSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gODkxOgovKioqLyAoKCkgPT4gewoKLyoKICogQ29weXJpZ2h0IDIwMTQtMjAxNyBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMAogKi8KKGZ1bmN0aW9uICgpIHsKICB2YXIgZ2xvYmFsID0gdGhpczsKICBjb25uZWN0ID0gZ2xvYmFsLmNvbm5lY3QgfHwge307CiAgZ2xvYmFsLmNvbm5lY3QgPSBjb25uZWN0OwogIGdsb2JhbC5saWx5ID0gY29ubmVjdDsKCiAgdmFyIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7CiAgdmFyIE9ORV9EQVlfTUlMTElTID0gMjQgKiA2MCAqIDYwICogMTAwMDsKICB2YXIgREVGQVVMVF9QT1BVUF9IRUlHSFQgPSA1Nzg7CiAgdmFyIERFRkFVTFRfUE9QVVBfV0lEVEggPSA0MzM7CiAgdmFyIENPUFlBQkxFX0VWRU5UX0ZJRUxEUyA9IFsiYnViYmxlcyIsICJjYW5jZWxCdWJibGUiLCAiY2FuY2VsYWJsZSIsICJjb21wb3NlZCIsICJkYXRhIiwgImRlZmF1bHRQcmV2ZW50ZWQiLCAiZXZlbnRQaGFzZSIsICJpc1RydXN0ZWQiLCAibGFzdEV2ZW50SWQiLCAib3JpZ2luIiwgInJldHVyblZhbHVlIiwgInRpbWVTdGFtcCIsICJ0eXBlIl07CgogIC8qKgogICAqIFVucG9sbHV0ZSBzcHJpbnRmIGZ1bmN0aW9ucyBmcm9tIHRoZSBnbG9iYWwgbmFtZXNwYWNlLgogICAqLwogIGNvbm5lY3Quc3ByaW50ZiA9IGdsb2JhbC5zcHJpbnRmOwogIGNvbm5lY3QudnNwcmludGYgPSBnbG9iYWwudnNwcmludGY7CiAgZGVsZXRlIGdsb2JhbC5zcHJpbnRmOwogIGRlbGV0ZSBnbG9iYWwudnNwcmludGY7CgogIGNvbm5lY3QuSFRUUF9TVEFUVVNfQ09ERVMgPSB7CiAgICBTVUNDRVNTOiAyMDAsCiAgICBUT09fTUFOWV9SRVFVRVNUUzogNDI5LAogICAgSU5URVJOQUxfU0VSVkVSX0VSUk9SOiA1MDAKICB9OwoKICBjb25uZWN0LlRSQU5TUE9SVF9UWVBFUyA9IHsKICAgIENIQVRfVE9LRU46ICJjaGF0X3Rva2VuIiwKICAgIFdFQl9TT0NLRVQ6ICJ3ZWJfc29ja2V0IgogIH07CgogIC8qKgogICAqIEJpbmRzIHRoZSBnaXZlbiBpbnN0YW5jZSBvYmplY3QgYXMgdGhlIGNvbnRleHQgZm9yCiAgICogdGhlIG1ldGhvZCBwcm92aWRlZC4KICAgKgogICAqIEBwYXJhbSBzY29wZSBUaGUgaW5zdGFuY2Ugb2JqZWN0IHRvIGJlIHNldCBhcyB0aGUgc2NvcGUKICAgKiAgICBvZiB0aGUgZnVuY3Rpb24uCiAgICogQHBhcmFtIG1ldGhvZCBUaGUgbWV0aG9kIHRvIGJlIGVuY2Fwc3VsYXRlZC4KICAgKgogICAqIEFsbCBvdGhlciBhcmd1bWVudHMsIGlmIGFueSwgYXJlIGJvdW5kIHRvIHRoZSBtZXRob2QKICAgKiBpbnZvY2F0aW9uIGluc2lkZSB0aGUgY2xvc3VyZS4KICAgKgogICAqIEByZXR1cm4gQSBjbG9zdXJlIGVuY2Fwc3VsYXRpbmcgdGhlIGludm9jYXRpb24gb2YgdGhlCiAgICogICAgbWV0aG9kIHByb3ZpZGVkIGluIGNvbnRleHQgb2YgdGhlIGdpdmVuIGluc3RhbmNlLgogICAqLwogIGNvbm5lY3QuaGl0Y2ggPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7CiAgICB2YXIgc2NvcGUgPSBhcmdzLnNoaWZ0KCk7CiAgICB2YXIgbWV0aG9kID0gYXJncy5zaGlmdCgpOwoKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChzY29wZSwgJ3Njb3BlJyk7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwobWV0aG9kLCAnbWV0aG9kJyk7CiAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKG1ldGhvZCksICdtZXRob2QgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNsb3N1cmVBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseShzY29wZSwgYXJncy5jb25jYXQoY2xvc3VyZUFyZ3MpKTsKICAgIH07CiAgfTsKCiAgLyoqCiAgICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGNhbGxhYmxlIGZ1bmN0aW9uIHR5cGUuCiAgICogQm9ycm93ZWQgZnJvbSBVbmRlcnNjb3JlLmpzLgogICAqLwogIGNvbm5lY3QuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIChvYmopIHsKICAgIHJldHVybiAhIShvYmogJiYgb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jYWxsICYmIG9iai5hcHBseSk7CiAgfTsKCiAgLyoqCiAgICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBhcnJheS4KICAgKi8KICBjb25uZWN0LmlzQXJyYXkgPSBmdW5jdGlvbiAob2JqKSB7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7CiAgfTsKCiAgLyoqCiAgICogR2V0IGEgbGlzdCBvZiBrZXlzIGZyb20gYSBKYXZhc2NyaXB0IG9iamVjdCB1c2VkCiAgICogYXMgYSBoYXNoIG1hcC4KICAgKi8KICBjb25uZWN0LmtleXMgPSBmdW5jdGlvbiAobWFwKSB7CiAgICB2YXIga2V5cyA9IFtdOwoKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChtYXAsICdtYXAnKTsKCiAgICBmb3IgKHZhciBrIGluIG1hcCkgewogICAgICBrZXlzLnB1c2goayk7CiAgICB9CgogICAgcmV0dXJuIGtleXM7CiAgfTsKCiAgLyoqCiAgICogR2V0IGEgbGlzdCBvZiB2YWx1ZXMgZnJvbSBhIEphdmFzY3JpcHQgb2JqZWN0IHVzZWQKICAgKiBhcyBhIGhhc2ggbWFwLgogICAqLwogIGNvbm5lY3QudmFsdWVzID0gZnVuY3Rpb24gKG1hcCkgewogICAgdmFyIHZhbHVlcyA9IFtdOwoKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChtYXAsICdtYXAnKTsKCiAgICBmb3IgKHZhciBrIGluIG1hcCkgewogICAgICB2YWx1ZXMucHVzaChtYXBba10pOwogICAgfQoKICAgIHJldHVybiB2YWx1ZXM7CiAgfTsKCiAgLyoqCiAgICogR2V0IGEgbGlzdCBvZiBrZXkvdmFsdWUgcGFpcnMgZnJvbSB0aGUgZ2l2ZW4gbWFwLgogICAqLwogIGNvbm5lY3QuZW50cmllcyA9IGZ1bmN0aW9uIChtYXApIHsKICAgIHZhciBlbnRyaWVzID0gW107CgogICAgZm9yICh2YXIgayBpbiBtYXApIHsKICAgICAgZW50cmllcy5wdXNoKHsga2V5OiBrLCB2YWx1ZTogbWFwW2tdIH0pOwogICAgfQoKICAgIHJldHVybiBlbnRyaWVzOwogIH07CgogIC8qKgogICAqIE1lcmdlIHR3byBvciBtb3JlIG1hcHMgdG9nZXRoZXIgaW50byBhIG5ldyBtYXAsCiAgICogb3Igc2ltcGx5IGNvcHkgYSBzaW5nbGUgbWFwLgogICAqLwogIGNvbm5lY3QubWVyZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgYXJnTWFwcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgICB2YXIgcmVzdWx0TWFwID0ge307CgogICAgYXJnTWFwcy5mb3JFYWNoKGZ1bmN0aW9uIChtYXApIHsKICAgICAgY29ubmVjdC5lbnRyaWVzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoa3YpIHsKICAgICAgICByZXN1bHRNYXBba3Yua2V5XSA9IGt2LnZhbHVlOwogICAgICB9KTsKICAgIH0pOwoKICAgIHJldHVybiByZXN1bHRNYXA7CiAgfTsKCiAgY29ubmVjdC5ub3cgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgfTsKCiAgY29ubmVjdC5maW5kID0gZnVuY3Rpb24gKGFycmF5LCBwcmVkaWNhdGUpIHsKICAgIGZvciAodmFyIHggPSAwOyB4IDwgYXJyYXkubGVuZ3RoOyB4KyspIHsKICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVt4XSkpIHsKICAgICAgICByZXR1cm4gYXJyYXlbeF07CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9OwoKICBjb25uZWN0LmNvbnRhaW5zID0gZnVuY3Rpb24gKG9iaiwgdmFsdWUpIHsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkgewogICAgICByZXR1cm4gY29ubmVjdC5maW5kKG9iaiwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgPT09IHZhbHVlOyB9KSAhPSBudWxsOwoKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAodmFsdWUgaW4gb2JqKTsKICAgIH0KICB9OwoKICBjb25uZWN0LmNvbnRhaW5zVmFsdWUgPSBmdW5jdGlvbiAob2JqLCB2YWx1ZSkgewogICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7CiAgICAgIHJldHVybiBjb25uZWN0LmZpbmQob2JqLCBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA9PT0gdmFsdWU7IH0pICE9IG51bGw7CgogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGNvbm5lY3QuZmluZChjb25uZWN0LnZhbHVlcyhvYmopLCBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA9PT0gdmFsdWU7IH0pICE9IG51bGw7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogR2VuZXJhdGUgYSByYW5kb20gSUQgY29uc2lzdGluZyBvZiB0aGUgY3VycmVudCB0aW1lc3RhbXAKICAgKiBhbmQgYSByYW5kb20gYmFzZS0zNiBudW1iZXIgYmFzZWQgb24gTWF0aC5yYW5kb20oKS4KICAgKi8KICBjb25uZWN0LnJhbmRvbUlkID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3Quc3ByaW50ZigiJXMtJXMiLCBjb25uZWN0Lm5vdygpLCBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSk7CiAgfTsKCiAgLyoqCiAgICogR2VuZXJhdGUgYW4gZW51bSBmcm9tIHRoZSBnaXZlbiBsaXN0IG9mIGxvd2VyLWNhc2UgZW51bSB2YWx1ZXMsCiAgICogd2hlcmUgdGhlIGVudW0ga2V5cyB3aWxsIGJlIHVwcGVyIGNhc2UuCiAgICoKICAgKiBDb252ZXJzaW9uIGZyb20gcGFzY2FsIGNhc2UgYmFzZWQgb24gY29kZSBmcm9tIGhlcmU6CiAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDUyMTIyNAogICAqLwogIGNvbm5lY3QubWFrZUVudW0gPSBmdW5jdGlvbiAodmFsdWVzKSB7CiAgICB2YXIgZW51bU9iaiA9IHt9OwoKICAgIHZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICB2YXIga2V5ID0gdmFsdWUucmVwbGFjZSgvXC4/KFthLXpdKylfPy9nLCBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4geS50b1VwcGVyQ2FzZSgpICsgIl8iOyB9KQogICAgICAgIC5yZXBsYWNlKC9fJC8sICIiKTsKCiAgICAgIGVudW1PYmpba2V5XSA9IHZhbHVlOwogICAgfSk7CgogICAgcmV0dXJuIGVudW1PYmo7CiAgfTsKCiAgY29ubmVjdC5tYWtlTmFtZXNwYWNlZEVudW0gPSBmdW5jdGlvbiAocHJlZml4LCB2YWx1ZXMpIHsKICAgIHZhciBlbnVtT2JqID0gY29ubmVjdC5tYWtlRW51bSh2YWx1ZXMpOwogICAgY29ubmVjdC5rZXlzKGVudW1PYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICBlbnVtT2JqW2tleV0gPSBjb25uZWN0LnNwcmludGYoIiVzOjolcyIsIHByZWZpeCwgZW51bU9ialtrZXldKTsKICAgIH0pOwogICAgcmV0dXJuIGVudW1PYmo7CiAgfTsKCiAgY29ubmVjdC5tYWtlR2VuZXJpY05hbWVzcGFjZWRFbnVtID0gZnVuY3Rpb24gKHByZWZpeCwgdmFsdWVzLCBkZWxpbWl0ZXIpIHsKICAgIHZhciBlbnVtT2JqID0gY29ubmVjdC5tYWtlRW51bSh2YWx1ZXMpOwogICAgY29ubmVjdC5rZXlzKGVudW1PYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICBlbnVtT2JqW2tleV0gPSBjb25uZWN0LnNwcmludGYoIiVzIitkZWxpbWl0ZXIrIiVzIiwgcHJlZml4LCBlbnVtT2JqW2tleV0pOwogICAgfSk7CiAgICByZXR1cm4gZW51bU9iajsKICB9OwoKICAvKioKICAqIE1ldGhvZHMgdG8gZGV0ZXJtaW5lIGJyb3dzZXIgdHlwZSBhbmQgdmVyc2lvbnMsIHVzZWQgZm9yIHNvZnRwaG9uZSBpbml0aWFsaXphdGlvbi4KICAqLwogIGNvbm5lY3QuaXNDaHJvbWVCcm93c2VyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHVzZXJBZ2VudC5pbmRleE9mKCJDaHJvbWUiKSAhPT0gLTE7CiAgfTsKCiAgY29ubmVjdC5pc0ZpcmVmb3hCcm93c2VyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHVzZXJBZ2VudC5pbmRleE9mKCJGaXJlZm94IikgIT09IC0xOwogIH07CgogIGNvbm5lY3QuaXNPcGVyYUJyb3dzZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdXNlckFnZW50LmluZGV4T2YoIk9wZXJhIikgIT09IC0xOwogIH07CgogIGNvbm5lY3QuZ2V0Q2hyb21lQnJvd3NlclZlcnNpb24gPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY2hyb21lVmVyc2lvbiA9IHVzZXJBZ2VudC5zdWJzdHJpbmcodXNlckFnZW50LmluZGV4T2YoIkNocm9tZSIpICsgNyk7CiAgICBpZiAoY2hyb21lVmVyc2lvbikgewogICAgICByZXR1cm4gcGFyc2VGbG9hdChjaHJvbWVWZXJzaW9uKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICB9OwoKICBjb25uZWN0LmdldEZpcmVmb3hCcm93c2VyVmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBmaXJlZm94VmVyc2lvbiA9IHVzZXJBZ2VudC5zdWJzdHJpbmcodXNlckFnZW50LmluZGV4T2YoIkZpcmVmb3giKSArIDgpOwogICAgaWYgKGZpcmVmb3hWZXJzaW9uKSB7CiAgICAgIHJldHVybiBwYXJzZUZsb2F0KGZpcmVmb3hWZXJzaW9uKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiAtMTsKICAgIH0KICB9OwoKICBjb25uZWN0LmlzVmFsaWRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlKSB7CiAgICB2YXIgbGFuZ3VhZ2VzID0gWwogICAgICB7CiAgICAgICAgaWQ6ICdlbl9VUycsCiAgICAgICAgbGFiZWw6ICdFbmdsaXNoJwogICAgICB9LAogICAgICB7CiAgICAgICAgaWQ6ICdkZV9ERScsCiAgICAgICAgbGFiZWw6ICdEZXV0c2NoJwogICAgICB9LAogICAgICB7CiAgICAgICAgaWQ6ICdlc19FUycsCiAgICAgICAgbGFiZWw6ICdFc3Bhw7FvbCcKICAgICAgfSwKICAgICAgewogICAgICAgIGlkOiAnZnJfRlInLAogICAgICAgIGxhYmVsOiAnRnJhbsOnYWlzJwogICAgICB9LAogICAgICB7CiAgICAgICAgaWQ6ICdqYV9KUCcsCiAgICAgICAgbGFiZWw6ICfml6XmnKzoqp4nCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBpZDogJ2l0X0lUJywKICAgICAgICBsYWJlbDogJ0l0YWxpYW5vJwogICAgICB9LAogICAgICB7CiAgICAgICAgaWQ6ICdrb19LUicsCiAgICAgICAgbGFiZWw6ICftlZzqta3slrQnCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBpZDogJ3B0X0JSJywKICAgICAgICBsYWJlbDogJ1BvcnR1Z3XDqnMnCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBpZDogJ3poX0NOJywKICAgICAgICBsYWJlbDogJ+S4reaWhyjnroDkvZMpJwogICAgICB9LAogICAgICB7CiAgICAgICAgaWQ6ICd6aF9UVycsCiAgICAgICAgbGFiZWw6ICfkuK3mloco57mB6auUKScKICAgICAgfQogICAgXTsKICAgIHJldHVybiBsYW5ndWFnZXMubWFwKGZ1bmN0aW9uKGxhbmd1YWdlKXsgcmV0dXJuIGxhbmd1YWdlLmlkfSkuaW5jbHVkZXMobG9jYWxlKTsKICB9CgogIGNvbm5lY3QuZ2V0T3BlcmFCcm93c2VyVmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciB2ZXJzaW9uT2Zmc2V0ID0gdXNlckFnZW50LmluZGV4T2YoIk9wZXJhIik7CiAgICB2YXIgb3BlcmFWZXJzaW9uID0gKHVzZXJBZ2VudC5pbmRleE9mKCJWZXJzaW9uIikgIT09IC0xKSA/IHVzZXJBZ2VudC5zdWJzdHJpbmcodmVyc2lvbk9mZnNldCArIDgpIDogdXNlckFnZW50LnN1YnN0cmluZyh2ZXJzaW9uT2Zmc2V0ICsgNik7CiAgICBpZiAob3BlcmFWZXJzaW9uKSB7CiAgICAgIHJldHVybiBwYXJzZUZsb2F0KG9wZXJhVmVyc2lvbik7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gLTE7CiAgICB9CiAgfTsKCiAgLyoqCiAgICogUmV0dXJuIGEgbWFwIG9mIGl0ZW1zIGluIHRoZSBnaXZlbiBsaXN0IGluZGV4ZWQgYnkKICAgKiBrZXlzIGRldGVybWluZWQgYnkgdGhlIGNsb3N1cmUgcHJvdmlkZWQuCiAgICoKICAgKiBAcGFyYW0gaXRlcmFibGUgQSBsaXN0LWxpa2Ugb2JqZWN0LgogICAqIEBwYXJhbSBjbG9zdXJlIEEgY2xvc3VyZSB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGZvciB0aGUKICAgKiAgICBpdGVtcyBpbiB0aGUgaXRlcmFibGUuCiAgICogQHJldHVybiBBIG1hcCBmcm9tIGluZGV4IHRvIGl0ZW0gZm9yIGVhY2ggaXRlbSBpbiB0aGUgaXRlcmFibGUuCiAgICovCiAgY29ubmVjdC5pbmRleCA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgY2xvc3VyZSkgewogICAgdmFyIG1hcCA9IHt9OwoKICAgIGl0ZXJhYmxlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgbWFwW2Nsb3N1cmUoaXRlbSldID0gaXRlbTsKICAgIH0pOwoKICAgIHJldHVybiBtYXA7CiAgfTsKCiAgLyoqCiAgICogQ29udmVydHMgdGhlIGdpdmVuIGFycmF5IGludG8gYSBtYXAgYXMgYSBzZXQsCiAgICogd2hlcmUgZWxlbWVudHMgaW4gdGhlIGFycmF5IGFyZSBtYXBwZWQgdG8gMS4KICAgKi8KICBjb25uZWN0LnNldCA9IGZ1bmN0aW9uIChhcnJheUluKSB7CiAgICB2YXIgc2V0TWFwID0ge307CgogICAgYXJyYXlJbi5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgc2V0TWFwW2tleV0gPSAxOwogICAgfSk7CgogICAgcmV0dXJuIHNldE1hcDsKICB9OwoKICAvKioKICAgKiBSZXR1cm5zIGEgbWFwIGZvciBlYWNoIGtleSBpbiBtYXBCIHdoaWNoCiAgICogaXMgTk9UIGluIG1hcEEuCiAgICovCiAgY29ubmVjdC5yZWxhdGl2ZUNvbXBsZW1lbnQgPSBmdW5jdGlvbiAobWFwQSwgbWFwQikgewogICAgdmFyIGNvbXBNYXAgPSB7fTsKCiAgICBjb25uZWN0LmtleXMobWFwQikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgIGlmICghKGtleSBpbiBtYXBBKSkgewogICAgICAgIGNvbXBNYXBba2V5XSA9IG1hcEJba2V5XTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIGNvbXBNYXA7CiAgfTsKCiAgLyoqCiAgICogQXNzZXJ0cyB0aGF0IGEgcHJlbWlzZSBpcyB0cnVlLgogICAqLwogIGNvbm5lY3QuYXNzZXJ0VHJ1ZSA9IGZ1bmN0aW9uIChwcmVtaXNlLCBtZXNzYWdlKSB7CiAgICBpZiAoIXByZW1pc2UpIHsKICAgICAgdGhyb3cgbmV3IGNvbm5lY3QuVmFsdWVFcnJvcihtZXNzYWdlKTsKICAgIH0KICB9OwoKICAvKioKICAgKiBBc3NlcnRzIHRoYXQgYSB2YWx1ZSBpcyBub3QgbnVsbCBvciB1bmRlZmluZWQuCiAgICovCiAgY29ubmVjdC5hc3NlcnROb3ROdWxsID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7CiAgICBjb25uZWN0LmFzc2VydFRydWUodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09IHVuZGVmaW5lZCwKICAgICAgY29ubmVjdC5zcHJpbnRmKCIlcyBtdXN0IGJlIHByb3ZpZGVkIiwgbmFtZSB8fCAnQSB2YWx1ZScpKTsKICAgIHJldHVybiB2YWx1ZTsKICB9OwoKICBjb25uZWN0LmRlZXBjb3B5ID0gZnVuY3Rpb24gKHNyYykgewogICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3JjKSk7CiAgfTsKCiAgY29ubmVjdC5kZWVwY29weUNyb3NzT3JpZ2luRXZlbnQgPSBmdW5jdGlvbihldmVudCkgewogICAgY29uc3Qgb2JqID0ge307CiAgICBjb25zdCBsaXN0T2ZBY2NlcHRhYmxlS2V5cyA9IENPUFlBQkxFX0VWRU5UX0ZJRUxEUzsKICAgIGxpc3RPZkFjY2VwdGFibGVLZXlzLmZvckVhY2goKGtleSkgPT4gewogICAgICB0cnkgewogICAgICAgIG9ialtrZXldID0gZXZlbnRba2V5XTsKICAgICAgfQogICAgICBjYXRjaChlKSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJkZWVwY29weUNyb3NzT3JpZ2luRXZlbnQgZmFpbGVkIG9uIGtleTogIiwga2V5KS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9CiAgICB9KTsKICAgIHJldHVybiBjb25uZWN0LmRlZXBjb3B5KG9iaik7CiAgfQoKICAvKioKICAgKiBHZXQgdGhlIGN1cnJlbnQgYmFzZSB1cmwgb2YgdGhlIG9wZW4gcGFnZSwgZS5nLiBpZiB0aGUgcGFnZSBpcwogICAqIGh0dHBzOi8vZXhhbXBsZS5jb206OTQ5NC9vcmFuZ2VzLCB0aGlzIHdpbGwgYmUgImh0dHBzOi8vZXhhbXBsZS5jb206OTQ5NCIuCiAgICovCiAgY29ubmVjdC5nZXRCYXNlVXJsID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uOwogICAgcmV0dXJuIGNvbm5lY3Quc3ByaW50ZigiJXMvLyVzOiVzIiwgbG9jYXRpb24ucHJvdG9jb2wsIGxvY2F0aW9uLmhvc3RuYW1lLCBsb2NhdGlvbi5wb3J0KTsKICB9OwoKICBjb25uZWN0LmdldFVybFdpdGhQcm90b2NvbCA9IGZ1bmN0aW9uKHVybCkgewogICAgdmFyIHByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sOwogICAgaWYgKHVybC5zdWJzdHIoMCwgcHJvdG9jb2wubGVuZ3RoKSAhPT0gcHJvdG9jb2wpIHsKICAgICAgcmV0dXJuIGNvbm5lY3Quc3ByaW50ZigiJXMvLyVzIiwgcHJvdG9jb2wsIHVybCk7CiAgICB9CiAgICByZXR1cm4gdXJsOwogIH0KCiAgLyoqCiAgICogRGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IHdpbmRvdyBpcyBpbiBhbiBpZnJhbWUuCiAgICogQ291cnRlc3k6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzI2MDY5LwogICAqLwogIGNvbm5lY3QuaXNGcmFtZWQgPSBmdW5jdGlvbiAoKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH07CgogIGNvbm5lY3QuaGFzT3RoZXJDb25uZWN0ZWRDQ1BzID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNvbm5lY3QubnVtYmVyT2ZDb25uZWN0ZWRDQ1BzID4gMTsKICB9CgogIGNvbm5lY3QuZmV0Y2ggPSBmdW5jdGlvbiAoZW5kcG9pbnQsIG9wdGlvbnMsIG1pbGxpSW50ZXJ2YWwsIG1heFJldHJ5KSB7CiAgICBtYXhSZXRyeSA9IG1heFJldHJ5IHx8IDU7CiAgICBtaWxsaUludGVydmFsID0gbWlsbGlJbnRlcnZhbCB8fCAxMDAwOwogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBmdW5jdGlvbiBmZXRjaERhdGEobWF4UmV0cnkpIHsKICAgICAgICBmZXRjaChlbmRwb2ludCwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gY29ubmVjdC5IVFRQX1NUQVRVU19DT0RFUy5TVUNDRVNTKSB7CiAgICAgICAgICAgIHJlcy5qc29uKCkudGhlbihqc29uID0+IHJlc29sdmUoanNvbikpLmNhdGNoKCgpID0+IHJlc29sdmUoe30pKTsKICAgICAgICAgIH0gZWxzZSBpZiAobWF4UmV0cnkgIT09IDEgJiYgKHJlcy5zdGF0dXMgPj0gY29ubmVjdC5IVFRQX1NUQVRVU19DT0RFUy5JTlRFUk5BTF9TRVJWRVJfRVJST1IgfHwgcmVzLnN0YXR1cyA9PT0gY29ubmVjdC5IVFRQX1NUQVRVU19DT0RFUy5UT09fTUFOWV9SRVFVRVNUUykpIHsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgZmV0Y2hEYXRhKC0tbWF4UmV0cnkpOwogICAgICAgICAgICB9LCBtaWxsaUludGVydmFsKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChyZXMpOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZmV0Y2hEYXRhKG1heFJldHJ5KTsKICAgIH0pOwogIH07CgogIC8qKgogICAqIENhbGxpbmcgYSBmdW5jdGlvbiB3aXRoIGV4cG9uZW50aWFsIGJhY2tvZmYgd2l0aCBmdWxsIGppdHRlciByZXRyeSBzdHJhdGVneQogICAqIEl0IHdpbGwgcmV0cnkgY2FsbGluZyB0aGUgZnVuY3Rpb24gZm9yIG1heGltdW0gbWF4UmV0cnkgdGltZXMgaWYgaXQgZmFpbHMuCiAgICogU3VjY2VzcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBpZiB0aGUgZnVuY3Rpb24gc3VjY2VlZGVkLgogICAqIEZhaWx1cmUgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgb25seSBpZiB0aGUgbGFzdCB0cnkgZmFpbGVkLgogICAqLwogIGNvbm5lY3QuYmFja29mZiA9IGZ1bmN0aW9uIChmdW5jLCBtaWxsaUludGVydmFsLCBtYXhSZXRyeSwgY2FsbGJhY2tzKSB7CiAgICBjb25uZWN0LmFzc2VydFRydWUoY29ubmVjdC5pc0Z1bmN0aW9uKGZ1bmMpLCAiZnVuYyBtdXN0IGJlIGEgRnVuY3Rpb24iKTsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciByYXRpbyA9IDI7CgogICAgZnVuYyh7CiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Muc3VjY2VzcykgewogICAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MoZGF0YSk7CiAgICAgICAgfQogICAgICB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgaWYgKG1heFJldHJ5ID4gMCkgewogICAgICAgICAgdmFyIGludGVydmFsID0gbWlsbGlJbnRlcnZhbCAqIDIgKiBNYXRoLnJhbmRvbSgpOwogICAgICAgICAgZ2xvYmFsLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBzZWxmLmJhY2tvZmYoZnVuYywgaW50ZXJ2YWwgKiByYXRpbywgLS1tYXhSZXRyeSwgY2FsbGJhY2tzKTsKICAgICAgICAgIH0sIGludGVydmFsKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3MuZmFpbHVyZSkgewogICAgICAgICAgICBjYWxsYmFja3MuZmFpbHVyZShlcnIsIGRhdGEpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfTsKCiAgY29ubmVjdC5wdWJsaXNoTWV0cmljID0gZnVuY3Rpb24gKG1ldHJpY0RhdGEpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuRXZlbnRUeXBlLkNMSUVOVF9NRVRSSUMsCiAgICAgIGRhdGE6IG1ldHJpY0RhdGEKICAgIH0pOwogIH07CgogIGNvbm5lY3QucHVibGlzaFNvZnRwaG9uZVN0YXRzID0gZnVuY3Rpb24oc3RhdHMpIHsKICAgIGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpLnNlbmRVcHN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIHsKICAgICAgZXZlbnQ6IGNvbm5lY3QuRXZlbnRUeXBlLlNPRlRQSE9ORV9TVEFUUywKICAgICAgZGF0YTogc3RhdHMKICAgIH0pOwogIH07CgogIGNvbm5lY3QucHVibGlzaFNvZnRwaG9uZVJlcG9ydCA9IGZ1bmN0aW9uKHJlcG9ydCkgewogICAgY29ubmVjdC5jb3JlLmdldFVwc3RyZWFtKCkuc2VuZFVwc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkJST0FEQ0FTVCwgewogICAgICBldmVudDogY29ubmVjdC5FdmVudFR5cGUuU09GVFBIT05FX1JFUE9SVCwKICAgICAgZGF0YTogcmVwb3J0CiAgICB9KTsKICB9OwoKICBjb25uZWN0LnB1Ymxpc2hDbGllbnRTaWRlTG9ncyA9IGZ1bmN0aW9uKGxvZ3MpIHsKICAgIHZhciBidXMgPSBjb25uZWN0LmNvcmUuZ2V0RXZlbnRCdXMoKTsKICAgIGJ1cy50cmlnZ2VyKGNvbm5lY3QuRXZlbnRUeXBlLkNMSUVOVF9TSURFX0xPR1MsIGxvZ3MpOwogIH07CgogIGNvbm5lY3QuYWRkTmFtZXNwYWNlVG9Mb2dzID0gZnVuY3Rpb24obmFtZXNwYWNlKSB7CiAgICBjb25zdCBtZXRob2RzID0gWydsb2cnLCAnZXJyb3InLCAnd2FybicsICdpbmZvJywgJ2RlYnVnJ107CgogICAgbWV0aG9kcy5mb3JFYWNoKChtZXRob2QpID0+IHsKICAgICAgY29uc3QgY29uc29sZU1ldGhvZCA9IHdpbmRvdy5jb25zb2xlW21ldGhvZF07CiAgICAgIHdpbmRvdy5jb25zb2xlW21ldGhvZF0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKTsKICAgICAgICBhcmdzLnVuc2hpZnQoYFske25hbWVzcGFjZX1dYCk7CiAgICAgICAgY29uc29sZU1ldGhvZC5hcHBseSh3aW5kb3cuY29uc29sZSwgYXJncyk7CiAgICAgIH07CiAgICB9KTsKICB9OwoKICAvKioKICAgKiBBIHdyYXBwZXIgYXJvdW5kIFdpbmRvdy5vcGVuKCkgZm9yIG1hbmFnaW5nIHNpbmdsZSBpbnN0YW5jZSBwb3B1cHMuCiAgICovCiAgY29ubmVjdC5Qb3B1cE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7IH07CgogIGNvbm5lY3QuUG9wdXBNYW5hZ2VyLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKHVybCwgbmFtZSwgb3B0aW9ucykgewogICAgdmFyIHRoZW4gPSB0aGlzLl9nZXRMYXN0T3BlbmVkVGltZXN0YW1wKG5hbWUpOwogICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgdmFyIHdpbiA9IG51bGw7CiAgICBpZiAobm93IC0gdGhlbiA+IE9ORV9EQVlfTUlMTElTKSB7CiAgICAgIGlmIChvcHRpb25zKSB7CiAgICAgICAgLy8gZGVmYXVsdCB2YWx1ZXMgYXJlIGNob3NlbiB0byBwcm92aWRlIGEgbWluaW11bSBoZWlnaHQgd2l0aG91dCBzY3JvbGxpbmcKICAgICAgICAvLyBhbmQgYSB1bmlmb3JtIG1hcmdpbiBiYXNlZCBvbiB0aGUgY3NzIG9mIHRoZSBjY3AgbG9naW4gcGFnZQogICAgICAgIHZhciBoZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCBERUZBVUxUX1BPUFVQX0hFSUdIVDsKICAgICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoIHx8IERFRkFVTFRfUE9QVVBfV0lEVEg7CiAgICAgICAgdmFyIHRvcCA9IG9wdGlvbnMudG9wIHx8IDA7CiAgICAgICAgdmFyIGxlZnQgPSBvcHRpb25zLmxlZnQgfHwgMDsKICAgICAgICB3aW4gPSB3aW5kb3cub3BlbignJywgbmFtZSwgIndpZHRoPSIrd2lkdGgrIiwgaGVpZ2h0PSIraGVpZ2h0KyIsIHRvcD0iK3RvcCsiLCBsZWZ0PSIrbGVmdCk7CiAgICAgICAgaWYgKHdpbi5sb2NhdGlvbiAhPT0gdXJsKSB7CiAgICAgICAgICB3aW4gPSB3aW5kb3cub3Blbih1cmwsIG5hbWUsICJ3aWR0aD0iK3dpZHRoKyIsIGhlaWdodD0iK2hlaWdodCsiLCB0b3A9Iit0b3ArIiwgbGVmdD0iK2xlZnQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB3aW4gPSB3aW5kb3cub3BlbignJywgbmFtZSk7CiAgICAgICAgaWYgKHdpbi5sb2NhdGlvbiAhPT0gdXJsKSB7CiAgICAgICAgICB3aW4gPSB3aW5kb3cub3Blbih1cmwsIG5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLl9zZXRMYXN0T3BlbmVkVGltZXN0YW1wKG5hbWUsIG5vdyk7CiAgICB9CiAgICByZXR1cm4gd2luOwogIH07CgogIGNvbm5lY3QuUG9wdXBNYW5hZ2VyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB2YXIga2V5ID0gdGhpcy5fZ2V0TG9jYWxTdG9yYWdlS2V5KG5hbWUpOwogICAgZ2xvYmFsLmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7CiAgfTsKCiAgY29ubmVjdC5Qb3B1cE1hbmFnZXIucHJvdG90eXBlLl9nZXRMYXN0T3BlbmVkVGltZXN0YW1wID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgIHZhciBrZXkgPSB0aGlzLl9nZXRMb2NhbFN0b3JhZ2VLZXkobmFtZSk7CiAgICB2YXIgdmFsdWUgPSBnbG9iYWwubG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTsKCiAgICBpZiAodmFsdWUpIHsKICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7CgogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIDA7CiAgICB9CiAgfTsKCiAgY29ubmVjdC5Qb3B1cE1hbmFnZXIucHJvdG90eXBlLl9zZXRMYXN0T3BlbmVkVGltZXN0YW1wID0gZnVuY3Rpb24gKG5hbWUsIHRzKSB7CiAgICB2YXIga2V5ID0gdGhpcy5fZ2V0TG9jYWxTdG9yYWdlS2V5KG5hbWUpOwogICAgZ2xvYmFsLmxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgJycgKyB0cyk7CiAgfTsKCiAgY29ubmVjdC5Qb3B1cE1hbmFnZXIucHJvdG90eXBlLl9nZXRMb2NhbFN0b3JhZ2VLZXkgPSBmdW5jdGlvbiAobmFtZSkgewogICAgcmV0dXJuICJjb25uZWN0UG9wdXBNYW5hZ2VyOjoiICsgbmFtZTsKICB9OwoKICAvKioKICAgKiBBbiBlbnVtZXJhdGlvbiBvZiB0aGUgSFRNTDUgbm90aWZpY2F0aW9uIHBlcm1pc3Npb24gdmFsdWVzLgogICAqLwogIHZhciBOb3RpZmljYXRpb25QZXJtaXNzaW9uID0gY29ubmVjdC5tYWtlRW51bShbCiAgICAnZ3JhbnRlZCcsCiAgICAnZGVuaWVkJywKICAgICdkZWZhdWx0JwogIF0pOwoKICAvKioKICAgKiBBIHNpbXBsZSBlbmdpbmUgZm9yIHNob3dpbmcgbm90aWZpY2F0aW9uIHBvcHVwcy4KICAgKi8KICBjb25uZWN0Lk5vdGlmaWNhdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnF1ZXVlID0gW107CiAgICB0aGlzLnBlcm1pc3Npb24gPSBOb3RpZmljYXRpb25QZXJtaXNzaW9uLkRFRkFVTFQ7CiAgfTsKCiAgY29ubmVjdC5Ob3RpZmljYXRpb25NYW5hZ2VyLnByb3RvdHlwZS5yZXF1ZXN0UGVybWlzc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmICghKCJOb3RpZmljYXRpb24iIGluIGdsb2JhbCkpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IG5vdGlmaWNhdGlvbnMuIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgdGhpcy5wZXJtaXNzaW9uID0gTm90aWZpY2F0aW9uUGVybWlzc2lvbi5ERU5JRUQ7CgogICAgfSBlbHNlIGlmIChnbG9iYWwuTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09IE5vdGlmaWNhdGlvblBlcm1pc3Npb24uREVOSUVEKSB7CiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkud2FybigiVGhlIHVzZXIgaGFzIHJlcXVlc3RlZCB0byBub3QgcmVjZWl2ZSBub3RpZmljYXRpb25zLiIpLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIHRoaXMucGVybWlzc2lvbiA9IE5vdGlmaWNhdGlvblBlcm1pc3Npb24uREVOSUVEOwoKICAgIH0gZWxzZSBpZiAodGhpcy5wZXJtaXNzaW9uICE9PSBOb3RpZmljYXRpb25QZXJtaXNzaW9uLkdSQU5URUQpIHsKICAgICAgZ2xvYmFsLk5vdGlmaWNhdGlvbi5yZXF1ZXN0UGVybWlzc2lvbigpLnRoZW4oZnVuY3Rpb24gKHBlcm1pc3Npb24pIHsKICAgICAgICBzZWxmLnBlcm1pc3Npb24gPSBwZXJtaXNzaW9uOwogICAgICAgIGlmIChwZXJtaXNzaW9uID09PSBOb3RpZmljYXRpb25QZXJtaXNzaW9uLkdSQU5URUQpIHsKICAgICAgICAgIHNlbGYuX3Nob3dRdWV1ZWQoKTsKCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGYucXVldWUgPSBbXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH07CgogIGNvbm5lY3QuTm90aWZpY2F0aW9uTWFuYWdlci5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICh0aXRsZSwgb3B0aW9ucykgewogICAgaWYgKHRoaXMucGVybWlzc2lvbiA9PT0gTm90aWZpY2F0aW9uUGVybWlzc2lvbi5HUkFOVEVEKSB7CiAgICAgIHJldHVybiB0aGlzLl9zaG93SW1wbCh7IHRpdGxlOiB0aXRsZSwgb3B0aW9uczogb3B0aW9ucyB9KTsKCiAgICB9IGVsc2UgaWYgKHRoaXMucGVybWlzc2lvbiA9PT0gTm90aWZpY2F0aW9uUGVybWlzc2lvbi5ERU5JRUQpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJVbmFibGUgdG8gc2hvdyBub3RpZmljYXRpb24uIikKICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKQogICAgICAgIC53aXRoT2JqZWN0KHsKICAgICAgICAgIHRpdGxlOiB0aXRsZSwKICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMKICAgICAgICB9KTsKCiAgICB9IGVsc2UgewogICAgICB2YXIgcGFyYW1zID0geyB0aXRsZTogdGl0bGUsIG9wdGlvbnM6IG9wdGlvbnMgfTsKICAgICAgY29ubmVjdC5nZXRMb2coKS53YXJuKCJEZWZlcnJpbmcgbm90aWZpY2F0aW9uIHVudGlsIHVzZXIgZGVjaWRlcyB0byBhbGxvdyBvciBkZW55LiIpCiAgICAgICAgLndpdGhPYmplY3QocGFyYW1zKQogICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB0aGlzLnF1ZXVlLnB1c2gocGFyYW1zKTsKICAgIH0KICB9OwoKICBjb25uZWN0Lk5vdGlmaWNhdGlvbk1hbmFnZXIucHJvdG90eXBlLl9zaG93UXVldWVkID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIG5vdGlmaWNhdGlvbnMgPSB0aGlzLnF1ZXVlLm1hcChmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgIHJldHVybiBzZWxmLl9zaG93SW1wbChwYXJhbXMpOwogICAgfSk7CiAgICB0aGlzLnF1ZXVlID0gW107CiAgICByZXR1cm4gbm90aWZpY2F0aW9uczsKICB9OwoKICBjb25uZWN0Lk5vdGlmaWNhdGlvbk1hbmFnZXIucHJvdG90eXBlLl9zaG93SW1wbCA9IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgIHZhciBub3RpZmljYXRpb24gPSBuZXcgZ2xvYmFsLk5vdGlmaWNhdGlvbihwYXJhbXMudGl0bGUsIHBhcmFtcy5vcHRpb25zKTsKICAgIGlmIChwYXJhbXMub3B0aW9ucy5jbGlja2VkKSB7CiAgICAgIG5vdGlmaWNhdGlvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkgewogICAgICAgIHBhcmFtcy5vcHRpb25zLmNsaWNrZWQuY2FsbChub3RpZmljYXRpb24pOwogICAgICB9OwogICAgfQogICAgcmV0dXJuIG5vdGlmaWNhdGlvbjsKICB9OwoKICBjb25uZWN0LkJhc2VFcnJvciA9IGZ1bmN0aW9uIChmb3JtYXQsIGFyZ3MpIHsKICAgIGdsb2JhbC5FcnJvci5jYWxsKHRoaXMsIGNvbm5lY3QudnNwcmludGYoZm9ybWF0LCBhcmdzKSk7CiAgfTsKICBjb25uZWN0LkJhc2VFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7CiAgY29ubmVjdC5CYXNlRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29ubmVjdC5CYXNlRXJyb3I7CgogIGNvbm5lY3QuVmFsdWVFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIHZhciBmb3JtYXQgPSBhcmdzLnNoaWZ0KCk7CiAgICBjb25uZWN0LkJhc2VFcnJvci5jYWxsKHRoaXMsIGZvcm1hdCwgYXJncyk7CiAgfTsKICBjb25uZWN0LlZhbHVlRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjb25uZWN0LkJhc2VFcnJvci5wcm90b3R5cGUpOwogIGNvbm5lY3QuVmFsdWVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25uZWN0LlZhbHVlRXJyb3I7CgogIGNvbm5lY3QuTm90SW1wbGVtZW50ZWRFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIHZhciBmb3JtYXQgPSBhcmdzLnNoaWZ0KCk7CiAgICBjb25uZWN0LkJhc2VFcnJvci5jYWxsKHRoaXMsIGZvcm1hdCwgYXJncyk7CiAgfTsKICBjb25uZWN0Lk5vdEltcGxlbWVudGVkRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjb25uZWN0LkJhc2VFcnJvci5wcm90b3R5cGUpOwogIGNvbm5lY3QuTm90SW1wbGVtZW50ZWRFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25uZWN0Lk5vdEltcGxlbWVudGVkRXJyb3I7CgogIGNvbm5lY3QuU3RhdGVFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTsKICAgIHZhciBmb3JtYXQgPSBhcmdzLnNoaWZ0KCk7CiAgICBjb25uZWN0LkJhc2VFcnJvci5jYWxsKHRoaXMsIGZvcm1hdCwgYXJncyk7CiAgfTsKICBjb25uZWN0LlN0YXRlRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjb25uZWN0LkJhc2VFcnJvci5wcm90b3R5cGUpOwogIGNvbm5lY3QuU3RhdGVFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25uZWN0LlN0YXRlRXJyb3I7CgogIGNvbm5lY3QuVm9pY2VJZEVycm9yID0gZnVuY3Rpb24odHlwZSwgbWVzc2FnZSwgZXJyKXsKICAgIHZhciBlcnJvciA9IHt9OwogICAgZXJyb3IudHlwZSA9IHR5cGU7CiAgICBlcnJvci5tZXNzYWdlID0gbWVzc2FnZTsKICAgIGVycm9yLnN0YWNrID0gRXJyb3IobWVzc2FnZSkuc3RhY2s7CiAgICBlcnJvci5lcnIgPSBlcnI7CiAgICByZXR1cm4gZXJyb3I7CiAgfQoKICAvLyBpbnRlcm5hbCB1c2Ugb25seQogIGNvbm5lY3QuaXNDQ1AgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgY29uZHVpdCA9IGNvbm5lY3QuY29yZS5nZXRVcHN0cmVhbSgpOwogICAgcmV0dXJuIGNvbmR1aXQubmFtZSA9PT0gJ0Nvbm5lY3RTaGFyZWRXb3JrZXJDb25kdWl0JzsKICB9Cn0pKCk7CgoKLyoqKi8gfSksCgovKioqLyA3MzY6Ci8qKiovICgoKSA9PiB7CgovKgogKiBDb3B5cmlnaHQgMjAxNC0yMDE3IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wCiAqLwooZnVuY3Rpb24gKCkgewogIHZhciBnbG9iYWwgPSB0aGlzOwogIGNvbm5lY3QgPSBnbG9iYWwuY29ubmVjdCB8fCB7fTsKICBnbG9iYWwuY29ubmVjdCA9IGNvbm5lY3Q7CiAgZ2xvYmFsLmxpbHkgPSBjb25uZWN0OwoKICBjb25uZWN0LndvcmtlciA9IHt9OwoKICB2YXIgR0VUX0FHRU5UX1RJTUVPVVRfTVMgPSAzMDAwMDsKICB2YXIgR0VUX0FHRU5UX1JFQ09WRVJZX1RJTUVPVVRfTVMgPSA1MDAwOwogIHZhciBHRVRfQUdFTlRfU1VDQ0VTU19USU1FT1VUX01TID0gMTAwOwogIHZhciBMT0dfQlVGRkVSX0NBUF9TSVpFID0gNDAwOwoKICB2YXIgQ0hFQ0tfQVVUSF9UT0tFTl9JTlRFUlZBTF9NUyA9IDMwMDAwMDsgLy8gNSBtaW51dHMKICB2YXIgUkVGUkVTSF9BVVRIX1RPS0VOX0lOVEVSVkFMX01TID0gMTAwMDA7IC8vIDEwIHNlY29uZHMKICB2YXIgUkVGUkVTSF9BVVRIX1RPS0VOX01BWF9UUlkgPSA0OwoKICB2YXIgR0VUX0FHRU5UX0NPTkZJR1VSQVRJT05fSU5URVJWQUxfTVMgPSAzMDAwMDsKCiAgLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwogIHZhciBNYXN0ZXJUb3BpY0Nvb3JkaW5hdG9yID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy50b3BpY01hc3Rlck1hcCA9IHt9OwogIH07CgogIE1hc3RlclRvcGljQ29vcmRpbmF0b3IucHJvdG90eXBlLmdldE1hc3RlciA9IGZ1bmN0aW9uICh0b3BpYykgewogICAgY29ubmVjdC5hc3NlcnROb3ROdWxsKHRvcGljLCAndG9waWMnKTsKICAgIHJldHVybiB0aGlzLnRvcGljTWFzdGVyTWFwW3RvcGljXSB8fCBudWxsOwogIH07CgogIE1hc3RlclRvcGljQ29vcmRpbmF0b3IucHJvdG90eXBlLnNldE1hc3RlciA9IGZ1bmN0aW9uICh0b3BpYywgaWQpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbCh0b3BpYywgJ3RvcGljJyk7CiAgICBjb25uZWN0LmFzc2VydE5vdE51bGwoaWQsICdpZCcpOwogICAgdGhpcy50b3BpY01hc3Rlck1hcFt0b3BpY10gPSBpZDsKICB9OwoKICBNYXN0ZXJUb3BpY0Nvb3JkaW5hdG9yLnByb3RvdHlwZS5yZW1vdmVNYXN0ZXIgPSBmdW5jdGlvbiAoaWQpIHsKICAgIGNvbm5lY3QuYXNzZXJ0Tm90TnVsbChpZCwgJ2lkJyk7CiAgICB2YXIgc2VsZiA9IHRoaXM7CgogICAgY29ubmVjdC5lbnRyaWVzKHRoaXMudG9waWNNYXN0ZXJNYXApLmZpbHRlcihmdW5jdGlvbiAoZW50cnkpIHsKICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlID09PSBpZDsKICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7CiAgICAgIGRlbGV0ZSBzZWxmLnRvcGljTWFzdGVyTWFwW2VudHJ5LmtleV07CiAgICB9KTsKICB9OwoKICAvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBjbGFzcyBXb3JrZXJDbGllbnQgZXh0ZW5kcyBDbGllbnRCYXNlCiAgICovCiAgdmFyIFdvcmtlckNsaWVudCA9IGZ1bmN0aW9uIChjb25kdWl0KSB7CiAgICBjb25uZWN0LkNsaWVudEJhc2UuY2FsbCh0aGlzKTsKICAgIHRoaXMuY29uZHVpdCA9IGNvbmR1aXQ7CiAgfTsKICBXb3JrZXJDbGllbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjb25uZWN0LkNsaWVudEJhc2UucHJvdG90eXBlKTsKICBXb3JrZXJDbGllbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV29ya2VyQ2xpZW50OwoKICBXb3JrZXJDbGllbnQucHJvdG90eXBlLl9jYWxsSW1wbCA9IGZ1bmN0aW9uIChtZXRob2QsIHBhcmFtcywgY2FsbGJhY2tzKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgcmVxdWVzdF9zdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgaWYoY29ubmVjdC5jb250YWluc1ZhbHVlKGNvbm5lY3QuQWdlbnRBcHBDbGllbnRNZXRob2RzLCBtZXRob2QpKSB7CiAgICAgIGNvbm5lY3QuY29yZS5nZXRBZ2VudEFwcENsaWVudCgpLl9jYWxsSW1wbChtZXRob2QsIHBhcmFtcywgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBzZWxmLl9yZWNvcmRBUElMYXRlbmN5KG1ldGhvZCwgcmVxdWVzdF9zdGFydCk7CiAgICAgICAgICBjYWxsYmFja3Muc3VjY2VzcyhkYXRhKTsKICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgc2VsZi5fcmVjb3JkQVBJTGF0ZW5jeShtZXRob2QsIHJlcXVlc3Rfc3RhcnQsIGVycm9yKTsKICAgICAgICAgIGNhbGxiYWNrcy5mYWlsdXJlKGVycm9yKTsKICAgICAgICB9CiAgICAgIH0pCiAgICB9IGVsc2UgewogICAgICBjb25uZWN0LmNvcmUuZ2V0Q2xpZW50KCkuX2NhbGxJbXBsKG1ldGhvZCwgcGFyYW1zLCB7CiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgIHNlbGYuX3JlY29yZEFQSUxhdGVuY3kobWV0aG9kLCByZXF1ZXN0X3N0YXJ0KTsKICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzKGRhdGEpOwogICAgICAgIH0sCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVycm9yLCBkYXRhKSB7CiAgICAgICAgICBzZWxmLl9yZWNvcmRBUElMYXRlbmN5KG1ldGhvZCwgcmVxdWVzdF9zdGFydCwgZXJyb3IpOwogICAgICAgICAgY2FsbGJhY2tzLmZhaWx1cmUoZXJyb3IsIGRhdGEpOwogICAgICAgIH0sCiAgICAgICAgYXV0aEZhaWx1cmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNlbGYuX3JlY29yZEFQSUxhdGVuY3kobWV0aG9kLCByZXF1ZXN0X3N0YXJ0KTsKICAgICAgICAgIGNhbGxiYWNrcy5hdXRoRmFpbHVyZSgpOwogICAgICAgIH0sCiAgICAgICAgYWNjZXNzRGVuaWVkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjYWxsYmFja3MuYWNjZXNzRGVuaWVkICYmIGNhbGxiYWNrcy5hY2Nlc3NEZW5pZWQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgCiAgfTsKCiAgV29ya2VyQ2xpZW50LnByb3RvdHlwZS5fcmVjb3JkQVBJTGF0ZW5jeSA9IGZ1bmN0aW9uIChtZXRob2QsIHJlcXVlc3Rfc3RhcnQsIGVycikgewogICAgdmFyIHJlcXVlc3RfZW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB2YXIgcmVxdWVzdF90aW1lID0gcmVxdWVzdF9lbmQgLSByZXF1ZXN0X3N0YXJ0OwogICAgdGhpcy5fc2VuZEFQSU1ldHJpY3MobWV0aG9kLCByZXF1ZXN0X3RpbWUsIGVycik7CiAgfTsKCiAgV29ya2VyQ2xpZW50LnByb3RvdHlwZS5fc2VuZEFQSU1ldHJpY3MgPSBmdW5jdGlvbiAobWV0aG9kLCB0aW1lLCBlcnIpIHsKICAgIHRoaXMuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BUElfTUVUUklDLCB7CiAgICAgIG5hbWU6IG1ldGhvZCwKICAgICAgdGltZTogdGltZSwKICAgICAgZGltZW5zaW9uczogWwogICAgICAgIHsKICAgICAgICAgIG5hbWU6ICJDYXRlZ29yeSIsCiAgICAgICAgICB2YWx1ZTogIkFQSSIKICAgICAgICB9CiAgICAgIF0sCiAgICAgIGVycm9yOiBlcnIKICAgIH0pOwogIH07CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgKiBUaGUgb2JqZWN0IHJlc3BvbnNpYmxlIGZvciBwb2xsaW5nIGFuZCBwYXNzaW5nIGRhdGEgZG93bnN0cmVhbSB0byBhbGwKICAgKiBjb25zdW1lciBwb3J0cy4KICAgKi8KICB2YXIgQ2xpZW50RW5naW5lID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHRoaXMubXVsdGlwbGV4ZXIgPSBuZXcgY29ubmVjdC5TdHJlYW1NdWx0aXBsZXhlcigpOwogICAgdGhpcy5jb25kdWl0ID0gbmV3IGNvbm5lY3QuQ29uZHVpdCgiQW1hem9uQ29ubmVjdFNoYXJlZFdvcmtlciIsIG51bGwsIHRoaXMubXVsdGlwbGV4ZXIpOwogICAgdGhpcy5jbGllbnQgPSBuZXcgV29ya2VyQ2xpZW50KHRoaXMuY29uZHVpdCk7CiAgICB0aGlzLnRpbWVvdXQgPSBudWxsOwogICAgdGhpcy5hZ2VudCA9IG51bGw7CiAgICB0aGlzLm5leHRUb2tlbiA9IG51bGw7CiAgICB0aGlzLmluaXREYXRhID0ge307CiAgICB0aGlzLnBvcnRDb25kdWl0TWFwID0ge307CiAgICB0aGlzLnN0cmVhbU1hcEJ5VGFiSWQgPSB7fTsKICAgIHRoaXMubWFzdGVyQ29vcmQgPSBuZXcgTWFzdGVyVG9waWNDb29yZGluYXRvcigpOwogICAgdGhpcy5sb2dzQnVmZmVyID0gW107CiAgICB0aGlzLnN1cHByZXNzID0gZmFsc2U7CiAgICB0aGlzLmZvcmNlT2ZmbGluZSA9IGZhbHNlOwoKICAgIHZhciB3ZWJTb2NrZXRNYW5hZ2VyID0gbnVsbDsKCiAgICBjb25uZWN0LnJvb3RMb2dnZXIgPSBuZXcgY29ubmVjdC5Eb3duc3RyZWFtQ29uZHVpdExvZ2dlcih0aGlzLmNvbmR1aXQpOwoKICAgIHRoaXMuY29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU0VORF9MT0dTLCBmdW5jdGlvbiAobG9nc1RvVXBsb2FkKSB7CiAgICAgIC8vIEFkZCBzb2Z0cGhvbmUgbG9ncyBkb3duc3RyZWFtCiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkucHVzaExvZ3NEb3duc3RyZWFtKGxvZ3NUb1VwbG9hZCk7CgogICAgICBzZWxmLmxvZ3NCdWZmZXIgPSBzZWxmLmxvZ3NCdWZmZXIuY29uY2F0KGxvZ3NUb1VwbG9hZCk7CiAgICAgIC8vb25seSBjYWxsIEFQSSB0byBzZW5kIGxvZ3MgaWYgYnVmZmVyIHJlYWNoZWQgY2FwCiAgICAgIGlmIChzZWxmLmxvZ3NCdWZmZXIubGVuZ3RoID4gTE9HX0JVRkZFUl9DQVBfU0laRSkgewogICAgICAgIHNlbGYuaGFuZGxlU2VuZExvZ3NSZXF1ZXN0KHNlbGYubG9nc0J1ZmZlcik7CiAgICAgIH0KICAgIH0pOwoKICAgIHRoaXMuY29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5EaXNhc3RlclJlY292ZXJ5RXZlbnRzLlNVUFBSRVNTLCBmdW5jdGlvbiAoZGF0YSl7CiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZGVidWcoIltEaXNhc3RlciBSZWNvdmVyeV0gU2V0dGluZyBTdXBwcmVzcyB0byAlcyIsIGRhdGEuc3VwcHJlc3MpCiAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIHNlbGYuc3VwcHJlc3MgPSBkYXRhLnN1cHByZXNzIHx8IGZhbHNlOwogICAgICAvL3NpZ25hbCBvdGhlciB3aW5kb3dzIHRoYXQgYSBmYWlsb3ZlciBoYXBwZW5lZAogICAgICBpZiAoc2VsZi5tYXN0ZXJDb29yZC5nZXRNYXN0ZXIoY29ubmVjdC5NYXN0ZXJUb3BpY3MuU09GVFBIT05FKSkgewogICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuRkFJTE9WRVIsIHsKICAgICAgICAgIGlzUHJpbWFyeTogIXNlbGYuc3VwcHJlc3MKICAgICAgICB9KTsgICAgICAKICAgICAgfQogICAgfSk7CgogICAgdGhpcy5jb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuRk9SQ0VfT0ZGTElORSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS5kZWJ1ZygiW0Rpc2FzdGVyIFJlY292ZXJ5XSBTZXR0aW5nIEZPUkNFX09GRkxJTkUgdG8gJXMiLCBkYXRhLm9mZmxpbmUpCiAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIHNlbGYuZm9yY2VPZmZsaW5lID0gZGF0YS5vZmZsaW5lIHx8IGZhbHNlOwogICAgfSk7CgogICAgdGhpcy5jb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5DT05GSUdVUkUsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGlmIChkYXRhLmF1dGhUb2tlbiAmJiBkYXRhLmF1dGhUb2tlbiAhPT0gc2VsZi5pbml0RGF0YS5hdXRoVG9rZW4pIHsKICAgICAgICBzZWxmLmluaXREYXRhID0gZGF0YTsKICAgICAgICBjb25uZWN0LmNvcmUuaW5pdChkYXRhKTsKICAgICAgICAvLyBpbml0IG9ubHkgb25jZS4KICAgICAgICBpZiAoIXdlYlNvY2tldE1hbmFnZXIpIHsKCiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIkNyZWF0aW5nIGEgbmV3IFdlYnNvY2tldCBjb25uZWN0aW9uIGZvciBDQ1AiKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKCiAgICAgICAgICBjb25uZWN0LldlYlNvY2tldE1hbmFnZXIuc2V0R2xvYmFsQ29uZmlnKHsKICAgICAgICAgICAgbG9nZ2VyQ29uZmlnOiB7IGxvZ2dlcjogY29ubmVjdC5nZXRMb2coKSB9CiAgICAgICAgICB9KTsKCiAgICAgICAgICB3ZWJTb2NrZXRNYW5hZ2VyID0gY29ubmVjdC5XZWJTb2NrZXRNYW5hZ2VyLmNyZWF0ZSgpOwoKICAgICAgICAgIHdlYlNvY2tldE1hbmFnZXIub25Jbml0RmFpbHVyZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LldlYlNvY2tldEV2ZW50cy5JTklUX0ZBSUxVUkUpOwogICAgICAgICAgfSk7CgogICAgICAgICAgd2ViU29ja2V0TWFuYWdlci5vbkNvbm5lY3Rpb25PcGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuQ09OTkVDVElPTl9PUEVOLCByZXNwb25zZSk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICB3ZWJTb2NrZXRNYW5hZ2VyLm9uQ29ubmVjdGlvbkNsb3NlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuQ09OTkVDVElPTl9DTE9TRSwgcmVzcG9uc2UpOwogICAgICAgICAgfSk7CgogICAgICAgICAgd2ViU29ja2V0TWFuYWdlci5vbkNvbm5lY3Rpb25HYWluKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuQWdlbnRFdmVudHMuV0VCU09DS0VUX0NPTk5FQ1RJT05fR0FJTkVEKTsKICAgICAgICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLkNPTk5FQ1RJT05fR0FJTik7CiAgICAgICAgICB9KTsKCiAgICAgICAgICB3ZWJTb2NrZXRNYW5hZ2VyLm9uQ29ubmVjdGlvbkxvc3QoZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkFnZW50RXZlbnRzLldFQlNPQ0tFVF9DT05ORUNUSU9OX0xPU1QsIHJlc3BvbnNlKTsKICAgICAgICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLkNPTk5FQ1RJT05fTE9TVCwgcmVzcG9uc2UpOwogICAgICAgICAgfSk7CgogICAgICAgICAgd2ViU29ja2V0TWFuYWdlci5vblN1YnNjcmlwdGlvblVwZGF0ZShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuV2ViU29ja2V0RXZlbnRzLlNVQlNDUklQVElPTl9VUERBVEUsIHJlc3BvbnNlKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHdlYlNvY2tldE1hbmFnZXIub25TdWJzY3JpcHRpb25GYWlsdXJlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuU1VCU0NSSVBUSU9OX0ZBSUxVUkUsIHJlc3BvbnNlKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHdlYlNvY2tldE1hbmFnZXIub25BbGxNZXNzYWdlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuQUxMX01FU1NBR0UsIHJlc3BvbnNlKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHNlbGYuY29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuU0VORCwgZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgd2ViU29ja2V0TWFuYWdlci5zZW5kTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHNlbGYuY29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5XZWJTb2NrZXRFdmVudHMuU1VCU0NSSUJFLCBmdW5jdGlvbiAodG9waWNzKSB7CiAgICAgICAgICAgIHdlYlNvY2tldE1hbmFnZXIuc3Vic2NyaWJlVG9waWNzKHRvcGljcyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICB3ZWJTb2NrZXRNYW5hZ2VyLmluaXQoY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmdldFdlYlNvY2tldFVybCkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgIXJlc3BvbnNlLndlYlNvY2tldENvbm5lY3Rpb25GYWlsZWQpIHsKICAgICAgICAgICAgICAgIC8vIFN0YXJ0IHBvbGxpbmcgZm9yIGFnZW50IGRhdGEuCiAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIktpY2tpbmcgb2ZmIGFnZW50IHBvbGxpbmciKQogICAgICAgICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHNlbGYucG9sbEZvckFnZW50KCk7CiAgCiAgICAgICAgICAgICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIktpY2tpbmcgb2ZmIGNvbmZpZyBwb2xsaW5nIikKICAgICAgICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgICAgICAgICAgICBzZWxmLnBvbGxGb3JBZ2VudENvbmZpZ3VyYXRpb24oeyByZXBlYXRGb3JldmVyOiB0cnVlIH0pOwogIAogICAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJLaWNraW5nIG9mZiBhdXRoIHRva2VuIHBvbGxpbmciKQogICAgICAgICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIGdsb2JhbC5zZXRJbnRlcnZhbChjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuY2hlY2tBdXRoVG9rZW4pLCBDSEVDS19BVVRIX1RPS0VOX0lOVEVSVkFMX01TKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKCFjb25uZWN0LndlYlNvY2tldEluaXRGYWlsZWQpIHsKICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjb25uZWN0LldlYlNvY2tldEV2ZW50cy5JTklUX0ZBSUxVUkU7CiAgICAgICAgICAgICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShldmVudCk7CiAgICAgICAgICAgICAgICAgIGNvbm5lY3Qud2ViU29ja2V0SW5pdEZhaWxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihldmVudCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiV2ViU29ja2V0IGZhaWxlZCB0byBpbml0aWFsaXplIikKICAgICAgICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGUpCiAgICAgICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuaW5mbygiTm90IEluaXRpYWxpemluZyBhIG5ldyBXZWJzb2NrZXRNYW5hZ2VyIGluc3RhbmNlLCBzaW5jZSBvbmUgYWxyZWFkeSBleGlzdHMiKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogICAgdGhpcy5jb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5URVJNSU5BVEUsIGZ1bmN0aW9uICgpIHsKICAgICAgLy91cGxvYWQgcGVuZGluZyBsb2dzIGJlZm9yZSB0ZXJtaW5hdGluZy4KICAgICAgc2VsZi5oYW5kbGVTZW5kTG9nc1JlcXVlc3Qoc2VsZi5sb2dzQnVmZmVyKTsKICAgICAgY29ubmVjdC5jb3JlLnRlcm1pbmF0ZSgpOwogICAgICBzZWxmLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuVEVSTUlOQVRFRCk7CiAgICB9KTsKICAgIHRoaXMuY29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuU1lOQ0hST05JWkUsIGZ1bmN0aW9uICgpIHsKICAgICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkFDS05PV0xFREdFKTsKICAgIH0pOwogICAgdGhpcy5jb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5CUk9BRENBU1QsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShkYXRhLmV2ZW50LCBkYXRhLmRhdGEpOwogICAgfSk7CgogICAgLyoqCiAgICAgKiBDYWxsZWQgd2hlbiBhIGNvbnN1bWVyIHBvcnQgY29ubmVjdHMgdG8gdGhpcyBTaGFyZWRXb3JrZXIuCiAgICAgKiBMZXQncyBhZGQgdGhlbSB0byBvdXIgbXVsdGlwbGV4ZXIuCiAgICAgKi8KICAgIGdsb2JhbC5vbmNvbm5lY3QgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgdmFyIHBvcnQgPSBldmVudC5wb3J0c1swXTsKICAgICAgdmFyIHN0cmVhbSA9IG5ldyBjb25uZWN0LlBvcnRTdHJlYW0ocG9ydCk7CiAgICAgIHNlbGYubXVsdGlwbGV4ZXIuYWRkU3RyZWFtKHN0cmVhbSk7CiAgICAgIHBvcnQuc3RhcnQoKTsKCiAgICAgIHZhciBwb3J0Q29uZHVpdCA9IG5ldyBjb25uZWN0LkNvbmR1aXQoc3RyZWFtLmdldElkKCksIG51bGwsIHN0cmVhbSk7CiAgICAgIHBvcnRDb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkFDS05PV0xFREdFLCB7IGlkOiBzdHJlYW0uZ2V0SWQoKSB9KTsKCiAgICAgIHNlbGYucG9ydENvbmR1aXRNYXBbc3RyZWFtLmdldElkKCldID0gcG9ydENvbmR1aXQ7CiAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5VUERBVEVfQ09OTkVDVEVEX0NDUFMsIHsgbGVuZ3RoOiBPYmplY3Qua2V5cyhzZWxmLnBvcnRDb25kdWl0TWFwKS5sZW5ndGggfSk7CgogICAgICBpZiAoc2VsZi5hZ2VudCAhPT0gbnVsbCkgewogICAgICAgIHNlbGYudXBkYXRlQWdlbnQoKTsKICAgICAgfQoKICAgICAgcG9ydENvbmR1aXQub25Eb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkFQSV9SRVFVRVNULAogICAgICAgIGNvbm5lY3QuaGl0Y2goc2VsZiwgc2VsZi5oYW5kbGVBUElSZXF1ZXN0LCBwb3J0Q29uZHVpdCkpOwogICAgICBwb3J0Q29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuTUFTVEVSX1JFUVVFU1QsCiAgICAgICAgY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZU1hc3RlclJlcXVlc3QsIHBvcnRDb25kdWl0LCBzdHJlYW0uZ2V0SWQoKSkpOwogICAgICBwb3J0Q29uZHVpdC5vbkRvd25zdHJlYW0oY29ubmVjdC5FdmVudFR5cGUuUkVMT0FEX0FHRU5UX0NPTkZJR1VSQVRJT04sCiAgICAgICAgY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLnBvbGxGb3JBZ2VudENvbmZpZ3VyYXRpb24pKTsKICAgICAgcG9ydENvbmR1aXQub25Eb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLlRBQl9JRCwKICAgICAgICBjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuaGFuZGxlVGFiSWRFdmVudCwgc3RyZWFtKSk7CiAgICAgIHBvcnRDb25kdWl0Lm9uRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5DTE9TRSwgCiAgICAgICAgY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUNsb3NlRXZlbnQsIHN0cmVhbSkpOwogICAgfTsKICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLnBvbGxGb3JBZ2VudCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBvbkF1dGhGYWlsID0gY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUF1dGhGYWlsKTsKCiAgICB0aGlzLmNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5HRVRfQUdFTlRfU05BUFNIT1QsIHsKICAgICAgbmV4dFRva2VuOiBzZWxmLm5leHRUb2tlbiwKICAgICAgdGltZW91dDogR0VUX0FHRU5UX1RJTUVPVVRfTVMKICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgc2VsZi5hZ2VudCA9IHNlbGYuYWdlbnQgfHwge307CiAgICAgICAgICAgIHNlbGYuYWdlbnQuc25hcHNob3QgPSBkYXRhLnNuYXBzaG90OwogICAgICAgICAgICBzZWxmLmFnZW50LnNuYXBzaG90LmxvY2FsVGltZXN0YW1wID0gY29ubmVjdC5ub3coKTsKICAgICAgICAgICAgc2VsZi5hZ2VudC5zbmFwc2hvdC5za2V3ID0gc2VsZi5hZ2VudC5zbmFwc2hvdC5zbmFwc2hvdFRpbWVzdGFtcCAtIHNlbGYuYWdlbnQuc25hcHNob3QubG9jYWxUaW1lc3RhbXA7CiAgICAgICAgICAgIHNlbGYubmV4dFRva2VuID0gZGF0YS5uZXh0VG9rZW47CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkudHJhY2UoIkdFVF9BR0VOVF9TTkFQU0hPVCBzdWNjZWVkZWQuIikKICAgICAgICAgICAgICAud2l0aE9iamVjdChkYXRhKQogICAgICAgICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgICBzZWxmLnVwZGF0ZUFnZW50KCk7CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoIkxvbmcgcG9sbCBmYWlsZWQgdG8gdXBkYXRlIGFnZW50LiIpCiAgICAgICAgICAgICAgLndpdGhPYmplY3QoZGF0YSkKICAgICAgICAgICAgICAud2l0aEV4Y2VwdGlvbihlKQogICAgICAgICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgZ2xvYmFsLnNldFRpbWVvdXQoY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLnBvbGxGb3JBZ2VudCksIEdFVF9BR0VOVF9TVUNDRVNTX1RJTUVPVVRfTVMpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiRmFpbGVkIHRvIGdldCBhZ2VudCBkYXRhLiIpCiAgICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCkKICAgICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgICBlcnI6IGVyciwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBnbG9iYWwuc2V0VGltZW91dChjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYucG9sbEZvckFnZW50KSwgR0VUX0FHRU5UX1JFQ09WRVJZX1RJTUVPVVRfTVMpOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgYXV0aEZhaWx1cmU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIG9uQXV0aEZhaWwoKTsKICAgICAgICB9LAogICAgICAgIGFjY2Vzc0RlbmllZDogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUFjY2Vzc0RlbmllZCkKCiAgICAgIH0pOwoKICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLnBvbGxGb3JBZ2VudENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAocGFyYW1zSW4pIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBwYXJhbXMgPSBwYXJhbXNJbiB8fCB7fTsKICAgIHZhciBvbkF1dGhGYWlsID0gY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUF1dGhGYWlsKTsKCiAgICB0aGlzLmNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5HRVRfQUdFTlRfQ09ORklHVVJBVElPTiwge30sIHsKICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IGRhdGEuY29uZmlndXJhdGlvbjsKICAgICAgICBzZWxmLnBvbGxGb3JBZ2VudFBlcm1pc3Npb25zKGNvbmZpZ3VyYXRpb24pOwogICAgICAgIHNlbGYucG9sbEZvckFnZW50U3RhdGVzKGNvbmZpZ3VyYXRpb24pOwogICAgICAgIHNlbGYucG9sbEZvckRpYWxhYmxlQ291bnRyeUNvZGVzKGNvbmZpZ3VyYXRpb24pOwogICAgICAgIHNlbGYucG9sbEZvclJvdXRpbmdQcm9maWxlUXVldWVzKGNvbmZpZ3VyYXRpb24pOwogICAgICAgIGlmIChwYXJhbXMucmVwZWF0Rm9yZXZlcikgewogICAgICAgICAgZ2xvYmFsLnNldFRpbWVvdXQoY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLnBvbGxGb3JBZ2VudENvbmZpZ3VyYXRpb24sIHBhcmFtcyksCiAgICAgICAgICAgIEdFVF9BR0VOVF9DT05GSUdVUkFUSU9OX0lOVEVSVkFMX01TKTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgICB0cnkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiRmFpbGVkIHRvIGZldGNoIGFnZW50IGNvbmZpZ3VyYXRpb24gZGF0YS4iKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKQogICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgaWYgKHBhcmFtcy5yZXBlYXRGb3JldmVyKSB7CiAgICAgICAgICAgIGdsb2JhbC5zZXRUaW1lb3V0KGNvbm5lY3QuaGl0Y2goc2VsZiwgc2VsZi5wb2xsRm9yQWdlbnRDb25maWd1cmF0aW9uKSwKICAgICAgICAgICAgICBHRVRfQUdFTlRfQ09ORklHVVJBVElPTl9JTlRFUlZBTF9NUywgcGFyYW1zKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGF1dGhGYWlsdXJlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgb25BdXRoRmFpbCgpOwogICAgICB9LAogICAgICBhY2Nlc3NEZW5pZWQ6IGNvbm5lY3QuaGl0Y2goc2VsZiwgc2VsZi5oYW5kbGVBY2Nlc3NEZW5pZWQpCiAgICB9KTsKICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLnBvbGxGb3JBZ2VudFN0YXRlcyA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uLCBwYXJhbXNJbikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9OwogICAgcGFyYW1zLm1heFJlc3VsdHMgPSBwYXJhbXMubWF4UmVzdWx0cyB8fCBjb25uZWN0LkRFRkFVTFRfQkFUQ0hfU0laRTsKCiAgICB0aGlzLmNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5HRVRfQUdFTlRfU1RBVEVTLCB7CiAgICAgIG5leHRUb2tlbjogcGFyYW1zLm5leHRUb2tlbiB8fCBudWxsLAogICAgICBtYXhSZXN1bHRzOiBwYXJhbXMubWF4UmVzdWx0cwoKICAgIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgaWYgKGRhdGEubmV4dFRva2VuKSB7CiAgICAgICAgICAgIHNlbGYucG9sbEZvckFnZW50U3RhdGVzKGNvbmZpZ3VyYXRpb24sIHsKICAgICAgICAgICAgICBzdGF0ZXM6IChwYXJhbXMuc3RhdGVzIHx8IFtdKS5jb25jYXQoZGF0YS5zdGF0ZXMpLAogICAgICAgICAgICAgIG5leHRUb2tlbjogZGF0YS5uZXh0VG9rZW4sCiAgICAgICAgICAgICAgbWF4UmVzdWx0czogcGFyYW1zLm1heFJlc3VsdHMKICAgICAgICAgICAgfSk7CgogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uZmlndXJhdGlvbi5hZ2VudFN0YXRlcyA9IChwYXJhbXMuc3RhdGVzIHx8IFtdKS5jb25jYXQoZGF0YS5zdGF0ZXMpOwogICAgICAgICAgICBzZWxmLnVwZGF0ZUFnZW50Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoIkZhaWxlZCB0byBmZXRjaCBhZ2VudCBzdGF0ZXMgbGlzdC4iKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKQogICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGF1dGhGYWlsdXJlOiBjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuaGFuZGxlQXV0aEZhaWwpLAogICAgICAgIGFjY2Vzc0RlbmllZDogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUFjY2Vzc0RlbmllZCkKICAgICAgfSk7CiAgfTsKCiAgQ2xpZW50RW5naW5lLnByb3RvdHlwZS5wb2xsRm9yQWdlbnRQZXJtaXNzaW9ucyA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uLCBwYXJhbXNJbikgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdmFyIHBhcmFtcyA9IHBhcmFtc0luIHx8IHt9OwogICAgcGFyYW1zLm1heFJlc3VsdHMgPSBwYXJhbXMubWF4UmVzdWx0cyB8fCBjb25uZWN0LkRFRkFVTFRfQkFUQ0hfU0laRTsKCiAgICB0aGlzLmNsaWVudC5jYWxsKGNvbm5lY3QuQ2xpZW50TWV0aG9kcy5HRVRfQUdFTlRfUEVSTUlTU0lPTlMsIHsKICAgICAgbmV4dFRva2VuOiBwYXJhbXMubmV4dFRva2VuIHx8IG51bGwsCiAgICAgIG1heFJlc3VsdHM6IHBhcmFtcy5tYXhSZXN1bHRzCgogICAgfSwgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5uZXh0VG9rZW4pIHsKICAgICAgICAgICAgc2VsZi5wb2xsRm9yQWdlbnRQZXJtaXNzaW9ucyhjb25maWd1cmF0aW9uLCB7CiAgICAgICAgICAgICAgcGVybWlzc2lvbnM6IChwYXJhbXMucGVybWlzc2lvbnMgfHwgW10pLmNvbmNhdChkYXRhLnBlcm1pc3Npb25zKSwKICAgICAgICAgICAgICBuZXh0VG9rZW46IGRhdGEubmV4dFRva2VuLAogICAgICAgICAgICAgIG1heFJlc3VsdHM6IHBhcmFtcy5tYXhSZXN1bHRzCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucGVybWlzc2lvbnMgPSAocGFyYW1zLnBlcm1pc3Npb25zIHx8IFtdKS5jb25jYXQoZGF0YS5wZXJtaXNzaW9ucyk7CiAgICAgICAgICAgIHNlbGYudXBkYXRlQWdlbnRDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiRmFpbGVkIHRvIGZldGNoIGFnZW50IHBlcm1pc3Npb25zIGxpc3QuIikKICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCkKICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgIGVycjogZXJyLAogICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBhdXRoRmFpbHVyZTogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUF1dGhGYWlsKSwKICAgICAgICBhY2Nlc3NEZW5pZWQ6IGNvbm5lY3QuaGl0Y2goc2VsZiwgc2VsZi5oYW5kbGVBY2Nlc3NEZW5pZWQpCiAgICAgIH0pOwogIH07CgogIENsaWVudEVuZ2luZS5wcm90b3R5cGUucG9sbEZvckRpYWxhYmxlQ291bnRyeUNvZGVzID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24sIHBhcmFtc0luKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgcGFyYW1zID0gcGFyYW1zSW4gfHwge307CiAgICBwYXJhbXMubWF4UmVzdWx0cyA9IHBhcmFtcy5tYXhSZXN1bHRzIHx8IGNvbm5lY3QuREVGQVVMVF9CQVRDSF9TSVpFOwoKICAgIHRoaXMuY2xpZW50LmNhbGwoY29ubmVjdC5DbGllbnRNZXRob2RzLkdFVF9ESUFMQUJMRV9DT1VOVFJZX0NPREVTLCB7CiAgICAgIG5leHRUb2tlbjogcGFyYW1zLm5leHRUb2tlbiB8fCBudWxsLAogICAgICBtYXhSZXN1bHRzOiBwYXJhbXMubWF4UmVzdWx0cwogICAgfSwgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5uZXh0VG9rZW4pIHsKICAgICAgICAgICAgc2VsZi5wb2xsRm9yRGlhbGFibGVDb3VudHJ5Q29kZXMoY29uZmlndXJhdGlvbiwgewogICAgICAgICAgICAgIGNvdW50cnlDb2RlczogKHBhcmFtcy5jb3VudHJ5Q29kZXMgfHwgW10pLmNvbmNhdChkYXRhLmNvdW50cnlDb2RlcyksCiAgICAgICAgICAgICAgbmV4dFRva2VuOiBkYXRhLm5leHRUb2tlbiwKICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBwYXJhbXMubWF4UmVzdWx0cwogICAgICAgICAgICB9KTsKCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25maWd1cmF0aW9uLmRpYWxhYmxlQ291bnRyaWVzID0gKHBhcmFtcy5jb3VudHJ5Q29kZXMgfHwgW10pLmNvbmNhdChkYXRhLmNvdW50cnlDb2Rlcyk7CiAgICAgICAgICAgIHNlbGYudXBkYXRlQWdlbnRDb25maWd1cmF0aW9uKGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZmFpbHVyZTogZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiRmFpbGVkIHRvIGZldGNoIGRpYWxhYmxlIGNvdW50cnkgY29kZXMgbGlzdC4iKQogICAgICAgICAgICAuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKQogICAgICAgICAgICAud2l0aE9iamVjdCh7CiAgICAgICAgICAgICAgZXJyOiBlcnIsCiAgICAgICAgICAgICAgZGF0YTogZGF0YQogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGF1dGhGYWlsdXJlOiBjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuaGFuZGxlQXV0aEZhaWwpLAogICAgICAgIGFjY2Vzc0RlbmllZDogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUFjY2Vzc0RlbmllZCkKICAgICAgfSk7CiAgfTsKCiAgQ2xpZW50RW5naW5lLnByb3RvdHlwZS5wb2xsRm9yUm91dGluZ1Byb2ZpbGVRdWV1ZXMgPSBmdW5jdGlvbiAoY29uZmlndXJhdGlvbiwgcGFyYW1zSW4pIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBwYXJhbXMgPSBwYXJhbXNJbiB8fCB7fTsKICAgIHBhcmFtcy5tYXhSZXN1bHRzID0gcGFyYW1zLm1heFJlc3VsdHMgfHwgY29ubmVjdC5ERUZBVUxUX0JBVENIX1NJWkU7CgogICAgdGhpcy5jbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuR0VUX1JPVVRJTkdfUFJPRklMRV9RVUVVRVMsIHsKICAgICAgcm91dGluZ1Byb2ZpbGVBUk46IGNvbmZpZ3VyYXRpb24ucm91dGluZ1Byb2ZpbGUucm91dGluZ1Byb2ZpbGVBUk4sCiAgICAgIG5leHRUb2tlbjogcGFyYW1zLm5leHRUb2tlbiB8fCBudWxsLAogICAgICBtYXhSZXN1bHRzOiBwYXJhbXMubWF4UmVzdWx0cwogICAgfSwgewogICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBpZiAoZGF0YS5uZXh0VG9rZW4pIHsKICAgICAgICAgICAgc2VsZi5wb2xsRm9yUm91dGluZ1Byb2ZpbGVRdWV1ZXMoY29uZmlndXJhdGlvbiwgewogICAgICAgICAgICAgIGNvdW50cnlDb2RlczogKHBhcmFtcy5xdWV1ZXMgfHwgW10pLmNvbmNhdChkYXRhLnF1ZXVlcyksCiAgICAgICAgICAgICAgbmV4dFRva2VuOiBkYXRhLm5leHRUb2tlbiwKICAgICAgICAgICAgICBtYXhSZXN1bHRzOiBwYXJhbXMubWF4UmVzdWx0cwogICAgICAgICAgICB9KTsKCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25maWd1cmF0aW9uLnJvdXRpbmdQcm9maWxlLnF1ZXVlcyA9IChwYXJhbXMucXVldWVzIHx8IFtdKS5jb25jYXQoZGF0YS5xdWV1ZXMpOwogICAgICAgICAgICBzZWxmLnVwZGF0ZUFnZW50Q29uZmlndXJhdGlvbihjb25maWd1cmF0aW9uKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGZhaWx1cmU6IGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoIkZhaWxlZCB0byBmZXRjaCByb3V0aW5nIHByb2ZpbGUgcXVldWVzIGxpc3QuIikKICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCkKICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgIGVycjogZXJyLAogICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBhdXRoRmFpbHVyZTogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUF1dGhGYWlsKSwKICAgICAgICBhY2Nlc3NEZW5pZWQ6IGNvbm5lY3QuaGl0Y2goc2VsZiwgc2VsZi5oYW5kbGVBY2Nlc3NEZW5pZWQpCiAgICAgIH0pOwogIH07CgogIENsaWVudEVuZ2luZS5wcm90b3R5cGUuaGFuZGxlQVBJUmVxdWVzdCA9IGZ1bmN0aW9uIChwb3J0Q29uZHVpdCwgcmVxdWVzdCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgIHRoaXMuY2xpZW50LmNhbGwocmVxdWVzdC5tZXRob2QsIHJlcXVlc3QucGFyYW1zLCB7CiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlID0gY29ubmVjdC5FdmVudEZhY3RvcnkuY3JlYXRlUmVzcG9uc2UoY29ubmVjdC5FdmVudFR5cGUuQVBJX1JFU1BPTlNFLCByZXF1ZXN0LCBkYXRhKTsKICAgICAgICBwb3J0Q29uZHVpdC5zZW5kRG93bnN0cmVhbShyZXNwb25zZS5ldmVudCwgcmVzcG9uc2UpOwogICAgICB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlID0gY29ubmVjdC5FdmVudEZhY3RvcnkuY3JlYXRlUmVzcG9uc2UoY29ubmVjdC5FdmVudFR5cGUuQVBJX1JFU1BPTlNFLCByZXF1ZXN0LCBkYXRhLCBKU09OLnN0cmluZ2lmeShlcnIpKTsKICAgICAgICBwb3J0Q29uZHVpdC5zZW5kRG93bnN0cmVhbShyZXNwb25zZS5ldmVudCwgcmVzcG9uc2UpOwogICAgICAgIGNvbm5lY3QuZ2V0TG9nKCkuZXJyb3IoIiclcycgQVBJIHJlcXVlc3QgZmFpbGVkIiwgcmVxdWVzdC5tZXRob2QpCiAgICAgICAgICAud2l0aE9iamVjdCh7IHJlcXVlc3Q6IHNlbGYuZmlsdGVyQXV0aFRva2VuKHJlcXVlc3QpLCByZXNwb25zZTogcmVzcG9uc2UgfSkKICAgICAgICAgIC53aXRoRXhjZXB0aW9uKGVycikKICAgICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9LAogICAgICBhdXRoRmFpbHVyZTogY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUF1dGhGYWlsLCB7YXV0aG9yaXplOiB0cnVlfSkKICAgIH0pOwogIH07CgogIC8qKgogICAqIEhhbmRsZSBpbmNvbWluZyBtYXN0ZXIgcXVlcnkgb3IgbW9kaWZpY2F0aW9uIHJlcXVlc3RzIGZyb20gY29ubmVjdGVkIHRhYiBwb3J0cy4KICAgKi8KICBDbGllbnRFbmdpbmUucHJvdG90eXBlLmhhbmRsZU1hc3RlclJlcXVlc3QgPSBmdW5jdGlvbiAocG9ydENvbmR1aXQsIHBvcnRJZCwgcmVxdWVzdCkgewogICAgdmFyIG11bHRpcGxleGVyQ29uZHVpdCA9IHRoaXMuY29uZHVpdDsKICAgIHZhciByZXNwb25zZSA9IG51bGw7CgogICAgc3dpdGNoIChyZXF1ZXN0Lm1ldGhvZCkgewogICAgICBjYXNlIGNvbm5lY3QuTWFzdGVyTWV0aG9kcy5CRUNPTUVfTUFTVEVSOgogICAgICAgIHZhciBtYXN0ZXJJZCA9IHRoaXMubWFzdGVyQ29vcmQuZ2V0TWFzdGVyKHJlcXVlc3QucGFyYW1zLnRvcGljKTsKICAgICAgICB2YXIgdGFrZU92ZXIgPSBCb29sZWFuKG1hc3RlcklkKSAmJiBtYXN0ZXJJZCAhPT0gcG9ydElkOwogICAgICAgIHRoaXMubWFzdGVyQ29vcmQuc2V0TWFzdGVyKHJlcXVlc3QucGFyYW1zLnRvcGljLCBwb3J0SWQpOwogICAgICAgIHJlc3BvbnNlID0gY29ubmVjdC5FdmVudEZhY3RvcnkuY3JlYXRlUmVzcG9uc2UoY29ubmVjdC5FdmVudFR5cGUuTUFTVEVSX1JFU1BPTlNFLCByZXF1ZXN0LCB7CiAgICAgICAgICBtYXN0ZXJJZDogcG9ydElkLAogICAgICAgICAgdGFrZU92ZXI6IHRha2VPdmVyLAogICAgICAgICAgdG9waWM6IHJlcXVlc3QucGFyYW1zLnRvcGljCiAgICAgICAgfSk7CiAgICAgICAgaWYgKHRha2VPdmVyKSB7CiAgICAgICAgICBtdWx0aXBsZXhlckNvbmR1aXQuc2VuZERvd25zdHJlYW0ocmVzcG9uc2UuZXZlbnQsIHJlc3BvbnNlKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIGNvbm5lY3QuTWFzdGVyTWV0aG9kcy5DSEVDS19NQVNURVI6CiAgICAgICAgdmFyIG1hc3RlcklkID0gdGhpcy5tYXN0ZXJDb29yZC5nZXRNYXN0ZXIocmVxdWVzdC5wYXJhbXMudG9waWMpOwogICAgICAgIGlmICghbWFzdGVySWQgJiYgIXJlcXVlc3QucGFyYW1zLnNob3VsZE5vdEJlY29tZU1hc3RlcklmTm9uZSkgewogICAgICAgICAgdGhpcy5tYXN0ZXJDb29yZC5zZXRNYXN0ZXIocmVxdWVzdC5wYXJhbXMudG9waWMsIHBvcnRJZCk7CiAgICAgICAgICBtYXN0ZXJJZCA9IHBvcnRJZDsKICAgICAgICB9CiAgICAgICAgcmVzcG9uc2UgPSBjb25uZWN0LkV2ZW50RmFjdG9yeS5jcmVhdGVSZXNwb25zZShjb25uZWN0LkV2ZW50VHlwZS5NQVNURVJfUkVTUE9OU0UsIHJlcXVlc3QsIHsKICAgICAgICAgIG1hc3RlcklkOiBtYXN0ZXJJZCwKICAgICAgICAgIGlzTWFzdGVyOiBwb3J0SWQgPT09IG1hc3RlcklkLAogICAgICAgICAgdG9waWM6IHJlcXVlc3QucGFyYW1zLnRvcGljCiAgICAgICAgfSk7CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5rbm93biBtYXN0ZXIgbWV0aG9kOiAiICsgcmVxdWVzdC5tZXRob2QpOwogICAgfQoKICAgIHBvcnRDb25kdWl0LnNlbmREb3duc3RyZWFtKHJlc3BvbnNlLmV2ZW50LCByZXNwb25zZSk7CiAgfTsKCiAgQ2xpZW50RW5naW5lLnByb3RvdHlwZS5oYW5kbGVUYWJJZEV2ZW50ID0gZnVuY3Rpb24gKHN0cmVhbSwgZGF0YSkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgdHJ5IHsKICAgICAgbGV0IHRhYklkID0gZGF0YS50YWJJZDsKICAgICAgbGV0IHN0cmVhbXNJblRoaXNUYWIgPSBzZWxmLnN0cmVhbU1hcEJ5VGFiSWRbdGFiSWRdOwogICAgICBsZXQgY3VycmVudFN0cmVhbUlkID0gc3RyZWFtLmdldElkKCk7CiAgICAgIGlmIChzdHJlYW1zSW5UaGlzVGFiICYmIHN0cmVhbXNJblRoaXNUYWIubGVuZ3RoID4gMCl7CiAgICAgICAgaWYgKCFzdHJlYW1zSW5UaGlzVGFiLmluY2x1ZGVzKGN1cnJlbnRTdHJlYW1JZCkpIHsKICAgICAgICAgIHNlbGYuc3RyZWFtTWFwQnlUYWJJZFt0YWJJZF0ucHVzaChjdXJyZW50U3RyZWFtSWQpOwogICAgICAgICAgbGV0IHVwZGF0ZU9iamVjdCA9IHsgbGVuZ3RoOiBPYmplY3Qua2V5cyhzZWxmLnBvcnRDb25kdWl0TWFwKS5sZW5ndGggfTsKICAgICAgICAgIHVwZGF0ZU9iamVjdFt0YWJJZF0gPSB7IGxlbmd0aDogc3RyZWFtc0luVGhpc1RhYi5sZW5ndGggfTsKICAgICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5VUERBVEVfQ09OTkVDVEVEX0NDUFMsIHVwZGF0ZU9iamVjdCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHNlbGYuc3RyZWFtTWFwQnlUYWJJZFt0YWJJZF0gPSBbc3RyZWFtLmdldElkKCldOwogICAgICAgIGxldCB1cGRhdGVPYmplY3QgPSB7IGxlbmd0aDogT2JqZWN0LmtleXMoc2VsZi5wb3J0Q29uZHVpdE1hcCkubGVuZ3RoIH07CiAgICAgICAgdXBkYXRlT2JqZWN0W3RhYklkXSA9IHsgbGVuZ3RoOiBzZWxmLnN0cmVhbU1hcEJ5VGFiSWRbdGFiSWRdLmxlbmd0aCB9OwogICAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5VUERBVEVfQ09OTkVDVEVEX0NDUFMsIHVwZGF0ZU9iamVjdCk7CiAgICAgIH0KICAgIH0gY2F0Y2goZSkgewogICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJbVGFiIElkc10gSXNzdWUgdXBkYXRpbmcgY29ubmVjdGVkIENDUHMgd2l0aGluIHRoZSBzYW1lIHRhYiIpLndpdGhFeGNlcHRpb24oZSkuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgIH0KICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLmhhbmRsZUNsb3NlRXZlbnQgPSBmdW5jdGlvbihzdHJlYW0pIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHNlbGYubXVsdGlwbGV4ZXIucmVtb3ZlU3RyZWFtKHN0cmVhbSk7CiAgICBkZWxldGUgc2VsZi5wb3J0Q29uZHVpdE1hcFtzdHJlYW0uZ2V0SWQoKV07CiAgICBzZWxmLm1hc3RlckNvb3JkLnJlbW92ZU1hc3RlcihzdHJlYW0uZ2V0SWQoKSk7CiAgICBsZXQgdXBkYXRlT2JqZWN0ID0geyBsZW5ndGg6IE9iamVjdC5rZXlzKHNlbGYucG9ydENvbmR1aXRNYXApLmxlbmd0aCB9OwogICAgdHJ5IHsKICAgICAgbGV0IHRhYklkID0gT2JqZWN0LmtleXMoc2VsZi5zdHJlYW1NYXBCeVRhYklkKS5maW5kKGtleSA9PiBzZWxmLnN0cmVhbU1hcEJ5VGFiSWRba2V5XS5pbmNsdWRlcyhzdHJlYW0uZ2V0SWQoKSkpOwogICAgICBpZiAodGFiSWQpIHsKICAgICAgICBsZXQgc3RyZWFtSW5kZXhJbk1hcCA9IHNlbGYuc3RyZWFtTWFwQnlUYWJJZFt0YWJJZF0uZmluZEluZGV4KCh2YWx1ZSkgPT4gc3RyZWFtLmdldElkKCkgPT09IHZhbHVlKTsKICAgICAgICBzZWxmLnN0cmVhbU1hcEJ5VGFiSWRbdGFiSWRdLnNwbGljZShzdHJlYW1JbmRleEluTWFwLCAxKTsKICAgICAgICBsZXQgdGFiTGVuZ3RoID0gc2VsZi5zdHJlYW1NYXBCeVRhYklkW3RhYklkXSA/IHNlbGYuc3RyZWFtTWFwQnlUYWJJZFt0YWJJZF0ubGVuZ3RoIDogMDsKICAgICAgICB1cGRhdGVPYmplY3RbdGFiSWRdID0geyBsZW5ndGg6IHRhYkxlbmd0aCB9OwogICAgICB9CiAgICB9IGNhdGNoKGUpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiW1RhYiBJZHNdIElzc3VlIHVwZGF0aW5nIHRhYklkLXNwZWNpZmljIHN0cmVhbSBkYXRhIikud2l0aEV4Y2VwdGlvbihlKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgfQogICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLlVQREFURV9DT05ORUNURURfQ0NQUywgdXBkYXRlT2JqZWN0KTsKICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLnVwZGF0ZUFnZW50Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7CiAgICBpZiAoY29uZmlndXJhdGlvbi5wZXJtaXNzaW9ucyAmJgogICAgICBjb25maWd1cmF0aW9uLmRpYWxhYmxlQ291bnRyaWVzICYmCiAgICAgIGNvbmZpZ3VyYXRpb24uYWdlbnRTdGF0ZXMgJiYKICAgICAgY29uZmlndXJhdGlvbi5yb3V0aW5nUHJvZmlsZS5xdWV1ZXMpIHsKCiAgICAgIHRoaXMuYWdlbnQgPSB0aGlzLmFnZW50IHx8IHt9OwogICAgICB0aGlzLmFnZW50LmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uOwogICAgICB0aGlzLnVwZGF0ZUFnZW50KCk7CgogICAgfSBlbHNlIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS50cmFjZSgiV2FpdGluZyB0byB1cGRhdGUgYWdlbnQgY29uZmlndXJhdGlvbiB1bnRpbCBhbGwgY29uZmlnIGRhdGEgaGFzIGJlZW4gZmV0Y2hlZC4iKQogICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgfQogIH07CgogIENsaWVudEVuZ2luZS5wcm90b3R5cGUudXBkYXRlQWdlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIXRoaXMuYWdlbnQpIHsKICAgICAgY29ubmVjdC5nZXRMb2coKS50cmFjZSgiV2FpdGluZyB0byB1cGRhdGUgYWdlbnQgdW50aWwgdGhlIGFnZW50IGhhcyBiZWVuIGZ1bGx5IGNvbnN0cnVjdGVkLiIpCiAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CgogICAgfSBlbHNlIGlmICghdGhpcy5hZ2VudC5zbmFwc2hvdCkgewogICAgICBjb25uZWN0LmdldExvZygpLnRyYWNlKCJXYWl0aW5nIHRvIHVwZGF0ZSBhZ2VudCB1bnRpbCB0aGUgYWdlbnQgc25hcHNob3QgaXMgYXZhaWxhYmxlLiIpCiAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CgogICAgfSBlbHNlIGlmICghdGhpcy5hZ2VudC5jb25maWd1cmF0aW9uKSB7CiAgICAgIGNvbm5lY3QuZ2V0TG9nKCkudHJhY2UoIldhaXRpbmcgdG8gdXBkYXRlIGFnZW50IHVudGlsIHRoZSBhZ2VudCBjb25maWd1cmF0aW9uIGlzIGF2YWlsYWJsZS4iKQogICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwoKICAgIH0gZWxzZSB7CiAgICAgIC8vIEFsaWFzIHNvbWUgb2YgdGhlIHByb3BlcnRpZXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgogICAgICB0aGlzLmFnZW50LnNuYXBzaG90LnN0YXR1cyA9IHRoaXMuYWdlbnQuc3RhdGU7CgogICAgICAvLyBTb3J0IHRoZSBjb250YWN0cyBvbiB0aGUgdGltZXN0YW1wCiAgICAgIGlmICh0aGlzLmFnZW50LnNuYXBzaG90LmNvbnRhY3RzICYmIHRoaXMuYWdlbnQuc25hcHNob3QuY29udGFjdHMubGVuZ3RoID4gMSkgewogICAgICAgIHRoaXMuYWdlbnQuc25hcHNob3QuY29udGFjdHMuc29ydChmdW5jdGlvbiAoY29udGFjdEEsIGNvbnRhY3RCKSB7CiAgICAgICAgICByZXR1cm4gY29udGFjdEEuc3RhdGUudGltZXN0YW1wLmdldFRpbWUoKSAtIGNvbnRhY3RCLnN0YXRlLnRpbWVzdGFtcC5nZXRUaW1lKCk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMuYWdlbnQuc25hcHNob3QuY29udGFjdHMuZm9yRWFjaChmdW5jdGlvbiAoY29udGFjdCkgewogICAgICAgIGNvbnRhY3Quc3RhdHVzID0gY29udGFjdC5zdGF0ZTsKCiAgICAgICAgY29udGFjdC5jb25uZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb25uZWN0aW9uKSB7CiAgICAgICAgICBjb25uZWN0aW9uLmFkZHJlc3MgPSBjb25uZWN0aW9uLmVuZHBvaW50OwogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIHRoaXMuYWdlbnQuY29uZmlndXJhdGlvbi5yb3V0aW5nUHJvZmlsZS5kZWZhdWx0T3V0Ym91bmRRdWV1ZS5xdWV1ZUlkID0KICAgICAgICB0aGlzLmFnZW50LmNvbmZpZ3VyYXRpb24ucm91dGluZ1Byb2ZpbGUuZGVmYXVsdE91dGJvdW5kUXVldWUucXVldWVBUk47CiAgICAgIHRoaXMuYWdlbnQuY29uZmlndXJhdGlvbi5yb3V0aW5nUHJvZmlsZS5xdWV1ZXMuZm9yRWFjaChmdW5jdGlvbiAocXVldWUpIHsKICAgICAgICBxdWV1ZS5xdWV1ZUlkID0gcXVldWUucXVldWVBUk47CiAgICAgIH0pOwogICAgICB0aGlzLmFnZW50LnNuYXBzaG90LmNvbnRhY3RzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRhY3QpIHsKICAgICAgICAvL2NvbnRhY3QucXVldWUgaXMgbnVsbCB3aGVuIG1vbml0b3JpbmcKICAgICAgICBpZiAoY29udGFjdC5xdWV1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBjb250YWN0LnF1ZXVlLnF1ZXVlSWQgPSBjb250YWN0LnF1ZXVlLnF1ZXVlQVJOOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuYWdlbnQuY29uZmlndXJhdGlvbi5yb3V0aW5nUHJvZmlsZS5yb3V0aW5nUHJvZmlsZUlkID0KICAgICAgICB0aGlzLmFnZW50LmNvbmZpZ3VyYXRpb24ucm91dGluZ1Byb2ZpbGUucm91dGluZ1Byb2ZpbGVBUk47CiAgICAgIAogICAgICBpZiAodGhpcy5zdXBwcmVzcykgewogICAgICAgIHRoaXMuYWdlbnQuc25hcHNob3QuY29udGFjdHMgPSB0aGlzLmFnZW50LnNuYXBzaG90LmNvbnRhY3RzLmZpbHRlcihmdW5jdGlvbihjb250YWN0KXsKICAgICAgICAgIHJldHVybiAoY29udGFjdC5zdGF0ZS50eXBlID09IGNvbm5lY3QuQ29ubmVjdGlvblN0YXRlVHlwZS5IT0xEIHx8IGNvbnRhY3Quc3RhdGUudHlwZSA9PSBjb25uZWN0LkNvbm5lY3Rpb25TdGF0ZVR5cGUuQ09OTkVDVEVEKTsKICAgICAgICB9KTsKICAgICAgICBpZiAodGhpcy5mb3JjZU9mZmxpbmUpIHsKICAgICAgICAgIHRoaXMuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkRpc2FzdGVyUmVjb3ZlcnlFdmVudHMuRk9SQ0VfT0ZGTElORSk7CiAgICAgICAgfQogICAgICB9IAogICAgICB0aGlzLmNvbmR1aXQuc2VuZERvd25zdHJlYW0oY29ubmVjdC5BZ2VudEV2ZW50cy5VUERBVEUsIHRoaXMuYWdlbnQpOwogICAgfQogIH07CgovKioKICogUHJvdmlkZXMgYSB3ZWJzb2NrZXQgdXJsIHRocm91Z2ggdGhlIGNyZWF0ZV90cmFuc3BvcnQgQVBJLgogKiBAcmV0dXJucyBhIHByb21pc2Ugd2hpY2gsIHVwb24gc3VjY2VzcywgcmV0dXJucyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgY3JlYXRlVHJhbnNwb3J0IEFQSS4KICovCiAgQ2xpZW50RW5naW5lLnByb3RvdHlwZS5nZXRXZWJTb2NrZXRVcmwgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgY2xpZW50ID0gY29ubmVjdC5jb3JlLmdldENsaWVudCgpOwogICAgdmFyIG9uQXV0aEZhaWwgPSBjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuaGFuZGxlQXV0aEZhaWwpOwogICAgdmFyIG9uQWNjZXNzRGVuaWVkID0gY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmhhbmRsZUFjY2Vzc0RlbmllZCk7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBjbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuQ1JFQVRFX1RSQU5TUE9SVCwgeyB0cmFuc3BvcnRUeXBlOiBjb25uZWN0LlRSQU5TUE9SVF9UWVBFUy5XRUJfU09DS0VUIH0sIHsKICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJnZXRXZWJTb2NrZXRVcmwgc3VjY2VlZGVkIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHJlc29sdmUoZGF0YSk7CiAgICAgICAgfSwKICAgICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXRXZWJTb2NrZXRVcmwgZmFpbGVkIikKICAgICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCkKICAgICAgICAgICAgLndpdGhPYmplY3QoewogICAgICAgICAgICAgIGVycjogZXJyLAogICAgICAgICAgICAgIGRhdGE6IGRhdGEKICAgICAgICAgICAgfSk7CiAgICAgICAgICByZWplY3QoewogICAgICAgICAgICByZWFzb246ICdnZXRXZWJTb2NrZXRVcmwgZmFpbGVkJywgCiAgICAgICAgICAgIF9kZWJ1ZzogZXJyCiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGF1dGhGYWlsdXJlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXRXZWJTb2NrZXRVcmwgQXV0aCBGYWlsdXJlIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHJlamVjdChFcnJvcigiQXV0aGVudGljYXRpb24gZmFpbGVkIHdoaWxlIGdldHRpbmcgZ2V0V2ViU29ja2V0VXJsIikpOwogICAgICAgICAgb25BdXRoRmFpbCgpOwogICAgICAgIH0sCiAgICAgICAgYWNjZXNzRGVuaWVkOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJnZXRXZWJTb2NrZXRVcmwgQWNjZXNzIERlbmllZCBGYWlsdXJlIikuc2VuZEludGVybmFsTG9nVG9TZXJ2ZXIoKTsKICAgICAgICAgIHJlamVjdChFcnJvcigiQWNjZXNzIERlbmllZCBGYWlsdXJlIHdoaWxlIGdldHRpbmcgZ2V0V2ViU29ja2V0VXJsIikpOwogICAgICAgICAgb25BY2Nlc3NEZW5pZWQoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCgogIC8qKgogICAgKiBTZW5kIGEgbWVzc2FnZSBkb3duc3RyZWFtIHRvIGFsbCBjb25zdW1lcnMgd2hlbiB3ZSBkZXRlY3QgdGhhdCBhdXRoZW50aWNhdGlvbgogICAgKiBhZ2FpbnN0IG9uZSBvZiBvdXIgQVBJcyBoYXMgZmFpbGVkLgogICAgKi8KICBDbGllbnRFbmdpbmUucHJvdG90eXBlLmhhbmRsZVNlbmRMb2dzUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIHZhciBsb2dFdmVudHMgPSBbXTsKICAgIHZhciBsb2dzVG9TZW5kID0gc2VsZi5sb2dzQnVmZmVyLnNsaWNlKCk7CiAgICBzZWxmLmxvZ3NCdWZmZXIgPSBbXTsKICAgIGxvZ3NUb1NlbmQuZm9yRWFjaChmdW5jdGlvbiAobG9nKSB7CiAgICAgIGxvZ0V2ZW50cy5wdXNoKHsKICAgICAgICB0aW1lc3RhbXA6IGxvZy50aW1lLAogICAgICAgIGNvbXBvbmVudDogbG9nLmNvbXBvbmVudCwKICAgICAgICBtZXNzYWdlOiBsb2cudGV4dAogICAgICB9KTsKICAgIH0pOwogICAgdGhpcy5jbGllbnQuY2FsbChjb25uZWN0LkNsaWVudE1ldGhvZHMuU0VORF9DTElFTlRfTE9HUywgeyBsb2dFdmVudHM6IGxvZ0V2ZW50cyB9LCB7CiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJTZW5kTG9ncyByZXF1ZXN0IHN1Y2NlZWRlZC4iKS5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICB9LAogICAgICBmYWlsdXJlOiBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CiAgICAgICAgY29ubmVjdC5nZXRMb2coKS5lcnJvcigiU2VuZExvZ3MgcmVxdWVzdCBmYWlsZWQuIikKICAgICAgICAgIC53aXRoT2JqZWN0KGRhdGEpLndpdGhFeGNlcHRpb24oZXJyKQogICAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIH0sCiAgICAgIGF1dGhGYWlsdXJlOiBjb25uZWN0LmhpdGNoKHNlbGYsIHNlbGYuaGFuZGxlQXV0aEZhaWwpCiAgICB9KTsKICB9OwoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLmhhbmRsZUF1dGhGYWlsID0gZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGlmIChkYXRhKSB7CiAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BVVRIX0ZBSUwsIGRhdGEpOwogICAgfQogICAgZWxzZSB7CiAgICAgIHNlbGYuY29uZHVpdC5zZW5kRG93bnN0cmVhbShjb25uZWN0LkV2ZW50VHlwZS5BVVRIX0ZBSUwpOwogICAgfQogIH07CgogIENsaWVudEVuZ2luZS5wcm90b3R5cGUuaGFuZGxlQWNjZXNzRGVuaWVkID0gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzOwogICAgc2VsZi5jb25kdWl0LnNlbmREb3duc3RyZWFtKGNvbm5lY3QuRXZlbnRUeXBlLkFDQ0VTU19ERU5JRUQpOwogIH07CgogIENsaWVudEVuZ2luZS5wcm90b3R5cGUuY2hlY2tBdXRoVG9rZW4gPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICB2YXIgZXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZShzZWxmLmluaXREYXRhLmF1dGhUb2tlbkV4cGlyYXRpb24pOwogICAgdmFyIGN1cnJlbnRUaW1lU3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIHZhciB0aGlydHlNaW5zID0gMzAgKiA2MCAqIDEwMDA7CgogICAgLy8gcmVmcmVzaCB0b2tlbiAzMCBtaW51dGVzIGJlZm9yZSBleHBpcmF0aW9uCiAgICBpZiAoZXhwaXJhdGlvbkRhdGUuZ2V0VGltZSgpIDwgKGN1cnJlbnRUaW1lU3RhbXAgKyB0aGlydHlNaW5zKSkgewogICAgICBjb25uZWN0LmdldExvZygpLmluZm8oIkF1dGggdG9rZW4gZXhwaXJlcyBhdCAiICsgZXhwaXJhdGlvbkRhdGUgKyAiIFN0YXJ0IHJlZnJlc2hpbmcgdG9rZW4gd2l0aCByZXRyeS4iKQogICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICBjb25uZWN0LmJhY2tvZmYoY29ubmVjdC5oaXRjaChzZWxmLCBzZWxmLmF1dGhvcml6ZSksIFJFRlJFU0hfQVVUSF9UT0tFTl9JTlRFUlZBTF9NUywgUkVGUkVTSF9BVVRIX1RPS0VOX01BWF9UUlkpOwogICAgfQogIH07CgoKICBDbGllbnRFbmdpbmUucHJvdG90eXBlLmF1dGhvcml6ZSA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHsKICAgIHZhciBzZWxmID0gdGhpczsKICAgIGNvbm5lY3QuY29yZS5hdXRob3JpemUodGhpcy5pbml0RGF0YS5hdXRob3JpemVFbmRwb2ludCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgdmFyIGV4cGlyYXRpb24gPSBuZXcgRGF0ZShyZXNwb25zZS5leHBpcmF0aW9uKTsKICAgICAgY29ubmVjdC5nZXRMb2coKS5pbmZvKCJBdXRob3JpemF0aW9uIHN1Y2NlZWRlZCBhbmQgdGhlIHRva2VuIGV4cGlyZXMgYXQgJXMiLCBleHBpcmF0aW9uKQogICAgICAgIC5zZW5kSW50ZXJuYWxMb2dUb1NlcnZlcigpOwogICAgICBzZWxmLmluaXREYXRhLmF1dGhUb2tlbiA9IHJlc3BvbnNlLmFjY2Vzc1Rva2VuOwogICAgICBzZWxmLmluaXREYXRhLmF1dGhUb2tlbkV4cGlyYXRpb24gPSBleHBpcmF0aW9uOwogICAgICBjb25uZWN0LmNvcmUuaW5pdENsaWVudChzZWxmLmluaXREYXRhKTsKICAgICAgY29ubmVjdC5jb3JlLmluaXRBZ2VudEFwcENsaWVudChzZWxmLmluaXREYXRhKTsKICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MoKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICBjb25uZWN0LmdldExvZygpLmVycm9yKCJBdXRob3JpemF0aW9uIGZhaWxlZCB3aXRoIGNvZGUgJXMiLCByZXNwb25zZS5zdGF0dXMpCiAgICAgICAgLnNlbmRJbnRlcm5hbExvZ1RvU2VydmVyKCk7CiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSkgewogICAgICAgIHNlbGYuaGFuZGxlQXV0aEZhaWwoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFja3MuZmFpbHVyZSgpOwogICAgICB9CiAgICB9KTsKICB9OwoKICAvKioKICAgKiBGaWx0ZXIgdGhlICdhdXRoZW50aWNhdGlvbicgZmllbGQgb2YgdGhlIHJlcXVlc3QgcGFyYW1zIGZyb20gdGhlIGdpdmVuIEFQSV9SRVFVRVNUIGV2ZW50LgogICAqLwogIENsaWVudEVuZ2luZS5wcm90b3R5cGUuZmlsdGVyQXV0aFRva2VuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHsKICAgIHZhciBuZXdfcmVxdWVzdCA9IHt9OwoKICAgIGZvciAodmFyIGtleUEgaW4gcmVxdWVzdCkgewogICAgICBpZiAoa2V5QSA9PT0gJ3BhcmFtcycpIHsKICAgICAgICB2YXIgbmV3X3BhcmFtcyA9IHt9OwogICAgICAgIGZvciAodmFyIGtleUIgaW4gcmVxdWVzdC5wYXJhbXMpIHsKICAgICAgICAgIGlmIChrZXlCICE9PSAnYXV0aGVudGljYXRpb24nKSB7CiAgICAgICAgICAgIG5ld19wYXJhbXNba2V5Ql0gPSByZXF1ZXN0LnBhcmFtc1trZXlCXTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG5ld19yZXF1ZXN0LnBhcmFtcyA9IG5ld19wYXJhbXM7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbmV3X3JlcXVlc3Rba2V5QV0gPSByZXF1ZXN0W2tleUFdOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG5ld19yZXF1ZXN0OwogIH07CgogIC8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KICBjb25uZWN0Lndvcmtlci5tYWluID0gZnVuY3Rpb24gKCkgewogICAgY29ubmVjdC53b3JrZXIuY2xpZW50RW5naW5lID0gbmV3IENsaWVudEVuZ2luZSgpOwogIH07Cgp9KSgpOwoKLyoqKi8gfSkKCi8qKioqKiovIAl9KTsKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTsKLyoqKioqKi8gCQovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KLyoqKioqKi8gCWZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHsKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQl2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTsKLyoqKioqKi8gCQlpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHsKLyoqKioqKi8gCQkJcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0gewovKioqKioqLyAJCQkvLyBubyBtb2R1bGUuaWQgbmVlZGVkCi8qKioqKiovIAkJCS8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCV9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pOwovKioqKioqLyAJCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9Ci8qKioqKiovIAkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9nbG9iYWwgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkgewovKioqKioqLyAJCQlpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpczsKLyoqKioqKi8gCQkJdHJ5IHsKLyoqKioqKi8gCQkJCXJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwovKioqKioqLyAJCQl9IGNhdGNoIChlKSB7Ci8qKioqKiovIAkJCQlpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQl9KSgpOwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAJCi8qKioqKiovIAkvLyBzdGFydHVwCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCS8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ21vZHVsZScgc28gaXQgY2FuJ3QgYmUgaW5saW5lZAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXyg4MjcpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXyg5NDQpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXyg4OTEpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXyg1OTIpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDc1NCk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDgzMyk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDk2NSk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDI4Nik7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDg5NSk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDc0Myk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDY0Mik7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDczNik7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDQzOSk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDI3OSk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDQxOCk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nyk7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKDgyMSk7Ci8qKioqKiovIAl2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTAwKTsKLyoqKioqKi8gCQovKioqKioqLyB9KSgpCjs="),C=function(I){this.region=I.region,this.id=this.region.replace(/-/g,"_"),this.height=I.height,this.style=I.iframe_style,this.ccp=this._createFramedCcp(JSON.stringify(I))};C.prototype._createFramedCcp=function(I){var g=g||"microphone; autoplay",C=this.style||"margin: 0; border: 0; padding: 0px; width: 0px; height: 0px",A=document.createElement("iframe");return A.srcdoc=this.getContent(I),A.allow=g,A.id=this.id,A.style=C,A.scrolling="no",A},C.prototype.getContent=function(I){return["<!DOCTYPE html>","<meta charset='UTF-8'>","<html>","<head>","<script type='text/javascript'>",g,"<\/script>","</head>","<body onload='init()'>","<div id=containerDiv style='width: 100%;height: "+this.height+"'></div>","<script type='text/javascript'>","function init() {","connect.core.initCCP(containerDiv,"+I+");","}","<\/script>","</body>","</html>"].join("")},globalConnect.Container=C}(),function(){var I=this;connect=I.connect||{},globalConnect=I.globalConnect||{},I.connect=connect,I.globalConnect=globalConnect,I.lily=connect,connect.core={},globalConnect.core={regions:{}};var g="465px",C=!0,A=function(I){var g=window.getComputedStyle(I);return{height:g.getPropertyValue("height"),width:g.getPropertyValue("width"),display:g.getPropertyValue("display")}},Z=function(I,g){if(connect.assertTrue("string"==typeof I,"Region provided "+I+" is not a valid string"),!(g||globalConnect.core.regions).hasOwnProperty(I)){var C="Region provided "+I+" is not found!";throw new connect.ValueError(C)}};globalConnect.core.initCCP=function(I,G){connect.assertNotNull(G.getPrimaryRegion,"getPrimaryRegion"),connect.assertTrue(connect.isFunction(G.getPrimaryRegion),"getPrimaryRegion must be a function");var d=G.getPrimaryRegion;delete G.getPrimaryRegion;var c=function(I,Z){connect.assertNotNull(Z.standByRegion,"ccpBackupResource"),connect.assertNotNull(Z.standByRegion.ccpUrl,"ccpUrl"),connect.assertNotNull(Z.standByRegion.loginUrl,"loginUrl"),connect.assertNotNull(Z.standByRegion.region,"region");var l=Z,b=Object.assign({},Z,{ccpUrl:Z.standByRegion.ccpUrl,loginUrl:Z.standByRegion.loginUrl,region:Z.standByRegion.region}),G=A(I);return"none"==G.display&&(C=!1),parseInt(G.height)<=0&&(I.style.height=g,G.height=g),[l,b].map((function(I){return connect.assertNotNull(I.ccpUrl,"ccpUrl"),connect.assertNotNull(I.loginUrl,"loginUrl"),connect.assertNotNull(I.region,"region"),delete I.standByRegion,I.loginPopup=!1,I.disasterRecoveryOn=!0,I.iframe_style="margin: 0; border: 0; padding:0px;width: 0px;height: 0px",I.height=G.height,I}))}(I,G);d((function(g){return new Promise((A=>{var G=c.reduce((function(I,g){return I[g.region]=null,I}),{});Z(g,G);var d=c.map((function(I){return I.region===g&&(I.isPrimary=!0),new globalConnect.Container(I)})),V=d.map((function(I){return I.ccp.outerHTML})),m=document.createElement("iframe");m.style="margin: 0; border: 0; padding:0px;width: 100%;height: 100%",m.id="globalCCP",m.scrolling="no",m.onload=function(){if(C){var I=Object.keys(G).find((function(I){return I!=g}));b(g,m.id),l(I,m.id)}d.map((function(A){globalConnect.core.regions[A.region]=m.contentDocument.getElementById(A.id).contentWindow.connect;var Z=globalConnect.core.regions[A.region];Z.core.getUpstream().onUpstream(Z.DisasterRecoveryEvents.FAILOVER,(function(A){A.isPrimary?(connect=Z,g=connect.core.region,C&&b(g,m.id)):C&&(I=Z.core.region,l(I,m.id))}))})),connect=globalConnect.core.regions[g],A()},m.srcdoc=V.join(""),I.appendChild(m)}))}),(function(I){console.error("[Disaster Recovery] An error occured, while attempting to retrieve your primary region;"),I()}))};var l=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height: 0; width: 0; border: 0px"},b=function(I,g){I=I.replace(/-/g,"_"),document.getElementById(g).contentDocument.getElementById(I).style="height:800px;width:100%;border:0px"},G=function(I){return I=I||connect.core.region,Object.keys(globalConnect.core.regions).find((function(g){return g!==I}))};globalConnect.core.failover=function(){globalConnect.core.failoverTo(G())},globalConnect.core.failoverTo=function(I){Z(I);var g=G(I);d(g),c(I),connect=globalConnect.core.regions[I]};var d=function(I){var g=globalConnect.core.regions[I];g.getLog().info("[Disaster Recovery] Deactivating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!0),g.core.forceOffline()},c=function(I){var g=globalConnect.core.regions[I];g.getLog().info("[Disaster Recovery] Activating %s region.",g.core.region).sendInternalLogToServer(),g.core.suppressContacts(!1)};connect.core.initCCP=globalConnect.core.initCCP}();