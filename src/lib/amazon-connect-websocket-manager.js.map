{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/constants.js","webpack:///./src/utils.js","webpack:///./src/log.js","webpack:///./src/retryProvider.js","webpack:///./src/webSocketManager.js","webpack:///./node_modules/sprintf-js/src/sprintf.js","webpack:///./src/index.js","webpack:///(webpack)/buildin/global.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LOGS_DESTINATION","WEBSOCKET_RETRY_RATE_MS","LOG_MESSAGES","ROUTE_KEY","CONN_STATE","Utils","premise","message","Error","assertTrue","undefined","_typeof","sprintf","length","Array","isArray","obj","constructor","apply","wsRegex","RegExp","validWSUrl","wsUrl","test","getSubscriptionResponse","routeKey","isSuccess","topicList","topic","content","status","topics","assertIsObject","isObject","addJitter","base","maxJitter","arguments","Math","min","sign","random","floor","isNetworkOnline","navigator","onLine","isNetworkFailure","reason","_debug","type","Logger","data","DEFAULT_PREFIX","LogLevel","DEBUG","INFO","WARN","ERROR","ADVANCED_LOG","LogManagerImpl","_classCallCheck","this","updateLoggerConfig","consoleLoggerWrapper","createConsoleLogger","level","logStatement","hasClientLogger","_clientLogger","debug","info","warn","error","_advancedLogWriter","_level","options","prefix","_logsDestination","LoggerWrapperImpl","inputConfig","config","advancedLogWriter","customizedLogger","log_typeof","useClientLogger","logger","selectLogger","useDefaultLogger","LoggerWrapper","_this","_possibleConstructorReturn","_getPrototypeOf","_len","args","_key","_log","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","LogManager","isLevelEnabled","writeToClientLogger","_shouldLog","_convertToSingleStatement","_writeToClientLogger","logLevel","date","Date","now","toISOString","_getLogLevelByValue","concat","logMetaData","JSON","stringify","index","arg","_convertToString","isString","isFunction","toString","toStringResult","console","_len6","_key6","window","_len7","_key7","_len8","_key8","_len9","_key9","RetryProvider","executor","defaultRetry","retryProvider_classCallCheck","numAttempts","hasActiveReconnection","setTimeout","_execute","_getDelay","calculatedDelay","pow","__webpack_exports__","WebSocketManagerObject","WebSocketManager","getLogger","online","webSocket","primary","secondary","reconnectConfig","reconnectWebSocket","websocketInitFailed","exponentialBackOffTime","exponentialTimeoutHandle","lifeTimeTimeoutHandle","webSocketInitCheckerTimeoutId","connState","metrics","connectWebSocketRetryCount","connectionAttemptStartTime","noOpenConnectionsTimestamp","heartbeatConfig","pendingResponse","intervalHandle","callbacks","initFailure","Set","getWebSocketTransport","subscriptionUpdate","subscriptionFailure","Map","allMessage","connectionGain","connectionLost","connectionOpen","connectionClose","webSocketConfig","connConfig","promiseHandle","promiseCompleted","topicSubscription","subscribed","pending","subscriptionHistory","topicSubscriptionConfig","responseCheckIntervalId","requestCompleted","reSubscribeIntervalId","consecutiveFailedSubscribeAttempts","consecutiveNoResponseRequest","reconnectionClient","getWebSocketConnConfig","invalidSendMessageRouteKeys","networkConnectivityChecker","setInterval","advancedLog","sendInternalLogToServer","ws","getDefaultWebSocket","isWebSocketState","WebSocket","CLOSING","CLOSED","invokeCallbacks","response","forEach","callback","getWebSocketStates","readyState","CONNECTING","OPEN","printWebSocketState","event","webSocketStateCode","isWebSocketOpen","isWebSocketClosed","isDefaultWebSocketOpen","sendHeartBeat","clearInterval","send","createWebSocketPayload","resetWebSocketState","clearTimeout","resetSubscriptions","resetMetrics","webSocketOnOpen","connected","connectionEstablishedTime","timeToConnect","timeWithoutConnection","openTimestamp","size","closeSpecificWebSocket","add","clear","subscribePendingTopics","webSocketLifetimeTimeout","webSocketTransport","transportLifeTimeInSeconds","webSocketOnError","getIsConnected","retry","webSocketOnMessage","parse","topicName","has","from","close","closeWebSocket","retryWebSocketInitialization","waitTime","urlConnValidTime","initWebSocket","terminateWebSocketManager","validWebSocketConnConfig","isNonEmptyString","url","then","webSocketConnectionFailed","getNewWebSocket","addEventListener","closeTimestamp","connectionDuration","code","webSocketOnClose","logEntry","init","transportHandle","onInitFailure","cb","onConnectionOpen","onConnectionClose","onConnectionGain","onConnectionLost","onSubscriptionUpdate","onSubscriptionFailure","onMessage","assertNotNull","set","onAllMessage","subscribeTopics","assertIsList","sendMessage","payload","setGlobalConfig","loggerConfig","__WEBPACK_AMD_DEFINE_RESULT__","re","not_string","not_bool","not_type","not_primitive","number","numeric_arg","json","not_json","text","modulo","placeholder","key_access","index_access","parse_tree","argv","k","ph","pad","pad_character","pad_length","is_positive","cursor","tree_length","output","keys","param_no","Function","isNaN","TypeError","parseInt","String","fromCharCode","width","precision","parseFloat","toExponential","toFixed","Number","toPrecision","substring","slice","toLowerCase","valueOf","toUpperCase","replace","pad_char","charAt","repeat","align","sprintf_format","fmt","sprintf_cache","match","_fmt","arg_names","exec","push","SyntaxError","field_list","replacement_field","field_match","sprintf_parse","vsprintf","global","_webSocketManager__WEBPACK_IMPORTED_MODULE_0__","connect","g","e"],"mappings":"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","file":"amazon-connect-websocket-manager.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\nexport const LOGS_DESTINATION = {\n  NULL: \"NULL\",\n  CLIENT_LOGGER: \"CLIENT_LOGGER\",\n  DEBUG: \"DEBUG\"\n};\n\nexport const MIN_WEBSOCKET_LIFETIME_MS = 300000;\nexport const HEARTBEAT_INTERVAL_MS = 10000;\nexport const WEBSOCKET_URL_VALID_TIME_MS = 85000;\nexport const TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS = 500;\nexport const MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS = 5;\nexport const MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS = 1000;\nexport const MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE = 3;\nexport const NETWORK_CONN_CHECK_INTERVAL_MS = 250;\nexport const WEBSOCKET_REINIT_JITTER = 0.3;\nexport const WEBSOCKET_RETRY_RATE_MS = 2000;\nexport const MAX_WEBSOCKET_RETRY_RATE_MS = 30000;\n\nexport const NETWORK_FAILURE = 'NetworkingError';\n\nexport const LOG_MESSAGES = {\n  DEFAULT_PREFIX: \"AMZ_WEB_SOCKET_MANAGER:\",\n  NETWORK_OFFLINE: \"Network offline\",\n  NETWORK_ONLINE: \"Network online, connecting to WebSocket server\",\n  NETWORK_OFFLINE_WARNING: \"Network offline, ignoring this getWebSocketConnConfig request\",\n  NO_HEARTBEAT: \"Heartbeat response not received\",\n  HEARTBEAT_RECEIVED: \"Heartbeat response received\",\n  SENDING_HEARTBEAT: \"Sending heartbeat\",\n  FAILED_HEARTBEAT: \"Failed to send heartbeat since WebSocket is not open\",\n  WEBSOCKET_CONNECTION_ESTABLISHED: \"WebSocket connection established!\",\n  WEBSOCKET_CONNECTION_CLOSED: \"WebSocket connection is closed\",\n  WEBSOCKET_CONNECTION_ERROR: \"WebSocketManager Error, error_event: \",\n  WEBSOCKET_REINITIALIZATION: \"Scheduling WebSocket reinitialization, after delay \",\n  WEBSOCKET_REINITIALIZATION_TIMEOUT: \"WebSocket URL cannot be used to establish connection\",\n  WEBSOCKET_INITIALIZATION_FAILED: \"WebSocket Initialization failed - Terminating and cleaning subscriptions\",\n  WEBSOCKET_TERMINATED: \"Terminating WebSocket Manager\",\n  WEBSOCKET_NEW_CONNECTION: \"Fetching new WebSocket connection configuration\",\n  WEBSOCKET_CONNECTION_SUCCESS: \"Successfully fetched webSocket connection configuration\",\n  WEBSOCKET_CONNECTION_FAILURE: \"Failed to fetch webSocket connection configuration\",\n  WEBSOCKET_CONNECTION_RETRY: \"Retrying fetching new WebSocket connection configuration\",\n  WEBSOCKET_INIT: \"Initializing Websocket Manager\",\n  WEBSOCKET_INIT_FAILURE: \"Initializing Websocket Manager Failed!\",\n  WEBSOCKET_CONNECTION_OPEN: \"Websocket connection open\",\n  WEBSOCKET_CONNECTION_CLOSE: \"Websocket connection close\",\n  WEBSOCKET_CONNECTION_GAIN: \"Websocket connection gain\",\n  WEBSOCKET_CONNECTION_LOST: \"Websocket connection lost\",\n  WEBSOCKET_SUBSCRIPTION_FAILURE: \"Websocket subscription failure\",\n  WEBSOCKET_RESET: \"Reset Websocket state\",\n  WEBSOCKET_MESSAGE_ERROR: \"WebSocketManager Message Error\",\n  WEBSOCKET_MESSAGE_RECEIVED: \"Message received for topic \",\n  WEBSOCKET_MESSAGE_INVALID: \"Invalid incoming message\",\n  WEBSOCKET_MESSAGE_SUCCESS: \"WebsocketManager invoke callbacks for topic success \",\n};\n\nexport const ROUTE_KEY = {\n  SUBSCRIBE: \"aws/subscribe\",\n  UNSUBSCRIBE: \"aws/unsubscribe\",\n  HEARTBEAT: \"aws/heartbeat\"\n};\n\nexport const CONN_STATE = {\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\"\n};\n","import { sprintf } from \"sprintf-js\";\nimport { NETWORK_FAILURE } from './constants';\n\nconst Utils = {};\n\n/**\n * Asserts that a premise is true.\n */\nUtils.assertTrue = function(premise, message) {\n  if (!premise) {\n    throw new Error(message);\n  }\n};\n\n/**\n * Asserts that a value is not null or undefined.\n */\nUtils.assertNotNull = function(value, name) {\n  Utils.assertTrue(\n    value !== null && typeof value !== undefined,\n    sprintf(\"%s must be provided\", name || \"A value\")\n  );\n  return value;\n};\n\nUtils.isNonEmptyString = function(value) {\n  return typeof value === \"string\" && value.length > 0;\n};\n\nUtils.assertIsList = function(value, key) {\n  if (!Array.isArray(value)) {\n    throw new Error(key + \" is not an array\");\n  }\n};\n\n/**\n * Determine if the given value is a callable function type.\n * Borrowed from Underscore.js.\n */\nUtils.isFunction = function(obj) {\n  return !!(obj && obj.constructor && obj.call && obj.apply);\n};\n\nUtils.isObject = function(value) {\n  return !(typeof value !== \"object\" || value === null);\n};\n\nUtils.isString = function(value) {\n  return typeof value === \"string\";\n};\n\nUtils.isNumber = function(value) {\n  return typeof value === \"number\";\n};\n\nconst wsRegex = new RegExp(\"^(wss://)\\\\w*\");\nUtils.validWSUrl = function (wsUrl) {\n  return wsRegex.test(wsUrl);\n};\n\nUtils.getSubscriptionResponse = (routeKey, isSuccess, topicList) => {\n  return {\n    topic: routeKey,\n    content : {\n      status: isSuccess ? \"success\" : \"failure\",\n      topics: topicList\n    }\n  };\n};\n\nUtils.assertIsObject = function(value, key) {\n  if (!Utils.isObject(value)) {\n    throw new Error(key + \" is not an object!\");\n  }\n};\n\nUtils.addJitter = function (base, maxJitter = 1) {\n  maxJitter = Math.min(maxJitter, 1.0);\n  const sign = Math.random() > 0.5 ? 1 : -1;\n  return Math.floor(base + sign * base * Math.random() * maxJitter);\n};\n\nUtils.isNetworkOnline = () => navigator.onLine;\n\nUtils.isNetworkFailure = (reason) => {\n  if(reason._debug && reason._debug.type) {\n    return reason._debug.type === NETWORK_FAILURE;\n  }\n  return false;\n};\n\nexport default Utils;\n","import Utils from \"./utils\";\nimport { LOGS_DESTINATION, LOG_MESSAGES } from \"./constants\";\n\n/*eslint-disable no-unused-vars*/\nclass Logger {\n  debug(data) {}\n\n  info(data) {}\n\n  warn(data) {}\n\n  error(data) {}\n\n  advancedLog(data) {}\n}\n/*eslint-enable no-unused-vars*/\n\nconst DEFAULT_PREFIX = LOG_MESSAGES.DEFAULT_PREFIX;\nconst LogLevel = {\n  DEBUG: 10,\n  INFO: 20,\n  WARN: 30,\n  ERROR: 40,\n  ADVANCED_LOG: 50,\n};\n\nclass LogManagerImpl {\n  constructor() {\n    this.updateLoggerConfig();\n    this.consoleLoggerWrapper = createConsoleLogger();\n  }\n\n  writeToClientLogger(level, logStatement) {\n    if (!this.hasClientLogger()) {\n      return;\n    }\n    switch (level) {\n      case LogLevel.DEBUG:\n        return this._clientLogger.debug(logStatement) || logStatement;\n      case LogLevel.INFO:\n        return this._clientLogger.info(logStatement) || logStatement;\n      case LogLevel.WARN:\n        return this._clientLogger.warn(logStatement) || logStatement;\n      case LogLevel.ERROR:\n        return this._clientLogger.error(logStatement) || logStatement;\n      case LogLevel.ADVANCED_LOG:\n        if(!this._advancedLogWriter) return '';\n        return this._clientLogger[this._advancedLogWriter](logStatement) || logStatement;\n    }\n  }\n\n  isLevelEnabled(level) {\n    return level >= this._level;\n  }\n\n  hasClientLogger() {\n    return this._clientLogger !== null;\n  }\n\n  getLogger(options) {\n    var prefix = options.prefix || DEFAULT_PREFIX;\n    if (this._logsDestination === LOGS_DESTINATION.DEBUG) {\n      return this.consoleLoggerWrapper;\n    }\n    return new LoggerWrapperImpl(prefix);\n  }\n\n  updateLoggerConfig(inputConfig) {\n    var config = inputConfig || {};\n    this._level = config.level || LogLevel.INFO;\n    //enabled advancedLogWriter\n    this._advancedLogWriter = \"warn\";\n    if (config.advancedLogWriter) {\n      this._advancedLogWriter = config.advancedLogWriter;\n    }\n\n    if(config.customizedLogger && typeof config.customizedLogger === \"object\") {\n      this.useClientLogger = true;\n    }\n    this._clientLogger = config.logger || this.selectLogger(config);\n\n    this._logsDestination = LOGS_DESTINATION.NULL;\n    if (config.debug) {\n      this._logsDestination = LOGS_DESTINATION.DEBUG;\n    }\n    if (config.logger) {\n      this._logsDestination = LOGS_DESTINATION.CLIENT_LOGGER;\n    }\n  }\n\n  selectLogger(config) {\n    if(config.customizedLogger && typeof config.customizedLogger === \"object\") {\n      return config.customizedLogger;\n    }\n    if(config.useDefaultLogger) {\n      this.consoleLoggerWrapper = createConsoleLogger();\n      return this.consoleLoggerWrapper;\n    }\n    return null;\n  }\n}\n\nclass LoggerWrapper {\n  debug() {}\n\n  info() {}\n\n  warn() {}\n\n  error() {}\n\n  advancedLog() {}\n}\n\nclass LoggerWrapperImpl extends LoggerWrapper {\n  constructor(prefix) {\n    super();\n    this.prefix = prefix || DEFAULT_PREFIX;\n  }\n\n  debug(...args) {\n    return this._log(LogLevel.DEBUG, args);\n  }\n\n  info(...args) {\n    return this._log(LogLevel.INFO, args);\n  }\n\n  warn(...args) {\n    return this._log(LogLevel.WARN, args);\n  }\n\n  error(...args) {\n    return this._log(LogLevel.ERROR, args);\n  }\n\n  advancedLog(...args) {\n    return this._log(LogLevel.ADVANCED_LOG, args);\n  }\n\n  _shouldLog(level) {\n    return LogManager.hasClientLogger() && LogManager.isLevelEnabled(level);\n  }\n\n  _writeToClientLogger(level, logStatement) {\n    return LogManager.writeToClientLogger(level, logStatement);\n  }\n\n  _log(level, args) {\n    if (this._shouldLog(level)) {\n      var logStatement = LogManager.useClientLogger ? args : this._convertToSingleStatement(args, level);\n      return this._writeToClientLogger(level, logStatement);\n    }\n  }\n\n  _convertToSingleStatement(args, logLevel) {\n    var date = new Date(Date.now()).toISOString();\n    var level = this._getLogLevelByValue(logLevel);\n    var logStatement = `[${date}][${level}]`;\n    if (this.prefix) {\n      logStatement += this.prefix + \" \";\n    }\n    if (this.options) {\n      this.options.prefix ? logStatement += \" \" + this.options.prefix + \":\" : logStatement += \"\";\n      this.options.logMetaData ? logStatement += \" Meta data: \" + JSON.stringify(this.options.logMetaData) : logStatement += \"\";\n    }\n    for (var index = 0; index < args.length; index++) {\n      var arg = args[index];\n      logStatement += this._convertToString(arg) + \" \";\n    }\n    return logStatement;\n  }\n\n  _getLogLevelByValue(value) {\n    switch(value) {\n      case 10: return \"DEBUG\";\n      case 20: return \"INFO\";\n      case 30: return \"WARN\";\n      case 40: return \"ERROR\";\n      case 50: return \"ADVANCED_LOG\";\n    }\n  }\n\n  _convertToString(arg) {\n    try {\n      if (!arg) {\n        return \"\";\n      }\n      if (Utils.isString(arg)) {\n        return arg;\n      }\n      if (Utils.isObject(arg) && Utils.isFunction(arg.toString)) {\n        var toStringResult = arg.toString();\n        if (toStringResult !== \"[object Object]\") {\n          return toStringResult;\n        }\n      }\n      return JSON.stringify(arg);\n    } catch (error) {\n      console.error(\"Error while converting argument to string\", arg, error);\n      return \"\";\n    }\n  }\n}\n\nvar createConsoleLogger = () => {\n  var logger = new LoggerWrapper();\n  logger.debug = (...args) => console.debug.apply(window.console, [].concat(args));\n  logger.info = (...args) => console.info.apply(window.console, [].concat(args));\n  logger.warn = (...args) => console.warn.apply(window.console, [].concat(args));\n  logger.error = (...args) => console.error.apply(window.console, [].concat(args));\n  return logger;\n};\n\nconst LogManager = new LogManagerImpl();\n\nexport { LogManager, Logger, LogLevel };\n","import { WEBSOCKET_RETRY_RATE_MS, MAX_WEBSOCKET_RETRY_RATE_MS } from './constants';\n\nclass RetryProvider {\n  constructor(executor, defaultRetry = WEBSOCKET_RETRY_RATE_MS) {\n    this.numAttempts = 0;\n    this.executor = executor;\n    this.hasActiveReconnection = false;\n    this.defaultRetry = defaultRetry;\n  }\n\n  retry() {\n    // Don't kickoff another reconnection attempt if we have one pending\n    if (!this.hasActiveReconnection) {\n      this.hasActiveReconnection = true;\n      setTimeout(() => {\n        this._execute();\n      }, this._getDelay());\n    }\n  }\n\n  _execute() {\n    this.hasActiveReconnection = false;\n    this.executor();\n    this.numAttempts++;\n  }\n\n  connected() {\n    this.numAttempts = 0;\n  }\n\n  _getDelay() {\n    const calculatedDelay = Math.pow(2, this.numAttempts) * this.defaultRetry;\n    return calculatedDelay <= MAX_WEBSOCKET_RETRY_RATE_MS ? calculatedDelay : MAX_WEBSOCKET_RETRY_RATE_MS;\n  }\n\n  getIsConnected() {\n    return !this.numAttempts;\n  }\n}\n\nexport { RetryProvider };","import Utils from \"./utils\";\nimport { LogManager, LogLevel, Logger } from \"./log\";\nimport {\n    MIN_WEBSOCKET_LIFETIME_MS,\n    WEBSOCKET_URL_VALID_TIME_MS,\n    HEARTBEAT_INTERVAL_MS,\n    ROUTE_KEY,\n    CONN_STATE,\n    MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS,\n    TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS,\n    MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS,\n    MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE,\n    NETWORK_CONN_CHECK_INTERVAL_MS,\n    WEBSOCKET_REINIT_JITTER,\n    LOG_MESSAGES,\n} from \"./constants\";\nimport { RetryProvider  } from './retryProvider';\n\nconst WebSocketManager = function() {\n    const logger = LogManager.getLogger({ prefix: LOG_MESSAGES.DEFAULT_PREFIX });\n\n    let online = Utils.isNetworkOnline();\n\n    let webSocket = {\n        primary: null,\n        secondary: null\n    };\n\n    let reconnectConfig = {\n        reconnectWebSocket: true,\n        websocketInitFailed: false,\n        exponentialBackOffTime: 1000,\n        exponentialTimeoutHandle: null,\n        lifeTimeTimeoutHandle: null,\n        webSocketInitCheckerTimeoutId: null,\n        connState: null\n    };\n\n    let metrics = {\n        connectWebSocketRetryCount: 0,\n        connectionAttemptStartTime: null,\n        noOpenConnectionsTimestamp: null\n    };\n\n    let heartbeatConfig = {\n        pendingResponse: false,\n        intervalHandle: null\n    };\n\n    let callbacks = {\n        initFailure: new Set(),\n        getWebSocketTransport: null,\n        subscriptionUpdate: new Set(),\n        subscriptionFailure: new Set(),\n        topic: new Map(),\n        allMessage: new Set(),\n        connectionGain: new Set(),\n        connectionLost: new Set(),\n        connectionOpen: new Set(),\n        connectionClose: new Set()\n    };\n\n    let webSocketConfig = {\n        connConfig: null,\n        promiseHandle: null,\n        promiseCompleted: true\n    };\n\n    let topicSubscription = {\n        subscribed: new Set(),\n        pending: new Set(),\n        subscriptionHistory: new Set()\n    };\n\n    let topicSubscriptionConfig = {\n        responseCheckIntervalId: null,\n        requestCompleted: true,\n        reSubscribeIntervalId: null,\n        consecutiveFailedSubscribeAttempts: 0,\n        consecutiveNoResponseRequest: 0\n    };\n\n    const reconnectionClient = new RetryProvider(() => { getWebSocketConnConfig(); });\n\n    const invalidSendMessageRouteKeys = new Set([ROUTE_KEY.SUBSCRIBE, ROUTE_KEY.UNSUBSCRIBE, ROUTE_KEY.HEARTBEAT]);\n\n    const networkConnectivityChecker = setInterval(function () {\n      if (online !== Utils.isNetworkOnline()) {\n            online = Utils.isNetworkOnline();\n            if (!online) {\n                logger.advancedLog(LOG_MESSAGES.NETWORK_OFFLINE);\n                sendInternalLogToServer(logger.info(LOG_MESSAGES.NETWORK_OFFLINE));\n\n                return;\n            }\n            const ws = getDefaultWebSocket();\n            if (online && (!ws || isWebSocketState(ws, WebSocket.CLOSING) || isWebSocketState(ws, WebSocket.CLOSED))) {\n                logger.advancedLog(LOG_MESSAGES.NETWORK_ONLINE);\n                sendInternalLogToServer(logger.info(LOG_MESSAGES.NETWORK_ONLINE));\n\n                getWebSocketConnConfig();\n            }\n        }\n    }, NETWORK_CONN_CHECK_INTERVAL_MS);\n\n    const invokeCallbacks = function(callbacks, response) {\n        callbacks.forEach(function (callback) {\n            try {\n                callback(response);\n            } catch (error) {\n                sendInternalLogToServer(logger.error(\"Error executing callback\", error));\n            }\n        });\n    };\n\n    const getWebSocketStates = function(ws) {\n        if (ws === null) return \"NULL\";\n        switch (ws.readyState) {\n            case WebSocket.CONNECTING:\n                return \"CONNECTING\";\n            case WebSocket.OPEN:\n                return \"OPEN\";\n            case WebSocket.CLOSING:\n                return \"CLOSING\";\n            case WebSocket.CLOSED:\n                return \"CLOSED\";\n            default:\n                return \"UNDEFINED\";\n        }\n    };\n\n    const printWebSocketState = function (event = \"\") {\n        sendInternalLogToServer(logger.debug(\"[\" + event + \"] Primary WebSocket: \" + getWebSocketStates(webSocket.primary)\n            + \" | \" + \"Secondary WebSocket: \" + getWebSocketStates(webSocket.secondary)));\n    };\n\n    const isWebSocketState = function(ws, webSocketStateCode) {\n        return ws && ws.readyState === webSocketStateCode;\n    };\n\n    const isWebSocketOpen = function(ws) {\n        return isWebSocketState(ws, WebSocket.OPEN);\n    };\n\n    const isWebSocketClosed = function(ws) {\n        // undefined check is to address the limitation of testing framework\n        return ws === null || ws.readyState === undefined || isWebSocketState(ws, WebSocket.CLOSED);\n    };\n\n    /**\n     * This function is meant to handle the scenario when we have two web-sockets open\n     * in such a scenario we always select secondary web-socket since all future operations\n     * are supposed to be done by this secondary web-socket\n     */\n    const getDefaultWebSocket = function() {\n        if (webSocket.secondary !== null) {\n            return webSocket.secondary;\n        }\n        return webSocket.primary;\n    };\n\n    const isDefaultWebSocketOpen = function() {\n        return isWebSocketOpen(getDefaultWebSocket());\n    };\n\n    const sendHeartBeat = function() {\n        if (heartbeatConfig.pendingResponse) {\n            logger.advancedLog(LOG_MESSAGES.NO_HEARTBEAT);\n            sendInternalLogToServer(logger.warn(LOG_MESSAGES.NO_HEARTBEAT));\n\n            clearInterval(heartbeatConfig.intervalHandle);\n            heartbeatConfig.pendingResponse = false;\n            getWebSocketConnConfig();\n            return;\n        }\n        if (isDefaultWebSocketOpen()) {\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.SENDING_HEARTBEAT));\n\n            getDefaultWebSocket().send(createWebSocketPayload(ROUTE_KEY.HEARTBEAT));\n            heartbeatConfig.pendingResponse = true;\n        } else {\n            logger.advancedLog(LOG_MESSAGES.FAILED_HEARTBEAT);\n            sendInternalLogToServer(logger.warn(LOG_MESSAGES.FAILED_HEARTBEAT));\n\n            printWebSocketState(\"sendHeartBeat\");\n            getWebSocketConnConfig();\n        }\n    };\n\n    const resetWebSocketState = function() {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_RESET);\n        reconnectConfig.exponentialBackOffTime = 1000;\n        heartbeatConfig.pendingResponse = false;\n        reconnectConfig.reconnectWebSocket = true;\n\n        clearTimeout(reconnectConfig.lifeTimeTimeoutHandle);\n        clearInterval(heartbeatConfig.intervalHandle);\n        clearTimeout(reconnectConfig.exponentialTimeoutHandle);\n        clearTimeout(reconnectConfig.webSocketInitCheckerTimeoutId);\n    };\n\n    const resetSubscriptions = function() {\n        topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n        topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n        clearInterval(topicSubscriptionConfig.responseCheckIntervalId);\n        clearInterval(topicSubscriptionConfig.reSubscribeIntervalId);\n    };\n\n    const resetMetrics = function() {\n        metrics.connectWebSocketRetryCount = 0;\n        metrics.connectionAttemptStartTime = null;\n        metrics.noOpenConnectionsTimestamp = null;\n    };\n\n    const webSocketOnOpen = function() {\n        // Mark connection as successful; reset the number of reconnect attempts to 0.\n        reconnectionClient.connected();\n\n        try {\n            logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_ESTABLISHED);\n            sendInternalLogToServer(logger.info(LOG_MESSAGES.WEBSOCKET_CONNECTION_ESTABLISHED));\n\n            printWebSocketState(\"webSocketOnOpen\");\n            if (reconnectConfig.connState === null || reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n                invokeCallbacks(callbacks.connectionGain);\n            }\n            reconnectConfig.connState = CONN_STATE.CONNECTED;\n\n            // Report number of retries to open and record ws open time\n            const now = Date.now();\n            invokeCallbacks(callbacks.connectionOpen, {\n                connectWebSocketRetryCount: metrics.connectWebSocketRetryCount,\n                connectionAttemptStartTime: metrics.connectionAttemptStartTime,\n                noOpenConnectionsTimestamp: metrics.noOpenConnectionsTimestamp,\n                connectionEstablishedTime: now,\n                timeToConnect: now - metrics.connectionAttemptStartTime,\n                timeWithoutConnection:\n                    metrics.noOpenConnectionsTimestamp ? now - metrics.noOpenConnectionsTimestamp : null\n            });\n\n            resetMetrics();\n            resetWebSocketState();\n            getDefaultWebSocket().openTimestamp = Date.now(); // record open time\n\n            // early closure of primary web socket\n            if (topicSubscription.subscribed.size === 0 && isWebSocketOpen(webSocket.secondary)) {\n                closeSpecificWebSocket(webSocket.primary, \"[Primary WebSocket] Closing WebSocket\");\n            }\n            if (topicSubscription.subscribed.size > 0 || topicSubscription.pending.size > 0) {\n                if (isWebSocketOpen(webSocket.secondary)) {\n                    sendInternalLogToServer(logger.info(\"Subscribing secondary websocket to topics of primary websocket\"));\n                }\n                topicSubscription.subscribed.forEach(topic => {\n                    topicSubscription.subscriptionHistory.add(topic);\n                    topicSubscription.pending.add(topic);\n                });\n                topicSubscription.subscribed.clear();\n                subscribePendingTopics();\n            }\n\n            sendHeartBeat();\n            heartbeatConfig.intervalHandle = setInterval(sendHeartBeat, HEARTBEAT_INTERVAL_MS);\n\n            const webSocketLifetimeTimeout = webSocketConfig.connConfig.webSocketTransport.transportLifeTimeInSeconds * 1000;\n            sendInternalLogToServer(logger.debug(\"Scheduling WebSocket manager reconnection, after delay \" + webSocketLifetimeTimeout + \" ms\"));\n\n            reconnectConfig.lifeTimeTimeoutHandle = setTimeout(function() {\n                sendInternalLogToServer(logger.debug(\"Starting scheduled WebSocket manager reconnection\"));\n\n                getWebSocketConnConfig();\n            }, webSocketLifetimeTimeout);\n        } catch (error) {\n            sendInternalLogToServer(logger.error(\"Error after establishing WebSocket connection\", error));\n        }\n    };\n\n    const webSocketOnClose = function(event, ws) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_CLOSED, JSON.stringify(event));\n        sendInternalLogToServer(logger.info(LOG_MESSAGES.WEBSOCKET_CONNECTION_CLOSED, JSON.stringify(event)));\n\n        printWebSocketState(\"webSocketOnClose before-cleanup\");\n\n        invokeCallbacks(callbacks.connectionClose, {\n            openTimestamp: ws.openTimestamp,\n            closeTimestamp: Date.now(),\n            connectionDuration: Date.now() - ws.openTimestamp,\n            code: event.code,\n            reason: event.reason\n        });\n\n        if (isWebSocketClosed(webSocket.primary)) {\n            webSocket.primary = null;\n        }\n        if (isWebSocketClosed(webSocket.secondary)) {\n            webSocket.secondary = null;\n        }\n        if (!reconnectConfig.reconnectWebSocket) {\n            return;\n        }\n        if (!isWebSocketOpen(webSocket.primary) && !isWebSocketOpen(webSocket.secondary)) {\n            sendInternalLogToServer(logger.warn(\"Neither primary websocket and nor secondary websocket have open connections, attempting to re-establish connection\"));\n\n            if (reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n                /**\n                 * This check is required in the scenario where WS Server shuts-down and closes all active\n                 * WS Client connections and WS Server takes about a minute to become active again, in this\n                 * scenario WS Client's onClose is triggered and then WSM start reconnect logic immediately but all\n                 * connect request to WS Server would fail and WS Client's onError callback would be triggered\n                 * followed WS Client's onClose callback and hence \"connectionLost\" callback would be invoked several\n                 * times and this behavior is redundant\n                 */\n                sendInternalLogToServer(logger.info(\"Ignoring connectionLost callback invocation\"));\n            } else {\n                invokeCallbacks(callbacks.connectionLost, {\n                    openTimestamp: ws.openTimestamp,\n                    closeTimestamp: Date.now(),\n                    connectionDuration: Date.now() - ws.openTimestamp,\n                    code: event.code,\n                    reason: event.reason\n                });\n                metrics.noOpenConnectionsTimestamp = Date.now();\n            }\n            reconnectConfig.connState = CONN_STATE.DISCONNECTED;\n            getWebSocketConnConfig();\n        } else if (isWebSocketClosed(webSocket.primary) && isWebSocketOpen(webSocket.secondary)) {\n            sendInternalLogToServer(logger.info(\"[Primary] WebSocket Cleanly Closed\"));\n\n            webSocket.primary = webSocket.secondary;\n            webSocket.secondary = null;\n        }\n        printWebSocketState(\"webSocketOnClose after-cleanup\");\n    };\n\n    const webSocketOnError = function(event) {\n        printWebSocketState(\"webSocketOnError\");\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_ERROR, JSON.stringify(event));\n        sendInternalLogToServer(logger.error(LOG_MESSAGES.WEBSOCKET_CONNECTION_ERROR, JSON.stringify(event)));\n        const isConnected = reconnectionClient.getIsConnected();\n\n        if (isConnected) {\n            getWebSocketConnConfig();\n        } else {\n            reconnectionClient.retry();\n        }\n    };\n\n    const webSocketOnMessage = function(event) {\n        const response = JSON.parse(event.data);\n\n        switch (response.topic) {\n\n            case ROUTE_KEY.SUBSCRIBE: {\n                sendInternalLogToServer(logger.debug(\"Subscription Message received from webSocket server\", event.data));\n\n                topicSubscriptionConfig.requestCompleted = true;\n                topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n\n                if (response.content.status === \"success\") {\n                    topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n                    response.content.topics.forEach( topicName => {\n                        topicSubscription.subscriptionHistory.delete(topicName);\n                        topicSubscription.pending.delete(topicName);\n                        topicSubscription.subscribed.add(topicName);\n                    });\n                    if (topicSubscription.subscriptionHistory.size === 0) {\n                        if (isWebSocketOpen(webSocket.secondary)) {\n                            sendInternalLogToServer(logger.info(\"Successfully subscribed secondary websocket to all topics of primary websocket\"));\n\n                            closeSpecificWebSocket(webSocket.primary, \"[Primary WebSocket] Closing WebSocket\");\n                        }\n                    } else {\n                        subscribePendingTopics();\n                    }\n                    invokeCallbacks(callbacks.subscriptionUpdate, response);\n\n                } else {\n                    clearInterval(topicSubscriptionConfig.reSubscribeIntervalId);\n                    ++topicSubscriptionConfig.consecutiveFailedSubscribeAttempts;\n                    if (topicSubscriptionConfig.consecutiveFailedSubscribeAttempts === MAX_CONSECUTIVE_FAILED_SUB_ATTEMPTS) {\n                        invokeCallbacks(callbacks.subscriptionFailure, response);\n                        topicSubscriptionConfig.consecutiveFailedSubscribeAttempts = 0;\n                        return;\n                    }\n                    topicSubscriptionConfig.reSubscribeIntervalId = setInterval(function () {\n                        subscribePendingTopics();\n                    }, TOPIC_SUBSCRIPTION_RETRY_INTERVAL_MS);\n                }\n                break;\n            }\n            case ROUTE_KEY.HEARTBEAT: {\n                sendInternalLogToServer(logger.debug(LOG_MESSAGES.HEARTBEAT_RECEIVED));\n\n                heartbeatConfig.pendingResponse = false;\n                break;\n            }\n            default: {\n                if (response.topic) {\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_RECEIVED, response.topic);\n                    sendInternalLogToServer(logger.debug(LOG_MESSAGES.WEBSOCKET_MESSAGE_RECEIVED + response.topic));\n\n                    if (isWebSocketOpen(webSocket.primary) && isWebSocketOpen(webSocket.secondary)\n                        && topicSubscription.subscriptionHistory.size === 0 && this === webSocket.primary) {\n                        /**\n                         * This block is to handle scenario when both primary and secondary socket have subscribed to\n                         * a common topic but we are facing difficulty in closing the primary socket, then in this\n                         * situation messages will be received by both primary and secondary web socket\n                         */\n                        sendInternalLogToServer(logger.warn(\"Ignoring Message for Topic \" + response.topic + \", to avoid duplicates\"));\n\n                        return;\n                    }\n\n                    if (callbacks.allMessage.size === 0 && callbacks.topic.size === 0) {\n                        sendInternalLogToServer(logger.warn('No registered callback listener for Topic', response.topic));\n\n                        return;\n                    }\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_SUCCESS, response.topic);\n                    invokeCallbacks(callbacks.allMessage, response);\n                    if (callbacks.topic.has(response.topic)) {\n                        invokeCallbacks(callbacks.topic.get(response.topic), response);\n                    }\n\n                } else if (response.message) {\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_ERROR, response);\n                    sendInternalLogToServer(logger.warn(LOG_MESSAGES.WEBSOCKET_MESSAGE_ERROR, response));\n                } else {\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_MESSAGE_INVALID, response);\n                    sendInternalLogToServer(logger.warn(LOG_MESSAGES.WEBSOCKET_MESSAGE_INVALID, response));\n                }\n            }\n        }\n    };\n\n    const subscribePendingTopics = function() {\n        if (topicSubscriptionConfig.consecutiveNoResponseRequest > MAX_CONSECUTIVE_SUB_REQUEST_WITH_NO_RESPONSE) {\n            sendInternalLogToServer(logger.warn(\"Ignoring subscribePendingTopics since we have exhausted max subscription retries with no response\"));\n\n            invokeCallbacks(callbacks.subscriptionFailure, Utils.getSubscriptionResponse(ROUTE_KEY.SUBSCRIBE, false, Array.from(topicSubscription.pending)));\n            return;\n        }\n        if (!isDefaultWebSocketOpen()) {\n            sendInternalLogToServer(logger.warn(\"Ignoring subscribePendingTopics call since Default WebSocket is not open\"));\n\n            return;\n        }\n        if (Array.from(topicSubscription.pending).length === 0) {\n            return;\n        }\n\n        clearInterval(topicSubscriptionConfig.responseCheckIntervalId);\n\n        getDefaultWebSocket().send(createWebSocketPayload(ROUTE_KEY.SUBSCRIBE, {\n            \"topics\": Array.from(topicSubscription.pending)\n        }));\n        topicSubscriptionConfig.requestCompleted = false;\n\n        // This callback ensure that some response was received for subscription request\n        topicSubscriptionConfig.responseCheckIntervalId = setInterval(function () {\n            if (!topicSubscriptionConfig.requestCompleted) {\n                ++topicSubscriptionConfig.consecutiveNoResponseRequest;\n                subscribePendingTopics();\n            }\n        }, MAX_WAIT_TIME_SUB_REQUEST_WITH_NO_RESPONSE_MS);\n    };\n\n    const closeSpecificWebSocket = function(ws, reason) {\n        if (isWebSocketState(ws, WebSocket.CONNECTING) || isWebSocketState(ws, WebSocket.OPEN)) {\n            ws.close(1000, reason);\n        } else {\n            sendInternalLogToServer(logger.warn(\"Ignoring WebSocket Close request, WebSocket State: \" + getWebSocketStates(ws)));\n        }\n    };\n\n    const closeWebSocket = function(reason) {\n        closeSpecificWebSocket(webSocket.primary, \"[Primary] WebSocket \" + reason);\n        closeSpecificWebSocket(webSocket.secondary, \"[Secondary] WebSocket \" + reason);\n    };\n\n    const retryWebSocketInitialization = function () {\n        metrics.connectWebSocketRetryCount++;\n        const waitTime = Utils.addJitter(reconnectConfig.exponentialBackOffTime, WEBSOCKET_REINIT_JITTER);\n        if (Date.now() + waitTime <= webSocketConfig.connConfig.urlConnValidTime) {\n            logger.advancedLog(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION);\n            sendInternalLogToServer(logger.debug(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION + waitTime + \" ms\"));\n\n            reconnectConfig.exponentialTimeoutHandle = setTimeout(() => initWebSocket(), waitTime);\n            reconnectConfig.exponentialBackOffTime *= 2;\n        } else {\n            logger.advancedLog(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION_TIMEOUT);\n            sendInternalLogToServer(logger.warn(LOG_MESSAGES.WEBSOCKET_REINITIALIZATION_TIMEOUT));\n\n            getWebSocketConnConfig();\n        }\n    };\n\n    const terminateWebSocketManager = function (response) {\n        resetWebSocketState();\n        resetSubscriptions();\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INITIALIZATION_FAILED, response);\n        sendInternalLogToServer(logger.error(LOG_MESSAGES.WEBSOCKET_INITIALIZATION_FAILED));\n\n        reconnectConfig.websocketInitFailed = true;\n        closeWebSocket(LOG_MESSAGES.WEBSOCKET_TERMINATED);\n        clearInterval(networkConnectivityChecker);\n        invokeCallbacks(callbacks.initFailure, {\n            connectWebSocketRetryCount: metrics.connectWebSocketRetryCount,\n            connectionAttemptStartTime: metrics.connectionAttemptStartTime,\n            reason: response\n        });\n        resetMetrics();\n    };\n\n    const createWebSocketPayload = function (key, content) {\n        return JSON.stringify({\n            \"topic\": key,\n            \"content\": content\n        });\n    };\n\n    const sendMessage = function(payload) {\n        Utils.assertIsObject(payload, \"payload\");\n        if (payload.topic === undefined || invalidSendMessageRouteKeys.has(payload.topic)) {\n            sendInternalLogToServer(logger.warn(\"Cannot send message, Invalid topic\", payload));\n\n            return;\n        }\n        try {\n            payload = JSON.stringify(payload);\n        } catch (error) {\n            sendInternalLogToServer(logger.warn(\"Error stringify message\", payload));\n\n            return;\n        }\n        if (isDefaultWebSocketOpen()) {\n            getDefaultWebSocket().send(payload);\n        } else {\n            sendInternalLogToServer(logger.warn(\"Cannot send message, web socket connection is not open\"));\n        }\n    };\n\n    const subscribeTopics = function(topics) {\n        Utils.assertNotNull(topics, 'topics');\n        Utils.assertIsList(topics);\n\n        topics.forEach(topic => {\n            if (!topicSubscription.subscribed.has(topic)) {\n                topicSubscription.pending.add(topic);\n            }\n        });\n        // This ensure all participant-request to subscribe to topic chat are served at least once\n        topicSubscriptionConfig.consecutiveNoResponseRequest = 0;\n        subscribePendingTopics();\n    };\n\n    const validWebSocketConnConfig = function (connConfig) {\n      if (Utils.isObject(connConfig) && Utils.isObject(connConfig.webSocketTransport)\n            && Utils.isNonEmptyString(connConfig.webSocketTransport.url)\n            && Utils.validWSUrl(connConfig.webSocketTransport.url) &&\n            connConfig.webSocketTransport.transportLifeTimeInSeconds * 1000 >= MIN_WEBSOCKET_LIFETIME_MS) {\n            return true;\n        }\n        sendInternalLogToServer(logger.error(\"Invalid WebSocket Connection Configuration\", connConfig));\n\n        return false;\n    };\n\n    const getWebSocketConnConfig = function () {\n        if (!Utils.isNetworkOnline()) {\n            logger.advancedLog(LOG_MESSAGES.NETWORK_OFFLINE_WARNING);\n            sendInternalLogToServer(logger.info(LOG_MESSAGES.NETWORK_OFFLINE_WARNING));\n\n            return;\n        }\n        if (reconnectConfig.websocketInitFailed) {\n            sendInternalLogToServer(logger.debug(\"WebSocket Init had failed, ignoring this getWebSocketConnConfig request\"));\n            return;\n        }\n        if (!webSocketConfig.promiseCompleted) {\n            sendInternalLogToServer(logger.debug(\"There is an ongoing getWebSocketConnConfig request, this request will be ignored\"));\n            return;\n        }\n        resetWebSocketState();\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_NEW_CONNECTION);\n        sendInternalLogToServer(logger.info(LOG_MESSAGES.WEBSOCKET_NEW_CONNECTION));\n\n        metrics.connectionAttemptStartTime = metrics.connectionAttemptStartTime || Date.now();\n        webSocketConfig.promiseCompleted = false;\n        webSocketConfig.promiseHandle = callbacks.getWebSocketTransport();\n        return webSocketConfig.promiseHandle\n            .then(function(response) {\n                    webSocketConfig.promiseCompleted = true;\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_SUCCESS);\n                    sendInternalLogToServer(logger.debug(LOG_MESSAGES.WEBSOCKET_CONNECTION_SUCCESS, response));\n\n                    if (!validWebSocketConnConfig(response)) {\n                        terminateWebSocketManager(\"Invalid WebSocket connection configuration: \" + response);\n                        return { webSocketConnectionFailed: true };\n                    }\n                    webSocketConfig.connConfig = response;\n                    // Ideally this URL validity time should be provided by server\n                    webSocketConfig.connConfig.urlConnValidTime = Date.now() + WEBSOCKET_URL_VALID_TIME_MS;\n                    return initWebSocket();\n                },\n                function(reason) {\n                    webSocketConfig.promiseCompleted = true;\n                    logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_FAILURE);\n                    sendInternalLogToServer(logger.error(LOG_MESSAGES.WEBSOCKET_CONNECTION_FAILURE, reason));\n\n                    // If our connection fails because of network failure, we want to retry\n                    if (Utils.isNetworkFailure(reason)) {\n                        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_RETRY + JSON.stringify(reason));\n                        sendInternalLogToServer(logger.info(LOG_MESSAGES.WEBSOCKET_CONNECTION_RETRY + JSON.stringify(reason)));\n                        reconnectionClient.retry();\n                    } else {\n                        // If we're not going to retry, we should terminate WSM\n                        terminateWebSocketManager(\"Failed to fetch webSocket connection configuration: \" + JSON.stringify(reason));\n                    }\n                    return { webSocketConnectionFailed: true };\n                });\n    };\n\n    const initWebSocket = function() {\n        if (reconnectConfig.websocketInitFailed) {\n            sendInternalLogToServer(logger.info(\"web-socket initializing had failed, aborting re-init\"));\n\n            return { webSocketConnectionFailed: true };\n        }\n        if (!Utils.isNetworkOnline()) {\n            sendInternalLogToServer(logger.warn(\"System is offline aborting web-socket init\"));\n\n            return { webSocketConnectionFailed: true };\n        }\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INIT);\n        sendInternalLogToServer(logger.info(LOG_MESSAGES.WEBSOCKET_INIT));\n\n        printWebSocketState(\"initWebSocket\");\n        try {\n            if (validWebSocketConnConfig(webSocketConfig.connConfig)) {\n                let ws = null;\n                if (isWebSocketOpen(webSocket.primary)) {\n                    sendInternalLogToServer(logger.debug(\"Primary Socket connection is already open\"));\n\n                    if (!isWebSocketState(webSocket.secondary, WebSocket.CONNECTING)) {\n                        sendInternalLogToServer(logger.debug(\"Establishing a secondary web-socket connection\"));\n                        reconnectionClient.numAttempts = 0;\n                        webSocket.secondary = getNewWebSocket();\n                    }\n                    ws = webSocket.secondary;\n                } else {\n                    if (!isWebSocketState(webSocket.primary, WebSocket.CONNECTING)) {\n                        sendInternalLogToServer(logger.debug(\"Establishing a primary web-socket connection\"));\n\n                        webSocket.primary = getNewWebSocket();\n                    }\n                    ws = webSocket.primary;\n                }\n\n                // WebSocket creation is async task hence we Wait for 1sec before any potential retry\n                reconnectConfig.webSocketInitCheckerTimeoutId = setTimeout(function() {\n                    if (!isWebSocketOpen(ws)) {\n                        retryWebSocketInitialization();\n                    }\n                }, 1000);\n                return { webSocketConnectionFailed: false };\n            }\n        } catch (error) {\n            sendInternalLogToServer(logger.error(\"Error Initializing web-socket-manager\", error));\n\n            terminateWebSocketManager(\"Failed to initialize new WebSocket: \" + error.message);\n            return { webSocketConnectionFailed: true };\n        }\n    };\n\n    const getNewWebSocket = function() {\n        let ws = new WebSocket(webSocketConfig.connConfig.webSocketTransport.url);\n        ws.addEventListener(\"open\", webSocketOnOpen);\n        ws.addEventListener(\"message\", webSocketOnMessage);\n        ws.addEventListener(\"error\", webSocketOnError);\n        ws.addEventListener(\"close\", event => webSocketOnClose(event, ws));\n        return ws;\n    };\n\n    const onConnectionOpen = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_OPEN);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionOpen.add(cb);\n        return () => callbacks.connectionOpen.delete(cb);\n    };\n\n    const onConnectionClose = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_CLOSE);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionClose.add(cb);\n        return () => callbacks.connectionClose.delete(cb);\n    };\n\n    const onConnectionGain = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_GAIN);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionGain.add(cb);\n        if (isDefaultWebSocketOpen()) {\n            cb();\n        }\n        return () => callbacks.connectionGain.delete(cb);\n    };\n\n    const onConnectionLost = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_CONNECTION_LOST);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.connectionLost.add(cb);\n        if (reconnectConfig.connState === CONN_STATE.DISCONNECTED) {\n            cb();\n        }\n        return () => callbacks.connectionLost.delete(cb);\n    };\n\n    const onInitFailure = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_INIT_FAILURE);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.initFailure.add(cb);\n        if (reconnectConfig.websocketInitFailed) {\n            cb();\n        }\n        return () => callbacks.initFailure.delete(cb);\n    };\n\n    const init = function(transportHandle) {\n        Utils.assertTrue(Utils.isFunction(transportHandle), 'transportHandle must be a function');\n        if (callbacks.getWebSocketTransport !== null) {\n            sendInternalLogToServer(logger.warn(\"Web Socket Manager was already initialized\"));\n            return;\n        }\n        callbacks.getWebSocketTransport = transportHandle;\n\n        return getWebSocketConnConfig();\n    };\n\n    const onSubscriptionUpdate = function(cb) {\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.subscriptionUpdate.add(cb);\n        return () => callbacks.subscriptionUpdate.delete(cb);\n    };\n\n    const onSubscriptionFailure = function(cb) {\n        logger.advancedLog(LOG_MESSAGES.WEBSOCKET_SUBSCRIPTION_FAILURE);\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.subscriptionFailure.add(cb);\n        return () => callbacks.subscriptionFailure.delete(cb);\n    };\n\n    const onMessage = function(topicName, cb) {\n        Utils.assertNotNull(topicName, 'topicName');\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        if (callbacks.topic.has(topicName)) {\n            callbacks.topic.get(topicName).add(cb);\n        } else {\n            callbacks.topic.set(topicName, new Set([cb]));\n        }\n        return () => callbacks.topic.get(topicName).delete(cb);\n    };\n\n    const onAllMessage = function (cb) {\n        Utils.assertTrue(Utils.isFunction(cb), 'cb must be a function');\n        callbacks.allMessage.add(cb);\n        return () => callbacks.allMessage.delete(cb);\n    };\n\n    const sendInternalLogToServer = function (logEntry) {\n        if (logEntry && typeof logEntry.sendInternalLogToServer === \"function\")\n            logEntry.sendInternalLogToServer();\n\n        return logEntry;\n    };\n\n    this.init = init;\n    this.onInitFailure = onInitFailure;\n    this.onConnectionOpen = onConnectionOpen;\n    this.onConnectionClose = onConnectionClose;\n    this.onConnectionGain = onConnectionGain;\n    this.onConnectionLost = onConnectionLost;\n    this.onSubscriptionUpdate = onSubscriptionUpdate;\n    this.onSubscriptionFailure = onSubscriptionFailure;\n    this.onMessage = onMessage;\n    this.onAllMessage = onAllMessage;\n    this.subscribeTopics = subscribeTopics;\n    this.sendMessage = sendMessage;\n\n    this.closeWebSocket = function() {\n        resetWebSocketState();\n        resetSubscriptions();\n        reconnectConfig.reconnectWebSocket = false;\n        clearInterval(networkConnectivityChecker);\n        closeWebSocket(\"User request to close WebSocket\");\n    };\n\n    this.terminateWebSocketManager = terminateWebSocketManager;\n};\n\nconst WebSocketManagerConstructor = () => {\n    return new WebSocketManager();\n};\n\nconst setGlobalConfig = config => {\n    const loggerConfig = config && config.loggerConfig;\n    LogManager.updateLoggerConfig(loggerConfig);\n};\n\nconst WebSocketManagerObject = {\n    create: WebSocketManagerConstructor,\n    setGlobalConfig: setGlobalConfig,\n    LogLevel: LogLevel,\n    Logger: Logger\n};\n\nexport { WebSocketManagerObject };\n","/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n","/*eslint no-unused-vars: \"off\"*/\nimport { WebSocketManagerObject } from \"./webSocketManager\";\n\nglobal.connect = global.connect || {};\nconnect.WebSocketManager = WebSocketManagerObject;\n\nexport const WebSocketManager = WebSocketManagerObject;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}